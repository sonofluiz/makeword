var CABLES;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!****************************************!*\
  !*** ./src/core/index.js + 80 modules ***!
  \****************************************/

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ core)
});

// UNUSED EXPORTS: Anim, AnimKey, CglContext, Geometry, Link, Mesh, Op, Patch, PatchVariable, Port, Shader, Texture, Timer, Uniform, extendJs

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/common.js
var common_namespaceObject = {};
__webpack_require__.r(common_namespaceObject);
__webpack_require__.d(common_namespaceObject, {
  ARRAY_TYPE: () => (ARRAY_TYPE),
  EPSILON: () => (EPSILON),
  RANDOM: () => (RANDOM),
  equals: () => (equals),
  setMatrixArrayType: () => (setMatrixArrayType),
  toRadian: () => (toRadian)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat2.js
var mat2_namespaceObject = {};
__webpack_require__.r(mat2_namespaceObject);
__webpack_require__.d(mat2_namespaceObject, {
  LDU: () => (LDU),
  add: () => (add),
  adjoint: () => (adjoint),
  clone: () => (clone),
  copy: () => (copy),
  create: () => (create),
  determinant: () => (determinant),
  equals: () => (mat2_equals),
  exactEquals: () => (exactEquals),
  frob: () => (frob),
  fromRotation: () => (fromRotation),
  fromScaling: () => (fromScaling),
  fromValues: () => (fromValues),
  identity: () => (identity),
  invert: () => (invert),
  mul: () => (mul),
  multiply: () => (multiply),
  multiplyScalar: () => (multiplyScalar),
  multiplyScalarAndAdd: () => (multiplyScalarAndAdd),
  rotate: () => (rotate),
  scale: () => (scale),
  set: () => (set),
  str: () => (str),
  sub: () => (sub),
  subtract: () => (subtract),
  transpose: () => (transpose)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat2d.js
var mat2d_namespaceObject = {};
__webpack_require__.r(mat2d_namespaceObject);
__webpack_require__.d(mat2d_namespaceObject, {
  add: () => (mat2d_add),
  clone: () => (mat2d_clone),
  copy: () => (mat2d_copy),
  create: () => (mat2d_create),
  determinant: () => (mat2d_determinant),
  equals: () => (mat2d_equals),
  exactEquals: () => (mat2d_exactEquals),
  frob: () => (mat2d_frob),
  fromRotation: () => (mat2d_fromRotation),
  fromScaling: () => (mat2d_fromScaling),
  fromTranslation: () => (fromTranslation),
  fromValues: () => (mat2d_fromValues),
  identity: () => (mat2d_identity),
  invert: () => (mat2d_invert),
  mul: () => (mat2d_mul),
  multiply: () => (mat2d_multiply),
  multiplyScalar: () => (mat2d_multiplyScalar),
  multiplyScalarAndAdd: () => (mat2d_multiplyScalarAndAdd),
  rotate: () => (mat2d_rotate),
  scale: () => (mat2d_scale),
  set: () => (mat2d_set),
  str: () => (mat2d_str),
  sub: () => (mat2d_sub),
  subtract: () => (mat2d_subtract),
  translate: () => (translate)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat3.js
var mat3_namespaceObject = {};
__webpack_require__.r(mat3_namespaceObject);
__webpack_require__.d(mat3_namespaceObject, {
  add: () => (mat3_add),
  adjoint: () => (mat3_adjoint),
  clone: () => (mat3_clone),
  copy: () => (mat3_copy),
  create: () => (mat3_create),
  determinant: () => (mat3_determinant),
  equals: () => (mat3_equals),
  exactEquals: () => (mat3_exactEquals),
  frob: () => (mat3_frob),
  fromMat2d: () => (fromMat2d),
  fromMat4: () => (fromMat4),
  fromQuat: () => (fromQuat),
  fromRotation: () => (mat3_fromRotation),
  fromScaling: () => (mat3_fromScaling),
  fromTranslation: () => (mat3_fromTranslation),
  fromValues: () => (mat3_fromValues),
  identity: () => (mat3_identity),
  invert: () => (mat3_invert),
  mul: () => (mat3_mul),
  multiply: () => (mat3_multiply),
  multiplyScalar: () => (mat3_multiplyScalar),
  multiplyScalarAndAdd: () => (mat3_multiplyScalarAndAdd),
  normalFromMat4: () => (normalFromMat4),
  projection: () => (projection),
  rotate: () => (mat3_rotate),
  scale: () => (mat3_scale),
  set: () => (mat3_set),
  str: () => (mat3_str),
  sub: () => (mat3_sub),
  subtract: () => (mat3_subtract),
  translate: () => (mat3_translate),
  transpose: () => (mat3_transpose)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat4.js
var mat4_namespaceObject = {};
__webpack_require__.r(mat4_namespaceObject);
__webpack_require__.d(mat4_namespaceObject, {
  add: () => (mat4_add),
  adjoint: () => (mat4_adjoint),
  clone: () => (mat4_clone),
  copy: () => (mat4_copy),
  create: () => (mat4_create),
  determinant: () => (mat4_determinant),
  equals: () => (mat4_equals),
  exactEquals: () => (mat4_exactEquals),
  frob: () => (mat4_frob),
  fromQuat: () => (mat4_fromQuat),
  fromQuat2: () => (fromQuat2),
  fromRotation: () => (mat4_fromRotation),
  fromRotationTranslation: () => (fromRotationTranslation),
  fromRotationTranslationScale: () => (fromRotationTranslationScale),
  fromRotationTranslationScaleOrigin: () => (fromRotationTranslationScaleOrigin),
  fromScaling: () => (mat4_fromScaling),
  fromTranslation: () => (mat4_fromTranslation),
  fromValues: () => (mat4_fromValues),
  fromXRotation: () => (fromXRotation),
  fromYRotation: () => (fromYRotation),
  fromZRotation: () => (fromZRotation),
  frustum: () => (frustum),
  getRotation: () => (getRotation),
  getScaling: () => (getScaling),
  getTranslation: () => (getTranslation),
  identity: () => (mat4_identity),
  invert: () => (mat4_invert),
  lookAt: () => (lookAt),
  mul: () => (mat4_mul),
  multiply: () => (mat4_multiply),
  multiplyScalar: () => (mat4_multiplyScalar),
  multiplyScalarAndAdd: () => (mat4_multiplyScalarAndAdd),
  ortho: () => (ortho),
  perspective: () => (perspective),
  perspectiveFromFieldOfView: () => (perspectiveFromFieldOfView),
  rotate: () => (mat4_rotate),
  rotateX: () => (rotateX),
  rotateY: () => (rotateY),
  rotateZ: () => (rotateZ),
  scale: () => (mat4_scale),
  set: () => (mat4_set),
  str: () => (mat4_str),
  sub: () => (mat4_sub),
  subtract: () => (mat4_subtract),
  targetTo: () => (targetTo),
  translate: () => (mat4_translate),
  transpose: () => (mat4_transpose)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec3.js
var vec3_namespaceObject = {};
__webpack_require__.r(vec3_namespaceObject);
__webpack_require__.d(vec3_namespaceObject, {
  add: () => (vec3_add),
  angle: () => (angle),
  bezier: () => (bezier),
  ceil: () => (ceil),
  clone: () => (vec3_clone),
  copy: () => (vec3_copy),
  create: () => (vec3_create),
  cross: () => (cross),
  dist: () => (dist),
  distance: () => (distance),
  div: () => (div),
  divide: () => (divide),
  dot: () => (vec3_dot),
  equals: () => (vec3_equals),
  exactEquals: () => (vec3_exactEquals),
  floor: () => (floor),
  forEach: () => (forEach),
  fromValues: () => (vec3_fromValues),
  hermite: () => (hermite),
  inverse: () => (inverse),
  len: () => (len),
  length: () => (vec3_length),
  lerp: () => (lerp),
  max: () => (max),
  min: () => (min),
  mul: () => (vec3_mul),
  multiply: () => (vec3_multiply),
  negate: () => (negate),
  normalize: () => (normalize),
  random: () => (random),
  rotateX: () => (vec3_rotateX),
  rotateY: () => (vec3_rotateY),
  rotateZ: () => (vec3_rotateZ),
  round: () => (round),
  scale: () => (vec3_scale),
  scaleAndAdd: () => (scaleAndAdd),
  set: () => (vec3_set),
  sqrDist: () => (sqrDist),
  sqrLen: () => (sqrLen),
  squaredDistance: () => (squaredDistance),
  squaredLength: () => (squaredLength),
  str: () => (vec3_str),
  sub: () => (vec3_sub),
  subtract: () => (vec3_subtract),
  transformMat3: () => (transformMat3),
  transformMat4: () => (transformMat4),
  transformQuat: () => (transformQuat),
  zero: () => (zero)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec4.js
var vec4_namespaceObject = {};
__webpack_require__.r(vec4_namespaceObject);
__webpack_require__.d(vec4_namespaceObject, {
  add: () => (vec4_add),
  ceil: () => (vec4_ceil),
  clone: () => (vec4_clone),
  copy: () => (vec4_copy),
  create: () => (vec4_create),
  cross: () => (vec4_cross),
  dist: () => (vec4_dist),
  distance: () => (vec4_distance),
  div: () => (vec4_div),
  divide: () => (vec4_divide),
  dot: () => (dot),
  equals: () => (vec4_equals),
  exactEquals: () => (vec4_exactEquals),
  floor: () => (vec4_floor),
  forEach: () => (vec4_forEach),
  fromValues: () => (vec4_fromValues),
  inverse: () => (vec4_inverse),
  len: () => (vec4_len),
  length: () => (vec4_length),
  lerp: () => (vec4_lerp),
  max: () => (vec4_max),
  min: () => (vec4_min),
  mul: () => (vec4_mul),
  multiply: () => (vec4_multiply),
  negate: () => (vec4_negate),
  normalize: () => (vec4_normalize),
  random: () => (vec4_random),
  round: () => (vec4_round),
  scale: () => (vec4_scale),
  scaleAndAdd: () => (vec4_scaleAndAdd),
  set: () => (vec4_set),
  sqrDist: () => (vec4_sqrDist),
  sqrLen: () => (vec4_sqrLen),
  squaredDistance: () => (vec4_squaredDistance),
  squaredLength: () => (vec4_squaredLength),
  str: () => (vec4_str),
  sub: () => (vec4_sub),
  subtract: () => (vec4_subtract),
  transformMat4: () => (vec4_transformMat4),
  transformQuat: () => (vec4_transformQuat),
  zero: () => (vec4_zero)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/quat.js
var quat_namespaceObject = {};
__webpack_require__.r(quat_namespaceObject);
__webpack_require__.d(quat_namespaceObject, {
  add: () => (quat_add),
  calculateW: () => (calculateW),
  clone: () => (quat_clone),
  conjugate: () => (conjugate),
  copy: () => (quat_copy),
  create: () => (quat_create),
  dot: () => (quat_dot),
  equals: () => (quat_equals),
  exactEquals: () => (quat_exactEquals),
  exp: () => (exp),
  fromEuler: () => (fromEuler),
  fromMat3: () => (fromMat3),
  fromValues: () => (quat_fromValues),
  getAngle: () => (getAngle),
  getAxisAngle: () => (getAxisAngle),
  identity: () => (quat_identity),
  invert: () => (quat_invert),
  len: () => (quat_len),
  length: () => (quat_length),
  lerp: () => (quat_lerp),
  ln: () => (ln),
  mul: () => (quat_mul),
  multiply: () => (quat_multiply),
  normalize: () => (quat_normalize),
  pow: () => (pow),
  random: () => (quat_random),
  rotateX: () => (quat_rotateX),
  rotateY: () => (quat_rotateY),
  rotateZ: () => (quat_rotateZ),
  rotationTo: () => (rotationTo),
  scale: () => (quat_scale),
  set: () => (quat_set),
  setAxes: () => (setAxes),
  setAxisAngle: () => (setAxisAngle),
  slerp: () => (slerp),
  sqlerp: () => (sqlerp),
  sqrLen: () => (quat_sqrLen),
  squaredLength: () => (quat_squaredLength),
  str: () => (quat_str)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/quat2.js
var quat2_namespaceObject = {};
__webpack_require__.r(quat2_namespaceObject);
__webpack_require__.d(quat2_namespaceObject, {
  add: () => (quat2_add),
  clone: () => (quat2_clone),
  conjugate: () => (quat2_conjugate),
  copy: () => (quat2_copy),
  create: () => (quat2_create),
  dot: () => (quat2_dot),
  equals: () => (quat2_equals),
  exactEquals: () => (quat2_exactEquals),
  fromMat4: () => (quat2_fromMat4),
  fromRotation: () => (quat2_fromRotation),
  fromRotationTranslation: () => (quat2_fromRotationTranslation),
  fromRotationTranslationValues: () => (fromRotationTranslationValues),
  fromTranslation: () => (quat2_fromTranslation),
  fromValues: () => (quat2_fromValues),
  getDual: () => (getDual),
  getReal: () => (getReal),
  getTranslation: () => (quat2_getTranslation),
  identity: () => (quat2_identity),
  invert: () => (quat2_invert),
  len: () => (quat2_len),
  length: () => (quat2_length),
  lerp: () => (quat2_lerp),
  mul: () => (quat2_mul),
  multiply: () => (quat2_multiply),
  normalize: () => (quat2_normalize),
  rotateAroundAxis: () => (rotateAroundAxis),
  rotateByQuatAppend: () => (rotateByQuatAppend),
  rotateByQuatPrepend: () => (rotateByQuatPrepend),
  rotateX: () => (quat2_rotateX),
  rotateY: () => (quat2_rotateY),
  rotateZ: () => (quat2_rotateZ),
  scale: () => (quat2_scale),
  set: () => (quat2_set),
  setDual: () => (setDual),
  setReal: () => (setReal),
  sqrLen: () => (quat2_sqrLen),
  squaredLength: () => (quat2_squaredLength),
  str: () => (quat2_str),
  translate: () => (quat2_translate)
});

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec2.js
var vec2_namespaceObject = {};
__webpack_require__.r(vec2_namespaceObject);
__webpack_require__.d(vec2_namespaceObject, {
  add: () => (vec2_add),
  angle: () => (vec2_angle),
  ceil: () => (vec2_ceil),
  clone: () => (vec2_clone),
  copy: () => (vec2_copy),
  create: () => (vec2_create),
  cross: () => (vec2_cross),
  dist: () => (vec2_dist),
  distance: () => (vec2_distance),
  div: () => (vec2_div),
  divide: () => (vec2_divide),
  dot: () => (vec2_dot),
  equals: () => (vec2_equals),
  exactEquals: () => (vec2_exactEquals),
  floor: () => (vec2_floor),
  forEach: () => (vec2_forEach),
  fromValues: () => (vec2_fromValues),
  inverse: () => (vec2_inverse),
  len: () => (vec2_len),
  length: () => (vec2_length),
  lerp: () => (vec2_lerp),
  max: () => (vec2_max),
  min: () => (vec2_min),
  mul: () => (vec2_mul),
  multiply: () => (vec2_multiply),
  negate: () => (vec2_negate),
  normalize: () => (vec2_normalize),
  random: () => (vec2_random),
  rotate: () => (vec2_rotate),
  round: () => (vec2_round),
  scale: () => (vec2_scale),
  scaleAndAdd: () => (vec2_scaleAndAdd),
  set: () => (vec2_set),
  sqrDist: () => (vec2_sqrDist),
  sqrLen: () => (vec2_sqrLen),
  squaredDistance: () => (vec2_squaredDistance),
  squaredLength: () => (vec2_squaredLength),
  str: () => (vec2_str),
  sub: () => (vec2_sub),
  subtract: () => (vec2_subtract),
  transformMat2: () => (transformMat2),
  transformMat2d: () => (transformMat2d),
  transformMat3: () => (vec2_transformMat3),
  transformMat4: () => (vec2_transformMat4),
  zero: () => (vec2_zero)
});

;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Type} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2.js

/**
 * 2x2 Matrix
 * @module mat2
 */

/**
 * Creates a new identity mat2
 *
 * @returns {mat2} a new 2x2 matrix
 */

function create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2 initialized with values from an existing matrix
 *
 * @param {mat2} a matrix to clone
 * @returns {mat2} a new 2x2 matrix
 */

function clone(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Copy the values from one mat2 to another
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set a mat2 to the identity matrix
 *
 * @param {mat2} out the receiving matrix
 * @returns {mat2} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Create a new mat2 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out A new 2x2 matrix
 */

function fromValues(m00, m01, m10, m11) {
  var out = new ARRAY_TYPE(4);
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Set the components of a mat2 to the given values
 *
 * @param {mat2} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m10 Component in column 1, row 0 position (index 2)
 * @param {Number} m11 Component in column 1, row 1 position (index 3)
 * @returns {mat2} out
 */

function set(out, m00, m01, m10, m11) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m10;
  out[3] = m11;
  return out;
}
/**
 * Transpose the values of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache
  // some values
  if (out === a) {
    var a1 = a[1];
    out[1] = a[2];
    out[2] = a1;
  } else {
    out[0] = a[0];
    out[1] = a[2];
    out[2] = a[1];
    out[3] = a[3];
  }

  return out;
}
/**
 * Inverts a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3]; // Calculate the determinant

  var det = a0 * a3 - a2 * a1;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = a3 * det;
  out[1] = -a1 * det;
  out[2] = -a2 * det;
  out[3] = a0 * det;
  return out;
}
/**
 * Calculates the adjugate of a mat2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the source matrix
 * @returns {mat2} out
 */

function adjoint(out, a) {
  // Caching this value is nessecary if out == a
  var a0 = a[0];
  out[0] = a[3];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a0;
  return out;
}
/**
 * Calculates the determinant of a mat2
 *
 * @param {mat2} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  return a[0] * a[3] - a[2] * a[1];
}
/**
 * Multiplies two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  return out;
}
/**
 * Rotates a mat2 by the given angle
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  return out;
}
/**
 * Scales the mat2 by the dimensions in the given vec2
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2} out
 **/

function scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.rotate(dest, dest, rad);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2.identity(dest);
 *     mat2.scale(dest, dest, vec);
 *
 * @param {mat2} out mat2 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2
 *
 * @param {mat2} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Returns Frobenius norm of a mat2
 *
 * @param {mat2} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3]);
}
/**
 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
 * @param {mat2} L the lower triangular matrix
 * @param {mat2} D the diagonal matrix
 * @param {mat2} U the upper triangular matrix
 * @param {mat2} a the input matrix to factorize
 */

function LDU(L, D, U, a) {
  L[2] = a[2] / a[0];
  U[0] = a[0];
  U[1] = a[1];
  U[3] = a[3] - L[2] * U[1];
  return [L, D, U];
}
/**
 * Adds two mat2's
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @returns {mat2} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2} a The first matrix.
 * @param {mat2} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2} out the receiving matrix
 * @param {mat2} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2} out the receiving vector
 * @param {mat2} a the first operand
 * @param {mat2} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Alias for {@link mat2.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat2.subtract}
 * @function
 */

var sub = subtract;
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat2d.js

/**
 * 2x3 Matrix
 * @module mat2d
 *
 * @description
 * A mat2d contains six elements defined as:
 * <pre>
 * [a, b, c,
 *  d, tx, ty]
 * </pre>
 * This is a short form for the 3x3 matrix:
 * <pre>
 * [a, b, 0,
 *  c, d, 0,
 *  tx, ty, 1]
 * </pre>
 * The last column is ignored so the array is shorter and operations are faster.
 */

/**
 * Creates a new identity mat2d
 *
 * @returns {mat2d} a new 2x3 matrix
 */

function mat2d_create() {
  var out = new ARRAY_TYPE(6);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[4] = 0;
    out[5] = 0;
  }

  out[0] = 1;
  out[3] = 1;
  return out;
}
/**
 * Creates a new mat2d initialized with values from an existing matrix
 *
 * @param {mat2d} a matrix to clone
 * @returns {mat2d} a new 2x3 matrix
 */

function mat2d_clone(a) {
  var out = new ARRAY_TYPE(6);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Copy the values from one mat2d to another
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */

function mat2d_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  return out;
}
/**
 * Set a mat2d to the identity matrix
 *
 * @param {mat2d} out the receiving matrix
 * @returns {mat2d} out
 */

function mat2d_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Create a new mat2d with the given values
 *
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} A new mat2d
 */

function mat2d_fromValues(a, b, c, d, tx, ty) {
  var out = new ARRAY_TYPE(6);
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Set the components of a mat2d to the given values
 *
 * @param {mat2d} out the receiving matrix
 * @param {Number} a Component A (index 0)
 * @param {Number} b Component B (index 1)
 * @param {Number} c Component C (index 2)
 * @param {Number} d Component D (index 3)
 * @param {Number} tx Component TX (index 4)
 * @param {Number} ty Component TY (index 5)
 * @returns {mat2d} out
 */

function mat2d_set(out, a, b, c, d, tx, ty) {
  out[0] = a;
  out[1] = b;
  out[2] = c;
  out[3] = d;
  out[4] = tx;
  out[5] = ty;
  return out;
}
/**
 * Inverts a mat2d
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the source matrix
 * @returns {mat2d} out
 */

function mat2d_invert(out, a) {
  var aa = a[0],
      ab = a[1],
      ac = a[2],
      ad = a[3];
  var atx = a[4],
      aty = a[5];
  var det = aa * ad - ab * ac;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = ad * det;
  out[1] = -ab * det;
  out[2] = -ac * det;
  out[3] = aa * det;
  out[4] = (ac * aty - ad * atx) * det;
  out[5] = (ab * atx - aa * aty) * det;
  return out;
}
/**
 * Calculates the determinant of a mat2d
 *
 * @param {mat2d} a the source matrix
 * @returns {Number} determinant of a
 */

function mat2d_determinant(a) {
  return a[0] * a[3] - a[1] * a[2];
}
/**
 * Multiplies two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function mat2d_multiply(out, a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  out[0] = a0 * b0 + a2 * b1;
  out[1] = a1 * b0 + a3 * b1;
  out[2] = a0 * b2 + a2 * b3;
  out[3] = a1 * b2 + a3 * b3;
  out[4] = a0 * b4 + a2 * b5 + a4;
  out[5] = a1 * b4 + a3 * b5 + a5;
  return out;
}
/**
 * Rotates a mat2d by the given angle
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function mat2d_rotate(out, a, rad) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  out[0] = a0 * c + a2 * s;
  out[1] = a1 * c + a3 * s;
  out[2] = a0 * -s + a2 * c;
  out[3] = a1 * -s + a3 * c;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Scales the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat2d} out
 **/

function mat2d_scale(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0 * v0;
  out[1] = a1 * v0;
  out[2] = a2 * v1;
  out[3] = a3 * v1;
  out[4] = a4;
  out[5] = a5;
  return out;
}
/**
 * Translates the mat2d by the dimensions in the given vec2
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to translate
 * @param {vec2} v the vec2 to translate the matrix by
 * @returns {mat2d} out
 **/

function translate(out, a, v) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var v0 = v[0],
      v1 = v[1];
  out[0] = a0;
  out[1] = a1;
  out[2] = a2;
  out[3] = a3;
  out[4] = a0 * v0 + a2 * v1 + a4;
  out[5] = a1 * v0 + a3 * v1 + a5;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.rotate(dest, dest, rad);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat2d} out
 */

function mat2d_fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = -s;
  out[3] = c;
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.scale(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat2d} out
 */

function mat2d_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = v[1];
  out[4] = 0;
  out[5] = 0;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat2d.identity(dest);
 *     mat2d.translate(dest, dest, vec);
 *
 * @param {mat2d} out mat2d receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat2d} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = v[0];
  out[5] = v[1];
  return out;
}
/**
 * Returns a string representation of a mat2d
 *
 * @param {mat2d} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat2d_str(a) {
  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ')';
}
/**
 * Returns Frobenius norm of a mat2d
 *
 * @param {mat2d} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat2d_frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
}
/**
 * Adds two mat2d's
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function mat2d_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @returns {mat2d} out
 */

function mat2d_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat2d} out the receiving matrix
 * @param {mat2d} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat2d} out
 */

function mat2d_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  return out;
}
/**
 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat2d} out the receiving vector
 * @param {mat2d} a the first operand
 * @param {mat2d} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat2d} out
 */

function mat2d_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat2d_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat2d} a The first matrix.
 * @param {mat2d} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat2d_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));
}
/**
 * Alias for {@link mat2d.multiply}
 * @function
 */

var mat2d_mul = mat2d_multiply;
/**
 * Alias for {@link mat2d.subtract}
 * @function
 */

var mat2d_sub = mat2d_subtract;
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat3.js

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function mat3_create() {
  var out = new ARRAY_TYPE(9);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {mat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {mat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function mat3_clone(a) {
  var out = new ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function mat3_fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function mat3_set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function mat3_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {mat3} a the source matrix
 * @returns {Number} determinant of a
 */

function mat3_determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function mat3_multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to translate
 * @param {vec2} v vector to translate by
 * @returns {mat3} out
 */

function mat3_translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function mat3_rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
;
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to rotate
 * @param {vec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function mat3_scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Translation vector
 * @returns {mat3} out
 */

function mat3_fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function mat3_fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {vec2} v Scaling vector
 * @returns {mat3} out
 */

function mat3_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {mat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
* Calculates a 3x3 matrix from the given quaternion
*
* @param {mat3} out mat3 receiving operation result
* @param {quat} q Quaternion to create matrix from
*
* @returns {mat3} out
*/

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
*
* @param {mat3} out mat3 receiving operation result
* @param {mat4} a Mat4 to derive the normal matrix from
*
* @returns {mat3} out
*/

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {mat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat3_str(a) {
  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {mat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat3_frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function mat3_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @returns {mat3} out
 */

function mat3_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {mat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function mat3_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {mat3} a the first operand
 * @param {mat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function mat3_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat3_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat3} a The first matrix.
 * @param {mat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat3_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mat3_mul = mat3_multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var mat3_sub = mat3_subtract;
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function mat4_create() {
  var out = new ARRAY_TYPE(16);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {mat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function mat4_clone(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function mat4_fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function mat4_set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function mat4_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the source matrix
 * @returns {mat4} out
 */

function mat4_adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {mat4} a the source matrix
 * @returns {Number} determinant of a
 */

function mat4_determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function mat4_multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to translate
 * @param {vec3} v vector to translate by
 * @returns {mat4} out
 */

function mat4_translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {vec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function mat4_scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function mat4_rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function mat4_fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {vec3} v Scaling vector
 * @returns {mat4} out
 */

function mat4_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {vec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function mat4_fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {quat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {mat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {mat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {vec3} v Translation vector
 * @param {vec3} s Scaling vector
 * @param {vec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function mat4_fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return mat4_identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {vec3} eye Position of the viewer
 * @param {vec3} center Point the viewer is looking at
 * @param {vec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
;
/**
 * Returns a string representation of a mat4
 *
 * @param {mat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat4_str(a) {
  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {mat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat4_frob(a) {
  return Math.hypot(a[0], a[1], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function mat4_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @returns {mat4} out
 */

function mat4_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {mat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function mat4_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {mat4} a the first operand
 * @param {mat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function mat4_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat4_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {mat4} a The first matrix.
 * @param {mat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat4_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mat4_mul = mat4_multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var mat4_sub = mat4_subtract;
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function vec3_create() {
  var out = new ARRAY_TYPE(3);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {vec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function vec3_clone(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {vec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec3_length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function vec3_fromValues(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the source vector
 * @returns {vec3} out
 */

function vec3_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function vec3_set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function vec3_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function vec3_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function vec3_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function vec3_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {vec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec3_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the first operand
 * @param {vec3} b the second operand
 * @param {vec3} c the third operand
 * @param {vec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  var z = RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {mat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {vec3} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function vec3_rotateX(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
  r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function vec3_rotateY(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {vec3} a The vec3 point to rotate
 * @param {vec3} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec3} out
 */

function vec3_rotateZ(out, a, b, c) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
  r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {vec3} a The first operand
 * @param {vec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var tempA = vec3_fromValues(a[0], a[1], a[2]);
  var tempB = vec3_fromValues(b[0], b[1], b[2]);
  normalize(tempA, tempA);
  normalize(tempB, tempB);
  var cosine = vec3_dot(tempA, tempB);

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec3_str(a) {
  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec3_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec3} a The first vector.
 * @param {vec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec3_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var vec3_sub = vec3_subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var vec3_mul = vec3_multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len = vec3_length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = vec3_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec4.js

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function vec4_create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {vec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function vec4_clone(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function vec4_fromValues(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the source vector
 * @returns {vec4} out
 */

function vec4_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function vec4_set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to ceil
 * @returns {vec4} out
 */

function vec4_ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to floor
 * @returns {vec4} out
 */

function vec4_floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {vec4} out
 */

function vec4_max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to round
 * @returns {vec4} out
 */

function vec4_round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function vec4_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function vec4_scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} distance between a and b
 */

function vec4_distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function vec4_squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {vec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec4_length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {vec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function vec4_squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to negate
 * @returns {vec4} out
 */

function vec4_negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to invert
 * @returns {vec4} out
 */

function vec4_inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a vector to normalize
 * @returns {vec4} out
 */

function vec4_normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {vec4} result the receiving vector
 * @param {vec4} U the first vector
 * @param {vec4} V the second vector
 * @param {vec4} W the third vector
 * @returns {vec4} result
 */

function vec4_cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
;
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the first operand
 * @param {vec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function vec4_lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function vec4_random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec4} out
 */

function vec4_transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {vec4} a the vector to transform
 * @param {quat} q quaternion to transform with
 * @returns {vec4} out
 */

function vec4_transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function vec4_zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec4_str(a) {
  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec4_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec4} a The first vector.
 * @param {vec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec4_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var vec4_sub = vec4_subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var vec4_mul = vec4_multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var vec4_div = vec4_divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var vec4_dist = vec4_distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var vec4_sqrDist = vec4_squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var vec4_len = vec4_length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var vec4_sqrLen = vec4_squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var vec4_forEach = function () {
  var vec = vec4_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat.js




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function quat_create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function quat_identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {vec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {quat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {quat} a     Origin unit quaternion 
 * @param  {quat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = quat_dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 */

function quat_multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {quat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  quat_scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 * 
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function quat_random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = RANDOM();
  var u2 = RANDOM();
  var u3 = RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate inverse of
 * @returns {quat} out
 */

function quat_invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {mat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {quat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function quat_str(a) {
  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var quat_clone = vec4_clone;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var quat_fromValues = vec4_fromValues;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var quat_copy = vec4_copy;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var quat_set = vec4_set;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {quat} out
 * @function
 */

var quat_add = vec4_add;
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var quat_mul = quat_multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {quat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var quat_scale = vec4_scale;
/**
 * Calculates the dot product of two quat's
 *
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var quat_dot = dot;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var quat_lerp = vec4_lerp;
/**
 * Calculates the length of a quat
 *
 * @param {quat} a vector to calculate length of
 * @returns {Number} length of a
 */

var quat_length = vec4_length;
/**
 * Alias for {@link quat.length}
 * @function
 */

var quat_len = quat_length;
/**
 * Calculates the squared length of a quat
 *
 * @param {quat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var quat_squaredLength = vec4_squaredLength;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var quat_sqrLen = quat_squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var quat_normalize = vec4_normalize;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat} a The first quaternion.
 * @param {quat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var quat_exactEquals = vec4_exactEquals;
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {quat} a The first vector.
 * @param {quat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var quat_equals = vec4_equals;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {vec3} a the initial vector
 * @param {vec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = vec3_create();
  var xUnitVec3 = vec3_fromValues(1, 0, 0);
  var yUnitVec3 = vec3_fromValues(0, 1, 0);
  return function (out, a, b) {
    var dot = vec3_dot(a, b);

    if (dot < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
      normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return quat_normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {quat} a the first operand
 * @param {quat} b the second operand
 * @param {quat} c the third operand
 * @param {quat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = quat_create();
  var temp2 = quat_create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {vec3} view  the vector representing the viewing direction
 * @param {vec3} right the vector representing the local "right" direction
 * @param {vec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = mat3_create();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return quat_normalize(out, fromMat3(out, matr));
  };
}();
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat2.js



/**
 * Dual Quaternion<br>
 * Format: [real, dual]<br>
 * Quaternion format: XYZW<br>
 * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>
 * @module quat2
 */

/**
 * Creates a new identity dual quat
 *
 * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]
 */

function quat2_create() {
  var dq = new ARRAY_TYPE(8);

  if (ARRAY_TYPE != Float32Array) {
    dq[0] = 0;
    dq[1] = 0;
    dq[2] = 0;
    dq[4] = 0;
    dq[5] = 0;
    dq[6] = 0;
    dq[7] = 0;
  }

  dq[3] = 1;
  return dq;
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {quat2} a dual quaternion to clone
 * @returns {quat2} new dual quaternion
 * @function
 */

function quat2_clone(a) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = a[0];
  dq[1] = a[1];
  dq[2] = a[2];
  dq[3] = a[3];
  dq[4] = a[4];
  dq[5] = a[5];
  dq[6] = a[6];
  dq[7] = a[7];
  return dq;
}
/**
 * Creates a new dual quat initialized with the given values
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} new dual quaternion
 * @function
 */

function quat2_fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  dq[4] = x2;
  dq[5] = y2;
  dq[6] = z2;
  dq[7] = w2;
  return dq;
}
/**
 * Creates a new dual quat from the given values (quat and translation)
 *
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component (translation)
 * @param {Number} y2 Y component (translation)
 * @param {Number} z2 Z component (translation)
 * @returns {quat2} new dual quaternion
 * @function
 */

function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
  var dq = new ARRAY_TYPE(8);
  dq[0] = x1;
  dq[1] = y1;
  dq[2] = z1;
  dq[3] = w1;
  var ax = x2 * 0.5,
      ay = y2 * 0.5,
      az = z2 * 0.5;
  dq[4] = ax * w1 + ay * z1 - az * y1;
  dq[5] = ay * w1 + az * x1 - ax * z1;
  dq[6] = az * w1 + ax * y1 - ay * x1;
  dq[7] = -ax * x1 - ay * y1 - az * z1;
  return dq;
}
/**
 * Creates a dual quat from a quaternion and a translation
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {quat} q a normalized quaternion
 * @param {vec3} t tranlation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function quat2_fromRotationTranslation(out, q, t) {
  var ax = t[0] * 0.5,
      ay = t[1] * 0.5,
      az = t[2] * 0.5,
      bx = q[0],
      by = q[1],
      bz = q[2],
      bw = q[3];
  out[0] = bx;
  out[1] = by;
  out[2] = bz;
  out[3] = bw;
  out[4] = ax * bw + ay * bz - az * by;
  out[5] = ay * bw + az * bx - ax * bz;
  out[6] = az * bw + ax * by - ay * bx;
  out[7] = -ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Creates a dual quat from a translation
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {vec3} t translation vector
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function quat2_fromTranslation(out, t) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = t[0] * 0.5;
  out[5] = t[1] * 0.5;
  out[6] = t[2] * 0.5;
  out[7] = 0;
  return out;
}
/**
 * Creates a dual quat from a quaternion
 *
 * @param {quat2} dual quaternion receiving operation result
 * @param {quat} q the quaternion
 * @returns {quat2} dual quaternion receiving operation result
 * @function
 */

function quat2_fromRotation(out, q) {
  out[0] = q[0];
  out[1] = q[1];
  out[2] = q[2];
  out[3] = q[3];
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Creates a new dual quat from a matrix (4x4)
 *
 * @param {quat2} out the dual quaternion
 * @param {mat4} a the matrix
 * @returns {quat2} dual quat receiving operation result
 * @function
 */

function quat2_fromMat4(out, a) {
  //TODO Optimize this
  var outer = quat_create();
  getRotation(outer, a);
  var t = new ARRAY_TYPE(3);
  getTranslation(t, a);
  quat2_fromRotationTranslation(out, outer, t);
  return out;
}
/**
 * Copy the values from one dual quat to another
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the source dual quaternion
 * @returns {quat2} out
 * @function
 */

function quat2_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  return out;
}
/**
 * Set a dual quat to the identity dual quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @returns {quat2} out
 */

function quat2_identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  out[4] = 0;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  return out;
}
/**
 * Set the components of a dual quat to the given values
 *
 * @param {quat2} out the receiving quaternion
 * @param {Number} x1 X component
 * @param {Number} y1 Y component
 * @param {Number} z1 Z component
 * @param {Number} w1 W component
 * @param {Number} x2 X component
 * @param {Number} y2 Y component
 * @param {Number} z2 Z component
 * @param {Number} w2 W component
 * @returns {quat2} out
 * @function
 */

function quat2_set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
  out[0] = x1;
  out[1] = y1;
  out[2] = z1;
  out[3] = w1;
  out[4] = x2;
  out[5] = y2;
  out[6] = z2;
  out[7] = w2;
  return out;
}
/**
 * Gets the real part of a dual quat
 * @param  {quat} out real part
 * @param  {quat2} a Dual Quaternion
 * @return {quat} real part
 */

var getReal = quat_copy;
/**
 * Gets the dual part of a dual quat
 * @param  {quat} out dual part
 * @param  {quat2} a Dual Quaternion
 * @return {quat} dual part
 */

function getDual(out, a) {
  out[0] = a[4];
  out[1] = a[5];
  out[2] = a[6];
  out[3] = a[7];
  return out;
}
/**
 * Set the real component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat} q a quaternion representing the real part
 * @returns {quat2} out
 * @function
 */

var setReal = quat_copy;
/**
 * Set the dual component of a dual quat to the given quaternion
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat} q a quaternion representing the dual part
 * @returns {quat2} out
 * @function
 */

function setDual(out, q) {
  out[4] = q[0];
  out[5] = q[1];
  out[6] = q[2];
  out[7] = q[3];
  return out;
}
/**
 * Gets the translation of a normalized dual quat
 * @param  {vec3} out translation
 * @param  {quat2} a Dual Quaternion to be decomposed
 * @return {vec3} translation
 */

function quat2_getTranslation(out, a) {
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3];
  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  return out;
}
/**
 * Translates a dual quat by the given vector
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to translate
 * @param {vec3} v vector to translate by
 * @returns {quat2} out
 */

function quat2_translate(out, a, v) {
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3],
      bx1 = v[0] * 0.5,
      by1 = v[1] * 0.5,
      bz1 = v[2] * 0.5,
      ax2 = a[4],
      ay2 = a[5],
      az2 = a[6],
      aw2 = a[7];
  out[0] = ax1;
  out[1] = ay1;
  out[2] = az1;
  out[3] = aw1;
  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
  return out;
}
/**
 * Rotates a dual quat around the X axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function quat2_rotateX(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  quat_rotateX(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Y axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function quat2_rotateY(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  quat_rotateY(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat around the Z axis
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {number} rad how far should the rotation be
 * @returns {quat2} out
 */

function quat2_rotateZ(out, a, rad) {
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7],
      ax1 = ax * bw + aw * bx + ay * bz - az * by,
      ay1 = ay * bw + aw * by + az * bx - ax * bz,
      az1 = az * bw + aw * bz + ax * by - ay * bx,
      aw1 = aw * bw - ax * bx - ay * by - az * bz;
  quat_rotateZ(out, a, rad);
  bx = out[0];
  by = out[1];
  bz = out[2];
  bw = out[3];
  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (a * q)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {quat} q quaternion to rotate by
 * @returns {quat2} out
 */

function rotateByQuatAppend(out, a, q) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  out[0] = ax * qw + aw * qx + ay * qz - az * qy;
  out[1] = ay * qw + aw * qy + az * qx - ax * qz;
  out[2] = az * qw + aw * qz + ax * qy - ay * qx;
  out[3] = aw * qw - ax * qx - ay * qy - az * qz;
  ax = a[4];
  ay = a[5];
  az = a[6];
  aw = a[7];
  out[4] = ax * qw + aw * qx + ay * qz - az * qy;
  out[5] = ay * qw + aw * qy + az * qx - ax * qz;
  out[6] = az * qw + aw * qz + ax * qy - ay * qx;
  out[7] = aw * qw - ax * qx - ay * qy - az * qz;
  return out;
}
/**
 * Rotates a dual quat by a given quaternion (q * a)
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat} q quaternion to rotate by
 * @param {quat2} a the dual quaternion to rotate
 * @returns {quat2} out
 */

function rotateByQuatPrepend(out, q, a) {
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3],
      bx = a[0],
      by = a[1],
      bz = a[2],
      bw = a[3];
  out[0] = qx * bw + qw * bx + qy * bz - qz * by;
  out[1] = qy * bw + qw * by + qz * bx - qx * bz;
  out[2] = qz * bw + qw * bz + qx * by - qy * bx;
  out[3] = qw * bw - qx * bx - qy * by - qz * bz;
  bx = a[4];
  by = a[5];
  bz = a[6];
  bw = a[7];
  out[4] = qx * bw + qw * bx + qy * bz - qz * by;
  out[5] = qy * bw + qw * by + qz * bx - qx * bz;
  out[6] = qz * bw + qw * bz + qx * by - qy * bx;
  out[7] = qw * bw - qx * bx - qy * by - qz * bz;
  return out;
}
/**
 * Rotates a dual quat around a given axis. Does the normalisation automatically
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the dual quaternion to rotate
 * @param {vec3} axis the axis to rotate around
 * @param {Number} rad how far the rotation should be
 * @returns {quat2} out
 */

function rotateAroundAxis(out, a, axis, rad) {
  //Special case for rad = 0
  if (Math.abs(rad) < EPSILON) {
    return quat2_copy(out, a);
  }

  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
  rad = rad * 0.5;
  var s = Math.sin(rad);
  var bx = s * axis[0] / axisLength;
  var by = s * axis[1] / axisLength;
  var bz = s * axis[2] / axisLength;
  var bw = Math.cos(rad);
  var ax1 = a[0],
      ay1 = a[1],
      az1 = a[2],
      aw1 = a[3];
  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
  var ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  out[4] = ax * bw + aw * bx + ay * bz - az * by;
  out[5] = ay * bw + aw * by + az * bx - ax * bz;
  out[6] = az * bw + aw * bz + ax * by - ay * bx;
  out[7] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Adds two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {quat2} out
 * @function
 */

function quat2_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  return out;
}
/**
 * Multiplies two dual quat's
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {quat2} out
 */

function quat2_multiply(out, a, b) {
  var ax0 = a[0],
      ay0 = a[1],
      az0 = a[2],
      aw0 = a[3],
      bx1 = b[4],
      by1 = b[5],
      bz1 = b[6],
      bw1 = b[7],
      ax1 = a[4],
      ay1 = a[5],
      az1 = a[6],
      aw1 = a[7],
      bx0 = b[0],
      by0 = b[1],
      bz0 = b[2],
      bw0 = b[3];
  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
  return out;
}
/**
 * Alias for {@link quat2.multiply}
 * @function
 */

var quat2_mul = quat2_multiply;
/**
 * Scales a dual quat by a scalar number
 *
 * @param {quat2} out the receiving dual quat
 * @param {quat2} a the dual quat to scale
 * @param {Number} b amount to scale the dual quat by
 * @returns {quat2} out
 * @function
 */

function quat2_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  return out;
}
/**
 * Calculates the dot product of two dual quat's (The dot product of the real parts)
 *
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var quat2_dot = quat_dot;
/**
 * Performs a linear interpolation between two dual quats's
 * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)
 *
 * @param {quat2} out the receiving dual quat
 * @param {quat2} a the first operand
 * @param {quat2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat2} out
 */

function quat2_lerp(out, a, b, t) {
  var mt = 1 - t;
  if (quat2_dot(a, b) < 0) t = -t;
  out[0] = a[0] * mt + b[0] * t;
  out[1] = a[1] * mt + b[1] * t;
  out[2] = a[2] * mt + b[2] * t;
  out[3] = a[3] * mt + b[3] * t;
  out[4] = a[4] * mt + b[4] * t;
  out[5] = a[5] * mt + b[5] * t;
  out[6] = a[6] * mt + b[6] * t;
  out[7] = a[7] * mt + b[7] * t;
  return out;
}
/**
 * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a dual quat to calculate inverse of
 * @returns {quat2} out
 */

function quat2_invert(out, a) {
  var sqlen = quat2_squaredLength(a);
  out[0] = -a[0] / sqlen;
  out[1] = -a[1] / sqlen;
  out[2] = -a[2] / sqlen;
  out[3] = a[3] / sqlen;
  out[4] = -a[4] / sqlen;
  out[5] = -a[5] / sqlen;
  out[6] = -a[6] / sqlen;
  out[7] = a[7] / sqlen;
  return out;
}
/**
 * Calculates the conjugate of a dual quat
 * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.
 *
 * @param {quat2} out the receiving quaternion
 * @param {quat2} a quat to calculate conjugate of
 * @returns {quat2} out
 */

function quat2_conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  out[4] = -a[4];
  out[5] = -a[5];
  out[6] = -a[6];
  out[7] = a[7];
  return out;
}
/**
 * Calculates the length of a dual quat
 *
 * @param {quat2} a dual quat to calculate length of
 * @returns {Number} length of a
 * @function
 */

var quat2_length = quat_length;
/**
 * Alias for {@link quat2.length}
 * @function
 */

var quat2_len = quat2_length;
/**
 * Calculates the squared length of a dual quat
 *
 * @param {quat2} a dual quat to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var quat2_squaredLength = quat_squaredLength;
/**
 * Alias for {@link quat2.squaredLength}
 * @function
 */

var quat2_sqrLen = quat2_squaredLength;
/**
 * Normalize a dual quat
 *
 * @param {quat2} out the receiving dual quaternion
 * @param {quat2} a dual quaternion to normalize
 * @returns {quat2} out
 * @function
 */

function quat2_normalize(out, a) {
  var magnitude = quat2_squaredLength(a);

  if (magnitude > 0) {
    magnitude = Math.sqrt(magnitude);
    var a0 = a[0] / magnitude;
    var a1 = a[1] / magnitude;
    var a2 = a[2] / magnitude;
    var a3 = a[3] / magnitude;
    var b0 = a[4];
    var b1 = a[5];
    var b2 = a[6];
    var b3 = a[7];
    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = (b0 - a0 * a_dot_b) / magnitude;
    out[5] = (b1 - a1 * a_dot_b) / magnitude;
    out[6] = (b2 - a2 * a_dot_b) / magnitude;
    out[7] = (b3 - a3 * a_dot_b) / magnitude;
  }

  return out;
}
/**
 * Returns a string representation of a dual quatenion
 *
 * @param {quat2} a dual quaternion to represent as a string
 * @returns {String} string representation of the dual quat
 */

function quat2_str(a) {
  return 'quat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ')';
}
/**
 * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {quat2} a the first dual quaternion.
 * @param {quat2} b the second dual quaternion.
 * @returns {Boolean} true if the dual quaternions are equal, false otherwise.
 */

function quat2_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
}
/**
 * Returns whether or not the dual quaternions have approximately the same elements in the same position.
 *
 * @param {quat2} a the first dual quat.
 * @param {quat2} b the second dual quat.
 * @returns {Boolean} true if the dual quats are equal, false otherwise.
 */

function quat2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));
}
;// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec2.js

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function vec2_create() {
  var out = new ARRAY_TYPE(2);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {vec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function vec2_clone(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function vec2_fromValues(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the source vector
 * @returns {vec2} out
 */

function vec2_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function vec2_set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to ceil
 * @returns {vec2} out
 */

function vec2_ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to floor
 * @returns {vec2} out
 */

function vec2_floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec2} out
 */

function vec2_max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to round
 * @returns {vec2} out
 */

function vec2_round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function vec2_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function vec2_scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} distance between a and b
 */

function vec2_distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function vec2_squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {vec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec2_length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {vec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function vec2_squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to negate
 * @returns {vec2} out
 */

function vec2_negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to invert
 * @returns {vec2} out
 */

function vec2_inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a vector to normalize
 * @returns {vec2} out
 */

function vec2_normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec2_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @returns {vec3} out
 */

function vec2_cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the first operand
 * @param {vec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function vec2_lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function vec2_random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat3} m matrix to transform with
 * @returns {vec2} out
 */

function vec2_transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {vec2} a the vector to transform
 * @param {mat4} m matrix to transform with
 * @returns {vec2} out
 */

function vec2_transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {vec2} a The vec2 point to rotate
 * @param {vec2} b The origin of the rotation
 * @param {Number} c The angle of rotation
 * @returns {vec2} out
 */

function vec2_rotate(out, a, b, c) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(c),
      cosC = Math.cos(c); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {vec2} a The first operand
 * @param {vec2} b The second operand
 * @returns {Number} The angle in radians
 */

function vec2_angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1];
  var len1 = x1 * x1 + y1 * y1;

  if (len1 > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len1 = 1 / Math.sqrt(len1);
  }

  var len2 = x2 * x2 + y2 * y2;

  if (len2 > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len2 = 1 / Math.sqrt(len2);
  }

  var cosine = (x1 * x2 + y1 * y2) * len1 * len2;

  if (cosine > 1.0) {
    return 0;
  } else if (cosine < -1.0) {
    return Math.PI;
  } else {
    return Math.acos(cosine);
  }
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function vec2_zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {vec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec2_str(a) {
  return 'vec2(' + a[0] + ', ' + a[1] + ')';
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec2_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {vec2} a The first vector.
 * @param {vec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var vec2_len = vec2_length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var vec2_sub = vec2_subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var vec2_mul = vec2_multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var vec2_div = vec2_divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var vec2_dist = vec2_distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var vec2_sqrDist = vec2_squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var vec2_sqrLen = vec2_squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var vec2_forEach = function () {
  var vec = vec2_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();
;// CONCATENATED MODULE: ../shared/client/src/eventlistener.js
class EventListener
{

    /**
     * @param {Object} emitter
     * @param {string} id
     * @param {string} eventName
     * @param {Function} cb
     */
    constructor(emitter, id, eventName, cb)
    {
        this.targetObj = emitter;
        this.id = id;
        this.eventName = eventName;
        this.cb = cb;
    }

    remove()
    {
        this.targetObj.off(this.id);
    }
}

;// CONCATENATED MODULE: ../shared/client/src/helper.js
/**
 * Shared helper methods for cables uis
 */
class Helper
{
    constructor()
    {
        this._simpleIdCounter = 0;
    }

    /**
     * generate a random v4 uuid
     *
     * @return {string}
     */
    uuid()
    {
        let d = new Date().getTime();
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) =>
        {
            const r = (d + Math.random() * 16) % 16 | 0;
            d = Math.floor(d / 16);
            return (c === "x" ? r : (r & 0x3) | 0x8).toString(16);
        });
    }

    /**
     * checks value for !isNan and isFinite
     *
     * @param {string} n
     * @return {boolean}
     */
    isNumeric(n)
    {
        const nn = parseFloat(n);
        return !isNaN(nn) && isFinite(nn);
    }

    /**
     * generate a simple ID using an internal counter
     *
     * @return {Number} new id
     * @static
     */
    simpleId()
    {
        this._simpleIdCounter++;
        return this._simpleIdCounter;
    }

    pathLookup(obj, path)
    {
        const parts = path.split(".");
        if (parts.length == 1)
        {
            return obj[parts[0]];
        }
        return this.pathLookup(obj[parts[0]], parts.slice(1).join("."));
    }

}
/* harmony default export */ const helper = (new Helper());

;// CONCATENATED MODULE: ../shared/client/src/logger.js
/* eslint-disable no-console */
class Logger
{

    /**
     * @param {any} initiator
     * @param {Object} options
     */
    constructor(initiator, options)
    {
        this.initiator = initiator;
        this._options = options;
    }

    /**
     * @param {string} t
     */
    stack(t)
    {
        console.info("[" + this.initiator + "] ", t);
        console.log((new Error()).stack);
    }

    /**
     * @param {string} t
     */
    groupCollapsed(t)
    {
        if ((CABLES.UI && CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 0 }, ...arguments)) || !CABLES.logSilent) console.log("[" + this.initiator + "]", ...arguments);

        console.groupCollapsed("[" + this.initiator + "] " + t);
    }

    /**
     * @param {any[][]} t
     */
    table(t)
    {
        console.table(t);
    }

    groupEnd()
    {
        console.groupEnd();
    }

    error()
    {
        if ((CABLES.UI && CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 2 }, ...arguments)) || !CABLES.UI)
        {
            console.error("[" + this.initiator + "]", ...arguments);
        }

        if (this._options && this._options.onError)
        {
            this._options.onError(this.initiator, ...arguments);
            // console.log("emitevent onerror...");
            // CABLES.patch.emitEvent("onError", this.initiator, ...arguments);
            // CABLES.logErrorConsole("[" + this.initiator + "]", ...arguments);
        }
    }

    errorGui()
    {
        if (CABLES.UI) CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 2 }, ...arguments);
    }

    warn()
    {
        if ((CABLES.UI && CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 1 }, ...arguments)) || !CABLES.logSilent)
            console.warn("[" + this.initiator + "]", ...arguments);
    }

    verbose()
    {
        if ((CABLES.UI && CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 0 }, ...arguments)) || !CABLES.logSilent)
            console.log("[" + this.initiator + "]", ...arguments);
    }

    info()
    {
        if ((CABLES.UI && CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 0 }, ...arguments)) || !CABLES.logSilent)
            console.info("[" + this.initiator + "]", ...arguments);
    }

    log()
    {
        if ((CABLES.UI && CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 0 }, ...arguments)) || !CABLES.logSilent)
            console.log("[" + this.initiator + "]", ...arguments);
    }

    logGui()
    {
        if (CABLES.UI) CABLES.UI.logFilter.filterLog({ "initiator": this.initiator, "level": 0 }, ...arguments);
    }

    userInteraction(text)
    {
        // this.log({ "initiator": "userinteraction", "text": text });
    }
}

;// CONCATENATED MODULE: ../shared/client/src/eventtarget.js




/**
 * add eventlistener functionality to classes
 */
class Events
{
    #eventLog = new Logger("eventtarget");

    /** @type {Object<string,EventListener>} */
    #listeners = {};
    #logEvents = false;
    #logName = "";
    #eventCallbacks = {};
    #countErrorUnknowns = 0;

    constructor()
    {
    }

    /**
     * add event listener
     * @param {string} eventName event name
     * @param {function} cb callback
     * @param {string} idPrefix prefix for id, default empty
     * @return {EventListener} eventlistener
     */
    on(eventName, cb, idPrefix = "")
    {
        const newId = (idPrefix || "") + helper.simpleId();

        const event = new EventListener(this, newId, eventName, cb);

        if (!this.#eventCallbacks[eventName]) this.#eventCallbacks[eventName] = [event];
        else this.#eventCallbacks[eventName].push(event);

        this.#listeners[event.id] = event;

        return event;
    }

    removeAllEventListeners()
    {
        for (const i in this.#listeners)
        {
            this.off(this.#listeners[i]);
        }
    }

    /**
     *
     * @param {string} which
     * @param {Function} cb
     */
    addEventListener(which, cb, idPrefix = "")
    {
        return this.on(which, cb, idPrefix);
    }

    /**
     * check event listener registration
     * @param {string|EventListener} id event id
     * @param {function} cb callback - deprecated
     * @return {boolean}
     */
    hasEventListener(id, cb = null)
    {
        if (id && !cb)
        {
            if (typeof id == "string") // check by id
                return !!this.#listeners[id];
            else
                return !!this.#listeners[id.id];

        }
        else
        {
            this.#eventLog.warn("old eventtarget function haseventlistener!");
            if (id && cb)
            {
                if (this.#eventCallbacks[id])
                {
                    const idx = this.#eventCallbacks[id].indexOf(cb);
                    return idx !== -1;
                }
            }
        }
    }

    /**
     * check event listener by name
     * @param {string } eventName event name
     * @return {boolean}
     */
    hasListenerForEventName(eventName)
    {
        return this.#eventCallbacks[eventName] && this.#eventCallbacks[eventName].length > 0;
    }

    /** @deprecated */
    removeEventListener(id)
    {
        return this.off(id);
    }

    /**
     * remove event listener registration
     * @param {EventListener} listenerParam
     */
    off(listenerParam)
    {
        if (listenerParam === null || listenerParam === undefined)
        {
            this.#eventLog.warn("removeEventListener id null", listenerParam);
            return;
        }

        let id = listenerParam; // old off was using id strings directly, now uses eventlistener class
        // @ts-ignore
        if (listenerParam.eventName) id = listenerParam.id;

        if (typeof id != "string")
        {
            console.log("old function signature: removeEventListener! use listener id");
            return;
        }

        const event = this.#listeners[id];
        if (!event)
        {
            if (this.#countErrorUnknowns == 20) this.#eventLog.warn("stopped reporting unknown events");
            if (this.#countErrorUnknowns < 20) this.#eventLog.warn("could not find event...", id);
            this.#countErrorUnknowns++;
            return;
        }

        let removeCount = 0;

        let found = true;
        while (found)
        {
            found = false;
            let index = -1;
            for (let i = 0; i < this.#eventCallbacks[event.eventName].length; i++)
            {
                if (this.#eventCallbacks[event.eventName][i].id.indexOf(id) === 0) // this._eventCallbacks[event.eventName][i].id == which ||
                {
                    found = true;
                    index = i;
                }
            }

            if (index !== -1)
            {
                this.#eventCallbacks[event.eventName].splice(index, 1);
                delete this.#listeners[id];
                removeCount++;
            }
        }

        if (removeCount == 0)console.log("no events removed", event.eventName, id);

        return;
    }

    /**
     * enable/disable logging of events for the class
     *
     * @param {boolean} enabled
     * @param {string} logName
     */
    logEvents(enabled, logName)
    {
        this.#logEvents = enabled;
        this.#logName = logName;
    }

    /**
     * emit event
     *
     * @param {string} which event name
     * @param {*} param1
     * @param {*} param2
     * @param {*} param3
     * @param {*} param4
     * @param {*} param5
     * @param {*} param6
     */
    emitEvent(which, param1 = null, param2 = null, param3 = null, param4 = null, param5 = null, param6 = null, param7 = null, param8 = null)
    {
        if (this.#logEvents) this.#eventLog.log("[event] ", this.#logName, which, this.#eventCallbacks);

        if (this.#eventCallbacks[which])
        {
            for (let i = 0; i < this.#eventCallbacks[which].length; i++)
            {
                if (this.#eventCallbacks[which][i])
                {
                    this.#eventCallbacks[which][i].cb(param1, param2, param3, param4, param5, param6, param7, param8);
                }
            }
        }
        else
        {
            if (this.#logEvents) this.#eventLog.log("[event] has no event callback", which, this.#eventCallbacks);
        }
    }
}

;// CONCATENATED MODULE: ./src/core/anim_key.js


class AnimKey
{

    /**
     * @param {SerializedKey} obj
     * @param {Anim} [an]
     */
    constructor(obj, an)
    {
        this.id = CABLES.shortId();
        this.time = 0.0;
        this.value = 0.0;
        this.selected = false;

        /** @type {Anim} */
        this.anim = obj.anim || an || null;

        this.onChange = null;
        this._easing = 0;
        // this.bezTangIn = 0;
        // this.bezTangOut = 0;
        // this.bezTime = 0.5;
        // this.bezValue = 0;
        // this.bezTimeIn = -0.5;
        // this.bezValueIn = 0;

        this.cb = null;
        this.cbTriggered = false;
        this.temp = {};

        // const bezierAnim = null;
        // this._updateBezier = false;

        this.setEasing(Anim.EASING_LINEAR);
        this.set(obj);
    }

    delete()
    {
        if (this.anim) this.anim.remove(this);
        else console.log("animkey without anim...");
    }

    /**
     * @param {Number} e
     */
    setEasing(e)
    {
        this._easing = e;

        if (this._easing == Anim.EASING_LINEAR) this.ease = AnimKey.easeLinear;
        else if (this._easing == Anim.EASING_ABSOLUTE) this.ease = AnimKey.easeAbsolute;
        else if (this._easing == Anim.EASING_SMOOTHSTEP) this.ease = AnimKey.easeSmoothStep;
        else if (this._easing == Anim.EASING_SMOOTHERSTEP) this.ease = AnimKey.easeSmootherStep;
        else if (this._easing == Anim.EASING_CUBIC_IN) this.ease = AnimKey.easeCubicIn;
        else if (this._easing == Anim.EASING_CUBIC_OUT) this.ease = AnimKey.easeCubicOut;
        else if (this._easing == Anim.EASING_CUBIC_INOUT) this.ease = AnimKey.easeCubicInOut;
        else if (this._easing == Anim.EASING_EXPO_IN) this.ease = AnimKey.easeExpoIn;
        else if (this._easing == Anim.EASING_EXPO_OUT) this.ease = AnimKey.easeExpoOut;
        else if (this._easing == Anim.EASING_EXPO_INOUT) this.ease = AnimKey.easeExpoInOut;
        else if (this._easing == Anim.EASING_SIN_IN) this.ease = AnimKey.easeSinIn;
        else if (this._easing == Anim.EASING_SIN_OUT) this.ease = AnimKey.easeSinOut;
        else if (this._easing == Anim.EASING_SIN_INOUT) this.ease = AnimKey.easeSinInOut;
        else if (this._easing == Anim.EASING_BACK_OUT) this.ease = AnimKey.easeOutBack;
        else if (this._easing == Anim.EASING_BACK_IN) this.ease = AnimKey.easeInBack;
        else if (this._easing == Anim.EASING_BACK_INOUT) this.ease = AnimKey.easeInOutBack;
        else if (this._easing == Anim.EASING_ELASTIC_IN) this.ease = AnimKey.easeInElastic;
        else if (this._easing == Anim.EASING_ELASTIC_OUT) this.ease = AnimKey.easeOutElastic;
        // else if (this._easing == Anim.EASING_ELASTIC_INOUT) this.ease = AnimKey.easeElasticInOut;
        else if (this._easing == Anim.EASING_BOUNCE_IN) this.ease = AnimKey.easeInBounce;
        else if (this._easing == Anim.EASING_BOUNCE_OUT) this.ease = AnimKey.easeOutBounce;
        else if (this._easing == Anim.EASING_QUART_OUT) this.ease = AnimKey.easeOutQuart;
        else if (this._easing == Anim.EASING_QUART_IN) this.ease = AnimKey.easeInQuart;
        else if (this._easing == Anim.EASING_QUART_INOUT) this.ease = AnimKey.easeInOutQuart;
        else if (this._easing == Anim.EASING_QUINT_OUT) this.ease = AnimKey.easeOutQuint;
        else if (this._easing == Anim.EASING_QUINT_IN) this.ease = AnimKey.easeInQuint;
        else if (this._easing == Anim.EASING_QUINT_INOUT) this.ease = AnimKey.easeInOutQuint;
        else if (this._easing == Anim.EASING_CUBICSPLINE)
        {
            // this._updateBezier = true;
            this.ease = AnimKey.easeCubicSpline;
        }
        else
        {
            this._easing = Anim.EASING_LINEAR;
            this.ease = AnimKey.easeLinear;
        }
        this.anim.forceChangeCallbackSoon();
    }

    trigger()
    {
        this.cb();
        this.cbTriggered = true;
    }

    /**
     * @param {number} v
     */
    setValue(v)
    {
        this.value = v;
        if (this.onChange !== null) this.onChange();
        this.anim.forceChangeCallbackSoon();
    }

    /**
     * @param {import("./anim.js").SerializedKey} obj
     */
    set(obj)
    {
        if (obj)
        {
            if (obj.hasOwnProperty("e")) this.setEasing(obj.e);
            if (obj.cb)
            {
                this.cb = obj.cb;
                this.cbTriggered = false;
            }

            if (obj.b)
            {
                // this.bezTime = obj.b[0];
                // this.bezValue = obj.b[1];
                // this.bezTimeIn = obj.b[2];
                // this.bezValueIn = obj.b[3];
                // this._updateBezier = true;
            }

            if (obj.hasOwnProperty("t")) this.time = obj.t;
            if (obj.hasOwnProperty("time")) this.time = obj.time;
            if (obj.hasOwnProperty("v")) this.value = obj.v;
            else if (obj.hasOwnProperty("value")) this.value = obj.value;
        }
        if (this.onChange) this.onChange();
        this.anim.forceChangeCallbackSoon();
    }

    /**
   * @returns {Object}
   */
    getSerialized()
    {
        const obj = {};
        obj.t = this.time;
        obj.v = this.value;
        obj.e = this._easing;

        return obj;
    }

    getEasing()
    {
        return this._easing;
    }
}

AnimKey.cubicSpline = function (perc, key1, key2)
{
    let
        previousPoint = key1.value,
        previousTangent = key1.bezTangOut,
        nextPoint = key2.value,
        nextTangent = key2.bezTangIn;
    let t = perc;
    let t2 = t * t;
    let t3 = t2 * t;

    return (2 * t3 - 3 * t2 + 1) * previousPoint + (t3 - 2 * t2 + t) * previousTangent + (-2 * t3 + 3 * t2) * nextPoint + (t3 - t2) * nextTangent;
};

AnimKey.easeCubicSpline = function (perc, key2)
{
    return AnimKey.cubicSpline(perc, this, key2);
};

AnimKey.linear = function (perc, key1, key2)
{
    return parseFloat(key1.value) + parseFloat(key2.value - key1.value) * perc;
};

AnimKey.easeLinear = function (perc, key2)
{
    return AnimKey.linear(perc, this, key2);
};

AnimKey.easeAbsolute = function (perc, key2)
{
    return this.value;
};

const easeExpoIn = function (t)
{
    return (t = 2 ** (10 * (t - 1)));
};

AnimKey.easeExpoIn = function (t, key2)
{
    t = easeExpoIn(t);
    return AnimKey.linear(t, this, key2);
};

const easeExpoOut = function (t)
{
    t = -(2 ** (-10 * t)) + 1;
    return t;
};

AnimKey.easeExpoOut = function (t, key2)
{
    t = easeExpoOut(t);
    return AnimKey.linear(t, this, key2);
};

const easeExpoInOut = function (t)
{
    t *= 2;
    if (t < 1)
    {
        t = 0.5 * 2 ** (10 * (t - 1));
    }
    else
    {
        t--;
        t = 0.5 * (-(2 ** (-10 * t)) + 2);
    }
    return t;
};

AnimKey.easeExpoInOut = function (t, key2)
{
    t = easeExpoInOut(t);
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeSinIn = function (t, key2)
{
    t = -1 * Math.cos((t * Math.PI) / 2) + 1;
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeSinOut = function (t, key2)
{
    t = Math.sin((t * Math.PI) / 2);
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeSinInOut = function (t, key2)
{
    t = -0.5 * (Math.cos(Math.PI * t) - 1.0);
    return AnimKey.linear(t, this, key2);
};

const easeCubicIn = function (t)
{
    t = t * t * t;
    return t;
};

AnimKey.easeCubicIn = function (t, key2)
{
    t = easeCubicIn(t);
    return AnimKey.linear(t, this, key2);
};

// b 0
// c 1/2 or 1
// d always 1
// easeOutCubic: function (x, t, b, c, d) {
//     return c*((t=t/d-1)*t*t + 1) + b;

AnimKey.easeInQuint = function (t, key2)
{
    t = t * t * t * t * t;
    return AnimKey.linear(t, this, key2);
};
AnimKey.easeOutQuint = function (t, key2)
{
    t = (t -= 1) * t * t * t * t + 1;
    return AnimKey.linear(t, this, key2);
};
AnimKey.easeInOutQuint = function (t, key2)
{
    if ((t /= 0.5) < 1) t = 0.5 * t * t * t * t * t;
    else t = 0.5 * ((t -= 2) * t * t * t * t + 2);
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeInQuart = function (t, key2)
{
    t = t * t * t * t;
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeOutQuart = function (t, key2)
{
    // return -c * ((t=t/d-1)*t*t*t - 1) + b;
    t = -1 * ((t -= 1) * t * t * t - 1);
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeInOutQuart = function (t, key2)
{
    if ((t /= 0.5) < 1) t = 0.5 * t * t * t * t;
    else t = -0.5 * ((t -= 2) * t * t * t - 2);
    return AnimKey.linear(t, this, key2);
};

AnimKey.bounce = function (t)
{
    if ((t /= 1) < 1 / 2.75) t = 7.5625 * t * t;
    else if (t < 2 / 2.75) t = 7.5625 * (t -= 1.5 / 2.75) * t + 0.75;
    else if (t < 2.5 / 2.75) t = 7.5625 * (t -= 2.25 / 2.75) * t + 0.9375;
    else t = 7.5625 * (t -= 2.625 / 2.75) * t + 0.984375;
    return t;
};

AnimKey.easeInBounce = function (t, key2)
{
    return AnimKey.linear(AnimKey.bounce(t), this, key2);
    // return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d);
};

AnimKey.easeOutBounce = function (t, key2)
{
    return AnimKey.linear(AnimKey.bounce(t), this, key2);
};

AnimKey.easeInElastic = function (t, key2)
{
    let s = 1.70158;
    let p = 0;
    let a = 1;

    const b = 0;
    const d = 1;
    const c = 1;

    if (t === 0) t = b;
    else if ((t /= d) == 1) t = b + c;
    else
    {
        if (!p) p = d * 0.3;
        if (a < Math.abs(c))
        {
            a = c;
            s = p / 4;
        }
        else s = (p / (2 * Math.PI)) * Math.asin(c / a);
        t = -(a * 2 ** (10 * (t -= 1)) * Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b;
    }

    return AnimKey.linear(t, this, key2);
};

AnimKey.easeOutElastic = function (t, key2)
{
    let s = 1.70158;
    let p = 0;
    let a = 1;

    const b = 0;
    const d = 1;
    const c = 1;

    if (t === 0) t = b;
    else if ((t /= d) == 1) t = b + c;
    else
    {
        if (!p) p = d * 0.3;
        if (a < Math.abs(c))
        {
            a = c;
            s = p / 4;
        }
        else s = (p / (2 * Math.PI)) * Math.asin(c / a);
        t = a * 2 ** (-10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) + c + b;
    }

    return AnimKey.linear(t, this, key2);
};

AnimKey.easeInBack = function (t, key2)
{
    const s = 1.70158;
    t = t * t * ((s + 1) * t - s);

    return AnimKey.linear(t, this, key2);
};

AnimKey.easeOutBack = function (t, key2)
{
    const s = 1.70158;
    t = (t = t / 1 - 1) * t * ((s + 1) * t + s) + 1;

    return AnimKey.linear(t, this, key2);
};

AnimKey.easeInOutBack = function (t, key2)
{
    let s = 1.70158;
    const c = 1 / 2;
    if ((t /= 1 / 2) < 1) t = c * (t * t * (((s *= 1.525) + 1) * t - s));
    else t = c * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);

    return AnimKey.linear(t, this, key2);
};

const easeCubicOut = function (t)
{
    t--;
    t = t * t * t + 1;
    return t;
};

AnimKey.easeCubicOut = function (t, key2)
{
    t = easeCubicOut(t);
    return AnimKey.linear(t, this, key2);
};

const easeCubicInOut = function (t)
{
    t *= 2;
    if (t < 1) t = 0.5 * t * t * t;
    else
    {
        t -= 2;
        t = 0.5 * (t * t * t + 2);
    }
    return t;
};

AnimKey.easeCubicInOut = function (t, key2)
{
    t = easeCubicInOut(t);
    return AnimKey.linear(t, this, key2);
};

AnimKey.easeSmoothStep = function (perc, key2)
{
    // var x = Math.max(0, Math.min(1, (perc-0)/(1-0)));
    const x = Math.max(0, Math.min(1, perc));
    perc = x * x * (3 - 2 * x); // smoothstep
    return AnimKey.linear(perc, this, key2);
};

AnimKey.easeSmootherStep = function (perc, key2)
{
    const x = Math.max(0, Math.min(1, (perc - 0) / (1 - 0)));
    perc = x * x * x * (x * (x * 6 - 15) + 10); // smootherstep
    return AnimKey.linear(perc, this, key2);
};

;// CONCATENATED MODULE: ./src/core/anim.js







/**
 * Keyframed interpolated animation.
 *
 * @class
 * @param cfg
 * @example
 * var anim=new CABLES.Anim();
 * anim.setValue(0,0);  // set value 0 at 0 seconds
 * anim.setValue(10,1); // set value 1 at 10 seconds
 * anim.getValue(5);    // get value at 5 seconds - this returns 0.5
 */

class Anim extends Events
{
    static EASING_LINEAR = 0;
    static EASING_ABSOLUTE = 1;
    static EASING_SMOOTHSTEP = 2;
    static EASING_SMOOTHERSTEP = 3;
    static EASING_CUBICSPLINE = 4;

    static EASING_CUBIC_IN = 5;
    static EASING_CUBIC_OUT = 6;
    static EASING_CUBIC_INOUT = 7;

    static EASING_EXPO_IN = 8;
    static EASING_EXPO_OUT = 9;
    static EASING_EXPO_INOUT = 10;

    static EASING_SIN_IN = 11;
    static EASING_SIN_OUT = 12;
    static EASING_SIN_INOUT = 13;

    static EASING_BACK_IN = 14;
    static EASING_BACK_OUT = 15;
    static EASING_BACK_INOUT = 16;

    static EASING_ELASTIC_IN = 17;
    static EASING_ELASTIC_OUT = 18;

    static EASING_BOUNCE_IN = 19;
    static EASING_BOUNCE_OUT = 21;

    static EASING_QUART_IN = 22;
    static EASING_QUART_OUT = 23;
    static EASING_QUART_INOUT = 24;

    static EASING_QUINT_IN = 25;
    static EASING_QUINT_OUT = 26;
    static EASING_QUINT_INOUT = 27;

    static EASINGNAMES = ["linear", "absolute", "smoothstep", "smootherstep", "Cubic In", "Cubic Out", "Cubic In Out", "Expo In", "Expo Out", "Expo In Out", "Sin In", "Sin Out", "Sin In Out", "Quart In", "Quart Out", "Quart In Out", "Quint In", "Quint Out", "Quint In Out", "Back In", "Back Out", "Back In Out", "Elastic In", "Elastic Out", "Bounce In", "Bounce Out"];
    static EVENT_CHANGE = "onChange";
    #tlActive = true;

    /**
     * @param {AnimCfg} [cfg]
     */
    constructor(cfg = {})
    {
        super();
        cfg = cfg || {};
        this.id = uuid();

        /** @type {AnimKey[]} */
        this.keys = [];
        this.onChange = null;
        this.stayInTimeline = false;
        this.loop = false;
        this._log = new Logger("Anim");
        this._lastKeyIndex = 0;
        this._cachedIndex = 0;
        this.name = cfg.name || null;

        /**
         * @type {Number}
         */
        this.defaultEasing = cfg.defaultEasing || Anim.EASING_LINEAR;
        this.onLooped = null;

        this._timesLooped = 0;
        this._needsSort = false;
    }

    forceChangeCallback()
    {
        if (this.onChange !== null) this.onChange();
        this.emitEvent(Anim.EVENT_CHANGE, this);
    }

    forceChangeCallbackSoon()
    {
        setTimeout(this.forceChangeCallback.bind(this), 10);
    }

    getLoop()
    {
        return this.loop;
    }

    /**
     * @param {boolean} enable
     */
    setLoop(enable)
    {
        this.loop = enable;
        this.emitEvent(Anim.EVENT_CHANGE, this);
    }

    /**
     * returns true if animation has ended at @time
     * checks if last key time is < time
     * @param {Number} time
     * @returns {Boolean}
     * @memberof Anim
     * @instance
     * @function
     */
    hasEnded(time)
    {
        if (this.keys.length === 0) return true;
        if (this.keys[this._lastKeyIndex].time <= time) return true;
        return false;
    }

    /**
     * @param {number} time
     */
    isRising(time)
    {
        if (this.hasEnded(time)) return false;
        const ki = this.getKeyIndex(time);
        if (this.keys[ki].value < this.keys[ki + 1].value) return true;
        return false;
    }

    /**
     * remove all keys from animation before time
     * @param {Number} time
     * @memberof Anim
     * @instance
     * @function
     */
    clearBefore(time)
    {
        const v = this.getValue(time);
        const ki = this.getKeyIndex(time);

        this.setValue(time, v);

        if (ki > 1) this.keys.splice(0, ki);
        this._updateLastIndex();
    }

    /**
     * remove all keys from animation
     * @param {Number} [time=0] set a new key at time with the old value at time
     * @memberof Anim
     * @instance
     * @function
     */
    clear(time)
    {
        let v = 0;
        if (time) v = this.getValue(time);
        this.keys.length = 0;
        this._updateLastIndex();
        if (time) this.setValue(time, v);
        if (this.onChange !== null) this.onChange();
        this.emitEvent(Anim.EVENT_CHANGE, this);
    }

    sortKeys()
    {
        this.keys.sort((a, b) => { return a.time - b.time; });
        this._updateLastIndex();
        this._needsSort = false;
        if (this.keys.length > 999 && this.keys.length % 1000 == 0)console.log(this.name, this.keys.length);

    }

    hasDuplicates()
    {
        const test = {};
        let count = 0;
        for (let i = 0; i < this.keys.length; i++)
        {
            test[this.keys[i].time] = 1;
            count++;
        }

        const keys = Object.keys(test);
        if (keys.length != count)
        {
            return true;
        }
        return false;
    }

    removeDuplicates()
    {
        if (this.hasDuplicates())
        {
            this.sortKeys();
            let count = 0;

            while (this.hasDuplicates())
            {
                for (let i = 0; i < this.keys.length - 1; i++)
                {
                    if (this.keys[i].time == this.keys[i + 1].time) this.keys.splice(i, 1);
                    count++;
                }
            }
            this._updateLastIndex();
        }
    }

    getLength()
    {
        if (this.keys.length === 0) return 0;
        return this.keys[this.keys.length - 1].time;
    }

    /**
     * @param {number} time
     */
    getKeyIndex(time)
    {
        let index = 0;
        let start = 0;
        if (this._cachedIndex && this.keys.length > this._cachedIndex && time >= this.keys[this._cachedIndex].time) start = this._cachedIndex;
        for (let i = start; i < this.keys.length; i++)
        {
            if (time >= this.keys[i].time) index = i;
            if (this.keys[i].time > time)
            {
                if (time != 0) this._cachedIndex = index;
                return index;
            }
        }

        return index;
    }

    /**
     * set value at time
     * @function setValue
     * @memberof Anim
     * @instance
     * @param {Number} time
     * @param {Number} value
     * @param {Function} cb callback
     */
    setValue(time, value, cb = null)
    {
        let found = null;

        if (this.keys.length == 0 || time <= this.keys[this.keys.length - 1].time)
            for (let i = 0; i < this.keys.length; i++)
                if (this.keys[i].time == time)
                {
                    found = this.keys[i];
                    this.keys[i].setValue(value);
                    this.keys[i].cb = cb;
                    break;
                }

        if (!found)
        {
            found = new AnimKey(
                {
                    "time": time,
                    "value": value,
                    "e": this.defaultEasing,
                    "cb": cb,
                    "anim": this
                });
            this.keys.push(found);

            // if (this.keys.length % 1000 == 0)console.log(this.name, this.keys.length);
            this._updateLastIndex();
        }

        if (this.onChange) this.onChange();
        this.emitEvent(Anim.EVENT_CHANGE, this);
        this._needsSort = true;
        return found;
    }

    /**
     * @param {number} index
     * @param {number} easing
     */
    setKeyEasing(index, easing)
    {
        if (this.keys[index])
        {
            this.keys[index].setEasing(easing);
            this.emitEvent(Anim.EVENT_CHANGE, this);
        }
    }

    /**
     * @param {object} obj
     */
    deserialize(obj)
    {

        if (obj.loop) this.loop = obj.loop;
        if (obj.tlActive) this.#tlActive = obj.tlActive;
        for (const ani in obj.keys)
        {
            this.keys.push(new CABLES.AnimKey(obj.keys[ani], this));
        }
    }

    /**
     * @returns {SerializedAnim}
     */
    getSerialized()
    {

        /** @type {SerializedAnim} */
        const obj = {};
        obj.keys = [];
        obj.loop = this.loop;
        if (this.#tlActive)obj.tlActive = this.tlActive;

        for (let i = 0; i < this.keys.length; i++)
            obj.keys.push(this.keys[i].getSerialized());

        return obj;
    }

    /**
     * @param {number} time
     */
    getKey(time)
    {
        const index = this.getKeyIndex(time);
        return this.keys[index];
    }

    /**
     * @param {number} time
     */
    getNextKey(time)
    {
        let index = this.getKeyIndex(time) + 1;
        if (index >= this.keys.length) index = this.keys.length - 1;

        return this.keys[index];
    }

    /**
     * @param {number} time
     */
    isFinished(time)
    {
        if (this.keys.length <= 0) return true;
        return time > this.keys[this.keys.length - 1].time;
    }

    /**
     * @param {number} time
     */
    isStarted(time)
    {
        if (this.keys.length <= 0) return false;
        return time >= this.keys[0].time;
    }

    /**
     * @param {AnimKey} k
     */
    remove(k)
    {
        for (let i = 0; i < this.keys.length; i++)
        {
            if (this.keys[i] == k)
            {
                this.keys.splice(i, 1);
                this._updateLastIndex();
                return;
            }
        }
        console.log("key remove not found", k);
    }

    /**
     * get value at time
     * @function getValue
     * @memberof Anim
     * @instance
     * @param {Number} [time] time
     * @returns {Number} interpolated value at time
     */
    getValue(time)
    {
        if (this.keys.length === 0)
        {
            return 0;
        }
        if (this._needsSort) this.sortKeys();

        if (!this.loop && time > this.keys[this._lastKeyIndex].time)
        {
            if (this.keys[this._lastKeyIndex].cb && !this.keys[this._lastKeyIndex].cbTriggered) this.keys[this._lastKeyIndex].trigger();

            return this.keys[this._lastKeyIndex].value;
        }

        if (time < this.keys[0].time)
            return this.keys[0].value;

        if (this.loop && time > this.keys[this._lastKeyIndex].time)
        {
            const currentLoop = time / this.keys[this._lastKeyIndex].time;
            if (currentLoop > this._timesLooped)
            {
                this._timesLooped++;
                if (this.onLooped) this.onLooped();
            }
            time = (time - this.keys[0].time) % (this.keys[this._lastKeyIndex].time - this.keys[0].time);
            time += this.keys[0].time;
        }

        const index = this.getKeyIndex(time);
        if (index >= this._lastKeyIndex)
        {
            if (this.keys[this._lastKeyIndex].cb && !this.keys[this._lastKeyIndex].cbTriggered) this.keys[this._lastKeyIndex].trigger();

            return this.keys[this._lastKeyIndex].value;
        }

        const index2 = index + 1;
        const key1 = this.keys[index];
        const key2 = this.keys[index2];

        if (key1.cb && !key1.cbTriggered) key1.trigger();

        if (!key2) return -1;

        const perc = (time - key1.time) / (key2.time - key1.time);

        return key1.ease(perc, key2);
    }

    _updateLastIndex()
    {
        this._lastKeyIndex = this.keys.length - 1;
    }

    /**
     * @param {AnimKey} k
     */
    addKey(k)
    {
        if (k.time === undefined)
        {
            this._log.warn("key time undefined, ignoring!");
        }
        else
        {
            this.keys.push(k);
            if (this.onChange !== null) this.onChange();
            this.emitEvent(Anim.EVENT_CHANGE, this);
            this._needsSort = true;
        }
        this._updateLastIndex();
    }

    /**
     * @param {string} str
     */
    easingFromString(str)
    {
        // todo smarter way to map ?
        if (str == "linear") return Anim.EASING_LINEAR;
        if (str == "absolute") return Anim.EASING_ABSOLUTE;
        if (str == "smoothstep") return Anim.EASING_SMOOTHSTEP;
        if (str == "smootherstep") return Anim.EASING_SMOOTHERSTEP;

        if (str == "Cubic In") return Anim.EASING_CUBIC_IN;
        if (str == "Cubic Out") return Anim.EASING_CUBIC_OUT;
        if (str == "Cubic In Out") return Anim.EASING_CUBIC_INOUT;

        if (str == "Expo In") return Anim.EASING_EXPO_IN;
        if (str == "Expo Out") return Anim.EASING_EXPO_OUT;
        if (str == "Expo In Out") return Anim.EASING_EXPO_INOUT;

        if (str == "Sin In") return Anim.EASING_SIN_IN;
        if (str == "Sin Out") return Anim.EASING_SIN_OUT;
        if (str == "Sin In Out") return Anim.EASING_SIN_INOUT;

        if (str == "Back In") return Anim.EASING_BACK_IN;
        if (str == "Back Out") return Anim.EASING_BACK_OUT;
        if (str == "Back In Out") return Anim.EASING_BACK_INOUT;

        if (str == "Elastic In") return Anim.EASING_ELASTIC_IN;
        if (str == "Elastic Out") return Anim.EASING_ELASTIC_OUT;

        if (str == "Bounce In") return Anim.EASING_BOUNCE_IN;
        if (str == "Bounce Out") return Anim.EASING_BOUNCE_OUT;

        if (str == "Quart Out") return Anim.EASING_QUART_OUT;
        if (str == "Quart In") return Anim.EASING_QUART_IN;
        if (str == "Quart In Out") return Anim.EASING_QUART_INOUT;

        if (str == "Quint Out") return Anim.EASING_QUINT_OUT;
        if (str == "Quint In") return Anim.EASING_QUINT_IN;
        if (str == "Quint In Out") return Anim.EASING_QUINT_INOUT;

        console.log("unknown anim easing?", str);
    }

    /**
     * @param {Op} op
     * @param {string} title
     * @param {function} cb
     * @returns {Port}
     */
    createPort(op, title, cb)
    {
        const port = op.inDropDown(title, Anim.EASINGNAMES, "linear");
        port.set("linear");
        port.defaultValue = "linear";

        port.onChange = () =>
        {
            this.defaultEasing = this.easingFromString(port.get());
            this.emitEvent("onChangeDefaultEasing", this);

            if (cb) cb();
        };

        return port;
    }

    get tlActive()
    {
        return this.#tlActive;
    }

    set tlActive(b)
    {
        if (CABLES.UI)
        {
            this.#tlActive = b;
            window.gui.emitEvent("tlActiveChanged", this);
            this.forceChangeCallbackSoon();
        }
    }
}

// ------------------------------

/**
 * @param {number} time
 * @param {quat} q
 * @param {Anim} animx
 * @param {Anim} animy
 * @param {Anim} animz
 * @param {Anim} animw
 */
Anim.slerpQuaternion = function (time, q, animx, animy, animz, animw)
{
    if (!Anim.slerpQuaternion.q1)
    {
        Anim.slerpQuaternion.q1 = quat_create();
        Anim.slerpQuaternion.q2 = quat_create();
    }

    const i1 = animx.getKeyIndex(time);
    let i2 = i1 + 1;
    if (i2 >= animx.keys.length) i2 = animx.keys.length - 1;

    if (i1 == i2)
    {
        quat_set(q, animx.keys[i1].value, animy.keys[i1].value, animz.keys[i1].value, animw.keys[i1].value);
    }
    else
    {
        const key1Time = animx.keys[i1].time;
        const key2Time = animx.keys[i2].time;
        const perc = (time - key1Time) / (key2Time - key1Time);

        quat_set(Anim.slerpQuaternion.q1, animx.keys[i1].value, animy.keys[i1].value, animz.keys[i1].value, animw.keys[i1].value);

        quat_set(Anim.slerpQuaternion.q2, animx.keys[i2].value, animy.keys[i2].value, animz.keys[i2].value, animw.keys[i2].value);

        slerp(q, Anim.slerpQuaternion.q1, Anim.slerpQuaternion.q2, perc);
    }
    return q;
};

;// CONCATENATED MODULE: ./src/core/constants.js


const CONSTANTS = {
    "ANIM": {
        "EASINGS": Anim.EASINGNAMES,
        "EASING_LINEAR": 0,
        "EASING_ABSOLUTE": 1,
        "EASING_SMOOTHSTEP": 2,
        "EASING_SMOOTHERSTEP": 3,
        "EASING_CUBICSPLINE": 4,

        "EASING_CUBIC_IN": 5,
        "EASING_CUBIC_OUT": 6,
        "EASING_CUBIC_INOUT": 7,

        "EASING_EXPO_IN": 8,
        "EASING_EXPO_OUT": 9,
        "EASING_EXPO_INOUT": 10,

        "EASING_SIN_IN": 11,
        "EASING_SIN_OUT": 12,
        "EASING_SIN_INOUT": 13,

        "EASING_BACK_IN": 14,
        "EASING_BACK_OUT": 15,
        "EASING_BACK_INOUT": 16,

        "EASING_ELASTIC_IN": 17,
        "EASING_ELASTIC_OUT": 18,

        "EASING_BOUNCE_IN": 19,
        "EASING_BOUNCE_OUT": 21,

        "EASING_QUART_IN": 22,
        "EASING_QUART_OUT": 23,
        "EASING_QUART_INOUT": 24,

        "EASING_QUINT_IN": 25,
        "EASING_QUINT_OUT": 26,
        "EASING_QUINT_INOUT": 27,
    },

    "OP": {
        "OP_PORT_TYPE_VALUE": 0,
        "OP_PORT_TYPE_NUMBER": 0,
        "OP_PORT_TYPE_FUNCTION": 1,
        "OP_PORT_TYPE_TRIGGER": 1,
        "OP_PORT_TYPE_OBJECT": 2,
        "OP_PORT_TYPE_TEXTURE": 2,
        "OP_PORT_TYPE_ARRAY": 3,
        "OP_PORT_TYPE_DYNAMIC": 4,
        "OP_PORT_TYPE_STRING": 5,

        "OP_VERSION_PREFIX": "_v",
    },

    "PORT": {
        "PORT_DIR_IN": 0,
        "PORT_DIR_OUT": 1,
    },

    "PACO": {
        "PACO_CLEAR": 0,
        "PACO_VALUECHANGE": 1,
        "PACO_OP_DELETE": 2,
        "PACO_UNLINK": 3,
        "PACO_LINK": 4,
        "PACO_LOAD": 5,
        "PACO_OP_CREATE": 6,
        "PACO_OP_ENABLE": 7,
        "PACO_OP_DISABLE": 8,
        "PACO_UIATTRIBS": 9,
        "PACO_VARIABLES": 10,
        "PACO_TRIGGERS": 11,
        "PACO_PORT_SETVARIABLE": 12,
        "PACO_PORT_SETANIMATED": 13,
        "PACO_PORT_ANIM_UPDATED": 14,
        "PACO_DESERIALIZE": 15,
        "PACO_OP_RELOAD": 16
    },
};

;// CONCATENATED MODULE: ./src/core/extendjs.js
/**
 * extend javascript functionality
 */

/**
 * @external Math
 */

/**
 * set random seed for seededRandom()
 * @type Number
 * @static
 */
Math.randomSeed = 1;

/**
 * @function external:Math#setRandomSeed
 * @param {number} seed
 */
Math.setRandomSeed = function (seed)
{
    // https://github.com/cables-gl/cables_docs/issues/622
    Math.randomSeed = seed * 50728129;
    if (seed != 0)
    {
        Math.randomSeed = Math.seededRandom() * 17624813;
        Math.randomSeed = Math.seededRandom() * 9737333;
    }
};

/**
 * generate a seeded random number
 * @function seededRandom
 * @memberof Math
 * @param {Number} max minimum possible random number
 * @param {Number} min maximum possible random number
 * @return {Number} random value
 * @static
 */
Math.seededRandom = function (max, min)
{
    if (Math.randomSeed === 0) Math.randomSeed = Math.random() * 999;
    max = max || 1;
    min = min || 0;

    Math.randomSeed = (Math.randomSeed * 9301 + 49297) % 233280;
    const rnd = Math.randomSeed / 233280.0;

    return min + rnd * (max - min);
};

/**
     * @namespace String
     */

/**
 * append a linebreak to a string
 * @this {String}
 * @returns {string} string with newline appended
*/
String.prototype.endl = function ()
{
    return this + "\n";
};

String.prototype.contains = function (str)
{
    console.warn("string.contains deprecated, use string.includes");
    console.log((new Error()).stack);
    return this.includes(str);

};

function extendJs()
{

}

;// CONCATENATED MODULE: ./src/core/utils.js
/**
 * @namespace external:CABLES#Utils
 */




extendJs();

/**
 * Merge two Float32Arrays.
 * @function float32Concat
 * @param {Float32Array} first Left-hand side array
 * @param {Float32Array} second Right-hand side array
 * @return {Float32Array}
 * @static
 */
function float32Concat(first, second)
{
    if (!(first instanceof Float32Array)) first = new Float32Array(first);
    if (!(second instanceof Float32Array)) second = new Float32Array(second);

    const result = new Float32Array(first.length + second.length);

    result.set(first);
    result.set(second, first.length);

    return result;
}

/**
 * get op shortname: only last part of fullname and without version
 * @function getShortOpName
 * @memberof CABLES
 * @param {string} fullname full op name
 * @static
 */
const getShortOpName = function (fullname)
{
    let name = fullname.split(".")[fullname.split(".").length - 1];

    if (name.includes(CONSTANTS.OP.OP_VERSION_PREFIX))
    {
        const n = name.split(CONSTANTS.OP.OP_VERSION_PREFIX)[1];
        name = name.substring(0, name.length - (CONSTANTS.OP.OP_VERSION_PREFIX + n).length);
    }
    return name;
};

/**
 * randomize order of an array
 * @function shuffleArray
 * @param {Array|Float32Array} array {Array} original
 * @return {Array|Float32Array} shuffled array
 * @static
 */
const shuffleArray = function (array)
{
    for (let i = array.length - 1; i > 0; i--)
    {
        const j = Math.floor(Math.seededRandom() * (i + 1));
        const temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
    return array;
};

/**
 * generate a short "relativly unique" id
 * @function shortId
 * @return {String} generated ID
 * @static
 */

const _shortIds = {};
const shortId = function ()
{
    let str = Math.random().toString(36).substr(2, 9);

    if (_shortIds.hasOwnProperty(str)) str = shortId();
    _shortIds[str] = true;
    return str;
};

/**
 * @typedef {String} UUID
*/

/**
 * generate a UUID
 * @function uuid
 * @return {UUID} generated UUID
 * @static
 */
const uuid = function ()
{
    let d = new Date().getTime();
    const uuidStr = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) =>
    {
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c == "x" ? r : (r & 0x3) | 0x8).toString(16);
    });
    return uuidStr;
};
const generateUUID = uuid;

function cleanJson(obj)
{
    for (const i in obj)
    {
        if (obj[i] && typeof objValue === "object" && obj[i].constructor === Object) obj[i] = cleanJson(obj[i]);

        if (obj[i] === null || obj[i] === undefined) delete obj[i];
        else if (Array.isArray(obj[i]) && obj[i].length == 0) delete obj[i];
    }

    return obj;
}

/**
 * @see http://stackoverflow.com/q/7616461/940217
 * @param {string} str
 * @param {string} prefix
 * @return {string}
 */
const prefixedHash = function (str, prefix = "id")
{
    let hash = 0;
    if (str.length > 0)
    {
        for (let i = 0; i < str.length; i++)
        {
            let character = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + character;
            hash &= hash; // Convert to 32bit integer
        }
    }
    return prefix + "" + hash;
};

/**
 * generate a simple ID
 * @return {Number} new id
 * @static
 */
let simpleIdCounter = 0;
const simpleId = function ()
{
    simpleIdCounter++;
    return simpleIdCounter;
};

/**
 * smoothStep a value
 * @param {Number} perc value value to be smoothed [0-1]
 * @return {Number} smoothed value
 * @static
 */
const smoothStep = function (perc)
{
    const x = Math.max(0, Math.min(1, (perc - 0) / (1 - 0)));
    perc = x * x * (3 - 2 * x); // smoothstep
    return perc;
};

/**
 * smootherstep a value
 * @param {Number} perc value to be smoothed [0-1]
 * @return {Number} smoothed value
 * @static
 */
const smootherStep = function (perc)
{
    const x = Math.max(0, Math.min(1, (perc - 0) / (1 - 0)));
    perc = x * x * x * (x * (x * 6 - 15) + 10); // smootherstep
    return perc;
};

/**
 * clamp number / make sure its between min/max
 * @param {Number} value value to be mapped
 * @param {Number} min minimum value
 * @param {Number} max maximum value
 * @static
 */
const clamp = function (value, min, max)
{
    return Math.min(Math.max(value, min), max);
};

/**
 * map a value in a range to a value in another range
 * @param {Number} x value to be mapped
 * @param {Number} _oldMin old range minimum value
 * @param {Number} _oldMax old range maximum value
 * @param {Number} _newMin new range minimum value
 * @param {Number} _newMax new range maximum value
 * @param {Number} _easing
 * @return {Number} mapped value
 * @static
 */
const map = function (x, _oldMin, _oldMax, _newMin, _newMax, _easing = 0, clamp = true)
{
    if (clamp)
    {
        if (x >= _oldMax) return _newMax;
        if (x <= _oldMin) return _newMin;
    }

    let reverseInput = false;
    const oldMin = Math.min(_oldMin, _oldMax);
    const oldMax = Math.max(_oldMin, _oldMax);
    if (oldMin != _oldMin) reverseInput = true;

    let reverseOutput = false;
    const newMin = Math.min(_newMin, _newMax);
    const newMax = Math.max(_newMin, _newMax);
    if (newMin != _newMin) reverseOutput = true;

    let portion = 0;
    let r = 0;

    if (reverseInput) portion = ((oldMax - x) * (newMax - newMin)) / (oldMax - oldMin);
    else portion = ((x - oldMin) * (newMax - newMin)) / (oldMax - oldMin);

    if (reverseOutput) r = newMax - portion;
    else r = portion + newMin;

    if (!_easing) return r;
    if (_easing == 1)
    {
        // smoothstep
        x = Math.max(0, Math.min(1, (r - _newMin) / (_newMax - _newMin)));
        return _newMin + x * x * (3 - 2 * x) * (_newMax - _newMin);
    }
    if (_easing == 2)
    {
        // smootherstep
        x = Math.max(0, Math.min(1, (r - _newMin) / (_newMax - _newMin)));
        return _newMin + x * x * x * (x * (x * 6 - 15) + 10) * (_newMax - _newMin);
    }

    return r;
};

// ----------------------------------------------------------------

/**
 * returns true if parameter is a number
 * @param {any} n value The value to check.
 * @return {Boolean}
 * @static
 */
function isNumeric(n)
{
    return !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * returns true if parameter is array
 * @function isArray
 * @param {any} v value Value to check
 * @return {Boolean}
 * @static
 */
function isArray(v)
{
    return Object.prototype.toString.call(v) === "[object Array]";
}

// ----------------------------------------------------------------

/**
 * append a unique/random parameter to a url, so the browser is forced to reload the file, even if its cached
 * @static
 * @param {String} url The url to append the cachebuster parameter to.
 * @return {String} url with cachebuster parameter
 */
const cacheBust = function (url = "")
{
    if (!url) return "";
    if (url.startsWith("data:")) return;
    if (url.includes("?")) url += "&";
    else url += "?";
    return url + "cache=" + CABLES.uuid();
};

/**
 * copy the content of an array
 * @static
 * @param {Array} src sourceArray
 * @param {Array} dst optional
 * @return {Array} dst
 */
const copyArray = function (src, dst)
{
    if (!src) return null;
    dst = dst || [];
    dst.length = src.length;
    for (let i = 0; i < src.length; i++)
        dst[i] = src[i];

    return dst;
};

/**
 * return the filename part of a url without extension
 * @static
 * @param {String} url
 * @return {String} just the filename
 */
const basename = function (url)
{
    let name = CABLES.filename(url);

    const parts2 = name.split(".");
    name = parts2[0];

    return name;
};

/**
 * output a stacktrace to the console
 * @static
 */
const logStack = function ()
{
    console.log("logstack", (new Error()).stack);
};

/**
 * return the filename part of a url
 * @static
 * @param {String} url
 * @return {String} just the filename
 */
const filename = function (url)
{
    let name = "";
    if (!url) return "";

    if (url.startsWith("data:") && url.includes(":"))
    {
        const parts = url.split(",");
        return parts[0];
    }

    let parts = (url + "").split("/");
    if (parts.length > 0)
    {
        const str = parts[parts.length - 1];
        let parts2 = str.split("?");
        name = parts2[0];
    }

    return name || "";
};

const ajaxSync = function (url, cb, method, post, contenttype)
{
    request({
        "url": url,
        "cb": cb,
        "method": method,
        "data": post,
        "contenttype": contenttype,
        "sync": true,
    });
};

/**
 * make an ajax request
 * @static
 * @function ajax
 * @param url
 * @param cb
 * @param method
 * @param post
 * @param contenttype
 * @param jsonP
 * @param headers
 * @param options
 */
const ajax = function (url, cb, method, post, contenttype, jsonP, headers = {}, options = {})
{
    const requestOptions = {
        "url": url,
        "cb": cb,
        "method": method,
        "data": post,
        "contenttype": contenttype,
        "sync": false,
        "jsonP": jsonP,
        "headers": headers,
    };
    if (options && options.credentials) requestOptions.credentials = options.credentials;
    request(requestOptions);
};

const request = function (options)
{
    if (!options.hasOwnProperty("asynch")) options.asynch = true;

    let xhr;
    try
    {
        xhr = new XMLHttpRequest();
    }
    catch (e) {}

    xhr.onreadystatechange = function ()
    {
        if (xhr.readyState != 4) return;

        if (options.cb)
        {
            if (xhr.status == 200 || xhr.status == 0) options.cb(false, xhr.responseText, xhr);
            else options.cb(true, xhr.responseText, xhr);
        }
    };

    try
    {
        xhr.open(options.method ? options.method.toUpperCase() : "GET", options.url, !options.sync);
    }
    catch (e)
    {
        if (options.cb && e) options.cb(true, e.msg, xhr);
    }

    if (typeof options.headers === "object")
    {
        if (options.headers)
        {
            const keys = Object.keys(options.headers);
            for (let i = 0; i < keys.length; i++)
            {
                const name = keys[i];
                const value = options.headers[name];
                xhr.setRequestHeader(name, value);
            }
        }
    }

    if (options.credentials && options.credentials !== "omit")
    {
        xhr.withCredentials = true;
    }

    try
    {
        if (!options.post && !options.data)
        {
            xhr.send();
        }
        else
        {
            xhr.setRequestHeader(
                "Content-type",
                options.contenttype ? options.contenttype : "application/x-www-form-urlencoded",
            );
            xhr.send(options.data || options.post);
        }
    }
    catch (e)
    {
        if (options.cb) options.cb(true, e.msg, xhr);
    }
};

// ----------------------------------------------------------------

const logErrorConsole = function (initiator)
{
    CABLES.errorConsole = CABLES.errorConsole || { "log": [] };
    CABLES.errorConsole.log.push({ "initiator": initiator, "arguments": arguments });

    if (!CABLES.errorConsole.ele)
    {
        const ele = document.createElement("div");
        ele.id = "cablesErrorConsole";
        ele.style.width = "90%";
        ele.style.height = "300px";
        ele.style.zIndex = "9999999";
        ele.style.display = "inline-block";
        ele.style.position = "absolute";
        ele.style.padding = "10px";
        ele.style.fontFamily = "monospace";
        ele.style.color = "red";
        ele.style.backgroundColor = "#200";

        CABLES.errorConsole.ele = ele;
        document.body.appendChild(ele);
    }

    let logHtml = "ERROR<br/>for more info, open your browsers dev tools console (Ctrl+Shift+I or Command+Alt+I)<br/>";

    for (let l = 0; l < CABLES.errorConsole.log.length; l++)
    {
        logHtml += CABLES.errorConsole.log[l].initiator + " ";
        for (let i = 1; i < CABLES.errorConsole.log[l].arguments.length; i++)
        {
            if (i > 2)logHtml += ", ";
            let arg = CABLES.errorConsole.log[l].arguments[i];
            if (arg.constructor.name.indexOf("Error") > -1 || arg.constructor.name.indexOf("error") > -1)
            {
                let txt = "Uncaught ErrorEvent ";
                if (arg.message)txt += " message: " + arg.message;
                logHtml += txt;
            }
            else if (typeof arg == "string")
                logHtml += arg;
            else if (typeof arg == "number")
                logHtml += String(arg) + " ";
        }
        logHtml += "<br/>";
    }

    CABLES.errorConsole.ele.innerHTML = logHtml;
};

/**
 * @param {Array<any>} arr
 */
function uniqueArray(arr)
{
    const u = {}, a = [];
    for (let i = 0, l = arr.length; i < l; ++i)
    {
        if (!u.hasOwnProperty(arr[i]))
        {
            a.push(arr[i]);
            u[arr[i]] = 1;
        }
    }
    return a;
}

;// CONCATENATED MODULE: ./src/core/core_port.js








/**
 * @typedef PortUiAttribs
 * @property  {String} [title] overwrite title of port (by default this is portname)
 * @property  {String} [display] how the port is displayed and interacted in the paramerer panel
 * @property  {Boolean} [greyout] port paramater will appear greyed out, can not be
 * @property  {Boolean} [hidePort] port will be hidden from op
 * @property  {Boolean} [hideParam] port params will be hidden from parameter panel
 * @property  {Boolean} [showIndex] only for dropdowns - show value index (e.g. `0 - normal` )
 * @property  {String} [editorSyntax] set syntax highlighting theme for editor port
 * @property  {Boolean} [ignoreObjTypeErrors] do not auto check object types
 * @property  {string} [group] do not set manually - group ports, usually set by op.setPortGroup...
 * @property  {Boolean} [isAnimated] internal: do not set manually
 * @property  {Boolean} [useVariable] internal: do not set manually
 * @property  {string} [variableName] internal: do not set manually
 * @property  {Number} [order] internal: do not set manually
 * @property  {Number} [stride] internal: do not set manually
 * @property  {Boolean} [expose] internal: do not set manually
 * @property  {Boolean} [multiPortManual] internal: do not set manually
 * @property  {String} [increment] internal: do not set manually
 * @property  {Number} [multiPortNum] internal: do not set manually
 * @property  {String} [display] internal: do not set manually
 * @property  {String} [axis] internal: do not set manually
 * @property  {String} [type] internal: do not set manually
 * @property  {String} [objType] internal: do not set manually
 * @property  {String} [filter] internal: do not set manually
 * @property  {boolean} [hideFormatButton] internal: do not set manually
 * @property  {boolean} [editShortcut] internal: do not set manually
 * @property  {String} [filter] internal: do not set manually
 * @property  {boolean} [preview] internal: do not set manually
 * @property  {boolean} [colorPick] internal: do not set manually
 * @property  {Array<String>} [values] internal: do not set manually
 * @property  {boolean} [boundToVar] internal: do not set manually
 *
 */

/**
 * data is coming into and out of ops through input and output ports
 * @namespace external:CABLES#Port
 * @module Port
 * @class
 * @example
 * const myPort=op.inString("String Port");
 */
class Port extends Events
{
    static DIR_IN = 0;
    static DIR_OUT = 1;

    static TYPE_VALUE = 0;
    static TYPE_NUMBER = 0;
    static TYPE_FUNCTION = 1;
    static TYPE_TRIGGER = 1;
    static TYPE_OBJECT = 2;
    static TYPE_TEXTURE = 2;
    static TYPE_ARRAY = 3;
    static TYPE_DYNAMIC = 4;
    static TYPE_STRING = 5;

    #oldAnimVal = -5711;

    #uiActiveState = true;
    #valueBeforeLink = null;
    // #lastAnimFrame = -1;
    #animated = false;
    // #tempLastUiValue = null;
    #useVariableName = null;

    /**
     * @param {Op} ___op
     * @param {string} name
     * @param {number} type
     * @param {PortUiAttribs} uiAttribs
     */
    constructor(___op, name, type, uiAttribs = {})
    {
        super();
        this.data = {}; // UNUSED, DEPRECATED, only left in for backwards compatibility with userops
        this._log = new Logger("core_port");

        /**
         * @type {Number}
         * @name direction
         * @instance
         * @memberof Port
         * @description direction of port (input(0) or output(1))
         */
        this.direction = Port.DIR_IN;
        this.id = String(CABLES.simpleId());

        /** @type {Op} */
        this._op = ___op;

        /** @type {Array<Link>} */
        this.links = [];

        /** @type {any} */
        this.value = 0.0;

        this.name = name;

        /** @type {number} */
        this.type = type || Port.TYPE_VALUE;

        /** @type {PortUiAttribs} */
        this.uiAttribs = uiAttribs || {};

        /** @type {Anim} */
        this.anim = null;

        this.defaultValue = null;

        this.ignoreValueSerialize = false;
        this.onLinkChanged = null;
        this.crashed = false;

        this.onValueChanged = null;
        this.onTriggered = null;
        this.changeAlways = false;
        this.forceRefChange = false;

        this.activityCounter = 0;
        this.apf = 0;
        this.activityCounterStartFrame = 0;

        this.canLink = null; // function can be overwritten
        this.preserveLinks = null;
        this.indexPort = null;
    }

    get parent()
    {
        this._log.stack("use port.op, not .parent");
        return this.op;
    }

    get title()
    {
        return this.uiAttribs.title || this.name;
    }

    get op()
    {
        return this._op;
    }

    get val()
    {
        return this.get();
    }

    set val(v)
    {
        this.setValue(v);
    }

    /**
     * copy over a uiattrib from an external connected port to another port
     * @function copyLinkedUiAttrib
     * @memberof Port
     * @param {string} which attrib name
     * @param {Port} port source port
     * @instance
     * @example
     *
     *  inArray.onLinkChanged=()=>
     *  {
     *      if(inArray) inArray.copyLinkedUiAttrib("stride", outArray);
     *  };
     *
     */
    copyLinkedUiAttrib(which, port)
    {
        if (!CABLES.UI) return;
        if (!this.isLinked()) return;

        const attr = {};
        attr[which] = this.links[0].getOtherPort(this).getUiAttrib(which);
        port.setUiAttribs(attr);
    }

    /*
     * sdjksdjklsd
     * TODO make extend class for ports, like for ops only for ui
     */
    getValueForDisplay()
    {
        let str = this.value;

        if (typeof this.value === "string" || this.value instanceof String)
        {
            if (str.length > 1000)
            {
                str = str.substring(0, 999);
                str += "...";
            }
            if (this.uiAttribs && (this.uiAttribs.display == "boolnum"))
            {
                str += " - ";

                if (!this.value) str += "false";
                else str += "true";
            }

            str = str.replace(/[\u00A0-\u9999<>\&]/g, function (/** @type {String} */ i)
            {
                return "&#" + i.charCodeAt(0) + ";";
            });

            if (str.length > 100) str = str.substring(0, 100);
        }
        else
        {
            str = this.value;
        }
        return str;
    }

    /**
     * change listener for input value ports, overwrite to react to changes
     * @function onChange
     * @memberof Port
     * @instance
     * @example
     * const myPort=op.inString("MyPort");
     * myPort.onChange=function()
     * {
     *   console.log("was changed to: ",myPort.get());
     * }
     *
     */
    onAnimToggle() {}

    _onAnimToggle()
    {
        this.onAnimToggle();
    }

    /**
     * @function remove
     * @memberof Port
     * @instance
     * @description remove port
     */
    remove()
    {
        this.removeLinks();
        this._op.removePort(this);
    }

    /**
     * set ui attributes
     * @function setUiAttribs
     * @memberof Port
     * @instance
     * @param {PortUiAttribs} newAttribs

     * @example
     * myPort.setUiAttribs({greyout:true});
     */
    setUiAttribs(newAttribs)
    {
        let changed = false;
        if (!this.uiAttribs) this.uiAttribs = {};

        for (const p in newAttribs)
        {
            if (newAttribs[p] === undefined)
            {
                delete this.uiAttribs[p];
                continue;
            }
            if (this.uiAttribs[p] != newAttribs[p]) changed = true;
            this.uiAttribs[p] = newAttribs[p];

            if (p == "group" && this.indexPort) this.indexPort.setUiAttribs({ "group": newAttribs[p] });
        }

        if (newAttribs.hasOwnProperty("expose")) this._op.patch.emitEvent("subpatchExpose", this._op.uiAttribs.subPatch);

        if (changed) this.emitEvent("onUiAttrChange", newAttribs, this);
    }

    /**
     * get ui attributes
     * @function getUiAttribs
     * @memberof Port
     * @example
     * myPort.getUiAttribs();
     */
    getUiAttribs()
    {
        return this.uiAttribs;
    }

    /**
     * get ui attribute
     * @function getUiAttrib
     * @memberof Port
     * @instance
     * @param {String} attribName
     * <pre>
     * attribName - return value of the ui-attribute, or null on unknown attribute
     * </pre>
     * @example
     * myPort.setUiAttribs("values");
     */
    getUiAttrib(attribName)
    {
        if (!this.uiAttribs || !this.uiAttribs.hasOwnProperty(attribName)) return null;
        return this.uiAttribs[attribName];
    }

    /**
     * @function get
     * @memberof Port
     * @instance
     * @description get value of port
     */
    get()
    {
        if (this.#animated && this.lastAnimFrame != this._op.patch.getFrameNum())
        {
            this.lastAnimFrame = this._op.patch.getFrameNum();

            let animval = this.anim.getValue(this._op.patch.timer.getTime());

            if (this.value != animval)
            {
                this.value = animval;
                this.#oldAnimVal = this.value;
                this.forceChange();
            }
        }

        return this.value;
    }

    setRef(v)
    {
        this.forceRefChange = true;
        this.set(v);
    }

    /**
     * @function setValue
     * @memberof Port
     * @instance
     * @description set value of port / will send value to all linked ports (only for output ports)
     */
    set(v)
    {
        this.setValue(v);
    }

    setValue(v)
    {
        if (v === undefined) v = null;

        if (CABLES.UI && CABLES.UI.showDevInfos)
            if (this.direction == CONSTANTS.PORT.PORT_DIR_OUT && this.type == Port.TYPE_OBJECT && v && !this.forceRefChange)
                this._log.warn("object port [" + this.name + "] uses .set [" + this.op.objName + "]");

        if (this._op.enabled && !this.crashed)
        {
            if (v !== this.value || this.changeAlways || this.type == Port.TYPE_TEXTURE || this.type == Port.TYPE_ARRAY)
            {
                if (this.#animated)
                {
                    let t = this._op.patch.timer.getTime();
                    if (CABLES.UI && window.gui.glTimeline)t = window.gui.glTimeline.snapTime(t);
                    this.anim.setValue(t, v);
                }
                else
                {
                    try
                    {
                        this.value = v;
                        this.forceChange();
                    }
                    catch (ex)
                    {
                        this.crashed = true;

                        this.setValue = function (_v) {};
                        this.onTriggered = function (a) {};

                        this._log.error("exception in ", this._op);
                        this._log.error(ex);

                        this._op.patch.emitEvent("exception", ex, this._op);
                    }

                    if (this._op && this._op.patch && this._op.patch.isEditorMode() && this.type == Port.TYPE_TEXTURE) gui.texturePreview().updateTexturePort(this);
                }

                if (this.direction == CONSTANTS.PORT.PORT_DIR_OUT) for (let i = 0; i < this.links.length; ++i) this.links[i].setValue();
            }
        }
    }

    updateAnim()
    {
        if (this.#animated)
        {
            this.value = this.get();

            if (this.#oldAnimVal != this.value || this.changeAlways)
            {
                this.#oldAnimVal = this.value;
                this.forceChange();
            }
            this.#oldAnimVal = this.value;
        }
    }

    forceChange()
    {
        if (this.onValueChanged || this.onChange)
        {

        /*
         * very temporary: deprecated warning!!!!!!!!!
         * if(params.length>0) this._log.warn('TOM: port has onchange params!',this._op.objName,this.name);
         */
        }
        this._activity();
        this.emitEvent("change", this.value, this);

        if (this.onChange) this.onChange(this, this.value);
        else if (this.onValueChanged) this.onValueChanged(this, this.value); // deprecated
    }

    /**
     * @function getTypeString
     * @memberof Port
     * @instance
     * @description get port type as string, e.g. "Function","Value"...
     * @return {String} type
     */
    getTypeString()
    {
        if (this.type == Port.TYPE_VALUE) return "Number";
        if (this.type == Port.TYPE_FUNCTION) return "Trigger";
        if (this.type == Port.TYPE_OBJECT) return "Object";
        if (this.type == Port.TYPE_DYNAMIC) return "Dynamic";
        if (this.type == Port.TYPE_ARRAY) return "Array";
        if (this.type == Port.TYPE_STRING) return "String";
        return "Unknown";
    }

    /**
     * @param {Object} objPort
     */
    deSerializeSettings(objPort)
    {
        if (!objPort) return;
        if (objPort.animated) this.setAnimated(objPort.animated);
        if (objPort.useVariable) this.setVariableName(objPort.useVariable);
        if (objPort.title) this.setUiAttribs({ "title": objPort.title });
        if (objPort.expose) this.setUiAttribs({ "expose": true });
        if (objPort.order) this.setUiAttribs({ "order": objPort.order });

        if (objPort.multiPortManual) this.setUiAttribs({ "multiPortManual": objPort.multiPortManual });
        if (objPort.multiPortNum) this.setUiAttribs({ "multiPortNum": objPort.multiPortNum });

        if (objPort.anim)
        {
            if (!this.anim) this.anim = new Anim({ "name": "port " + this.name });
            this._op.hasAnimPort = true;
            this.anim.on("onChange", () =>
            {
                this._op.patch.emitEvent("portAnimUpdated", this._op, this, this.anim);
            });
            this.anim.deserialize(objPort.anim);
            this._op.patch.emitEvent("portAnimUpdated", this._op, this, this.anim);

            this.anim.sortKeys();
        }
    }

    /**
     * @param {any} v
     */
    setInitialValue(v)
    {
        if (this.op.preservedPortLinks[this.name])
        {
            for (let i = 0; i < this.op.preservedPortLinks[this.name].length; i++)
            {
                const lobj = this.op.preservedPortLinks[this.name][i];
                this.op.patch._addLink(
                    lobj.objIn,
                    lobj.objOut,
                    lobj.portIn,
                    lobj.portOut);
            }
        }

        if (this.op.preservedPortValues && this.op.preservedPortValues.hasOwnProperty(this.name) && this.op.preservedPortValues[this.name] !== undefined)
        {
            this.set(this.op.preservedPortValues[this.name]);
        }
        else
        if (v !== undefined) this.set(v);
        if (v !== undefined) this.defaultValue = v;
    }

    getSerialized()
    {
        let obj = { "name": this.getName() };

        if (!this.ignoreValueSerialize && this.links.length === 0)
        {
            if (this.type == Port.TYPE_OBJECT && this.value && this.value.tex) {}
            else obj.value = this.value;
        }
        if (this.#useVariableName) obj.useVariable = this.#useVariableName;
        if (this.#animated) obj.animated = true;
        if (this.anim) obj.anim = this.anim.getSerialized();
        if (this.uiAttribs.multiPortNum) obj.multiPortNum = this.uiAttribs.multiPortNum;
        if (this.uiAttribs.multiPortManual) obj.multiPortManual = this.uiAttribs.multiPortManual;

        if (this.uiAttribs.display == "file") obj.display = this.uiAttribs.display;
        if (this.uiAttribs.expose)
        {
            obj.expose = true;
            if (this.uiAttribs.hasOwnProperty("order")) obj.order = this.uiAttribs.order;
        }
        if (this.uiAttribs.title) obj.title = this.uiAttribs.title;
        if ((this.preserveLinks || this.direction == CONSTANTS.PORT.PORT_DIR_OUT) && this.links.length > 0)
        {
            obj.links = [];
            for (const i in this.links)
            {
                if (!this.links[i].ignoreInSerialize && (this.links[i].portIn && this.links[i].portOut)) obj.links.push(this.links[i].getSerialized());
            }
        }

        if (this.direction == Port.DIR_IN && this.links.length > 0)
        {
            for (const i in this.links)
            {
                if (!this.links[i].portIn || !this.links[i].portOut) continue;

                const otherp = this.links[i].getOtherPort(this);
                // check if functions exist, are defined in core_extend_ops code in ui
                if (otherp.op.isInBlueprint2 && this.op.isInBlueprint2)
                {
                    if (otherp.op.isInBlueprint2() && !this.op.isInBlueprint2())
                    {
                        obj.links = obj.links || [];
                        obj.links.push(this.links[i].getSerialized());
                    }
                }
            }
        }

        if (obj.links && obj.links.length == 0) delete obj.links;
        if (this.type === Port.TYPE_FUNCTION) delete obj.value;
        if (this.type === Port.TYPE_FUNCTION && this.links.length == 0) obj = null;
        if (obj && Object.keys(obj).length == 1 && obj.name)obj = null; // obj is null if there is no real information other than name

        cleanJson(obj);

        return obj;
    }

    /**
     * will be overwritten in ui
     * @param {Port} port1
     * @param {Port} port2
     * @returns {boolean}
     */
    shouldLink(port1, port2)
    {
        return !!(port1 && port2);
    }

    /**
     * @function removeLinks
     * @memberof Port
     * @instance
     * @description remove all links from port
     */
    removeLinks()
    {
        let count = 0;
        while (this.links.length > 0)
        {
            count++;
            if (count > 5000)
            {
                this._log.warn("could not delete links... / infinite loop");
                this.links.length = 0;
                break;
            }
            this.links[0].remove();
        }
    }

    /**
     * @function removeLink
     * @memberof Port
     * @instance
     * @description remove all link from port
     * @param {Link} link
     */
    removeLink(link)
    {
        for (let i = 0; i < this.links.length; i++)
            if (this.links[i] == link)
                this.links.splice(i, 1);

        if (this.direction == Port.DIR_IN)
        {
            if (this.type == Port.TYPE_VALUE) this.setValue(this.#valueBeforeLink || 0);
            else this.setValue(this.#valueBeforeLink || null);
        }

        if (CABLES.UI && this._op.checkLinkTimeWarnings) this._op.checkLinkTimeWarnings();

        try
        {
            if (this.onLinkChanged) this.onLinkChanged();
            this.emitEvent("onLinkChanged");
            this.emitEvent("onLinkRemoved");
            this._op.emitEvent("onLinkChanged");
        }
        catch (e)
        {
            this._log.error(e);
        }
    }

    /**
     * @function getName
     * @memberof Port
     * @instance
     * @description return port name
     */
    getName()
    {
        return this.name;
    }

    /**
     * @function getTitle
     * @memberof Port
     * @instance
     * @description return port name or title
     */
    getTitle()
    {
        if (this.uiAttribs.title) return this.uiAttribs.title;
        return this.name;
    }

    /**
     * @param {Link} l
     */
    addLink(l)
    {
        this.#valueBeforeLink = this.value;
        this.links.push(l);
        if (CABLES.UI && this._op.checkLinkTimeWarnings) this._op.checkLinkTimeWarnings();

        try
        {
            if (this.onLinkChanged) this.onLinkChanged();
            this.emitEvent("onLinkChanged");
            this._op.emitEvent("onLinkChanged");
        }
        catch (e)
        {
            this._log.error(e);
        }
    }

    /**
     * @function getLinkTo
     * @memberof Port
     * @instance
     * @param {Port} p2 otherPort
     * @description return link, which is linked to otherPort
     */
    getLinkTo(p2)
    {
        for (const i in this.links) if (this.links[i].portIn == p2 || this.links[i].portOut == p2) return this.links[i];
    }

    /**
     * @function removeLinkTo
     * @memberof Port
     * @instance
     * @param {Port} p2 otherPort
     * @description removes link, which is linked to otherPort
     */
    removeLinkTo(p2)
    {
        for (const i in this.links)
        {
            if (this.links[i].portIn == p2 || this.links[i].portOut == p2)
            {
                this.links[i].remove();
                if (CABLES.UI && this._op.checkLinkTimeWarnings) this._op.checkLinkTimeWarnings();

                if (this.onLinkChanged) this.onLinkChanged();
                this.emitEvent("onLinkChanged");
                this.emitEvent("onLinkRemoved");
                return;
            }
        }
    }

    /**
     * @function isLinkedTo
     * @memberof Port
     * @instance
     * @param {Port} p2 otherPort
     * @description returns true if port is linked to otherPort
     */
    isLinkedTo(p2)
    {
        for (const i in this.links) if (this.links[i].portIn == p2 || this.links[i].portOut == p2) return true;

        return false;
    }

    _activity()
    {
        this.activityCounter++;
    }

    /**
     * @function trigger
     * @memberof Port
     * @instance
     * @description trigger the linked port (usually invoked on an output function port)
     */
    trigger()
    {
        const linksLength = this.links.length;

        this._activity();
        if (linksLength === 0) return;
        if (!this._op.enabled) return;

        let portTriggered = null;
        try
        {
            for (let i = 0; i < linksLength; ++i)
            {
                if (this.links[i].portIn)
                {
                    portTriggered = this.links[i].portIn;

                    portTriggered.op.patch.pushTriggerStack(portTriggered);
                    if (!portTriggered._onTriggered)
                    {
                        console.log(portTriggered, portTriggered._onTriggered);
                    }
                    portTriggered._onTriggered(null);

                    portTriggered.op.patch.popTriggerStack();
                }
                if (this.links[i]) this.links[i].activity();
            }
        }
        catch (ex)
        {
            portTriggered.op.enabled = false;

            if (this._op.patch.isEditorMode())
            {
                if (portTriggered.op.onError) portTriggered.op.onError(ex);
            }
            this._log.error("exception in port: ", portTriggered.name, portTriggered.op.name, portTriggered.op.id);
            this._log.error(ex);
        }
    }

    call()
    {
        this._log.warn("call deprecated - use trigger() ");
        this.trigger();
    }

    execute()
    {
    }

    /**
     * @param {string} n
     */
    setVariableName(n)
    {
        this.#useVariableName = n;

        this._op.patch.on("variableRename", (oldname, newname) =>
        {
            if (oldname != this.#useVariableName) return;
            this.#useVariableName = newname;
        });
    }

    getVariableName()
    {
        return this.#useVariableName;
    }

    /**
     * @param {String} v
     */
    setVariable(v)
    {
        this.setAnimated(false);
        const attr = { "useVariable": false };

        if (this._variableIn && this._varChangeListenerId)
        {
            this._variableIn.off(this._varChangeListenerId);
            this._variableIn = null;
        }

        if (v)
        {
            this._variableIn = this._op.patch.getVar(v);

            if (!this._variableIn)
            {
                // this._log.warn("PORT VAR NOT FOUND!!!", v);
            }
            else
            {
                if (this.type == Port.TYPE_OBJECT)
                {
                    this._varChangeListenerId = this._variableIn.on("change", () => { this.set(null); this.set(this._variableIn.getValue()); });
                }
                else
                {
                    this._varChangeListenerId = this._variableIn.on("change", this.set.bind(this));
                }
                this.set(this._variableIn.getValue());
            }
            this.#useVariableName = v;
            attr.useVariable = true;
            attr.variableName = this.#useVariableName;
        }
        else
        {
            attr.variableName = this.#useVariableName = null;
            attr.useVariable = false;
        }

        this.setUiAttribs(attr);
        this._op.patch.emitEvent("portSetVariable", this._op, this, v);
    }

    /**
     * @param {boolean} a
     */
    _handleNoTriggerOpAnimUpdates(a)
    {
        let hasTriggerPort = false;
        // for (let i = 0; i < this._op.portsIn.length; i++)
        // {
        //     if (this._op.portsIn[i].type == Port.TYPE_FUNCTION)
        //     {
        //         hasTriggerPort = true;
        //         break;
        //     }
        // }

        if (!hasTriggerPort)
        {
            if (a) this._notriggerAnimUpdate = this._op.patch.on("onRenderFrame", () =>
            {
                this.updateAnim();
            });
            else if (this._notriggerAnimUpdate) this._notriggerAnimUpdate = this._op.patch.off(this._notriggerAnimUpdate);
        }
    }

    /**
     * @param {boolean} a
     */
    setAnimated(a)
    {
        if (this.#animated != a)
        {
            this.#animated = a;
            this._op.hasAnimPort = true;

            if (this.#animated && !this.anim)
            {
                this.anim = new Anim({ "name": "port " + this.name });
                this.anim.on("onChange", () =>
                {
                    this._op.patch.emitEvent("portAnimUpdated", this._op, this, this.anim);
                });
            }
            this._onAnimToggle();
        }

        this._handleNoTriggerOpAnimUpdates(a);
        if (!a)
        {
            this.anim = null;
        }

        this._op.patch.emitEvent("portAnimToggle", this._op, this, this.anim);

        this.setUiAttribs({ "isAnimated": this.#animated });
    }

    toggleAnim()
    {
        this.#animated = !this.#animated;
        if (this.#animated && !this.anim)
        {
            this.anim = new Anim({ "name": "port " + this.name });
            this.anim.on("onChange", () =>
            {
                this._op.patch.emitEvent("portAnimUpdated", this._op, this, this.anim);
            });
        }
        this.setAnimated(this.#animated);
        this._onAnimToggle();
        this.setUiAttribs({ "isAnimated": this.#animated });
        this._op.patch.emitEvent("portAnimUpdated", this._op, this, this.anim);
    }

    /**
     * <pre>
     * CABLES.Port.TYPE_VALUE = 0;
     * CABLES.Port.TYPE_FUNCTION = 1;
     * CABLES.Port.TYPE_OBJECT = 2;
     * CABLES.Port.TYPE_TEXTURE = 2;
     * CABLES.Port.TYPE_ARRAY = 3;
     * CABLES.Port.TYPE_DYNAMIC = 4;
     * CABLES.Port.TYPE_STRING = 5;
     * </pre>
     * @function getType
     * @memberof Port
     * @instance
     * @return {Number} type of port
     */
    getType()
    {
        return this.type;
    }

    /**
     * @function isLinked
     * @memberof Port
     * @instance
     * @return {Boolean} true if port is linked
     */
    isLinked()
    {
        return this.links.length > 0 || this.#animated || this.#useVariableName != null;
    }

    isBoundToVar()
    {
        const b = this.#useVariableName != null;
        this.uiAttribs.boundToVar = b;
        return b;
    }

    /**
     * @return {Boolean} true if port is animated
     */
    isAnimated()
    {
        return this.#animated;
    }

    /**
     * @function isHidden
     * @memberof Port
     * @instance
     * @return {Boolean} true if port is hidden
     */
    isHidden()
    {
        return this.uiAttribs.hidePort;
    }

    /**
     * @function onTriggered
     * @memberof Port
     * @instance
     * @param {function} a onTriggeredCallback
     * @description set callback, which will be executed when port was triggered (usually output port)
     */
    _onTriggered(a)
    {
        this._activity();
        this._op.updateAnims();
        if (this._op.enabled && this.onTriggered) this.onTriggered(a);

        if (this._op.enabled) this.emitEvent("trigger");
    }

    /**
     * @param {any} v
     */
    _onSetProfiling(v) // used in editor: profiler tab
    {
        this._op.patch.profiler.add("port", this);
        this.setValue(v);
        this._op.patch.profiler.add("port", null);
    }

    _onTriggeredProfiling() // used in editor: profiler tab
    {
        if (this._op.enabled && this.onTriggered)
        {
            this._op.patch.profiler.add("port", this);
            this.onTriggered();
            this._op.patch.profiler.add("port", null);
        }
    }

    /**
     * @deprecated
     * @param {function} cb
     */
    onValueChange(cb)
    {
        this.onChange = cb;
    }

    /**
     * @deprecated
     */
    hidePort() {}
}

/**
 * Returns the port type string, e.g. "value" based on the port type number
 * @function portTypeNumberToString
 * @instance
 * @memberof Port
 * @param {Number} type - The port type number
 * @returns {String} - The port type as string
 */
Port.portTypeNumberToString = function (type)
{
    if (type == Port.TYPE_VALUE) return "value";
    if (type == Port.TYPE_FUNCTION) return "function";
    if (type == Port.TYPE_OBJECT) return "object";
    if (type == Port.TYPE_ARRAY) return "array";
    if (type == Port.TYPE_STRING) return "string";
    if (type == Port.TYPE_DYNAMIC) return "dynamic";
    return "unknown";
};

;// CONCATENATED MODULE: ./src/core/core_link.js




/**
 * @namespace external:CABLES#Link
 * @description a link is a connection between two ops/ports -> one input and one output port
 * @hideconstructor
 * @class
 */
class Link extends Events
{

    /**
     * @param {Patch} p
     */
    constructor(p)
    {
        super();

        this.id = CABLES.simpleId();

        /**
         * @type {Port}
         */
        this.portIn = null;

        /**
         * @type {Port}
         */
        this.portOut = null;

        /**
         * @type {Patch}
         */
        this._patch = p;
        this.activityCounter = 0;
        this.ignoreInSerialize = false;
    }

    /**
     * @param {any} v
     */
    setValue(v)
    {
        if (v === undefined) this._setValue();
        else this.portIn.set(v);
    }

    activity()
    {
        this.activityCounter++;
    }

    _setValue()
    {
        if (!this.portOut)
        {
            this.remove();
            return;
        }
        const v = this.portOut.get();

        if (v == v) // NaN is the only JavaScript value that is treated as unequal to itself
        {
            if (this.portIn.type != Port.TYPE_FUNCTION) this.activity();

            if (this.portIn.get() !== v)
            {
                this.portIn.set(v);
            }
            else
            {
                if (this.portIn.changeAlways) this.portIn.set(v);
                if (this.portOut.forceRefChange) this.portIn.forceChange();
            }
        }
    }

    /**
     * @function getOtherPort
     * @memberof Link
     * @instance
     * @param {Port} p port
     * @description returns the port of the link, which is not port
     */
    getOtherPort(p)
    {
        if (p == this.portIn) return this.portOut;
        return this.portIn;
    }

    /**
     * @function remove
     * @memberof Link
     * @instance
     * @description unlink/remove this link from all ports
     */
    remove()
    {
        if (this.portIn) this.portIn.removeLink(this);
        if (this.portOut) this.portOut.removeLink(this);
        if (this._patch)
        {
            this._patch.emitEvent("onUnLink", this.portIn, this.portOut, this);
        }

        if (this.portIn && (this.portIn.type == Port.TYPE_OBJECT || this.portIn.type == Port.TYPE_ARRAY))
        {
            this.portIn.set(null);
            if (this.portIn.links.length > 0) this.portIn.set(this.portIn.links[0].getOtherPort(this.portIn).get());
        }

        if (this.portIn) this.portIn.op._checkLinksNeededToWork();
        if (this.portOut) this.portOut.op._checkLinksNeededToWork();

        this.portIn = null;
        this.portOut = null;
        this._patch = null;
    }

    /**
     * @function link
     * @memberof Link
     * @instance
     * @description link those two ports
     * @param {Port} p1 port1
     * @param {Port} p2 port2
     */
    link(p1, p2)
    {
        if (!Link.canLink(p1, p2))
        {
            console.warn("[core_link] cannot link ports!", p1, p2);
            return false;
        }

        if (p1.direction == Port.DIR_IN)
        {
            this.portIn = p1;
            this.portOut = p2;
        }
        else
        {
            this.portIn = p2;
            this.portOut = p1;
        }

        p1.addLink(this);
        p2.addLink(this);

        this.setValue();

        p1.op._checkLinksNeededToWork();
        p2.op._checkLinksNeededToWork();
    }

    getSerialized()
    {
        const obj = {};

        obj.portIn = this.portIn.getName();
        obj.portOut = this.portOut.getName();
        obj.objIn = this.portIn.op.id;
        obj.objOut = this.portOut.op.id;

        return obj;
    }
}

// --------------------------------------------

/**
 * @function canLinkText
 * @memberof Link
 * @instance
 * @description return a text message with human readable reason if ports can not be linked, or can be
 * @param {Port} p1 port1
 * @param {Port} p2 port2
 */
Link.canLinkText = function (p1, p2)
{
    if (p1.direction == p2.direction)
    {
        let txt = "(out)";
        if (p2.direction == Port.DIR_IN) txt = "(in)";
        return "can not link: same direction " + txt;
    }
    if (p1.op == p2.op) return "can not link: same op";
    if (p1.type != Port.TYPE_DYNAMIC && p2.type != Port.TYPE_DYNAMIC)
    {
        if (p1.type != p2.type) return "can not link: different type";
    }

    if (CABLES.UI && p1.type == Port.TYPE_OBJECT && p2.type == Port.TYPE_OBJECT)
    {
        if (p1.uiAttribs.objType && p2.uiAttribs.objType)
            if (p1.uiAttribs.objType != p2.uiAttribs.objType)
                return "incompatible objects";
    }

    if (!p1) return "can not link: port 1 invalid";
    if (!p2) return "can not link: port 2 invalid";

    if (p1.direction == Port.DIR_IN && p1.isAnimated()) return "can not link: is animated";
    if (p2.direction == Port.DIR_IN && p2.isAnimated()) return "can not link: is animated";

    if (p1.isLinkedTo(p2)) return "ports already linked";

    if ((p1.canLink && !p1.canLink(p2)) || (p2.canLink && !p2.canLink(p1))) return "Incompatible";

    return "can link";
};

/**
 * @function canLink
 * @memberof Link
 * @instance
 * @description return true if ports can be linked
 * @param {Port} p1 port1
 * @param {Port} p2 port2
 * @returns {Boolean}
 */
Link.canLink = function (p1, p2)
{
    if (!p1) return false;
    if (!p2) return false;
    if (p1.direction == Port.DIR_IN && p1.isAnimated()) return false;
    if (p2.direction == Port.DIR_IN && p2.isAnimated()) return false;

    if (p1.isHidden() || p2.isHidden()) return false;

    if (p1.isLinkedTo(p2)) return false;

    if (p1.direction == p2.direction) return false;

    if (CABLES.UI && p1.type == Port.TYPE_OBJECT && p2.type == Port.TYPE_OBJECT)
    {
        if (p1.uiAttribs.objType && p2.uiAttribs.objType)
        {
            if (p1.uiAttribs.objType.indexOf("sg_") == 0 && p2.uiAttribs.objType.indexOf("sg_") == 0) return true;
            if (p1.uiAttribs.objType != p2.uiAttribs.objType)
                return false;
        }
    }

    if (p1.type != p2.type && (p1.type != Port.TYPE_DYNAMIC && p2.type != Port.TYPE_DYNAMIC)) return false;
    if (p1.type == Port.TYPE_DYNAMIC || p2.type == Port.TYPE_DYNAMIC) return true;

    if (p1.op == p2.op) return false;

    if (p1.canLink && !p1.canLink(p2)) return false;
    if (p2.canLink && !p2.canLink(p1)) return false;

    return true;
};

;// CONCATENATED MODULE: ./src/core/core_port_switch.js


class SwitchPort extends Port
{
    constructor(__parent, name, type, uiAttribs, indexPort)
    {
        super(__parent, name, type, uiAttribs);

        this.get = () =>
        {
            let s = super.get();

            if (CABLES.UI)
            {
                if (
                    s === "" ||
                    s === null ||
                    s === undefined ||
                    (uiAttribs.values && uiAttribs.values.indexOf(String(s)) === -1)
                )
                {
                    this.op.setUiError("invalidswitch", "Invalid Value [" + this.name + "]: \"" + s + "\"", 1);
                }
                else this.op.setUiError("invalidswitch", null);
            }

            if (s === null || s === undefined)s = "";

            return s;
        };

        this.indexPort = indexPort;
        this.indexPort.set = (value) =>
        {
            const values = uiAttribs.values;

            if (!values)
            {
                // console.log("switch port has no values", this);
                return;
            }

            let intValue = Math.floor(value);

            intValue = Math.min(intValue, values.length - 1);
            intValue = Math.max(intValue, 0);

            this.indexPort.setValue(intValue);
            this.set(values[intValue]);

            if (this.op.patch.isEditorMode() && performance.now() - (this.lastTime || 0) > 100 && window.gui && gui.patchView.isCurrentOp(this.op))
            {
                gui.opParams.show(this.op);
                this.lastTime = performance.now();
            }
        };
    }

    setUiAttribs(attribs)
    {
        const hidePort = attribs.hidePort;
        attribs.hidePort = true;
        super.setUiAttribs(attribs);
        if (typeof hidePort !== "undefined")
        {
            this.indexPort.setUiAttribs({ hidePort });
        }
    }
}

;// CONCATENATED MODULE: ./src/core/core_port_select.js


class ValueSelectPort extends SwitchPort
{
    setUiAttribs(newAttribs)
    {
        // never unhide valuePort when indexPort is linked
        if (this.indexPort.isLinked())
        {
            for (const p in newAttribs)
            {
                if (p == "greyout" && !newAttribs[p]) newAttribs[p] = "true";
            }
        }
        super.setUiAttribs(newAttribs);
    }
}

;// CONCATENATED MODULE: ./src/core/core_port_multi.js



const MIN_NUM_PORTS = 2;

class MultiPort extends Port
{
    constructor(__parent, name, type, dir, uiAttribs, uiAttribsPorts)
    {
        super(__parent, name, Port.TYPE_ARRAY, uiAttribs);

        this.setUiAttribs({ "multiPort": true, "group": this.name, "order": -1 });
        this.ports = [];
        this.direction = dir;
        this._uiAttribsPorts = uiAttribsPorts;

        const updateArray = () =>
        {
            const arr = [];

            let ll = 1;
            if (this.uiAttribs.multiPortManual)ll = 0;

            for (let i = 0; i < this.ports.length - ll; i++)
                arr[i] = this.ports[i];

            this.setRef(arr);
        };

        const updateUi = () =>
        {
            let grey = !this.uiAttribs.multiPortManual || false;

            if (this.direction == CONSTANTS.PORT.PORT_DIR_OUT)grey = false;

            for (let i = 0; i < this.ports.length; i++)
            {
                let lp; // undefined to remove/not set it
                // let opacity;// undefined to remove/not set it
                // let grey;// undefined to remove/not set it
                let addPort = false;
                let title;
                let o = {};

                // console.log("this.op.preservedPortTitles", this.op.preservedPortTitles, this.op.preservedPortTitles[po.name], po.name);
                if (this.op.preservedPortTitles && this.op.preservedPortTitles[this.ports[i].name]) title = this.op.preservedPortTitles[this.ports[i].name];

                // if (!this.uiAttribs.multiPortManual)grey = true;
                if (i == 0) lp = this.ports.length;

                if (!this.uiAttribs.multiPortManual)
                    if (i == this.ports.length - 1)
                    {
                        title = "add port";
                        addPort = true;
                        grey = true;
                    }

                for (const attin in this._uiAttribsPorts)
                {
                    o[attin] = this._uiAttribsPorts[attin];
                }

                o.addPort = addPort;
                o.longPort = lp;
                o.title = title;
                o.greyout = grey;
                o.group = this.name;

                this.ports[i].setUiAttribs(o);
            }
        };

        this.removeInvalidPorts = () =>
        {
            for (let i = 0; i < this.ports.length; i++)
            {
                if (!this.ports[i]) this.ports.splice(i, 1);
            }

            if (!this.uiAttribs.multiPortManual)
            {
                if (this.ports.length > MIN_NUM_PORTS)

                    for (let i = this.ports.length - 1; i > 1; i--)
                    {
                        if (!this.ports[i].isLinked()) this.uiAttribs.multiPortNum = i;
                        else break;
                    }
            }

            updateArray();
        };

        this.countPorts = () =>
        {
            if (CABLES.UI && !gui.isRemoteClient && gui.patchView && gui.patchView.patchRenderer && gui.patchView.patchRenderer.isDraggingPort())
            {
                clearTimeout(this.retryTo);
                this.retryTo = setTimeout(this.countPorts.bind(this));
                return;
            }
            this.retryTo = null;

            let redo = false;
            this.removeListeners();
            this.removeInvalidPorts();

            for (let i = 0; i < this.ports.length; i++)
            {
                if (this.ports[i] && this.ports[i].links.length > 1)
                {
                    const po = this.ports[i + 1];
                    const otherPort = this.ports[i].links[0].getOtherPort(this.ports[i]);

                    if (!po || !otherPort)
                    {
                        this._log.warn("no port found?");
                    }
                    else
                    {
                        this.ports[i].links[0].remove();
                        this.op.patch.link(this.op, po.name, otherPort.op, otherPort.name);
                        redo = true;
                    }
                    break;
                }
            }

            if (!this.uiAttribs.multiPortManual)
            {
                let foundHole = true;
                while (foundHole)
                {
                    // console.log("search holes...");
                    foundHole = false;

                    for (let i = this.ports.length - 1; i > 1; i--)
                    {
                        if (this.ports[i] && this.ports[i].links.length > 0 && this.ports[i - 1].links.length == 0)
                        {
                            // console.log("found hole!");

                            // found hole
                            const otherPort = this.ports[i].links[0].getOtherPort(this.ports[i]);
                            this.ports[i].links[0].remove();

                            const po = this.ports[i - 1];

                            if (po && this.ports[i])
                            {
                                // console.log("move ", this.ports[i].name, "to", po.name);
                                this.op.patch.link(this.op, po.name, otherPort.op, otherPort.name);
                                foundHole = true;
                                redo = true;
                                break;
                            }
                        }
                    }

                    // this.checkNum();
                }

                // this.removeInvalidPorts();
            }

            if (!this.uiAttribs.multiPortManual) // if auto
            {
                while (this.ports.length > MIN_NUM_PORTS && !this.ports[this.ports.length - 1].isLinked() && !this.ports[this.ports.length - 2].isLinked())
                {
                    let i = this.ports.length - 1;
                    if (!this.ports[i].isLinked() && this.ports[i - 1] && !this.ports[i - 1].isLinked())
                    {
                        this.ports[i].setUiAttribs({ "removed": true });
                        this.ports[i].remove();
                        // this.ports[i] = null;
                        this.ports.splice(i, 1);
                    }
                }
            }

            this.removeInvalidPorts();

            if (!this.uiAttribs.multiPortManual && this.ports.length > 0 && this.ports[this.ports.length - 1].isLinked()) this.newPort();

            updateArray();
            updateUi();

            if (redo) this.countPorts();
            else this.addListeners();
        };

        this.removeListeners = () =>
        {
            for (let i = 0; i < this.ports.length; i++)
            {
                const po = this.ports[i];
                if (po.multiPortChangeListener) po.multiPortChangeListener = po.off(po.multiPortChangeListener);
                if (po.multiLinkChangeListener) po.multiLinkChangeListener = po.off(po.multiLinkChangeListener);
            }
        };

        this.addListeners = () =>
        {
            for (let i = 0; i < this.ports.length; i++)
            {
                const po = this.ports[i];
                const idx = i;

                if (po.multiPortChangeListener)po.multiPortChangeListener = po.off(po.multiPortChangeListener);
                po.multiPortChangeListener = po.on("change", updateArray.bind(this));

                if (po.multiPortTriggerListener)po.multiPortTriggerListener = po.off(po.multiPortTriggerListener);
                po.multiPortTriggerListener = po.on("trigger", () => { this._onTriggered(idx); });

                if (po.multiLinkChangeListener)po.multiLinkChangeListener = po.off(po.multiLinkChangeListener);
                po.multiLinkChangeListener = po.on("onLinkChanged", () =>
                {
                    this.countPorts();
                    this.emitEvent("onLinkChanged");
                });

                if (po.multiLinkRemoveListener)po.multiLinkRemoveListener = po.off(po.multiLinkRemoveListener);
                po.multiLinkRemoveListener = po.on("onLinkRemoved", () =>
                {
                    // this.removeInvalidPorts();
                    // this.checkNum();
                    // this.countPorts();
                    updateUi();
                    this.emitEvent("onLinkChanged");
                    // this.countPorts.bind(this);
                });
            }
        };

        this.newPort = () =>
        {
            const attrs = {};
            // if (type == CABLES.OP_PORT_TYPE_STRING) attrs.type = "string";
            attrs.type = type;
            const po = new Port(this.op, name + "_" + this.ports.length, type, attrs);

            po.direction = dir;
            this.ports.push(po);
            // console.log("CONSTANTS.PORT_DIR_OUT", CONSTANTS.PORT.PORT_DIR_OUT, this.direction);
            if (this.direction == CONSTANTS.PORT.PORT_DIR_OUT) this.op.addOutPort(po);
            else this.op.addInPort(po);

            if (type == Port.TYPE_NUMBER) po.setInitialValue(0);
            else if (type == Port.TYPE_STRING) po.setInitialValue("");

            this.addListeners();

            updateUi();
            updateArray();
            this.emitEvent("onLinkChanged");
            // console.log("this.op.preservedPortTitles", this.op.preservedPortTitles, this.op.preservedPortTitles[po.name], po.name);
            if (this.op.preservedPortTitles && this.op.preservedPortTitles[po.name]) po.setUiAttribs({ "title": this.op.preservedPortTitles[po.name] });

            return po;
        };

        this.initPorts = () =>
        {
            for (let i = 0; i < MIN_NUM_PORTS; i++) this.newPort();
            updateArray();
            updateUi();
        };

        this.checkNum = () =>
        {
            this.uiAttribs.multiPortNum = Math.max(MIN_NUM_PORTS, this.uiAttribs.multiPortNum);

            while (this.ports.length < this.uiAttribs.multiPortNum) this.newPort();
            while (this.ports.length > this.uiAttribs.multiPortNum) if (this.ports[this.ports.length - 1]) this.ports.pop().remove();

            this.removeInvalidPorts();
        };

        this.incDec = (incDir) =>
        {
            this.uiAttribs.multiPortNum = this.uiAttribs.multiPortNum || MIN_NUM_PORTS;
            // console.log("this.uiAttribs.multiPortNum", this.uiAttribs.multiPortNum, this.uiAttribs.multiPortNum + incDir);
            this.setUiAttribs({ "multiPortNum": this.uiAttribs.multiPortNum + incDir });
            this.checkNum();

            updateUi();
        };

        this.toggleManual = () =>
        {
            this.setUiAttribs({ "multiPortManual": !this.uiAttribs.multiPortManual });
            this.op.refreshParams();
        };

        this.on("onUiAttrChange", (attribs) =>
        {
            if (attribs.hasOwnProperty("multiPortManual"))
            {
                updateUi();
                this.removeInvalidPorts();
                this.checkNum();
                this.countPorts();
                updateUi();
            }
        });

        this.on("onUiAttrChange", this.checkNum.bind(this));
        this.checkNum();
        this.countPorts();
        this.removeInvalidPorts();
        updateUi();
    }
}

;// CONCATENATED MODULE: ./src/core/cg/cg_texture.js
const DEFAULT_TEXTURE_SIZE = 8;

/**
 * @typedef {Object} CglTextureOptions
 * @property {number} [width]
 * @property {number} [height]
 * @property {string} [pixelformat]
 */
class CgTexture
{

    /**
     * @param {CglTextureOptions} options={}
     */
    constructor(options = {})
    {
        this.id = CABLES.uuid();
        this.width = 0;
        this.height = 0;
        this.name = "unknown";

        options = options || {};
        this.pixelFormat = options.pixelFormat || CgTexture.PFORMATSTR_RGBA8UB;

        this.name = options.name || "unknown";

        if (!options.width) options.width = DEFAULT_TEXTURE_SIZE;
        if (!options.height) options.height = DEFAULT_TEXTURE_SIZE;
    }
}

CgTexture.getDefaultTextureData = (name, size, options = {}) =>
{
    if (name == "empty")
    {
        return new Uint8Array(size * size * 4).fill(0);
    }
    else
    if (name == "color")
    {
        const data = new Uint8Array(size * size * 4);
        let r = options.r || 1;
        let g = options.g || 1;
        let b = options.b || 1;

        for (let x = 0; x < size * size; x++)
        {
            data[x * 4 + 0] = r;
            data[x * 4 + 1] = g;
            data[x * 4 + 2] = b;
            data[x * 4 + 3] = 255;
        }
        return data;
    }
    else
    if (name == "randomUInt")
    {
        const data = new Uint8Array(size * size * 4);

        for (let x = 0; x < size * size; x++)
        {
            data[x * 4 + 0] = Math.random() * 255;
            data[x * 4 + 1] = Math.random() * 255;
            data[x * 4 + 2] = Math.random() * 255;
            data[x * 4 + 3] = 255;
        }
        return data;
    }
    else
    if (name == "random" || name == "randomFloat")
    {
        const data = new Float32Array(size * size * 4);

        for (let x = 0; x < size * size; x++)
        {
            data[x * 4 + 0] = (Math.random() - 0.5) * 2.0;
            data[x * 4 + 1] = (Math.random() - 0.5) * 2.0;
            data[x * 4 + 2] = (Math.random() - 0.5) * 2.0;
            data[x * 4 + 3] = 1;
        }
        return data;
    }
    else
    if (name == "stripes")
    {
        const arr = [];

        let r = options.r;
        let g = options.g;
        let b = options.b;

        if (r === undefined)r = 1;
        if (g === undefined)g = 1;
        if (b === undefined)b = 1;

        for (let y = 0; y < size; y++)
        {
            for (let x = 0; x < size; x++)
            {
                if ((x + y) % 64 < 32)
                {
                    arr.push((200 + (y / size) * 25 + (x / size) * 25) * r);
                    arr.push((200 + (y / size) * 25 + (x / size) * 25) * g);
                    arr.push((200 + (y / size) * 25 + (x / size) * 25) * b);
                }
                else
                {
                    arr.push((40 + (y / size) * 25 + (x / size) * 25) * r);
                    arr.push((40 + (y / size) * 25 + (x / size) * 25) * g);
                    arr.push((40 + (y / size) * 25 + (x / size) * 25) * b);
                }
                arr.push(255);
            }
        }

        return new Uint8Array(arr);
    }
    else
    {
        console.warn("unknown default texture", name);
        return CgTexture.getDefaultTextureData("stripes", size, { "r": 1, "g": 0, "b": 0 });
    }
};

CgTexture.FILTER_NEAREST = 0;
CgTexture.FILTER_LINEAR = 1;
CgTexture.FILTER_MIPMAP = 2;

CgTexture.WRAP_REPEAT = 0;
CgTexture.WRAP_MIRRORED_REPEAT = 1;
CgTexture.WRAP_CLAMP_TO_EDGE = 2;

CgTexture.TYPE_DEFAULT = 0;
CgTexture.TYPE_DEPTH = 1;
CgTexture.TYPE_FLOAT = 2;

CgTexture.PFORMATSTR_RGB565 = "RGB 5/6/5bit ubyte";

CgTexture.PFORMATSTR_R8UB = "R 8bit ubyte";
CgTexture.PFORMATSTR_RG8UB = "RG 8bit ubyte";
CgTexture.PFORMATSTR_RGB8UB = "RGB 8bit ubyte";
CgTexture.PFORMATSTR_RGBA8UB = "RGBA 8bit ubyte";

CgTexture.PFORMATSTR_SRGBA8 = "SRGBA 8bit ubyte";

CgTexture.PFORMATSTR_R11FG11FB10F = "RGB 11/11/10bit float";

CgTexture.PFORMATSTR_R16F = "R 16bit float";
CgTexture.PFORMATSTR_RG16F = "RG 16bit float";
CgTexture.PFORMATSTR_RGB16F = "RGB 16bit float";
CgTexture.PFORMATSTR_RGBA16F = "RGBA 16bit float";

CgTexture.PFORMATSTR_R32F = "R 32bit float";
CgTexture.PFORMATSTR_RG32F = "RG 32bit float";
CgTexture.PFORMATSTR_RGB32F = "RGB 32bit float";
CgTexture.PFORMATSTR_RGBA32F = "RGBA 32bit float";

CgTexture.PFORMATSTR_DEPTH = "DEPTH";

CgTexture.PIXELFORMATS = [

    CgTexture.PFORMATSTR_RGB565,

    CgTexture.PFORMATSTR_R8UB,
    CgTexture.PFORMATSTR_RG8UB,
    CgTexture.PFORMATSTR_RGB8UB,
    CgTexture.PFORMATSTR_RGBA8UB,

    CgTexture.PFORMATSTR_SRGBA8,

    CgTexture.PFORMATSTR_R11FG11FB10F,
    CgTexture.PFORMATSTR_R16F,
    CgTexture.PFORMATSTR_RG16F,
    CgTexture.PFORMATSTR_RGBA16F,

    CgTexture.PFORMATSTR_R32F,
    CgTexture.PFORMATSTR_RGBA32F

];

;// CONCATENATED MODULE: ./src/core/cgl/cgl_texture.js





const cgl_texture_DEFAULT_TEXTURE_SIZE = 8;

const log = new Logger("cgl_texture");

/**
 * A Texture
 * @namespace external:CGL
 * @class
 * @param {CglContext} __cgl cgl
 * @param {Object} options
 * @hideconstructor
 * @example
 * // generate a 256x256 pixel texture of random colors
 * const size=256;
 * const data = new Uint8Array(size*size*4);
 *
 * for(var x=0;x<size*size*4;x++) data[ x*4+3]=255;
 *
 * const tex=new CGL.Texture(cgl);
 * tex.initFromData(data,size,size,CGL.Texture.FILTER_NEAREST,CGL.Texture.WRAP_REPEAT);
 */
class Texture extends CgTexture
{

    /**
     * @param {CglContext} __cgl
     */
    constructor(__cgl, options = {})
    {
        super(options);
        if (!__cgl) throw new Error("no cgl");

        this._cgl = __cgl;
        this._log = new Logger("tex");
        this.tex = this._cgl.gl.createTexture();
        this.loading = false;
        this.flip = true;
        this.flipped = false;
        this.shadowMap = false;
        this.deleted = false;
        this.image = null;
        this.anisotropic = 0;
        this.filter = Texture.FILTER_NEAREST;
        this.wrap = Texture.WRAP_CLAMP_TO_EDGE;
        this.texTarget = this._cgl.gl.TEXTURE_2D;
        if (options && options.type) this.texTarget = options.type;
        this.textureType = Texture.TYPE_DEFAULT;
        this.unpackAlpha = true;
        this._fromData = true;

        this._glDataType = -1;
        this._glInternalFormat = -1;
        this._glDataFormat = -1;

        if (options)
        {
            if (options.isDepthTexture) this.textureType = Texture.TYPE_DEPTH;
            if (options.isFloatingPointTexture === true) this.textureType = Texture.TYPE_FLOAT;

            if ("textureType" in options) this.textureType = options.textureType;
            if ("filter" in options) this.filter = options.filter;
            if ("wrap" in options) this.wrap = options.wrap;
            if ("unpackAlpha" in options) this.unpackAlpha = options.unpackAlpha;
            if ("flip" in options) this.flip = options.flip;
            if ("shadowMap" in options) this.shadowMap = options.shadowMap;
            if ("anisotropic" in options) this.anisotropic = options.anisotropic;
        }
        else
        {
            options = {};
        }

        if (!options.pixelFormat && options.isFloatingPointTexture) this.pixelFormat = Texture.PFORMATSTR_RGBA32F;

        if (this.textureType == Texture.TYPE_DEPTH) this.pixelFormat = Texture.PFORMATSTR_DEPTH;

        this._cgl.profileData.profileTextureNew++;

        this.setFormat(Texture.setUpGlPixelFormat(this._cgl, this.pixelFormat));
        this._cgl.profileData.addHeavyEvent("texture created", this.name, options.width + "x" + options.height);

        this.setSize(options.width, options.height);
        this.getInfoOneLine();
    }

    isFloatingPoint()
    {
        return Texture.isPixelFormatFloat(this.pixelFormat);
    }

    /**
     * returns true if otherTexture has same options (width/height/filter/wrap etc)
     * @function compareSettings
     * @memberof Texture
     * @instance
     * @param {Texture} tex otherTexture
     * @returns {Boolean}
     */
    compareSettings(tex)
    {
    // if (!tex) { this._log.warn("compare: no tex"); return false; }
    // if (tex.width != this.width) this._log.warn("tex.width not equal", tex.width, this.width);
    // if (tex.height != this.height) this._log.warn("tex.height not equal", tex.height, this.height);
    // if (tex.filter != this.filter) this._log.warn("tex.filter not equal");
    // if (tex.wrap != this.wrap) this._log.warn("tex.wrap not equal");
    // if (tex.textureType != this.textureType) this._log.warn("tex.textureType not equal");
    // if (tex.unpackAlpha != this.unpackAlpha) this._log.warn("tex.unpackAlpha not equal");
    // if (tex.anisotropic != this.anisotropic) this._log.warn("tex.anisotropic not equal");
    // if (tex.shadowMap != this.shadowMap) this._log.warn("tex.shadowMap not equal");
    // if (tex.texTarget != this.texTarget) this._log.warn("tex.texTarget not equal");
    // if (tex.flip != this.flip) this._log.warn("tex.flip not equal");

        if (!tex) return false;
        return (
            tex.width == this.width &&
            tex.height == this.height &&
            tex.filter == this.filter &&
            tex.wrap == this.wrap &&
            tex.textureType == this.textureType &&
            tex.unpackAlpha == this.unpackAlpha &&
            tex.anisotropic == this.anisotropic &&
            tex.shadowMap == this.shadowMap &&
            tex.texTarget == this.texTarget &&
            tex.flip == this.flip
        );
    }

    /**
     * returns a new texture with the same settings (does not copy texture itself)
     * @function clone
     * @memberof Texture
     * @instance
     * @returns {Texture}
     */
    clone()
    {
        const newTex = new Texture(this._cgl, {
            "name": this.name,
            "filter": this.filter,
            "anisotropic": this.anisotropic,
            "wrap": this.wrap,
            "textureType": this.textureType,
            "pixelFormat": this.pixelFormat,
            "unpackAlpha": this.unpackAlpha,
            "flip": this.flip,
            "width": this.width,
            "height": this.height,
        });

        this._cgl.profileData.addHeavyEvent("texture created", this.name, this.width + "x" + this.height);

        if (!this.compareSettings(newTex))
        {
            this._log.error("Cloned texture settings do not compare!");
            this._log.error(this);
            this._log.error(newTex);
        }

        return newTex;
    }

    /**
     * @param {object} o
     */
    setFormat(o)
    {
        this.pixelFormat = o.pixelFormat;
        this._glDataFormat = o.glDataFormat;
        this._glInternalFormat = o.glInternalFormat;
        this._glDataType = o.glDataType;
    }

    /**
     * set pixel size of texture
     * @function setSize
     * @memberof Texture
     * @instance
     * @param {Number} w width
     * @param {Number} h height
     */
    setSize(w, h)
    {
        if (this._cgl.aborted) return;
        if (w != w || w <= 0 || !w) w = cgl_texture_DEFAULT_TEXTURE_SIZE;
        if (h != h || h <= 0 || !h) h = cgl_texture_DEFAULT_TEXTURE_SIZE;

        if (w > this._cgl.maxTexSize || h > this._cgl.maxTexSize) this._log.error("texture size too big! " + w + "x" + h + " / max: " + this._cgl.maxTexSize);

        w = Math.min(w, this._cgl.maxTexSize);
        h = Math.min(h, this._cgl.maxTexSize);

        w = Math.floor(w);
        h = Math.floor(h);
        if (this.width == w && this.height == h) return;

        w = this._cgl.checkTextureSize(w);
        h = this._cgl.checkTextureSize(h);

        this.width = w;
        this.height = h;
        this.deleted = false;

        this.setFormat(Texture.setUpGlPixelFormat(this._cgl, this.pixelFormat));

        this.shortInfoString = this.getInfoOneLine();// w + "x" + h + "";

        this._cgl.gl.bindTexture(this.texTarget, this.tex);
        this._cgl.profileData.profileTextureResize++;

        const uarr = null;

        this._cgl.gl.texImage2D(this.texTarget, 0, this._glInternalFormat, w, h, 0, this._glDataFormat, this._glDataType, uarr);

        this._setFilter();

        this.updateMipMap();

        this._cgl.gl.bindTexture(this.texTarget, null);
    }

    /**
     * @function initFromData
     * @memberof Texture
     * @instance
     * @description create texturem from rgb data
     * @param {Array<Number>} data rgb color array [r,g,b,a,r,g,b,a,...]
     * @param {Number} w width
     * @param {Number} h height
     * @param {Number} filter
     * @param {Number} wrap
     */
    initFromData(data, w, h, filter, wrap)
    {
        this.filter = filter;
        this.wrap = wrap;
        if (filter == undefined) this.filter = Texture.FILTER_LINEAR;
        if (wrap == undefined) this.wrap = Texture.WRAP_CLAMP_TO_EDGE;
        this.width = w;
        this.height = h;
        this._fromData = true;
        this.deleted = false;

        if (this.height > this._cgl.maxTexSize || this.width > this._cgl.maxTexSize)
        {
            const t = CGL.Texture.getTempTexture(this._cgl);
            this.width = t.width;
            this.height = t.height;
            this.tex = t.tex;
            this._log.warn("[cgl_texture] texture size too big!", this.width, this.height, this._cgl.maxTexSize);
            return;
        }

        if (this.flip) this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, this.flip);

        this._cgl.gl.bindTexture(this.texTarget, this.tex);

        this.setFormat(Texture.setUpGlPixelFormat(this._cgl, this.pixelFormat));

        this._cgl.gl.texImage2D(this.texTarget, 0, this._glInternalFormat, w, h, 0, this._glDataFormat, this._glDataType, data);

        this._setFilter();
        this.updateMipMap();

        if (this.flip) this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, false);
        this._cgl.gl.bindTexture(this.texTarget, null);
    }

    updateMipMap()
    {
        if ((this._cgl.glVersion == 2 || this.isPowerOfTwo()) && this.filter == Texture.FILTER_MIPMAP)
        {
            this._cgl.gl.generateMipmap(this.texTarget);
            this._cgl.profileData.profileGenMipMap++;
        }
    }

    /**
     * set texture data from an image/canvas object
     * @function initTexture
     * @memberof Texture
     * @instance
     * @param {Object} img image
     * @param {Number} filter
     */
    initTexture(img, filter = null)
    {
        this._cgl.printError("before initTexture");
        this._cgl.checkFrameStarted("texture inittexture");
        this._fromData = false;

        this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.unpackAlpha);
        if (img.width || img.videoWidth) this.width = img.videoWidth || img.width;
        if (img.height || img.videoHeight) this.height = img.videoHeight || img.height;

        if (filter !== null) this.filter = filter; // todo: can we remove this filter param?

        if (img.height > this._cgl.maxTexSize || img.width > this._cgl.maxTexSize)
        {
            const t = CGL.Texture.getTempTexture(this._cgl);
            this.width = t.width;
            this.height = t.height;
            this.tex = t.tex;
            this._log.warn("[cgl_texture] texture size too big!", img.width, img.height, this._cgl.maxTexSize);
            return;
        }

        this._cgl.gl.bindTexture(this.texTarget, this.tex);

        this.deleted = false;
        this.flipped = !this.flip;
        if (this.flipped) this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, this.flipped);

        this.setFormat(Texture.setUpGlPixelFormat(this._cgl, this.pixelFormat));

        this._cgl.gl.texImage2D(this.texTarget, 0, this._glInternalFormat, this._glDataFormat, this._glDataType, img);

        this._setFilter();
        this.updateMipMap();

        this._cgl.gl.bindTexture(this.texTarget, null);
        this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
        if (this.flipped) this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_FLIP_Y_WEBGL, false);

        this.getInfoOneLine();
        this._cgl.printError("initTexture");
    }

    /**
     * delete texture. use this when texture is no longer needed
     * @function delete
     * @memberof Texture
     * @instance
     */
    dispose()
    {
        this.delete();
    }

    delete()
    {
        if (this.loading)
        {
            // cant delete texture when still loading
            // setTimeout(this.delete.bind(this), 50);
            return;
        }

        this.deleted = true;
        this.width = 0;
        this.height = 0;
        this._cgl.profileData.profileTextureDelete++;
        this._cgl.gl.deleteTexture(this.tex);
        this.image = null;

        this.tex = null;
    }

    /**
     * @function isPowerOfTwo
     * @memberof Texture
     * @instance
     * @description return true if texture width and height are both power of two
     * @return {Boolean}
     */
    isPowerOfTwo()
    {
        return Texture.isPowerOfTwo(this.width) && Texture.isPowerOfTwo(this.height);
    }

    printInfo()
    {
        log.log(this.getInfo());
    }

    getInfoReadable()
    {
        const info = this.getInfo();
        let html = "";

        info.name = info.name.substr(0, info.name.indexOf("?rnd="));

        for (const i in info)
        {
            html += "* " + i + ":  **" + info[i] + "**\n";
        }

        return html;
    }

    getInfoOneLine()
    {
        let txt = "" + this.width + "x" + this.height;
        txt += " ";
        // if (this.textureType === CGL.Texture.TYPE_FLOAT) txt += " 32bit"; else txt += " 8bit";
        // if (this.textureType === CGL.Texture.TYPE_FLOAT) txt += " 32bit"; else txt += " 8bit";
        txt += this.pixelFormat;

        if (this.filter === Texture.FILTER_NEAREST) txt += " nearest";
        if (this.filter === Texture.FILTER_LINEAR) txt += " linear";
        if (this.filter === Texture.FILTER_MIPMAP) txt += " mipmap";

        if (this.wrap === Texture.WRAP_CLAMP_TO_EDGE) txt += " clamp";
        if (this.wrap === Texture.WRAP_REPEAT) txt += " repeat";
        if (this.wrap === Texture.WRAP_MIRRORED_REPEAT) txt += " repeatmir";

        this.shortInfoString = txt;

        return txt;
    }

    getInfoOneLineShort()
    {
        let txt = "" + this.width + "x" + this.height;
        // if (this.textureType === CGL.Texture.TYPE_FLOAT) txt += " 32bit"; else txt += " 8bit";
        txt += " ";
        txt += this.pixelFormat;

        this.shortInfoString = txt;

        return txt;
    }

    getInfo()
    {
        return Texture.getTexInfo(this);
    }

    _setFilter()
    {
        this._cgl.printError("before _setFilter");

        if (!this._fromData)
        {
            this._cgl.gl.pixelStorei(this._cgl.gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this.unpackAlpha);
        }

        if (this.shadowMap)
        {
            this._cgl.gl.texParameteri(this._cgl.gl.TEXTURE_2D, this._cgl.gl.TEXTURE_COMPARE_MODE, this._cgl.gl.COMPARE_REF_TO_TEXTURE);
            this._cgl.gl.texParameteri(this._cgl.gl.TEXTURE_2D, this._cgl.gl.TEXTURE_COMPARE_FUNC, this._cgl.gl.LEQUAL);
        }

        if (this.textureType == Texture.TYPE_FLOAT && this.filter == Texture.FILTER_MIPMAP)
        {
            this.filter = Texture.FILTER_LINEAR;
            this._log.stack("texture: HDR and mipmap filtering at the same time is not possible");
        }

        if (this._cgl.glVersion == 1 && !this.isPowerOfTwo())
        {
            this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MAG_FILTER, this._cgl.gl.NEAREST);
            this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MIN_FILTER, this._cgl.gl.NEAREST);

            this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_S, this._cgl.gl.CLAMP_TO_EDGE);
            this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_T, this._cgl.gl.CLAMP_TO_EDGE);

            this.filter = Texture.FILTER_NEAREST;
            this.wrap = Texture.WRAP_CLAMP_TO_EDGE;
        }
        else
        {
            if (this.wrap == Texture.WRAP_CLAMP_TO_EDGE)
            {
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_S, this._cgl.gl.CLAMP_TO_EDGE);
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_T, this._cgl.gl.CLAMP_TO_EDGE);
            }
            else if (this.wrap == Texture.WRAP_REPEAT)
            {
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_S, this._cgl.gl.REPEAT);
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_T, this._cgl.gl.REPEAT);
            }
            else if (this.wrap == Texture.WRAP_MIRRORED_REPEAT)
            {
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_S, this._cgl.gl.MIRRORED_REPEAT);
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_WRAP_T, this._cgl.gl.MIRRORED_REPEAT);
            }

            if (this.filter == Texture.FILTER_NEAREST)
            {
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MAG_FILTER, this._cgl.gl.NEAREST);
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MIN_FILTER, this._cgl.gl.NEAREST);
            }
            else if (this.filter == Texture.FILTER_LINEAR)
            {
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MIN_FILTER, this._cgl.gl.LINEAR);
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MAG_FILTER, this._cgl.gl.LINEAR);
            }
            else if (this.filter == Texture.FILTER_MIPMAP)
            {
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MAG_FILTER, this._cgl.gl.LINEAR);
                this._cgl.gl.texParameteri(this.texTarget, this._cgl.gl.TEXTURE_MIN_FILTER, this._cgl.gl.LINEAR_MIPMAP_LINEAR);
            }
            else
            {
                this._log.log("unknown texture filter!", this.filter);
                throw new Error("unknown texture filter!" + this.filter);
            }

            if (this.anisotropic)
            {
                const ext = this._cgl.enableExtension("EXT_texture_filter_anisotropic");

                if (this._cgl.maxAnisotropic)
                {
                    const aniso = Math.min(this._cgl.maxAnisotropic, this.anisotropic);
                    this._cgl.gl.texParameterf(this._cgl.gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, aniso);
                }
            }
        }
        this.getInfoOneLine();
        this._cgl.printError("_setFilter");
    }
}

/**
 * @function load
 * @static
 * @memberof Texture
 * @description load an image from an url
 * @param {CglContext} cgl
 * @param {String} url
 * @param {Function} finishedCallback
 * @param {Object} settings
 * @return {Texture}
 */
Texture.load = function (cgl, url, finishedCallback, settings)
{
    if (!url) return finishedCallback({ "error": true });
    let loadingId = null;
    if (!cgl.patch.loading.existByName(url)) loadingId = cgl.patch.loading.start("cgl.texture", url);

    const texture = new Texture(cgl);
    texture.name = url;

    texture.image = new Image();
    texture.image.crossOrigin = "anonymous";
    texture.loading = true;

    if (settings && settings.hasOwnProperty("filter")) texture.filter = settings.filter;
    if (settings && settings.hasOwnProperty("flip")) texture.flip = settings.flip;
    if (settings && settings.hasOwnProperty("wrap")) texture.wrap = settings.wrap;
    if (settings && settings.hasOwnProperty("anisotropic")) texture.anisotropic = settings.anisotropic;
    if (settings && settings.hasOwnProperty("unpackAlpha")) texture.unpackAlpha = settings.unpackAlpha;
    if (settings && settings.hasOwnProperty("pixelFormat")) texture.pixelFormat = settings.pixelFormat;

    texture.image.onabort = texture.image.onerror = (e) =>
    {
        console.warn("[cgl.texture.load] error loading texture", url, e);
        texture.loading = false;
        if (loadingId) cgl.patch.loading.finished(loadingId);
        const error = { "error": true };
        if (finishedCallback) finishedCallback(error, texture);
    };

    texture.image.onload = function (e)
    {
        cgl.addNextFrameOnceCallback(() =>
        {
            texture.initTexture(texture.image);
            if (loadingId) cgl.patch.loading.finished(loadingId);
            texture.loading = false;

            if (finishedCallback) finishedCallback(null, texture);
        });
    };
    texture.image.src = url;

    return texture;
};

/**
 * @static
 * @function getTempTexture
 * @memberof Texture
 * @description returns the default temporary texture (grey diagonal stipes)
 // * @param {CglContext} cgl
 * @return {Texture}
 */
Texture.getTempTexture = function (cgl)
{
    if (!cgl) console.error("[getTempTexture] no cgl!");
    if (!cgl.tempTexture) cgl.tempTexture = Texture.getTemporaryTexture(cgl, 256, Texture.FILTER_LINEAR, Texture.REPEAT);
    return cgl.tempTexture;
};

/**
 * @static
 * @function getErrorTexture
 * @memberof Texture
 * @description returns the default temporary texture (grey diagonal stipes)
 * @param {CglContext} cgl
 * @return {Texture}
 */
Texture.getErrorTexture = function (cgl)
{
    if (!cgl) console.error("[getTempTexture] no cgl!");
    if (!cgl.errorTexture) cgl.errorTexture = Texture.getTemporaryTexture(cgl, 256, Texture.FILTER_LINEAR, Texture.REPEAT, 1, 0.2, 0.2);
    return cgl.errorTexture;
};

/**
 * @function getEmptyTexture
 * @memberof Texture
 * @instance
 * @param cgl
 * @param fp
 * @description returns a reference to a small empty (transparent) texture
 * @return {Texture}
 */
Texture.getEmptyTexture = function (cgl, fp)
{
    if (fp) return Texture.getEmptyTextureFloat(cgl);
    if (!cgl) console.error("[getEmptyTexture] no cgl!");
    if (cgl.tempTextureEmpty) return cgl.tempTextureEmpty;

    let size = 8;

    cgl.tempTextureEmpty = new Texture(cgl, { "name": "emptyTexture" });
    const data = Texture.getDefaultTextureData("empty", size);

    cgl.tempTextureEmpty.initFromData(data, size, size, Texture.FILTER_NEAREST, Texture.WRAP_REPEAT);

    return cgl.tempTextureEmpty;
};

/**
 * @function getEmptyTextureFloat
 * @memberof Texture
 * @instance
 * @param cgl
 * @description returns a reference to a small empty (transparent) 32bit texture
 * @return {Texture}
 */
Texture.getEmptyTextureFloat = function (cgl)
{
    if (!cgl) console.error("[getEmptyTextureFloat] no cgl!");
    if (cgl.tempTextureEmptyFloat) return cgl.tempTextureEmptyFloat;

    cgl.tempTextureEmptyFloat = new Texture(cgl, { "name": "emptyTexture", "isFloatingPointTexture": true });
    const data = new Float32Array(8 * 8 * 4).fill(1);
    for (let i = 0; i < 8 * 8 * 4; i += 4) data[i + 3] = 0;

    cgl.tempTextureEmptyFloat.initFromData(data, 8, 8, Texture.FILTER_NEAREST, Texture.WRAP_REPEAT);

    return cgl.tempTextureEmptyFloat;
};

/**
 * @function getRandomTexture
 * @memberof Texture
 * @static
 * @param cgl
 * @description returns a reference to a random texture
 * @return {Texture}
 */
Texture.getRandomTexture = function (cgl)
{
    if (!cgl) console.error("[getRandomTexture] no cgl!");
    if (cgl.randomTexture) return cgl.randomTexture;

    const size = 256;
    const data = Texture.getDefaultTextureData("randomUInt", size);

    cgl.randomTexture = new Texture(cgl);
    cgl.randomTexture.initFromData(data, size, size, Texture.FILTER_NEAREST, Texture.WRAP_REPEAT);

    return cgl.randomTexture;
};

/**
 * @function getRandomFloatTexture
 * @memberof Texture
 * @static
 * @param cgl
 * @description returns a reference to a texture containing random numbers between -1 and 1
 * @return {Texture}
 */
Texture.getRandomFloatTexture = function (cgl)
{
    if (!cgl) console.error("[getRandomTexture] no cgl!");
    if (cgl.getRandomFloatTexture) return cgl.getRandomFloatTexture;

    const size = 256;
    const data = Texture.getDefaultTextureData("randomFloat", size);

    cgl.getRandomFloatTexture = new Texture(cgl, { "isFloatingPointTexture": true });
    cgl.getRandomFloatTexture.initFromData(data, size, size, Texture.FILTER_NEAREST, Texture.WRAP_REPEAT);

    return cgl.getRandomFloatTexture;
};

/**
 * @function getBlackTexture
 * @memberof Texture
 * @static
 * @param {CglContext} cgl
 * @description returns a reference to a black texture
 * @return {Texture}
 */
Texture.getBlackTexture = function (cgl)
{
    if (cgl.blackTexture) return cgl.blackTexture;

    const size = 8;
    const data = Texture.getDefaultTextureData("color", size, { "r": 0, "g": 0, "b": 0 });

    cgl.blackTexture = new Texture(cgl);
    cgl.blackTexture.initFromData(data, size, size, Texture.FILTER_NEAREST, Texture.WRAP_REPEAT);

    return cgl.blackTexture;
};

/**
 * @function getEmptyCubemapTexture
 * @memberof Texture
 * @static
 * @param cgl
 * @description returns an empty cubemap texture with rgba = [0, 0, 0, 0]
 * @return {Texture}
 */
Texture.getEmptyCubemapTexture = function (cgl)
{
    const faces = [
        cgl.gl.TEXTURE_CUBE_MAP_POSITIVE_X,
        cgl.gl.TEXTURE_CUBE_MAP_NEGATIVE_X,
        cgl.gl.TEXTURE_CUBE_MAP_POSITIVE_Y,
        cgl.gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,
        cgl.gl.TEXTURE_CUBE_MAP_POSITIVE_Z,
        cgl.gl.TEXTURE_CUBE_MAP_NEGATIVE_Z
    ];

    const tex = cgl.gl.createTexture();
    const target = cgl.gl.TEXTURE_CUBE_MAP;
    const filter = Texture.FILTER_NEAREST;
    const wrap = Texture.WRAP_CLAMP_TO_EDGE;
    const width = 8;
    const height = 8;

    cgl.profileData.profileTextureNew++;

    cgl.gl.bindTexture(target, tex);
    cgl.profileData.profileTextureResize++;

    for (let i = 0; i < 6; i += 1)
    {
        const data = new Uint8Array(8 * 8 * 4);

        cgl.gl.texImage2D(faces[i], 0, cgl.gl.RGBA, 8, 8, 0, cgl.gl.RGBA, cgl.gl.UNSIGNED_BYTE, data);
        cgl.gl.texParameteri(target, cgl.gl.TEXTURE_MAG_FILTER, cgl.gl.NEAREST);
        cgl.gl.texParameteri(target, cgl.gl.TEXTURE_MIN_FILTER, cgl.gl.NEAREST);

        cgl.gl.texParameteri(target, cgl.gl.TEXTURE_WRAP_S, cgl.gl.CLAMP_TO_EDGE);
        cgl.gl.texParameteri(target, cgl.gl.TEXTURE_WRAP_T, cgl.gl.CLAMP_TO_EDGE);
    }

    cgl.gl.bindTexture(target, null);

    return {
        "id": CABLES.uuid(),
        "tex": tex,
        "cubemap": tex,
        "width": width,
        "height": height,
        "filter": filter,
        "wrap": wrap,
        "unpackAlpha": true,
        "flip": true,
        "_fromData": true,
        "name": "emptyCubemapTexture",
        "anisotropic": 0,
    };
};

Texture.getTempGradientTexture = function (cgl) // deprecated...
{
    if (!cgl) console.error("[getTempGradientTexture] no cgl!");
    return Texture.getTempTexture(cgl);
};

Texture.getTemporaryTexture = function (cgl, size, filter, wrap, r, g, b)
{
    const data = Texture.getDefaultTextureData("stripes", 256, { "r": r, "g": g, "b": b });
    const temptex = new Texture(cgl);
    temptex.initFromData(data, size, size, filter, wrap);
    return temptex;
};

/**
 * @static
 * @function createFromImage
 * @memberof Texture
 * @description create texturem from image data (e.g. image or canvas)
 * @param {CglContext} cgl
 * @param {Object} img image
 * @param {Object} options
 */
Texture.createFromImage = function (cgl, img, options)
{
    options = options || {};
    const texture = new Texture(cgl, options);
    texture.flip = false;
    texture.image = img;
    texture.width = img.videoWidth || img.width || 8;
    texture.height = img.videoHeight || img.height || 8;
    if (options.hasOwnProperty("wrap"))texture.wrap = options.wrap;

    texture.initTexture(img, options.filter);

    return texture;
};

// deprecated!
Texture.fromImage = function (cgl, img, filter, wrap)
{
    console.error("deprecated texture from image...");

    const texture = new Texture(cgl);
    texture.flip = false;
    if (filter) texture.filter = filter;
    if (wrap) texture.wrap = wrap;
    texture.image = img;
    texture.initTexture(img);
    return texture;
};

/**
 * @static
 * @function isPowerOfTwo
 * @memberof Texture
 * @description returns true if x is power of two
 * @param {Number} x
 * @return {Boolean}
 */
Texture.isPowerOfTwo = function (x)
{
    return x == 1 || x == 2 || x == 4 || x == 8 || x == 16 || x == 32 || x == 64 || x == 128 || x == 256 || x == 512 || x == 1024 || x == 2048 || x == 4096 || x == 8192 || x == 16384;
};

Texture.getTexInfo = function (tex)
{
    const obj = {};

    obj.name = tex.name;
    obj["power of two"] = tex.isPowerOfTwo();
    obj.size = tex.width + " x " + tex.height;

    let targetString = tex.texTarget;
    if (tex.texTarget == tex._cgl.gl.TEXTURE_2D) targetString = "TEXTURE_2D";
    obj.target = targetString;

    obj.unpackAlpha = tex.unpackAlpha;

    if (tex.cubemap)obj.cubemap = true;

    if (tex.textureType == Texture.TYPE_FLOAT) obj.textureType = "TYPE_FLOAT";
    if (tex.textureType == Texture.TYPE_HALF_FLOAT) obj.textureType = "TYPE_HALF_FLOAT";
    else if (tex.textureType == Texture.TYPE_DEPTH) obj.textureType = "TYPE_DEPTH";
    else if (tex.textureType == Texture.TYPE_DEFAULT) obj.textureType = "TYPE_DEFAULT";
    else obj.textureType = "UNKNOWN " + this.textureType;

    if (tex.wrap == Texture.WRAP_CLAMP_TO_EDGE) obj.wrap = "CLAMP_TO_EDGE";
    else if (tex.wrap == Texture.WRAP_REPEAT) obj.wrap = "WRAP_REPEAT";
    else if (tex.wrap == Texture.WRAP_MIRRORED_REPEAT) obj.wrap = "WRAP_MIRRORED_REPEAT";
    else obj.wrap = "UNKNOWN";

    if (tex.filter == Texture.FILTER_NEAREST) obj.filter = "FILTER_NEAREST";
    else if (tex.filter == Texture.FILTER_LINEAR) obj.filter = "FILTER_LINEAR";
    else if (tex.filter == Texture.FILTER_MIPMAP) obj.filter = "FILTER_MIPMAP";
    else obj.filter = "UNKNOWN";

    obj.pixelFormat = tex.pixelFormat || "unknown";

    return obj;
};

Texture.setUpGlPixelFormat = function (cgl, pixelFormatStr)
{
    const o = {};

    if (!pixelFormatStr)
    {
        cgl._log.error("no pixelformatstr!");
        cgl._log.log(new Error());
        pixelFormatStr = Texture.PFORMATSTR_RGBA8UB;
    }

    o.pixelFormatBase = pixelFormatStr;
    o.pixelFormat = pixelFormatStr;
    o.glDataType = cgl.gl.UNSIGNED_BYTE;
    o.glInternalFormat = cgl.gl.RGBA8;
    o.glDataFormat = cgl.gl.RGBA;

    let floatDatatype = cgl.gl.FLOAT;

    if (cgl.glUseHalfFloatTex)
    {
        if (pixelFormatStr == Texture.PFORMATSTR_RGBA32F) pixelFormatStr = Texture.PFORMATSTR_RGBA16F;
        if (pixelFormatStr == Texture.PFORMATSTR_RG32F) pixelFormatStr = Texture.PFORMATSTR_RG16F;
        if (pixelFormatStr == Texture.PFORMATSTR_R32F) pixelFormatStr = Texture.PFORMATSTR_R16F;
    }

    if (pixelFormatStr.includes("16bit"))
    {
        if (cgl.glVersion == 2)
        {
            // cgl.enableExtension("OES_texture_half_float");
            const hasExt = cgl.enableExtension("EXT_color_buffer_half_float");

            if (!hasExt)
            {
                console.warn("no 16bit extension, fallback to 32bit", pixelFormatStr);
                // fallback to 32 bit?
                if (pixelFormatStr == Texture.PFORMATSTR_RGBA16F) pixelFormatStr = Texture.PFORMATSTR_RGBA32F;
                if (pixelFormatStr == Texture.PFORMATSTR_RGB16F) pixelFormatStr = Texture.PFORMATSTR_RGB32F;
                if (pixelFormatStr == Texture.PFORMATSTR_RG16F) pixelFormatStr = Texture.PFORMATSTR_RG32F;
                if (pixelFormatStr == Texture.PFORMATSTR_R16F) pixelFormatStr = Texture.PFORMATSTR_R32F;
            }
            else
            {
                floatDatatype = cgl.gl.HALF_FLOAT;
            }
        }
    }

    if (cgl.glVersion == 1)
    {
        o.glInternalFormat = cgl.gl.RGBA;

        if (pixelFormatStr == Texture.PFORMATSTR_RGBA16F || pixelFormatStr == Texture.PFORMATSTR_RG16F || pixelFormatStr == Texture.PFORMATSTR_R16F)
        {
            const ext = cgl.enableExtension("OES_texture_half_float");
            if (!ext) throw new Error("no half float texture extension");

            floatDatatype = ext.HALF_FLOAT_OES;
        }
    }

    if (pixelFormatStr == Texture.PFORMATSTR_RGBA8UB)
    {
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_RGB565)
    {
        o.glInternalFormat = cgl.gl.RGB565;
        o.glDataFormat = cgl.gl.RGB;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_R8UB)
    {
        o.glInternalFormat = cgl.gl.R8;
        o.glDataFormat = cgl.gl.RED;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_RG8UB)
    {
        o.glInternalFormat = cgl.gl.RG8;
        o.glDataFormat = cgl.gl.RG;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_RGB8UB)
    {
        o.glInternalFormat = cgl.gl.RGB8;
        o.glDataFormat = cgl.gl.RGB;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_SRGBA8)
    {
        o.glInternalFormat = cgl.gl.SRGB8_ALPHA8;
    }

    else if (pixelFormatStr == Texture.PFORMATSTR_R32F)
    {
        o.glInternalFormat = cgl.gl.R32F;
        o.glDataFormat = cgl.gl.RED;
        o.glDataType = floatDatatype;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_R16F)
    {
        o.glInternalFormat = cgl.gl.R16F;
        o.glDataType = floatDatatype;
        o.glDataFormat = cgl.gl.RED;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_RG16F)
    {
        o.glInternalFormat = cgl.gl.RG16F;
        o.glDataType = floatDatatype;
        o.glDataFormat = cgl.gl.RG;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_RGBA16F)
    {
        if (cgl.glVersion == 1) o.glInternalFormat = cgl.gl.RGBA;
        else o.glInternalFormat = cgl.gl.RGBA16F;
        o.glDataType = floatDatatype;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_R11FG11FB10F)
    {
        o.glInternalFormat = cgl.gl.R11F_G11F_B10F;
        o.glDataType = floatDatatype;
        o.glDataFormat = cgl.gl.RGB;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_RGBA32F)
    {
        if (cgl.glVersion == 1) o.glInternalFormat = cgl.gl.RGBA;
        else o.glInternalFormat = cgl.gl.RGBA32F;
        o.glDataType = floatDatatype;
    }
    else if (pixelFormatStr == Texture.PFORMATSTR_DEPTH)
    {
        if (cgl.glVersion == 1)
        {
            o.glInternalFormat = cgl.gl.DEPTH_COMPONENT;
            o.glDataType = cgl.gl.UNSIGNED_SHORT;
            o.glDataFormat = cgl.gl.DEPTH_COMPONENT;
        }
        else
        {
            o.glInternalFormat = cgl.gl.DEPTH_COMPONENT32F;
            o.glDataType = cgl.gl.FLOAT;
            o.glDataFormat = cgl.gl.DEPTH_COMPONENT;
        }
    }
    else
    {
        log.log("unknown pixelformat ", pixelFormatStr);
    }

    /// //////

    if (pixelFormatStr.includes("32bit") || pixelFormatStr == Texture.PFORMATSTR_R11FG11FB10F)
    {
        if (cgl.glVersion == 2) cgl.enableExtension("EXT_color_buffer_float");
        if (cgl.glVersion == 2) cgl.enableExtension("EXT_float_blend");

        cgl.enableExtension("OES_texture_float_linear"); // yes, i am sure, this is a webgl 1 and 2 ext
    }

    o.numColorChannels = Texture.getPixelFormatNumChannels(pixelFormatStr);

    if (!o.glDataType || !o.glInternalFormat || !o.glDataFormat) log.log("pixelformat wrong ?!", pixelFormatStr, o.glDataType, o.glInternalFormat, o.glDataFormat, this);

    return o;
};

Texture.getPixelFormatNumChannels =
    (pxlFrmtStr) =>
    {
        if (pxlFrmtStr.startsWith("RGBA")) return 4;
        if (pxlFrmtStr.startsWith("RGB")) return 3;
        if (pxlFrmtStr.startsWith("RG")) return 2;
        return 1;
    };

Texture.isPixelFormatFloat =
    (pxlFrmtStr) =>
    {
        return (pxlFrmtStr || "").includes("float");
    };

Texture.isPixelFormatHalfFloat =
    (pxlFrmtStr) =>
    {
        return (pxlFrmtStr || "").includes("float") && (pxlFrmtStr || "").includes("16bit");
    };

;// CONCATENATED MODULE: ./src/core/core_op.js










/**
 * @typedef Translation
 * @property {number} [x]
 * @property {number} [y]
 */

/**
 * configuration object for loading a patch
 * @typedef OpUiAttribs
 * @property {string} [title] overwrite op title
 * @property {string} [hidePort] hidePort
 * @property {string} [title] overwrite op title
 * @property {String} [title=''] overwrite title of port (by default this is portname)
 * @property {string} [extendTitle] extended op title, shown in grey next to op name
 * @property {object} [storage] internal - do not use manualy
 * @property {boolean} [working] internal - do not use manualy
 * @property {boolean} [bookmarked] internal - do not use manualy
 * @property {boolean} [selected] internal - do not use manualy
 * @property {boolean} [disabled] internal - do not use manualy
 * @property {boolean} [loading] internal - do not use manualy
 * @property {object} [uierrors] internal - do not use manualy - use op.setUiError
 * @property {string} [color]
 * @property {object} [area]
 * @property {string} [comment]
 * @property {number} [height]
 * @property {number} [width]
 * @property {Translation} [translate]
 * @property {string} [subPatch] internal - do not use manualy - use op.setUiError
 */

/**
 * @typedef CorePatch
 * @type Patch
 */

/**
 * @template {CorePatch} Patch
 */
class Op extends Events
{
    static OP_VERSION_PREFIX = "_v";
    static EVENT_INIT = "init";
    static EVENT_UIATTR_CHANGE = "onUiAttribsChange";

    #objName = "";
    _log = new Logger("core_op");
    //    #name = "";
    #shortOpName = "";

    opId = ""; // unique op id

    /** @type {Array<Port>} */
    portsOut = [];

    /** @type {Patch} */
    patch = null;

    data = {}; // UNUSED, DEPRECATED, only left in for backwards compatibility with userops
    storage = {}; // op-specific data to be included in export

    /** @type {Array<Port>} */
    portsIn = [];
    portsInData = []; // original loaded patch data

    /** @type {OpUiAttribs} */
    uiAttribs = {};
    enabled = true;

    onAnimFrame = null;

    preservedPortTitles = {};
    preservedPortValues = {};
    preservedPortLinks = {};

    linkTimeRules = {
        "needsLinkedToWork": [],
        "needsStringToWork": [],
        "needsParentOp": null
    };

    shouldWork = {};
    hasUiErrors = 0;

    /** @type {Object} */
    uiErrors = {};
    hasAnimPort = false;

    /** @type {Port} */
    patchId = null; // will be defined by subpatchops

    /**
     * @param {Patch} _patch
     * @param {String} _objName
     * @param {String} _id=null
    */
    constructor(_patch, _objName, _id = null)
    {
        super();

        // this.#name = _objName;
        this.opId = _id;
        this.#objName = _objName;
        this.patch = _patch;

        this.#shortOpName = CABLES.getShortOpName(_objName);
        this.getTitle();

        this.id = _id || shortId(); // instance id
        this.onAddPort = null;
        this.onCreate = null;
        this.onResize = null;
        this.onLoaded = null;
        this.onDelete = null;
        this.onError = null;

        this._instances = null;

        /**
         * overwrite this to prerender shader and meshes / will be called by op `loadingStatus`
         */
        this.preRender = null;

        /**
         * overwrite this to initialize your op
         */
        this.init = null;

        /**
         * Implement to render 2d canvas based graphics from in an op - optionaly defined in op instance
         * @param {CanvasRenderingContext2D} context of canvas 2d
         * @param {Object} layer info
         * @param {number} layer.x x position on canvas
         * @param {number} layer.y y position on canvas
         * @param {number} layer.width width of canvas
         * @param {number} layer.height height of canvas
         * @param {number} layer.scale current scaling of patchfield view
         */
        this.renderVizLayer = null;
        this.checkLinkTimeWarnings = null;
    }

    isInBlueprint2() // will be overwritten in ui
    {
        return false;
    }

    get name()
    {
        return this.getTitle();
    }

    set name(n)
    {
        this.setTitle(n);
    }

    /**
     * @param {string} on
     */
    set _objName(on)
    {
        this.#objName = on;
        this._log = new Logger("op " + on);
    }

    get objName()
    {
        return this.#objName;
    }

    get shortName()
    {
        return this.#shortOpName;
    }

    /**
     * op.require
     *
     * @param {String} _name - module name
     * @returns {Object}
     */
    require(_name)
    {
        if (CABLES.platform && CABLES.StandaloneElectron && !CABLES.platform.frontendOptions.isElectron)
            this.setUiError("notstandalone", "This op will only work in cables standalone version", 3);

        return null;
    }

    checkMainloopExists()
    {
        if (!CABLES.UI) return;
        if (!this.patch.tempData.mainloopOp) this.setUiError("nomainloop", "patch should have a mainloop to use this op");
        else this.setUiError("nomainloop", null);
    }

    /** @returns {string} */
    getTitle()
    {
        if (!this.uiAttribs) return "nouiattribs" + this.shortName;

        /*
         * if ((this.uiAttribs.title === undefined || this.uiAttribs.title === "") && this.objName.indexOf("Ops.Ui.") == -1)
         *     this.uiAttribs.title = this._shortOpName;
         */

        return this.uiAttribs.title || this.#shortOpName;
    }

    /**
     * @param {string} title
     */
    setTitle(title)
    {

        /*
         * this._log.log("settitle", title);
         * this._log.log(
         *     (new Error()).stack
         * );
         */

        if (title != this.getTitle()) this._setUiAttrib({ "title": title });
    }

    /**
     * @param {Object} newAttribs
     */
    setStorage(newAttribs)
    {
        if (!newAttribs) return;
        this.storage = this.storage || {};

        let changed = false;
        for (const p in newAttribs)
        {
            if (this.storage[p] != newAttribs[p]) changed = true;
            this.storage[p] = newAttribs[p];
        }

        if (changed) this.emitEvent("onStorageChange", newAttribs);
    }

    isSubPatchOp()
    {
        if (this.patchId && this.storage) return (this.storage.subPatchVer || this.storage.blueprintVer || 0);
        return false;
    }

    /**
     * setUiAttrib
     * possible values:
     * <pre>
     * warning - warning message - showing up in op parameter panel
     * error - error message - showing up in op parameter panel
     * extendTitle - op title extension, e.g. [ + ]
     * </pre>
     // * @param {OpUiAttribs} newAttribs, e.g. {"attrib":value}
     * @example
     * op.setUiAttrib({"extendTitle":str});
     */
    setUiAttrib(newAttribs)
    {
        this._setUiAttrib(newAttribs);
    }

    /**
     * @deprecated
     * @param {OpUiAttribs} a
     */
    setUiAttribs(a)
    {
        this._setUiAttrib(a);
    }

    /**
     * @deprecated
     * @param {OpUiAttribs} a
     */
    uiAttr(a)
    {
        this._setUiAttrib(a);
    }

    /**
     * @param {OpUiAttribs} newAttribs
     */
    _setUiAttrib(newAttribs)
    {
        if (!newAttribs) return;

        if (typeof newAttribs != "object") this._log.error("op.uiAttrib attribs are not of type object");
        if (!this.uiAttribs) this.uiAttribs = {};

        let changed = false;
        let emitMove = false;
        if (
            CABLES.UI &&
            newAttribs.hasOwnProperty("translate") &&
            (
                !this.uiAttribs.translate ||
                this.uiAttribs.translate.x != newAttribs.translate.x ||
                this.uiAttribs.translate.y != newAttribs.translate.y
            )) emitMove = true;

        if (newAttribs.hasOwnProperty("title") && newAttribs.title != this.uiAttribs.title)
        {
            this.uiAttribs.title = newAttribs.title;
            changed = true;
        }

        if (newAttribs.hasOwnProperty("disabled")) this.setEnabled(!newAttribs.disabled);

        for (const p in newAttribs)
        {
            if (this.uiAttribs[p] != newAttribs[p]) changed = true;
            this.uiAttribs[p] = newAttribs[p];
        }

        if (this.uiAttribs.hasOwnProperty("selected") && this.uiAttribs.selected == false) delete this.uiAttribs.selected;

        if (changed)
        {
            this.emitEvent(Op.EVENT_UIATTR_CHANGE, newAttribs);
            this.patch.emitEvent("onUiAttribsChange", this, newAttribs);
        }

        if (emitMove) this.emitEvent("move");
    }

    getName()
    {
        // if (this.uiAttribs.name)
        // {
        //     console.log("uiattr name exist!");// otherwise delete
        //     return this.uiAttribs.name;
        // }
        return this.#shortOpName;
    }

    /**
     * @param {Port} p
     */
    addOutPort(p)
    {
        p.direction = CONSTANTS.PORT.PORT_DIR_OUT;
        p._op = this;
        this.portsOut.push(p);
        this.emitEvent("onPortAdd", p);
        return p;
    }

    hasDynamicPort()
    {
        let i = 0;
        for (i = 0; i < this.portsIn.length; i++)
        {
            if (this.portsIn[i].type == Port.TYPE_DYNAMIC) return true;
            if (this.portsIn[i].getName() == "dyn") return true;
        }
        for (i = 0; i < this.portsOut.length; i++)
        {
            if (this.portsOut[i].type == Port.TYPE_DYNAMIC) return true;
            if (this.portsOut[i].getName() == "dyn") return true;
        }

        return false;
    }

    /**
     * @param {any|Port | MultiPort} p
     */
    addInPort(p)
    {
        // if (!(p instanceof Port)) throw new Error("parameter is not a port!", p);
        // if (!(p instanceof Port) && !(p instanceof MultiPort)) throw new Error("parameter is not a port!", p);

        // console.log("a", p.constructor.name);

        p.direction = Port.DIR_IN;
        p._op = this;

        this.portsIn.push(p);
        this.emitEvent("onPortAdd", p);

        return p;
    }

    /**
     *
     * @param {string} name
     * @param {string} v
     */
    inFunction(name, v)
    {
        return this.inTrigger(name, v);
    }

    /**
     * create a trigger input port
     * @param {String} name
     * @param {String} v
     * @return {Port} created port
     *
     */
    inTrigger(name, v)
    {
        const p = this.addInPort(new Port(this, name, Port.TYPE_FUNCTION));
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * create multiple UI trigger buttons
     * @param {String} name
     * @param {Array} v
     * @return {Port} created port
     */
    inTriggerButton(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_FUNCTION, {
                "display": "button"
            })
        );
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * @param {string} name
     * @param {any} v
     */
    inUiTriggerButtons(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_FUNCTION, {
                "display": "buttons"
            })
        );
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * @deprecated
     */
    inValueFloat(name, v)
    {
        return this.inFloat(name, v);
    }

    /**
     * @deprecated
     */
    inValue(name, v)
    {
        return this.inFloat(name, v);
    }

    /**
     * create a number value input port
     * @param {String} name
     * @param {Number} v
     * @return {Port} created port
     */
    inFloat(name, v)
    {
        const p = this.addInPort(new Port(this, name, Port.TYPE_VALUE));

        p.setInitialValue(v);

        return p;
    }

    /**
     * @deprecated
     */
    inValueBool(name, v)
    {
        return this.inBool(name, v);
    }

    /**
     * create a boolean input port, displayed as a checkbox
     * @param {String} name
     * @param {Boolean|number} v
     * @return {Port} created port
     */
    inBool(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_NUMBER, {
                "display": "bool"
            })
        );

        if (v === true)v = 1;
        if (v === false)v = 0;
        p.setInitialValue(v);

        return p;
    }

    /**
     * @param {string} name
     * @param {number} type
     */
    inMultiPort(name, type)
    {
        const p = new MultiPort(
            this,
            name,
            type,
            Port.DIR_IN,
            {
                "addPort": true,
                "hidePort": true
            }
        );
        p.ignoreValueSerialize = true;

        this.addInPort(p);
        p.initPorts();

        return p;
    }

    /**
     * @param {string} name
     * @param {number} type
     */
    outMultiPort(name, type, uiAttribsPort = {})
    {
        const p = new MultiPort(
            this,
            name,
            type,
            CONSTANTS.PORT.PORT_DIR_OUT,
            {
                "display": "multiport",
                "hidePort": true
            },
            uiAttribsPort
        );
        p.ignoreValueSerialize = true;

        this.addOutPort(p);
        p.initPorts();

        return p;
    }

    /**
     * @param {string} name
     * @param {string} v
     */
    inValueString(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "type": "string"
            })
        );
        p.value = "";

        p.setInitialValue(v);
        return p;
    }

    /**
     * create a String value input port
     * @param {String} name
     * @param {String} v default value
     * @return {Port} created port
     */
    inString(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_STRING, {
                "type": "string"
            })
        );
        v = v || "";
        // p.value = v;

        p.setInitialValue(v);
        return p;
    }

    // /**
    //  * create a String value input port displayed as TextArea
    //  * @memberof Op
    //  * @param {String} name
    //  * @param {String} v default value
    //  * @return {Port} created port
    //  */
    // inValueText(name, v)
    // {
    //     const p = this.addInPort(
    //         new Port(this, name, Port.TYPE_VALUE, {
    //             "type": "string",
    //             "display": "text"
    //         })
    //     );
    //     p.value = "";

    //     p.setInitialValue(v);

    //     /*
    //      * if (v !== undefined)
    //      * {
    //      *     p.set(v);
    //      *     p.defaultValue = v;
    //      * }
    //      */
    //     return p;
    // }

    /**
     * @param {string} name
     * @param {string} v
     */
    inTextarea(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_STRING, {
                "type": "string",
                "display": "text"
            })
        );
        p.value = "";
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     * create a String value input port displayed as editor
     * @param {String} name
     * @param {String} v default value
     * @param {String} syntax language
     * @param {Boolean} hideFormatButton
     * @return {Port} created port
     */
    inStringEditor(name, v, syntax, hideFormatButton = true)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_STRING, {
                "type": "string",
                "display": "editor",
                "editShortcut": true,
                "editorSyntax": syntax,
                "hideFormatButton": hideFormatButton
            }));

        p.value = "";
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     *
     * @param {string} name
     * @param {String} v
     * @param {String} syntax
     */
    inValueEditor(name, v, syntax, hideFormatButton = true)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_NUMBER, {
                "type": "string",
                "display": "editor",
                "editorSyntax": syntax,
                "hideFormatButton": hideFormatButton
            })
        );
        p.value = "";
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     * @deprecated
     * @param {string} name
     * @param {any[]} values
     * @param {string} v
     * @param {boolean} noindex
     */
    inValueSelect(name, values, v, noindex)
    {
        return this.inDropDown(name, values, v, noindex);
    }

    /**
     * create a string select box
     * @param {String} name
     * @param {Array} values
     * @param {String} v default value
     * @return {Port} created port
     * @param {boolean} [noindex]
     */
    inDropDown(name, values, v, noindex)
    {
        let p = null;
        if (!noindex)
        {
            const indexPort = new Port(this, name + " index", Port.TYPE_NUMBER, {
                "increment": "integer",
                "hideParam": true
            });
            const n = this.addInPort(indexPort);

            if (values) for (let i = 0; i < values.length; i++) values[i] = String(values[i]);

            const valuePort = new ValueSelectPort(
                this,
                name,
                Port.TYPE_NUMBER,
                {
                    "display": "dropdown",
                    "hidePort": true,
                    "type": "string",
                    "values": values
                },
                n

            );

            valuePort.indexPort = indexPort;

            valuePort.on("change", (/** @type {any} */ val, /** @type {Port} */ thePort) =>
            {
                if (!thePort.indexPort.isLinked() && thePort.uiAttribs.values)
                {
                    const idx = thePort.uiAttribs.values.indexOf(val);
                    if (idx > -1) thePort.indexPort.set(idx);
                }
            });

            indexPort.onLinkChanged = () =>
            {
                valuePort.setUiAttribs({ "greyout": indexPort.isLinked() });
            };

            p = this.addInPort(valuePort);

            if (v !== undefined)
            {
                p.set(v);
                const index = values.findIndex((item) => { return item == v; });
                n.setValue(index);
                p.defaultValue = v;
                n.defaultValue = index;
            }
        }
        else
        {
            const valuePort = new Port(this, name, Port.TYPE_VALUE, {
                "display": "dropdown",
                "hidePort": true,
                "type": "string",
                "values": values
            });

            p = this.addInPort(valuePort);
        }

        return p;
    }

    /**
     * create a string switch box
     * @param {String} name
     * @param {Array} values
     * @param {String} v default value
     * @param {boolean} noindex
     * @return {Port} created port
     */
    inSwitch(name, values, v, noindex)
    {
        let p = null;
        if (!noindex)
        {
            if (!v)v = values[0];
            const indexPort = new Port(this, name + " index", Port.TYPE_VALUE, {
                "increment": "integer",
                "values": values,
                "hideParam": true
            });
            const n = this.addInPort(indexPort);

            if (values) for (let i = 0; i < values.length; i++) values[i] = String(values[i]);

            const switchPort = new SwitchPort(
                this,
                name,
                Port.TYPE_STRING,
                {
                    "display": "switch",
                    "hidePort": true,
                    "type": "string",
                    "values": values
                },
                n
            );

            switchPort.indexPort = indexPort;

            switchPort.on("change", (val, thePort) =>
            {
                if (!thePort.indexPort.isLinked() && thePort.uiAttribs.values)
                {
                    const idx = thePort.uiAttribs.values.indexOf(val);
                    if (idx > -1) thePort.indexPort.set(idx);
                }
            });

            indexPort.onLinkChanged = function ()
            {
                switchPort.setUiAttribs({ "greyout": indexPort.isLinked() });
            };
            p = this.addInPort(switchPort);

            if (v !== undefined)
            {
                p.set(v);
                const index = values.findIndex((item) => { return item == v; });
                n.setValue(index);
                p.defaultValue = v;
                n.defaultValue = index;
            }
        }
        else
        {
            const switchPort = new Port(this, name, Port.TYPE_STRING, {
                "display": "switch",
                "hidePort": true,
                "type": "string",
                "values": values
            });
            p = this.addInPort(switchPort);
        }

        return p;
    }

    /**
     * @deprecated
     */
    inValueInt(name, v)
    {
        return this.inInt(name, v);
    }

    /**
     * create a integer input port
     * @param {String} name
     * @param {number} v default value
     * @return {Port} created port
     */
    inInt(name, v)
    {
        // old
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "increment": "integer" })
        );
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     * create a file/URL input port
     * @param {String} name
     * @param {String} filter
     * @param {String} v
     * @return {Port} created port
     */
    inFile(name, filter, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "display": "file",
                "type": "string",
                "filter": filter
            })
        );
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     * @deprecated
     */
    inUrl(name, filter, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_STRING, {
                "display": "file",
                "type": "string",
                "filter": filter
            })
        );
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     * create a texture input port
     * @param {String} name
     * @return {Port} created port
     */
    inTexture(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_OBJECT, {
                "display": "texture",
                "objType": "texture",
                "preview": true
            })
        );
        p.ignoreValueSerialize = true;
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * create a object input port
     * @param {String} name
     * @param {Object} v
     * @param {String} objType
     * @return {Port} created port
     */
    inObject(name, v, objType)
    {
        const p = this.addInPort(new Port(this, name, Port.TYPE_OBJECT, { "objType": objType }));
        p.ignoreValueSerialize = true;

        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * @param {string} name
     * @param {string} v
     */
    inGradient(name, v)
    {
        const p = this.addInPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "display": "gradient"
                // "hidePort": true
            })
        );
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * @param {Port} p
     * returns {number}
     */
    getPortVisibleIndex(p)
    {
        let ports = this.portsIn;
        if (p.direction == CONSTANTS.PORT_DIR_OUT)ports = this.portsOut;

        let index = 0;
        for (let i = 0; i < ports.length; i++)
        {
            if (ports[i].uiAttribs.hidePort) continue;
            index++;
            if (ports[i] == p) return index;
        }
    }

    /**
     * create a array input port
     * @param {String} name
     * @param {Array|Number} v
     * @param {Number} _stride
     * @return {Port} created port
     */
    inArray(name, v = undefined, _stride = undefined)
    {
        let stride = _stride;
        // @ts-ignore
        if (!_stride && CABLES.isNumeric(v))stride = v;

        const p = this.addInPort(new Port(this, name, Port.TYPE_ARRAY, { "stride": stride }));

        if (v !== undefined && (Array.isArray(v) || v == null)) p.set(v);

        return p;
    }

    /**
     * @deprecated
     */
    inValueSlider(name, v, min, max)
    {
        return this.inFloatSlider(name, v, min, max);
    }

    /**
     * create a value slider input port
     * @param {String} name
     * @param {number} v
     * @param {number} min
     * @param {number} max
     * @return {Port} created port
     */
    inFloatSlider(name, v, min, max)
    {
        const uiattribs = { "display": "range" };

        if (min != undefined && max != undefined)
        {
            uiattribs.min = min;
            uiattribs.max = max;
        }

        const p = this.addInPort(new Port(this, name, Port.TYPE_VALUE, uiattribs));
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    /**
     * @deprecated
     */
    outFunction(name, v)
    {
        return this.outTrigger(name, v);
    }

    /**
     * create output trigger port
     * @param {String} name
     * @param {String} v
     * @return {Port} created port
     */
    outTrigger(name, v)
    {
        // old
        const p = this.addOutPort(new Port(this, name, Port.TYPE_FUNCTION));
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * @deprecated
     */
    outValue(name, v)
    {
        return this.outNumber(name, v);
    }

    /**
     * create output value port
     * @param {String} name
     * @param {number} v default value
     * @return {Port} created port
     */
    outNumber(name, v)
    {
        const p = this.addOutPort(new Port(this, name, Port.TYPE_VALUE));
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * @deprecated
     */
    outValueBool(name, v)
    {
        return this.outBool(name, v);
    }

    /**
     * deprecated create output boolean port
     * @deprecated
     * @param {String} name
     * @param {boolean} v default value
     * @return {Port} created port
     */
    outBool(name, v)
    {
        // old: use outBoolNum
        const p = this.addOutPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "display": "bool"
            })
        );
        if (v !== undefined) p.set(v);
        else p.set(0);
        return p;
    }

    /**
     * create output boolean port,value will be converted to 0 or 1
     * @param {String} name
     * @return {Port} created port
     */
    outBoolNum(name, v)
    {
        const p = this.addOutPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "display": "boolnum"
            })
        );

        p.set = function (b)
        {
            this.setValue(b ? 1 : 0);
        }.bind(p);

        if (v !== undefined) p.set(v);
        else p.set(0);
        return p;
    }

    /**
     * @deprecated
     * @param {string} name
     * @param {string} v
     */
    outValueString(name, v)
    {
        const p = this.addOutPort(
            new Port(this, name, Port.TYPE_VALUE, {
                "type": "string"
            })
        );
        if (v !== undefined) p.set(v);
        return p;
    }

    /**
     * create output string port
     * @param {string} name
     * @param {String} v
     * @return {Port} created port
     */
    outString(name, v)
    {
        const p = this.addOutPort(
            new Port(this, name, Port.TYPE_STRING, {
                "type": "string"
            })
        );
        if (v !== undefined) p.set(v);
        else p.set("");
        return p;
    }

    /**
     * create output object port
     * @param {String} name
     * @return {Port} created port
     * @param {object} v
     * @param {string} objType
     */
    outObject(name, v, objType)
    {
        const p = this.addOutPort(new Port(this, name, Port.TYPE_OBJECT, { "objType": objType || null }));
        p.set(v || null);
        p.ignoreValueSerialize = true;
        return p;
    }

    /**
     * create output array port
     * @param {String} name
     * @return {Port} created port
     * @param {array|number} v
     * @param {number} stride
     */
    outArray(name, v, stride)
    {
        if (!stride && CABLES.isNumeric(v))stride = v;
        const p = this.addOutPort(new Port(this, name, Port.TYPE_ARRAY, { "stride": stride }));
        if (v !== undefined && (Array.isArray(v) || v == null)) p.set(v);

        p.ignoreValueSerialize = true;
        return p;
    }

    /**
     * create output texture port
     * @param {String} name
     * @return {Port} created port
     * @param {any} v
     */
    outTexture(name, v)
    {
        const p = this.addOutPort(
            new Port(this, name, Port.TYPE_OBJECT, {
                "preview": true,
                "objType": "texture",
                "display": "texture"
            })
        );
        if (v !== undefined) p.setRef(v || Texture.getEmptyTexture(this.patch.cgl));

        p.ignoreValueSerialize = true;
        return p;
    }

    /**
     * @deprecated
     * @param {string} name
     * @param {any} filter
     * @param {any} options
     * @param {any} v
     */
    inDynamic(name, filter, options, v)
    {
        const p = new Port(this, name, Port.TYPE_DYNAMIC, options);

        p.shouldLink = (p1, p2) =>
        {
            if (filter && CABLES.isArray(filter))
            {
                // for (let i = 0; i < filter.length; i++)
                // {
                // if (p1 == this && p2.type === filter[i]) return true;
                // if (p2 == this && p1.type === filter[i]) return true;
                // }
                return false; // types do not match
            }
            return true; // no filter set
        };

        this.addInPort(p);
        if (v !== undefined)
        {
            p.set(v);
            p.defaultValue = v;
        }
        return p;
    }

    removeLinks()
    {
        for (let i = 0; i < this.portsIn.length; i++) this.portsIn[i].removeLinks();
        for (let i = 0; i < this.portsOut.length; i++) this.portsOut[i].removeLinks();
    }

    getSerialized()
    {
        const opObj = {};

        if (this.opId) opObj.opId = this.opId;
        if (this.patch.storeObjNames) opObj.objName = this.objName;

        opObj.id = this.id;
        opObj.uiAttribs = JSON.parse(JSON.stringify(this.uiAttribs)) || {};

        if (this.storage && Object.keys(this.storage).length > 0) opObj.storage = JSON.parse(JSON.stringify(this.storage));
        if (this.uiAttribs.hasOwnProperty("working") && this.uiAttribs.working == true) delete this.uiAttribs.working;
        if (opObj.uiAttribs.hasOwnProperty("uierrors")) delete opObj.uiAttribs.uierrors;

        if (opObj.uiAttribs.title === "") delete opObj.uiAttribs.title;
        if (opObj.uiAttribs.color === null) delete opObj.uiAttribs.color;
        if (opObj.uiAttribs.comment === null) delete opObj.uiAttribs.comment;

        if (opObj.uiAttribs.title == this.#shortOpName ||
            (this.uiAttribs.title || "").toLowerCase() == this.#shortOpName.toLowerCase()) delete opObj.uiAttribs.title;

        opObj.portsIn = [];
        opObj.portsOut = [];

        for (let i = 0; i < this.portsIn.length; i++)
        {
            const s = this.portsIn[i].getSerialized();
            if (s) opObj.portsIn.push(s);
        }

        for (let i = 0; i < this.portsOut.length; i++)
        {
            const s = this.portsOut[i].getSerialized();
            if (s) opObj.portsOut.push(s);
        }

        if (opObj.portsIn.length == 0) delete opObj.portsIn;
        if (opObj.portsOut.length == 0) delete opObj.portsOut;
        cleanJson(opObj);

        return opObj;
    }

    /**
     * @param {number} type
     */
    getFirstOutPortByType(type)
    {
        for (const ipo in this.portsOut) if (this.portsOut[ipo].type == type) return this.portsOut[ipo];
    }

    /**
     * @param {number} type
     */
    getFirstInPortByType(type)
    {
        for (const ipo in this.portsIn) if (this.portsIn[ipo].type == type) return this.portsIn[ipo];
    }

    /**
     * return port by the name portName
     * @param {String} name
     * @param {boolean} [lowerCase]
     * @return {Port}
     */
    getPort(name, lowerCase = false)
    {
        return this.getPortByName(name, lowerCase);
    }

    /**
     * @param {string} name
     * @param {boolean} [lowerCase]
     * @returns {Port}
     */
    getPortByName(name, lowerCase = false)
    {
        if (lowerCase)
        {
            for (let ipi = 0; ipi < this.portsIn.length; ipi++)
                if (this.portsIn[ipi].getName().toLowerCase() == name || this.portsIn[ipi].id.toLowerCase() == name)
                    return this.portsIn[ipi];

            for (let ipo = 0; ipo < this.portsOut.length; ipo++)
                if (this.portsOut[ipo].getName().toLowerCase() == name || this.portsOut[ipo].id.toLowerCase() == name)
                    return this.portsOut[ipo];
        }
        else
        {
            for (let ipi = 0; ipi < this.portsIn.length; ipi++)
                if (this.portsIn[ipi].getName() == name || this.portsIn[ipi].id == name)
                    return this.portsIn[ipi];

            for (let ipo = 0; ipo < this.portsOut.length; ipo++)
                if (this.portsOut[ipo].getName() == name || this.portsOut[ipo].id == name)
                    return this.portsOut[ipo];
        }
    }

    /**
     * return port by the name id
     * @param {String} id
     * @return {Port}
     */
    getPortById(id)
    {
        for (let ipi = 0; ipi < this.portsIn.length; ipi++) if (this.portsIn[ipi].id == id) return this.portsIn[ipi];
        for (let ipo = 0; ipo < this.portsOut.length; ipo++) if (this.portsOut[ipo].id == id) return this.portsOut[ipo];
    }

    updateAnims()
    {
        if (this.hasAnimPort)
            for (let i = 0; i < this.portsIn.length; i++) this.portsIn[i].updateAnim();
    }

    log()
    {
        this._log.log(...arguments);
    }

    /**
     * @deprecated
     */
    error()
    {
        this._log.error(...arguments);
    }

    logError()
    {
        this._log.error(...arguments);
    }

    /**
     * @deprecated
     */
    warn()
    {
        this._log.warn(...arguments);
    }

    logWarn()
    {
        this._log.warn(...arguments);
    }

    /**
     * @deprecated
     */
    verbose()
    {
        this._log.verbose(...arguments);
    }

    logVerbose()
    {
        this._log.verbose(...arguments);
    }

    profile()
    {
        for (let ipi = 0; ipi < this.portsIn.length; ipi++)
        {
            this.portsIn[ipi]._onTriggered = this.portsIn[ipi]._onTriggeredProfiling;
            this.portsIn[ipi].set = this.portsIn[ipi]._onSetProfiling;
        }
    }

    // findParent(objName)
    // {
    //     for (let ipi = 0; ipi < this.portsIn.length; ipi++)
    //     {
    //         if (this.portsIn[ipi].isLinked())
    //         {
    //             if (this.portsIn[ipi].links[0].portOut.parent.objName == objName)
    //                 return this.portsIn[ipi].links[0].portOut.parent;

    //             let found = null;
    //             found = this.portsIn[ipi].links[0].portOut.parent.findParent(objName);
    //             if (found) return found;
    //         }
    //     }
    //     return null;
    // }

    // todo: check instancing stuff?
    cleanUp()
    {
        if (this._instances)
        {
            for (let i = 0; i < this._instances.length; i++)
                if (this._instances[i].onDelete) this._instances[i].onDelete();

            this._instances.length = 0;
        }

        for (let i = 0; i < this.portsIn.length; i++)
            this.portsIn[i].setAnimated(false);

        if (this.onAnimFrame) this.patch.removeOnAnimFrame(this);
    }

    // todo: check instancing stuff?
    instanced(triggerPort)
    {
        return false;

        /*
         * this._log.log("instanced", this.patch.instancing.numCycles());
         * if (this.patch.instancing.numCycles() === 0) return false;
         */

        /*
         * let i = 0;
         * let ipi = 0;
         * if (!this._instances || this._instances.length != this.patch.instancing.numCycles())
         * {
         *     if (!this._instances) this._instances = [];
         *     this._.log("creating instances of ", this.objName, this.patch.instancing.numCycles(), this._instances.length);
         *     this._instances.length = this.patch.instancing.numCycles();
         */

        /*
         *     for (i = 0; i < this._instances.length; i++)
         *     {
         *         this._instances[i] = this.patch.createOp(this.objName, true);
         *         this._instances[i].instanced ()
         *         {
         *             return false;
         *         };
         *         this._instances[i].uiAttr(this.uiAttribs);
         */

        /*
         *         for (let ipo = 0; ipo < this.portsOut.length; ipo++)
         *         {
         *             if (this.portsOut[ipo].type == Port.TYPE_FUNCTION)
         *             {
         *                 this._instances[i].getPortByName(this.portsOut[ipo].name).trigger = this.portsOut[ipo].trigger.bind(this.portsOut[ipo]);
         *             }
         *         }
         *     }
         */

        /*
         *     for (ipi = 0; ipi < this.portsIn.length; ipi++)
         *     {
         *         this.portsIn[ipi].onChange = null;
         *         this.portsIn[ipi].onValueChanged = null;
         *     }
         * }
         */

        /*
         * const theTriggerPort = null;
         * for (ipi = 0; ipi < this.portsIn.length; ipi++)
         * {
         *     if (
         *         this.portsIn[ipi].type == Port.TYPE_VALUE ||
         *         this.portsIn[ipi].type == Port.TYPE_ARRAY
         *     )
         *     {
         *         this._instances[this.patch.instancing.index()].portsIn[ipi].set(this.portsIn[ipi].get());
         *     }
         *     if (this.portsIn[ipi].type == Port.TYPE_FUNCTION)
         *     {
         *         // if(this._instances[ this.patch.instancing.index() ].portsIn[ipi].name==triggerPort.name)
         *         // theTriggerPort=this._instances[ this.patch.instancing.index() ].portsIn[ipi];
         *     }
         * }
         */

        // if (theTriggerPort) theTriggerPort.onTriggered();

        /*
         * for (ipi = 0; ipi < this.portsOut.length; ipi++)
         * {
         *     if (this.portsOut[ipi].type == Port.TYPE_VALUE)
         *     {
         *         this.portsOut[ipi].set(this._instances[this.patch.instancing.index()].portsOut[ipi].get());
         *     }
         * }
         */

        // return true;
    }

    // todo: check instancing stuff?
    initInstancable()
    {
        //         if(this.isInstanced)
        //         {
        //             this._log.log('cancel instancing');
        //             return;
        //         }
        //         this._instances=[];
        //         for(var ipi=0;ipi<this.portsIn.length;ipi++)
        //         {
        //             if(this.portsIn[ipi].type==Port.TYPE_VALUE)
        //             {
        //
        //             }
        //             if(this.portsIn[ipi].type==Port.TYPE_FUNCTION)
        //             {
        //                 // var piIndex=ipi;
        //                 this.portsIn[ipi].onTriggered=function(piIndex)
        //                 {
        //
        //                     var i=0;
        // // this._log.log('trigger',this._instances.length);
        //
        //                 }.bind(this,ipi );
        //
        //             }
        // };
        // this._instances=null;
    }

    // setValues(obj)
    // {
    //     for (const i in obj)
    //     {
    //         const port = this.getPortByName(i);
    //         if (port) port.set(obj[i]);
    //         else this._log.warn("op.setValues: port not found:", i);
    //     }
    // }

    /**
     * return true if op has this error message id
     * @param {String} id
     * @returns {Boolean} - has id
     */
    hasUiError(id)
    {
        return this.uiErrors.hasOwnProperty(id) && this.uiErrors[id];
    }

    /**
     * show op error message - set message to null to remove error message
     * @param {string} id error id
     * @param {string} txt text message
     * @param {number} level level
     */
    setUiError(id, txt, level = 2, options = {})
    {
        // overwritten in ui: core_extend_op
    }

    /**
     * enable/disable op
     * @function
     * @param {boolean} b
     */
    setEnabled(b)
    {
        this.enabled = b;
        this.emitEvent("onEnabledChange", b);
    }

    /**
     * organize ports into a group
     * @function
     * @param {String} name
     * @param {Array} ports
     */
    setPortGroup(name, ports)
    {
        for (let i = 0; i < ports.length; i++)
        {
            if (ports[i])
                if (ports[i].setUiAttribs) ports[i].setUiAttribs({ "group": name });
                else this._log.error("setPortGroup: invalid port!");
        }
    }

    /**
     * visually indicate ports that they are coordinate inputs
     * @function
     * @param {Port} px
     * @param {Port} py
     * @param {Port} pz
     */
    setUiAxisPorts(px, py, pz)
    {
        if (px) px.setUiAttribs({ "axis": "X" });
        if (py) py.setUiAttribs({ "axis": "Y" });
        if (pz) pz.setUiAttribs({ "axis": "Z" });
    }

    /**
     * remove port from op
     * @param {Port} port to remove
     */
    removePort(port)
    {
        for (let ipi = 0; ipi < this.portsIn.length; ipi++)
        {
            if (this.portsIn[ipi] == port)
            {
                this.portsIn.splice(ipi, 1);
                this.emitEvent(Op.EVENT_UIATTR_CHANGE, {});
                this.emitEvent("onPortRemoved", {});
                return;
            }
        }
        for (let ipi = 0; ipi < this.portsOut.length; ipi++)
        {
            if (this.portsOut[ipi] == port)
            {
                this.portsOut.splice(ipi, 1);
                this.emitEvent(Op.EVENT_UIATTR_CHANGE, {});
                this.emitEvent("onPortRemoved", {});
                return;
            }
        }
    }

    _checkLinksNeededToWork() {}

    /**
     * show a warning of this op is not a child of parentOpName
     * @function
     * @param {String} parentOpName
     */
    toWorkNeedsParent(parentOpName)
    {
        this.linkTimeRules.needsParentOp = parentOpName;
    }

    /**
     * show a warning of this op is a child of parentOpName
     * @function
     * @instance
     * @memberof Op
     * @param {String} parentOpName
     * @param {number} type
     */
    toWorkShouldNotBeChild(parentOpName, type)
    {
        if (!this.patch.isEditorMode()) return;
        this.linkTimeRules.forbiddenParent = parentOpName;
        if (type != undefined) this.linkTimeRules.forbiddenParentType = type;
    }

    toWorkPortsNeedsString()
    {
        if (!this.patch.isEditorMode()) return;
        for (let i = 0; i < arguments.length; i++)
            if (this.linkTimeRules.needsStringToWork.indexOf(arguments[i]) == -1) this.linkTimeRules.needsStringToWork.push(arguments[i]);
    }

    /**
     * show a small X to indicate op is not working when given ports are not linked
     * @function
     * @instance
     * @memberof Op
     * @param {Array<Port>} port
     */
    toWorkPortsNeedToBeLinked()
    {
        if (!this.patch.isEditorMode()) return;
        for (let i = 0; i < arguments.length; i++)
            if (this.linkTimeRules.needsLinkedToWork.indexOf(arguments[i]) == -1) this.linkTimeRules.needsLinkedToWork.push(arguments[i]);
    }

    toWorkPortsNeedToBeLinkedReset()
    {
        if (!this.patch.isEditorMode()) return;
        this.linkTimeRules.needsLinkedToWork.length = 0;
        if (this.checkLinkTimeWarnings) this.checkLinkTimeWarnings();
    }

    initVarPorts()
    {
        for (let i = 0; i < this.portsIn.length; i++)
        {
            if (this.portsIn[i].getVariableName()) this.portsIn[i].setVariable(this.portsIn[i].getVariableName());
        }
    }

    checkLinkTimeWarnings() {}

    /**
     * refresh op parameters, if current op is selected
     * @function
     * @instance
     * @memberof Op
     */
    refreshParams()
    {
        if (this.patch && this.patch.isEditorMode() && this.isCurrentUiOp()) gui.opParams.show(this);
    }

    /**
     * Returns true if op is selected and parameter are shown in the editor, can only return true if in editor/ui
     * @instance
     * @memberof Op
     * @returns {Boolean} - is current ui op
     */
    isCurrentUiOp()
    {
        if (this.patch.isEditorMode()) return gui.patchView.isCurrentOp(this);
    }

    checkGraphicsApi(api = 0)
    {
        if (this.patch.isEditorMode())
            if (this.patch.cg && this.patch.cg.gApi != api)
                this.setUiError("wronggapi", "Wrong graphics API", 2);
    }
}

;// CONCATENATED MODULE: ./src/core/loadingstatus.js





/**
 * LoadingStatus class, manages asynchronous loading jobs
 *
 * @namespace external:CABLES#LoadingStatus
 * @hideconstructor
 * @class
 * @param patch
 */

class LoadingStatus extends Events
{

    /**
     * @param {Patch} patch
     */
    constructor(patch)
    {
        super();
        this._log = new Logger("LoadingStatus");
        this._loadingAssets = {};
        this._cbFinished = [];
        this._assetTasks = [];
        this._percent = 0;
        this._count = 0;
        this._countFinished = 0;
        this._order = 0;
        this._startTime = 0;
        this._patch = patch;
        this._wasFinishedPrinted = false;
        this._loadingAssetTaskCb = false;
    }

    /**
     * @param {Function} cb
     */
    setOnFinishedLoading(cb)
    {
        this._cbFinished.push(cb);
    }

    getNumAssets()
    {
        return this._countFinished;
    }

    getProgress()
    {
        return this._percent;
    }

    checkStatus()
    {
        this._countFinished = 0;
        this._count = 0;

        for (const i in this._loadingAssets)
        {
            this._count++;
            if (!this._loadingAssets[i].finished)
            {
                this._countFinished++;
            }
        }

        this._percent = (this._count - this._countFinished) / this._count;

        if (this._countFinished === 0)
        {
            for (let j = 0; j < this._cbFinished.length; j++)
            {
                if (this._cbFinished[j])
                {
                    const cb = this._cbFinished[j];
                    setTimeout(() => { cb(this._patch); this.emitEvent("finishedAll"); }, 100);
                }
            }

            if (!this._wasFinishedPrinted)
            {
                this._wasFinishedPrinted = true;
                this.print();
            }
            this.emitEvent("finishedAll");
        }
    }

    getList()
    {
        let arr = [];
        for (const i in this._loadingAssets)
        {
            arr.push(this._loadingAssets[i]);
        }

        return arr;
    }

    getListJobs()
    {
        let arr = [];
        for (const i in this._loadingAssets)
        {
            if (!this._loadingAssets[i].finished)arr.push(this._loadingAssets[i].name);
        }

        return arr;
    }

    print()
    {
        if (this._patch.config.silent) return;

        const rows = [];

        for (const i in this._loadingAssets)
        {
            rows.push([
                this._loadingAssets[i].order,
                this._loadingAssets[i].type,
                this._loadingAssets[i].name,
                (this._loadingAssets[i].timeEnd - this._loadingAssets[i].timeStart) / 1000 + "s",
            ]);
        }

        this._log.groupCollapsed("finished loading " + this._order + " assets in " + (Date.now() - this._startTime) / 1000 + "s");
        this._log.table(rows);
        this._log.groupEnd();
    }

    /**
     * @param {string} id
     */
    finished(id)
    {
        const l = this._loadingAssets[id];
        if (l)
        {
            if (l.finished) this._log.warn("loading job was already finished", l);

            if (l.op) l.op.setUiAttribs({ "loading": false });
            l.finished = true;
            l.timeEnd = Date.now();
        }

        this.checkStatus();
        this.emitEvent("finishedTask");
        return null;
    }

    _startAssetTasks()
    {
        for (let i = 0; i < this._assetTasks.length; i++) this._assetTasks[i]();
        this._assetTasks.length = 0;
    }

    /**
     * delay an asset loading task, mainly to wait for ui to be finished loading and showing, and only then start loading assets
     * @function addAssetLoadingTask
     * @instance
     * @memberof LoadingStatus
     * @param {function} cb callback
     */
    addAssetLoadingTask(cb)
    {
        if (this._patch.isEditorMode() && !CABLES.UI.loaded)
        {
            this._assetTasks.push(cb);

            if (!this._loadingAssetTaskCb)window.gui.addEventListener("uiloaded", this._startAssetTasks.bind(this));
            this._loadingAssetTaskCb = true;
        }
        else
        {
            cb();
        }
        this.emitEvent("addAssetTask");
    }

    /**
     * @param {string} name
     */
    existByName(name)
    {
        for (let i in this._loadingAssets)
        {
            if (this._loadingAssets[i].name == name && !this._loadingAssets[i].finished)
                return true;
        }
    }

    /**
     * @param {string} type
     * @param {string} name
     * @param {Op} [op]
     */
    start(type, name, op)
    {
        if (this._startTime == 0) this._startTime = Date.now();
        const id = generateUUID();

        name = name || "unknown";
        if (name.length > 100)name = name.substring(0, 100);

        if (op)op.setUiAttrib({ "loading": true });

        this._loadingAssets[id] = {
            "id": id,
            "op": op,
            "type": type,
            "name": name,
            "finished": false,
            "timeStart": Date.now(),
            "order": this._order,
        };
        this._order++;

        this.emitEvent("startTask");

        return id;
    }
}

;// CONCATENATED MODULE: ./src/core/timer.js


/**
 * @namespace CABLES
 */

const internalNow = function ()
{
    return window.performance.now();
};

/*
 * current time in milliseconds
 * @memberof CABLES
 * @function now
 * @static
 *
 */
const now = function ()
{
    return internalNow();
};

/**
 * Measuring time
 * @namespace external:CABLES#Timer
 * @hideconstructor
 * @class
 */
class Timer extends Events
{
    static EVENT_PLAY_PAUSE = "playPause";
    static EVENT_TIME_CHANGED = "timeChanged";

    constructor()
    {
        super();

        /**
         * @private
         */
        this._timeStart = internalNow();
        this._timeOffset = 0;
        this._currentTime = 0;
        this._lastTime = 0;
        this._paused = true;
        this._delay = 0;
        this.overwriteTime = -1;
    }

    _internalNow()
    {
        if (this._ts) return this._ts;
        return internalNow();
    }

    _getTime()
    {
        this._lastTime = (this._internalNow() - this._timeStart) / 1000;
        return this._lastTime + this._timeOffset;
    }

    /**
     * @param {number} d
     */
    setDelay(d)
    {
        this._delay = d;
        this.emitEvent(Timer.EVENT_TIME_CHANGED);
    }

    /**
     * @function
     * @memberof Timer
     * @instance
     * @description returns true if timer is playing
     * @return {Boolean} value
     */
    isPlaying()
    {
        return !this._paused;
    }

    /**
     * @function
     * @memberof Timer
     * @instance
     * @param {any} ts
     * @description update timer
     * @return {Number} time
     */
    update(ts)
    {
        if (ts) this._ts = ts;
        if (this._paused) return;
        this._currentTime = this._getTime();

        return this._currentTime;
    }

    /**
     * @function
     * @memberof Timer
     * @instance
     * @return {Number} time in milliseconds
     */
    getMillis()
    {
        return this.get() * 1000;
    }

    /**
     * @function
     * @memberof Timer
     * @instance
     * @return {Number} value time in seconds
     */
    get()
    {
        return this.getTime();
    }

    getTime()
    {
        if (this.overwriteTime >= 0) return this.overwriteTime - this._delay;
        return this._currentTime - this._delay;
    }

    /**
     * toggle between play/pause state
     * @function
     * @memberof Timer
     * @instance
     */
    togglePlay()
    {
        if (this._paused) this.play();
        else this.pause();
    }

    /**
     * set current time
     * @function
     * @memberof Timer
     * @instance
     * @param {Number} t
     */
    setTime(t)
    {
        if (isNaN(t) || t < 0) t = 0;
        this._timeStart = this._internalNow();
        this._timeOffset = t;
        this._currentTime = t;
        this.emitEvent((Timer.EVENT_TIME_CHANGED));
    }

    setOffset(val)
    {
        if (this._currentTime + val < 0)
        {
            this._timeStart = this._internalNow();
            this._timeOffset = 0;
            this._currentTime = 0;
        }
        else
        {
            this._timeOffset += val;
            this._currentTime = this._lastTime + this._timeOffset;
        }
        this.emitEvent(Timer.EVENT_TIME_CHANGED);
    }

    /**
     * (re)starts the timer
     * @function
     * @memberof Timer
     * @instance
     */
    play()
    {
        this._timeStart = this._internalNow();
        this._paused = false;
        this.emitEvent(Timer.EVENT_PLAY_PAUSE);
    }

    /**
     * pauses the timer
     * @function
     * @memberof Timer
     * @instance
     */
    pause()
    {
        this._timeOffset = this._currentTime;
        this._paused = true;
        this.emitEvent(Timer.EVENT_PLAY_PAUSE);
    }
}



;// CONCATENATED MODULE: ./src/core/core_profiler.js



class Profiler
{

    /**
     * @param {Patch} patch
     */
    constructor(patch)
    {
        this.startFrame = patch.getFrameNum();
        this.items = {};
        this.currentId = null;
        this.currentStart = 0;
        this._patch = patch;
    }

    getItems()
    {
        return this.items;
    }

    clear()
    {
        if (this.paused) return;
        this.items = {};
    }

    togglePause()
    {
        this.paused = !this.paused;
        if (!this.paused)
        {
            this.items = {};
            this.currentStart = performance.now();
        }
    }

    add(type, object)
    {
        if (this.paused) return;

        if (this.currentId !== null)
        {
            if (!object || object.id != this.currentId)
            {
                if (this.items[this.currentId])
                {
                    this.items[this.currentId].timeUsed += performance.now() - this.currentStart;

                    if (!this.items[this.currentId].peakTime || now() - this.items[this.currentId].peakTime > 5000)
                    {
                        this.items[this.currentId].peak = 0;
                        this.items[this.currentId].peakTime = now();
                    }
                    this.items[this.currentId].peak = Math.max(this.items[this.currentId].peak, performance.now() - this.currentStart);
                }
            }
        }

        if (object !== null)
        {
            if (!this.items[object.id])
            {
                this.items[object.id] = {
                    "numTriggers": 0,
                    "timeUsed": 0,
                };
            }

            if (this.items[object.id].lastFrame != this._patch.getFrameNum()) this.items[object.id].numTriggers = 0;

            this.items[object.id].lastFrame = this._patch.getFrameNum();
            this.items[object.id].numTriggers++;
            this.items[object.id].opid = object.op.id;
            this.items[object.id].title = object.op.name + "." + object.name;
            this.items[object.id].subPatch = object.op.uiAttribs.subPatch;

            this.currentId = object.id;
            this.currentStart = performance.now();
        }
        else
        {
            this.currentId = null;
        }
    }

    print()
    {
        console.log("--------");
        for (const i in this.items)
        {
            console.log(this.items[i].title + ": " + this.items[i].numTriggers + " / " + this.items[i].timeUsed);
        }
    }
}

;// CONCATENATED MODULE: ./src/core/core_variable.js


class PatchVariable extends Events
{

    /**
     * @param {String} name
     * @param {String|Number} val
     * @param {number} type
     */
    constructor(name, val, type)
    {
        super();
        this._name = name;
        this.type = type;
        this.setValue(val);
    }

    /**
     * keeping this for backwards compatibility in older
     * exports before using eventtarget
     *
     * @param cb
     */
    addListener(cb)
    {
        this.on("change", cb, "var");
    }

    /**
     * @function Variable.getValue
     * @memberof PatchVariable
     * @returns {String|Number|Boolean}
     */
    getValue()
    {
        return this._v;
    }

    /**
     * @function getName
     * @memberof PatchVariable
     * @instance
     * @returns {String|Number|Boolean}
     * @function
     */
    getName()
    {
        return this._name;
    }

    /**
     * @function setValue
     * @memberof PatchVariable
     * @instance
     * @param v
     * @returns {any}
     * @function
     */
    setValue(v)
    {
        this._v = v;
        this.emitEvent("change", v, this);
    }
}

;// CONCATENATED MODULE: ./src/core/cgl/constants.js
const SHADER = {
    // default attributes
    "SHADERVAR_VERTEX_POSITION": "vPosition",
    "SHADERVAR_VERTEX_NUMBER": "attrVertIndex",
    "SHADERVAR_VERTEX_NORMAL": "attrVertNormal",
    "SHADERVAR_VERTEX_TEXCOORD": "attrTexCoord",
    "SHADERVAR_INSTANCE_MMATRIX": "instMat",
    "SHADERVAR_VERTEX_COLOR": "attrVertColor",

    "SHADERVAR_INSTANCE_INDEX": "instanceIndex",

    // default uniforms
    "SHADERVAR_UNI_PROJMAT": "projMatrix",
    "SHADERVAR_UNI_VIEWMAT": "viewMatrix",
    "SHADERVAR_UNI_MODELMAT": "modelMatrix",
    "SHADERVAR_UNI_NORMALMAT": "normalMatrix",
    "SHADERVAR_UNI_INVVIEWMAT": "inverseViewMatrix",
    "SHADERVAR_UNI_INVPROJMAT": "invProjMatrix",
    "SHADERVAR_UNI_MATERIALID": "materialId",
    "SHADERVAR_UNI_OBJECTID": "objectId",

    "SHADERVAR_UNI_VIEWPOS": "camPos",
};

const BLEND_MODES = {
    "BLEND_NONE": 0,
    "BLEND_NORMAL": 1,
    "BLEND_ADD": 2,
    "BLEND_SUB": 3,
    "BLEND_MUL": 4,
};

const RAD2DEG = 180.0 / Math.PI;
const DEG2RAD = Math.PI / 180.0;

const constants_CONSTANTS = {
    "MATH": {
        "DEG2RAD": DEG2RAD,
        "RAD2DEG": RAD2DEG,
    },
    "SHADER": SHADER,
    "BLEND_MODES": BLEND_MODES,
};
const nl = "\n";// newline


;// CONCATENATED MODULE: ./src/core/cg/cg_uniform.js






class CgUniform
{

    /**
     * Description
     * @param {CgShader|CgpShader|Shader} __shader
     * @param {string} __type
     * @param {string} __name
     * @param {Number|Port} _value
     * @param {Port} _port2
     * @param {Port} _port3
     * @param {Port} _port4
     */
    constructor(__shader, __type, __name, _value, _port2, _port3, _port4, _structUniformName, _structName, _propertyName)
    {
        this._log = new Logger("cg_uniform");
        this._type = __type;
        this._name = __name;

        /** @type {CgShader} */
        this._shader = __shader;
        this._value = 0.00001;
        this._oldValue = null;
        this._port = null;

        this._structName = _structName;
        this._structUniformName = _structUniformName;
        this._propertyName = _propertyName;

        if (this._shader._addUniform) this._shader._addUniform(this);
        this.needsUpdate = true;
        this.shaderType = null;
        this.comment = null;

        if (__type == "f")
        {
            this.set = this.setValue = this.setValueF.bind(this);
            this.updateValue = this.updateValueF.bind(this);
        }
        else if (__type == "f[]")
        {
            this.set = this.setValue = this.setValueArrayF.bind(this);
            this.updateValue = this.updateValueArrayF.bind(this);
        }
        else if (__type == "2f[]")
        {
            this.set = this.setValue = this.setValueArray2F.bind(this);
            this.updateValue = this.updateValueArray2F.bind(this);
        }
        else if (__type == "3f[]")
        {
            this.set = this.setValue = this.setValueArray3F.bind(this);
            this.updateValue = this.updateValueArray3F.bind(this);
        }
        else if (__type == "4f[]")
        {
            this.set = this.setValue = this.setValueArray4F.bind(this);
            this.updateValue = this.updateValueArray4F.bind(this);
        }
        else if (__type == "i")
        {
            this.set = this.setValue = this.setValueI.bind(this);
            this.updateValue = this.updateValueI.bind(this);
        }
        else if (__type == "2i")
        {
            this.set = this.setValue = this.setValue2I.bind(this);
            this.updateValue = this.updateValue2I.bind(this);
        }
        else if (__type == "3i")
        {
            this.set = this.setValue = this.setValue3I.bind(this);
            this.updateValue = this.updateValue3I.bind(this);
        }
        else if (__type == "4i")
        {
            this.set = this.setValue = this.setValue4I.bind(this);
            this.updateValue = this.updateValue4I.bind(this);
        }
        else if (__type == "b")
        {
            this.set = this.setValue = this.setValueBool.bind(this);
            this.updateValue = this.updateValueBool.bind(this);
        }
        else if (__type == "4f")
        {
            this.set = this.setValue = this.setValue4F.bind(this);
            this.updateValue = this.updateValue4F.bind(this);
        }
        else if (__type == "3f")
        {
            this.set = this.setValue = this.setValue3F.bind(this);
            this.updateValue = this.updateValue3F.bind(this);
        }
        else if (__type == "2f")
        {
            this.set = this.setValue = this.setValue2F.bind(this);
            this.updateValue = this.updateValue2F.bind(this);
        }
        else if (__type == "t")
        {
            this.set = this.setValue = this.setValueT.bind(this);
            this.updateValue = this.updateValueT.bind(this);
        }
        else if (__type == "sampler")
        {
            if (this.setValueAny)
            {
                this.set = this.setValue = this.setValueAny.bind(this);
                this.updateValue = this.updateValueAny.bind(this);
            }
        }
        else if (__type == "tc")
        {
            this.set = this.setValue = this.setValueT.bind(this);
            this.updateValue = this.updateValueT.bind(this);
        }
        else if (__type == "t[]")
        {
            this.set = this.setValue = this.setValueArrayT.bind(this);
            this.updateValue = this.updateValueArrayT.bind(this);
        }
        else if (__type == "m4" || __type == "m4[]")
        {
            this.set = this.setValue = this.setValueM4.bind(this);
            this.updateValue = this.updateValueM4.bind(this);
        }
        else
        {
            // console.error("unknown");
            this._log.error("Unknown uniform type " + __type, __name, typeof this._shader);
        }

        if (typeof _value == "object" && _value instanceof CABLES.Port)
        {
            this._port = _value;
            this._value = this._port.get();

            if (_port2 && _port3 && _port4)
            {
                if (!(_port2 instanceof CABLES.Port) || !(_port3 instanceof CABLES.Port) || !(_port4 instanceof CABLES.Port))
                {
                    this._log.error("[cgl_uniform] mixed port/value parameter for vec4 ", this._name);
                }

                this._value = [0, 0, 0, 0];
                this._port2 = _port2;
                this._port3 = _port3;
                this._port4 = _port4;

                this._port.on("change", this.updateFromPort4f.bind(this));
                this._port2.on("change", this.updateFromPort4f.bind(this));
                this._port3.on("change", this.updateFromPort4f.bind(this));
                this._port4.on("change", this.updateFromPort4f.bind(this));

                // this._port.onChange = this._port2.onChange = this._port3.onChange = this._port4.onChange = this.updateFromPort4f.bind(this);
                this.updateFromPort4f();
            }
            else if (_port2 && _port3)
            {
                if (!(_port2 instanceof CABLES.Port) || !(_port3 instanceof CABLES.Port))
                {
                    this._log.error("[cgl_uniform] mixed port/value parameter for vec4 ", this._name);
                }

                this._value = [0, 0, 0];
                this._port2 = _port2;
                this._port3 = _port3;
                // this._port.onChange = this._port2.onChange = this._port3.onChange = this.updateFromPort3f.bind(this);
                this._port.on("change", this.updateFromPort3f.bind(this));
                this._port2.on("change", this.updateFromPort3f.bind(this));
                this._port3.on("change", this.updateFromPort3f.bind(this));

                this.updateFromPort3f();
            }
            else if (_port2)
            {
                if (!(_port2 instanceof CABLES.Port))
                {
                    this._log.error("[cgl_uniform] mixed port/value parameter for vec4 ", this._name);
                }

                this._value = [0, 0];
                this._port2 = _port2;
                // this._port.onChange = this._port2.onChange = this.updateFromPort2f.bind(this);
                this._port.on("change", this.updateFromPort2f.bind(this));
                this._port2.on("change", this.updateFromPort2f.bind(this));

                this.updateFromPort2f();
            }
            else
            {
                // this._port.on = this.updateFromPort.bind(this);
                this._port.on("change", this.updateFromPort.bind(this));
            }
        }
        else this._value = _value;

        if (this._value == undefined)
        {
            this._value = 0;
        }

        this.setValue(this._value);

        this.needsUpdate = true;
    }

    getType()
    {
        return this._type;
    }

    get type()
    {
        return this._type;
    }

    get name()
    {
        return this._name;
    }

    getName()
    {
        return this._name;
    }

    getValue()
    {
        return this._value;
    }

    getShaderType()
    {
        return this.shaderType;
    }

    isStructMember()
    {
        return !!this._structName;
    }

    updateFromPort4f()
    {
        this._value[0] = this._port.get();
        this._value[1] = this._port2.get();
        this._value[2] = this._port3.get();
        this._value[3] = this._port4.get();
        this.setValue(this._value);
    }

    updateFromPort3f()
    {
        this._value[0] = this._port.get();
        this._value[1] = this._port2.get();
        this._value[2] = this._port3.get();
        this.setValue(this._value);
    }

    updateFromPort2f()
    {
        this._value[0] = this._port.get();
        this._value[1] = this._port2.get();
        this.setValue(this._value);
    }

    updateFromPort()
    {
        this.setValue(this._port.get());
    }

    get port()
    {
        return this._port;
    }
}

;// CONCATENATED MODULE: ./src/core/cgl/cgl_shader_uniform.js




/**
 * Shader uniforms
 *
 * types:
 * <pre>
 * f    - float
 * 2f   - vec2
 * 3f   - vec3
 * 4f   - vec4
 * i    - integer
 * t    - texture
 * m4   - mat4, 4x4 float matrix
 * f[]  - array of floats
 * 2f[] - array of float vec2
 * 3f[] - array of float vec3
 * 4f[] - array of float vec4
 * </pre>
 *
 * @namespace external:CGL
 * @class
 * @param {CgShader} shader
 * @param {String} [type=f]
 * @param {String} name
 * @param {Number|Port} value  can be a Number,Matrix or Port
 * @example
 * // bind float uniform called myfloat and initialize with value 1.0
 * const unir=new CGL.Uniform(shader,'f','myfloat',1.0);
 * unir.setValue(1.0);
 *
 * // bind float uniform called myfloat and automatically set it to input port value
 * const myPort=op.inFloat("input");
 * const pv=new CGL.Uniform(shader,'f','myfloat',myPort);
 *
 */

// export const Uniform(__shader, __type, __name, _value, _port2, _port3, _port4, _structUniformName, _structName, _propertyName)

class Uniform extends CgUniform
{
    constructor(__shader, __type, __name, _value, _port2, _port3, _port4, _structUniformName, _structName, _propertyName)
    {
        super(__shader, __type, __name, _value, _port2, _port3, _port4, _structUniformName, _structName, _propertyName);
        this._loc = -1;
        this._cgl = __shader._cgl;
    }

    get name()
    {
        return this._name;
    }

    copy(newShader)
    {
        const uni = new Uniform(newShader, this._type, this._name, this._value, this._port2, this._port3, this._port4, this._structUniformName, this._structName, this._propertyName);
        uni.shaderType = this.shaderType;
        return uni;
    }

    /**
     * returns type as glsl type string. e.g. 'f' returns 'float'
     * @function getGlslTypeString
     * @memberof Uniform
     * @instance
     * @return {string} type as string
     */
    getGlslTypeString()
    {
        return Uniform.glslTypeString(this._type);
    }

    _isValidLoc()
    {
        return this._loc != -1;// && this._loc != null;
    }

    resetLoc()
    {
        this._loc = -1;
        this.needsUpdate = true;
    }

    bindTextures() {}

    getLoc()
    {
        return this._loc;
    }

    updateFromPort4f()
    {
        this._value[0] = this._port.get();
        this._value[1] = this._port2.get();
        this._value[2] = this._port3.get();
        this._value[3] = this._port4.get();
        this.setValue(this._value);
    }

    updateFromPort3f()
    {
        this._value[0] = this._port.get();
        this._value[1] = this._port2.get();
        this._value[2] = this._port3.get();
        this.setValue(this._value);
    }

    updateFromPort2f()
    {
        this._value[0] = this._port.get();
        this._value[1] = this._port2.get();
        this.setValue(this._value);
    }

    updateFromPort()
    {
        this.setValue(this._port.get());
    }

    updateValueF()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        this._shader.getCgl().gl.uniform1f(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueF(v)
    {
        if (v != this._value)
        {
            this.needsUpdate = true;
            this._value = v;
        }
    }

    updateValueI()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        this._shader.getCgl().gl.uniform1i(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    updateValue2I()
    {
        if (!this._value) return;

        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }

        this._shader.getCgl().gl.uniform2i(this._loc, this._value[0], this._value[1]);

        this.needsUpdate = false;
        this._cgl.profileData.profileUniformCount++;
    }

    updateValue3I()
    {
        if (!this._value) return;
        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }

        this._shader.getCgl().gl.uniform3i(this._loc, this._value[0], this._value[1], this._value[2]);
        this.needsUpdate = false;
        this._cgl.profileData.profileUniformCount++;
    }

    updateValue4I()
    {
        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }
        this._shader.getCgl().gl.uniform4i(this._loc, this._value[0], this._value[1], this._value[2], this._value[3]);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueI(v)
    {
        if (v != this._value)
        {
            this.needsUpdate = true;
            this._value = v;
        }
    }

    setValue2I(v)
    {
        if (!v) return;
        if (!this._oldValue)
        {
            this._oldValue = [v[0] - 1, 1];
            this.needsUpdate = true;
        }
        else if (v[0] != this._oldValue[0] || v[1] != this._oldValue[1])
        {
            this._oldValue[0] = v[0];
            this._oldValue[1] = v[1];
            this.needsUpdate = true;
        }

        this._value = v;
    }

    setValue3I(v)
    {
        if (!v) return;
        if (!this._oldValue)
        {
            this._oldValue = [v[0] - 1, 1, 2];
            this.needsUpdate = true;
        }
        else if (v[0] != this._oldValue[0] || v[1] != this._oldValue[1] || v[2] != this._oldValue[2])
        {
            this._oldValue[0] = v[0];
            this._oldValue[1] = v[1];
            this._oldValue[2] = v[2];
            this.needsUpdate = true;
        }

        this._value = v;
    }

    setValue4I(v)
    {
        this.needsUpdate = true;
        this._value = v || vec4.create();
    }

    updateValueBool()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;
        this._shader.getCgl().gl.uniform1i(this._loc, this._value ? 1 : 0);

        this._cgl.profileData.profileUniformCount++;
    }

    setValueBool(v)
    {
        if (v != this._value)
        {
            this.needsUpdate = true;
            this._value = v;
        }
    }

    setValueArray4F(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValueArray4F()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        if (!this._value) return;
        this._shader.getCgl().gl.uniform4fv(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueArray3F(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValueArray3F()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        if (!this._value) return;
        this._shader.getCgl().gl.uniform3fv(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueArray2F(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValueArray2F()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        if (!this._value) return;
        this._shader.getCgl().gl.uniform2fv(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueArrayF(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValueArrayF()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        if (!this._value) return;
        this._shader.getCgl().gl.uniform1fv(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueArrayT(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValue3F()
    {
        if (!this._value) return;
        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }

        this._shader.getCgl().gl.uniform3f(this._loc, this._value[0], this._value[1], this._value[2]);
        this.needsUpdate = false;
        this._cgl.profileData.profileUniformCount++;
    }

    setValue3F(v)
    {
        if (!v) return;
        if (!this._oldValue)
        {
            this._oldValue = [v[0] - 1, 1, 2];
            this.needsUpdate = true;
        }
        else if (v[0] != this._oldValue[0] || v[1] != this._oldValue[1] || v[2] != this._oldValue[2])
        {
            this._oldValue[0] = v[0];
            this._oldValue[1] = v[1];
            this._oldValue[2] = v[2];
            this.needsUpdate = true;
        }

        this._value = v;
    }

    updateValue2F()
    {
        if (!this._value) return;

        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }

        this._shader.getCgl().gl.uniform2f(this._loc, this._value[0], this._value[1]);
        this.needsUpdate = false;
        this._cgl.profileData.profileUniformCount++;
    }

    setValue2F(v)
    {
        if (!v) return;
        if (!this._oldValue)
        {
            this._oldValue = [v[0] - 1, 1];
            this.needsUpdate = true;
        }
        else if (v[0] != this._oldValue[0] || v[1] != this._oldValue[1])
        {
            this._oldValue[0] = v[0];
            this._oldValue[1] = v[1];
            this.needsUpdate = true;
        }
        this._value = v;
    }

    updateValue4F()
    {
        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }

        if (!this._value)
        {
            this._log.warn("no value for uniform", this._name, this);
            this._value = [0, 0, 0, 0];
        }

        this.needsUpdate = false;
        this._shader.getCgl().gl.uniform4f(this._loc, this._value[0], this._value[1], this._value[2], this._value[3]);
        this._cgl.profileData.profileUniformCount++;
    }

    setValue4F(v)
    {
        if (typeof this.value == "number") this.value = vec4.create(); // this should not be needed, but somehow it crashes with some shadermods

        if (!v) return;
        if (!this._oldValue)
        {
            this._oldValue = [v[0] - 1, 1, 2, 3];
            this.needsUpdate = true;
        }
        else if (v[0] != this._oldValue[0] || v[1] != this._oldValue[1] || v[2] != this._oldValue[2] || v[3] != this._oldValue[3])
        {
            this._oldValue[0] = v[0];
            this._oldValue[1] = v[1];
            this._oldValue[2] = v[2];
            this.needsUpdate = true;
        }

        this._value = v;
    }

    updateValueM4()
    {
        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }
        if (!this._value || this._value.length % 16 != 0) return console.log("this.name", this._name, this._value);

        this._shader.getCgl().gl.uniformMatrix4fv(this._loc, false, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    setValueM4(v)
    {
        this.needsUpdate = true;
        this._value = v || mat4.create();
    }

    updateValueArrayT()
    {
        if (!this._isValidLoc()) this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
        else this.needsUpdate = false;

        if (!this._value) return;
        this._shader.getCgl().gl.uniform1iv(this._loc, this._value);
        this._cgl.profileData.profileUniformCount++;
    }

    updateValueT()
    {
        if (!this._isValidLoc())
        {
            this._loc = this._shader.getCgl().gl.getUniformLocation(this._shader.getProgram(), this._name);
            this._cgl.profileData.profileShaderGetUniform++;
            this._cgl.profileData.profileShaderGetUniformName = this._name;
        }

        this._cgl.profileData.profileUniformCount++;
        this._shader.getCgl().gl.uniform1i(this._loc, this._value);
        this.needsUpdate = false;
    }

    setValueT(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }
}

Uniform.glslTypeString = (t) =>
{
    if (t == "f") return "float";
    if (t == "b") return "bool";
    if (t == "i") return "int";
    if (t == "2i") return "ivec2";
    if (t == "2f") return "vec2";
    if (t == "3f") return "vec3";
    if (t == "4f") return "vec4";
    if (t == "m4") return "mat4";

    if (t == "t") return "sampler2D";
    if (t == "tc") return "samplerCube";

    if (t == "3f[]") return null; // ignore this for now...
    if (t == "m4[]") return null; // ignore this for now...
    if (t == "f[]") return null; // ignore this for now...

    console.warn("[CGL UNIFORM] unknown glsl type string ", t);
};

/**
 * @function setValue
 * @memberof Uniform
 * @instance
 * @param {Number|Array|Matrix|Texture} value
 */

;// CONCATENATED MODULE: ./src/core/cgl/cgl_textureeffect.js




class TextureEffect
{
    constructor(cgl, options)
    {
        this._cgl = cgl;
        this._log = new Logger("cgl_TextureEffect");

        if (!cgl.TextureEffectMesh) this.createMesh();

        this._textureSource = null;
        this._options = options;
        this.name = options.name || "unknown";

        this.imgCompVer = 0;
        this.aspectRatio = 1;
        this._textureTarget = null; // new CGL.Texture(this._cgl,opts);
        this._frameBuf = this._cgl.gl.createFramebuffer();
        this._frameBuf2 = this._cgl.gl.createFramebuffer();
        this._renderbuffer = this._cgl.gl.createRenderbuffer();
        this._renderbuffer2 = this._cgl.gl.createRenderbuffer();
        this.switched = false;
        this.depth = false;
    }

    dispose()
    {
        if (this._renderbuffer) this._cgl.gl.deleteRenderbuffer(this._renderbuffer);
        if (this._frameBuf) this._cgl.gl.deleteFramebuffer(this._frameBuf);
        if (this._renderbuffer2) this._cgl.gl.deleteRenderbuffer(this._renderbuffer2);
        if (this._frameBuf2) this._cgl.gl.deleteFramebuffer(this._frameBuf2);
    }

    getWidth()
    {
        return this._textureSource.width;
    }

    getHeight()
    {
        return this._textureSource.height;
    }

    setSourceTexture(tex)
    {
        if (tex === null)
        {
            this._textureSource = new Texture(this._cgl);
            this._textureSource.setSize(16, 16);
        }
        else
        {
            this._textureSource = tex;
        }

        if (!this._textureSource.compareSettings(this._textureTarget))
        {
            if (this._textureTarget) this._textureTarget.delete();

            this._textureTarget = this._textureSource.clone();

            this._cgl.profileData.profileEffectBuffercreate++;

            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuf);

            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, this._renderbuffer);

            // if(tex.textureType==CGL.Texture.TYPE_FLOAT) this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER,this._cgl.gl.RGBA32F, this._textureSource.width,this._textureSource.height);
            // else this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER,this._cgl.gl.RGBA8, this._textureSource.width,this._textureSource.height);

            if (this.depth) this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER, this._cgl.gl.DEPTH_COMPONENT16, this._textureSource.width, this._textureSource.height);
            this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0, this._cgl.gl.TEXTURE_2D, this._textureTarget.tex, 0);
            if (this.depth) this._cgl.gl.framebufferRenderbuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.DEPTH_ATTACHMENT, this._cgl.gl.RENDERBUFFER, this._renderbuffer);

            // this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0, this._cgl.gl.TEXTURE_2D, this._textureTarget.tex, 0);

            this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null);
            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, null);
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);

            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuf2);

            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, this._renderbuffer2);

            // if(tex.textureType==CGL.Texture.TYPE_FLOAT) this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER,this._cgl.gl.RGBA32F, this._textureSource.width,this._textureSource.height);
            // else this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER,this._cgl.gl.RGBA8, this._textureSource.width,this._textureSource.height);

            if (this.depth) this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER, this._cgl.gl.DEPTH_COMPONENT16, this._textureSource.width, this._textureSource.height);
            this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0, this._cgl.gl.TEXTURE_2D, this._textureSource.tex, 0);

            if (this.depth) this._cgl.gl.framebufferRenderbuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.DEPTH_ATTACHMENT, this._cgl.gl.RENDERBUFFER, this._renderbuffer2);

            // this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0, this._cgl.gl.TEXTURE_2D, this._textureSource.tex, 0);

            this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null);
            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, null);
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);
        }

        this.aspectRatio = this._textureSource.width / this._textureSource.height;
    }

    continueEffect()
    {
        this._cgl.pushDepthTest(false);
        this._cgl.pushModelMatrix();
        this._cgl.pushPMatrix();
        // todo why two pushs?

        this._cgl.pushViewPort(0, 0, this.getCurrentTargetTexture().width, this.getCurrentTargetTexture().height);

        mat4.perspective(this._cgl.pMatrix, 45, this.getCurrentTargetTexture().width / this.getCurrentTargetTexture().height, 0.1, 1100.0); // todo: why?

        this._cgl.pushPMatrix();
        mat4.identity(this._cgl.pMatrix);

        this._cgl.pushViewMatrix();
        mat4.identity(this._cgl.vMatrix);

        this._cgl.pushModelMatrix();
        mat4.identity(this._cgl.mMatrix);
    }

    startEffect(bgTex)
    {
        if (!this._textureTarget)
        {
            this._log.warn("effect has no target");
            return;
        }

        this.switched = false;

        this.continueEffect();

        if (bgTex)
        {
            this._bgTex = bgTex;
        }
        this._countEffects = 0;
    }

    endEffect()
    {
        this._cgl.popDepthTest();
        this._cgl.popModelMatrix();

        this._cgl.popPMatrix();
        this._cgl.popModelMatrix();
        this._cgl.popViewMatrix();

        this._cgl.popPMatrix();
        this._cgl.popViewPort();
    }

    bind()
    {
        if (this._textureSource === null)
        {
            this._log.warn("no base texture set!");
            return;
        }

        if (!this.switched)
        {
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuf);
            this._cgl.pushGlFrameBuffer(this._frameBuf);
        }
        else
        {
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuf2);
            this._cgl.pushGlFrameBuffer(this._frameBuf2);
        }
    }

    finish()
    {
        if (this._textureSource === null)
        {
            this._log.warn("no base texture set!");
            return;
        }

        this._cgl.TextureEffectMesh.render(this._cgl.getShader());

        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.popGlFrameBuffer());

        this._cgl.profileData.profileTextureEffect++;

        if (this._textureTarget.filter == Texture.FILTER_MIPMAP)
        {
            if (!this.switched)
            {
                this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, this._textureTarget.tex);
                this._textureTarget.updateMipMap();
            }
            else
            {
                this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, this._textureSource.tex);
                this._textureSource.updateMipMap();
            }

            this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null);
        }

        this.switched = !this.switched;
        this._countEffects++;
    }

    getCurrentTargetTexture()
    {
        if (this.switched) return this._textureSource;
        return this._textureTarget;
    }

    getCurrentSourceTexture()
    {
        if (this._countEffects == 0 && this._bgTex) return this._bgTex;

        if (this.switched) return this._textureTarget;
        return this._textureSource;
    }

    delete()
    {
        if (this._textureTarget) this._textureTarget.delete();
        if (this._textureSource) this._textureSource.delete();
        this._cgl.gl.deleteRenderbuffer(this._renderbuffer);
        this._cgl.gl.deleteFramebuffer(this._frameBuf);
    }

    createMesh()
    {
        this._cgl.TextureEffectMesh = CABLES.CGL.MESHES.getSimpleRect(this._cgl, "texEffectRect");
    }

    // ---------------------------------------------------------------------------------
}

TextureEffect.checkOpNotInTextureEffect = function (op)
{
    if (!op.patch.cgl) return true;
    if (op.uiAttribs.error && !op.patch.cgl.currentTextureEffect)
    {
        op.setUiError("textureeffect", null);
        return true;
    }
    if (!op.patch.cgl.currentTextureEffect) return true;

    if (op.patch.cgl.currentTextureEffect && !op.uiAttribs.error)
    {
        op.setUiError("textureeffect", "This op can not be a child of a ImageCompose/texture effect! imagecompose should only have textureeffect childs.", 0);
        return false;
    }

    if (op.patch.cgl.currentTextureEffect) return false;
    return true;
};

TextureEffect.checkOpInEffect = function (op, minver)
{
    minver = minver || 0;

    if (op.patch.cgl.currentTextureEffect)
    {
        if (op.uiAttribs.uierrors && op.patch.cgl.currentTextureEffect.imgCompVer >= minver)
        {
            op.setUiError("texeffect", null);
            return true;
        }

        if (minver && op.patch.cgl.currentTextureEffect.imgCompVer < minver)
        {
            op.setUiError("texeffect", "This op must be a child of an ImageCompose op with version >=" + minver + " <span class=\"button-small\" onclick=\"gui.patchView.downGradeOp('" + op.id + "','" + op.name + "')\">Downgrade</span> to previous version", 1);
        }
    }

    if (op.patch.cgl.currentTextureEffect) return true;

    if (!op.patch.cgl.currentTextureEffect && (!op.uiAttribs.uierrors || op.uiAttribs.uierrors.length == 0))
    {
        op.setUiError("texeffect", "This op must be a child of an ImageCompose op! More infos <a href=\"https://cables.gl/docs/image_composition/image_composition.html\" target=\"_blank\">here</a>. ", 1);
        return false;
    }

    if (!op.patch.cgl.currentTextureEffect) return false;
    return true;
};

TextureEffect.getBlendCode = function (ver)
{
    let src = "".endl()
        + "vec3 _blend(vec3 base,vec3 blend)".endl()
        + "{".endl()
        + "   vec3 colNew=blend;".endl()
        + "   #ifdef BM_MULTIPLY".endl()
        + "       colNew=base*blend;".endl()
        + "   #endif".endl()
        + "   #ifdef BM_MULTIPLY_INV".endl()
        + "       colNew=base* vec3(1.0)-blend;".endl()
        + "   #endif".endl()
        + "   #ifdef BM_AVERAGE".endl()
        + "       colNew=((base + blend) / 2.0);".endl()
        + "   #endif".endl()
        + "   #ifdef BM_ADD".endl()
        + "       colNew=min(base + blend, vec3(1.0));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_SUBTRACT_ONE".endl()
        + "       colNew=max(base + blend - vec3(1.0), vec3(0.0));".endl()
        + "   #endif".endl()

        + "   #ifdef BM_SUBTRACT".endl()
        + "       colNew=base - blend;".endl()
        + "   #endif".endl()

        + "   #ifdef BM_DIFFERENCE".endl()
        + "       colNew=abs(base - blend);".endl()
        + "   #endif".endl()
        + "   #ifdef BM_NEGATION".endl()
        + "       colNew=(vec3(1.0) - abs(vec3(1.0) - base - blend));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_EXCLUSION".endl()
        + "       colNew=(base + blend - 2.0 * base * blend);".endl()
        + "   #endif".endl()
        + "   #ifdef BM_LIGHTEN".endl()
        + "       colNew=max(blend, base);".endl()
        + "   #endif".endl()
        + "   #ifdef BM_DARKEN".endl()
        + "       colNew=min(blend, base);".endl()
        + "   #endif".endl()
        + "   #ifdef BM_OVERLAY".endl()
        + "      #define BlendOverlayf(base, blend)  (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))"
            // .endl()+'       #define BlendOverlay(base, blend)       Blend(base, blend, BlendOverlayf)'
            //    .endl()+'      colNew=Blend(base, blend, BlendOverlayf);'
            .endl()
        + "      colNew=vec3(BlendOverlayf(base.r, blend.r),BlendOverlayf(base.g, blend.g),BlendOverlayf(base.b, blend.b));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_SCREEN".endl()
        + "      #define BlendScreenf(base, blend)       (1.0 - ((1.0 - base) * (1.0 - blend)))"
            // .endl()+'       #define BlendScreen(base, blend)        Blend(base, blend, BlendScreenf)'
            // .endl()+'      colNew=Blend(base, blend, BlendScreenf);'
            .endl()
        + "      colNew=vec3(BlendScreenf(base.r, blend.r),BlendScreenf(base.g, blend.g),BlendScreenf(base.b, blend.b));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_SOFTLIGHT".endl()
        + "      #define BlendSoftLightf(base, blend)    ((blend < 0.5) ? (2.0 * base * blend + base * base * (1.0 - 2.0 * blend)) : (sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend)))"
            // .endl()+'       #define BlendSoftLight(base, blend)     Blend(base, blend, BlendSoftLightf)'
            //    .endl()+'      colNew=Blend(base, blend, BlendSoftLightf);'
            .endl()
        + "      colNew=vec3(BlendSoftLightf(base.r, blend.r),BlendSoftLightf(base.g, blend.g),BlendSoftLightf(base.b, blend.b));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_HARDLIGHT".endl()
        + "      #define BlendOverlayf(base, blend)  (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)))"
            // .endl()+'       #define BlendOverlay(base, blend)       Blend(base, blend, BlendOverlayf)'
            // .endl()+'      colNew=Blend(blend, base, BlendOverlayf);'
            .endl()
        + "      colNew=vec3(BlendOverlayf(base.r, blend.r),BlendOverlayf(base.g, blend.g),BlendOverlayf(base.b, blend.b));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_COLORDODGE".endl()
        + "      #define BlendColorDodgef(base, blend)   ((blend == 1.0) ? blend : min(base / (1.0 - blend), 1.0))"
            // .endl()+'      colNew=Blend(base, blend, BlendColorDodgef);'
            .endl()
        + "      colNew=vec3(BlendColorDodgef(base.r, blend.r),BlendColorDodgef(base.g, blend.g),BlendColorDodgef(base.b, blend.b));".endl()
        + "   #endif".endl()
        + "   #ifdef BM_COLORBURN".endl()
        + "      #define BlendColorBurnf(base, blend)    ((blend == 0.0) ? blend : max((1.0 - ((1.0 - base) / blend)), 0.0))"
            // .endl()+'      colNew=Blend(base, blend, BlendColorBurnf);'
            .endl()
        + "      colNew=vec3(BlendColorBurnf(base.r, blend.r),BlendColorBurnf(base.g, blend.g),BlendColorBurnf(base.b, blend.b));".endl()
        + "   #endif".endl()

        + "   return colNew;".endl()
        + "}".endl();

    if (!ver)
        src += "vec4 cgl_blend(vec4 oldColor,vec4 newColor,float amount)".endl()
                + "{".endl()
                    + "vec4 col=vec4( _blend(oldColor.rgb,newColor.rgb) ,1.0);".endl()
                    + "col=vec4( mix( col.rgb, oldColor.rgb ,1.0-oldColor.a*amount),1.0);".endl()
                    + "return col;".endl()
                + "}".endl();

    if (ver >= 3)
        src += "vec4 cgl_blendPixel(vec4 base,vec4 col,float amount)".endl() +
                "{".endl() +

                "#ifdef BM_MATH_ADD".endl() +
                "   return vec4(base.rgb+col.rgb*amount,1.0);".endl() +
                "#endif".endl() +

                "#ifdef BM_MATH_SUB".endl() +
                "   return vec4(base.rgb-col.rgb*amount,1.0);".endl() +
                "#endif".endl() +

                "#ifdef BM_MATH_MUL".endl() +
                "   return vec4(base.rgb*col.rgb*amount,1.0);".endl() +
                "#endif".endl() +

                "#ifdef BM_MATH_DIV".endl() +
                "   return vec4(base.rgb/col.rgb*amount,1.0);".endl() +
                "#endif".endl() +

                    "#ifndef BM_MATH".endl() +
                        "vec3 colNew=_blend(base.rgb,col.rgb);".endl() +

                        "float newA=clamp(base.a+(col.a*amount),0.,1.);".endl() +

                        "#ifdef BM_ALPHAMASKED".endl() +
                            "newA=base.a;".endl() +
                        "#endif".endl() +

                        "return vec4(".endl() +
                            "mix(colNew,base.rgb,1.0-(amount*col.a)),".endl() +
                            "newA);".endl() +

                    "#endif".endl() +
    "}".endl();

    return src;
};

TextureEffect.onChangeBlendSelect = function (shader, blendName, maskAlpha = false)
{
    blendName = String(blendName);
    shader.toggleDefine("BM_NORMAL", blendName == "normal");
    shader.toggleDefine("BM_MULTIPLY", blendName == "multiply");
    shader.toggleDefine("BM_MULTIPLY_INV", blendName == "multiply invert");
    shader.toggleDefine("BM_AVERAGE", blendName == "average");
    shader.toggleDefine("BM_ADD", blendName == "add");
    shader.toggleDefine("BM_SUBTRACT_ONE", blendName == "subtract one");
    shader.toggleDefine("BM_SUBTRACT", blendName == "subtract");
    shader.toggleDefine("BM_DIFFERENCE", blendName == "difference");
    shader.toggleDefine("BM_NEGATION", blendName == "negation");
    shader.toggleDefine("BM_EXCLUSION", blendName == "exclusion");
    shader.toggleDefine("BM_LIGHTEN", blendName == "lighten");
    shader.toggleDefine("BM_DARKEN", blendName == "darken");
    shader.toggleDefine("BM_OVERLAY", blendName == "overlay");
    shader.toggleDefine("BM_SCREEN", blendName == "screen");
    shader.toggleDefine("BM_SOFTLIGHT", blendName == "softlight");
    shader.toggleDefine("BM_HARDLIGHT", blendName == "hardlight");
    shader.toggleDefine("BM_COLORDODGE", blendName == "color dodge");
    shader.toggleDefine("BM_COLORBURN", blendName == "color burn");

    shader.toggleDefine("BM_MATH_ADD", blendName == "Math Add");
    shader.toggleDefine("BM_MATH_SUB", blendName == "Math Subtract");
    shader.toggleDefine("BM_MATH_MUL", blendName == "Math Multiply");
    shader.toggleDefine("BM_MATH_DIV", blendName == "Math Divide");

    shader.toggleDefine("BM_MATH", blendName.indexOf("Math ") == 0);

    shader.toggleDefine("BM_ALPHAMASKED", maskAlpha);
};

TextureEffect.AddBlendSelect = function (op, name, defaultMode)
{
    const p = op.inValueSelect(name || "Blend Mode", [
        "normal", "lighten", "darken", "multiply", "multiply invert", "average", "add", "subtract", "difference", "negation", "exclusion", "overlay", "screen", "color dodge", "color burn", "softlight", "hardlight", "subtract one",
        "Math Add",
        "Math Subtract",
        "Math Multiply",
        "Math Divide",

    ], defaultMode || "normal");
    return p;
};

TextureEffect.AddBlendAlphaMask = function (op, name, defaultMode)
{
    const p = op.inSwitch(name || "Alpha Mask", ["Off", "On"], defaultMode || "Off");
    return p;
};

TextureEffect.setupBlending = function (op, shader, blendPort, amountPort, alphaMaskPort)
{
    const onChange = () =>
    {
        let maskAlpha = false;
        if (alphaMaskPort) maskAlpha = alphaMaskPort.get() == "On";
        TextureEffect.onChangeBlendSelect(shader, blendPort.get(), maskAlpha);

        let str = blendPort.get();
        if (str == "normal") str = null;
        else if (str == "multiply") str = "mul";
        else if (str == "multiply invert") str = "mulinv";
        else if (str == "lighten") str = "light";
        else if (str == "darken") str = "darken";
        else if (str == "average") str = "avg";
        else if (str == "subtract one") str = "sub one";
        else if (str == "subtract") str = "sub";
        else if (str == "difference") str = "diff";
        else if (str == "negation") str = "neg";
        else if (str == "exclusion") str = "exc";
        else if (str == "overlay") str = "ovl";
        else if (str == "color dodge") str = "dodge";
        else if (str == "color burn") str = "burn";
        else if (str == "softlight") str = "soft";
        else if (str == "hardlight") str = "hard";
        else if (str == "Math Add") str = "+";
        else if (str == "Math Subtract") str = "-";
        else if (str == "Math Multiply") str = "*";
        else if (str == "Math Divide") str = "/";

        op.setUiAttrib({ "extendTitle": str });
    };
    op.setPortGroup("Blending", [blendPort, amountPort, alphaMaskPort]);

    let maskAlpha = false;

    blendPort.onChange = onChange;
    if (alphaMaskPort)
    {
        alphaMaskPort.onChange = onChange;
        maskAlpha = alphaMaskPort.get() == "On";
    }

    TextureEffect.onChangeBlendSelect(shader, blendPort.get(), maskAlpha);
};

;// CONCATENATED MODULE: ./src/core/cgl/cgl_shader_lib.js



/** @type {Object} */
const ShaderLibMods = {
    "CGL.BLENDMODES": function ()
    {
        this.name = "blendmodes";
        this.srcHeadFrag = TextureEffect.getBlendCode();
    },

    "CGL.BLENDMODES3": function ()
    {
        this.name = "blendmodes3";
        this.srcHeadFrag = TextureEffect.getBlendCode(3);
    },

    "CGL.LUMINANCE": function ()
    {
        this.name = "luminance";
        this.srcHeadFrag = "".endl()
            + "float cgl_luminance(vec3 c)".endl()
            + "{".endl()
            + "    return dot(vec3(0.2126,0.7152,0.0722),c);".endl()
            + "}".endl();
    },

    // quite good random numbers, but somehow don't work in ANGLE
    "CGL.RANDOM_OLD": function ()
    {
        this.name = "randomNumber";
        this.srcHeadFrag = "".endl()
            + "float cgl_random(vec2 co)".endl()
            + "{".endl()
            + "    return fract(sin(dot(co.xy ,vec2(12.9898,4.1414))) * 432758.5453);".endl()
            + "}".endl()
            + "vec3 cgl_random3(vec2 co)".endl()
            + "{".endl()
            + "    return vec3( cgl_random(co),cgl_random(co+0.5711),cgl_random(co+1.5711));".endl()
            + "}";
    },

    // low quality generative ranodm numbers
    "CGL.RANDOM_LOW": function ()
    {
        this.name = "randomNumber";
        this.srcHeadFrag = "".endl()
            + "float cgl_random(vec2 co)".endl()
            + "{".endl()
            + "    return fract(sin(dot(co.xy ,vec2(12.9898,4.1414))) * 358.5453);".endl()
            + "}".endl()
            + "vec3 cgl_random3(vec2 co)".endl()
            + "{".endl()
            + "    return vec3( cgl_random(co),cgl_random(co+0.5711),cgl_random(co+1.5711));".endl()
            + "}";
    },

    "CGL.RANDOM_TEX": function ()
    {
        this.name = "randomNumbertex";

        this.srcHeadFrag = "".endl()
            + "UNI sampler2D CGLRNDTEX;".endl()
            + "float cgl_random(vec2 co)".endl()
            + "{".endl()
            + "    return texture(CGLRNDTEX,co*5711.0).r;".endl()
            + "}".endl()
            + "vec3 cgl_random3(vec2 co)".endl()
            + "{".endl()
            + "    return texture(CGLRNDTEX,co*5711.0).rgb;".endl()
            + "}";

        this.initUniforms = function (shader)
        {
            return [new Uniform(shader, "t", "CGLRNDTEX", 7)];
        };

        this.onBind = function (cgl, shader)
        {
            CABLES.CGL.Texture.getRandomTexture(cgl);
            cgl.setTexture(7, CABLES.CGL.Texture.getRandomTexture(cgl).tex);
        };
    }

};

;// CONCATENATED MODULE: ./src/core/cg/cg_mesh.js
class CgMesh
{
    _name = "unknown";

    constructor()
    {
    }

}

;// CONCATENATED MODULE: ./src/core/cgl/cgl_mesh.js








const MESH = {};
MESH.lastMesh = null;

/**
 * @typedef {Object} CglMeshAttributeOptions
 * @property {boolean} [instanced]
 * @property {Function} [cb]
 * @property {Function} [type]
 */

/**
 * @type Object
 * @typedef CglMeshOptions
 * @property {Number} [glPrimitive]
 * @property {String} [opId]
 */

/**
 * webgl renderable 3d object
 * @class
 * @namespace external:CGL
 * @hideconstructor
 * @example
 * const cgl=this._cgl
 * const mesh=new CGL.Mesh(cgl, geometry);
 *
 * function render()
 * {
 *   mesh.render(cgl.getShader());
 * }
 *
 */
class Mesh extends CgMesh
{

    /** @type {CglContext} */
    #cgl = null;

    /** @type {Geometry} */
    #geom = null;

    /** @type {WebGLBuffer} */
    #bufVerticesIndizes = null;

    /**
     * @param {CglContext} _cgl cgl
     * @param {Geometry} __geom geometry
     * @param {CglMeshOptions} _options
     */
    constructor(_cgl, __geom, _options = {})
    {
        super();
        this.#cgl = _cgl;

        let options = _options || {};
        if (CABLES.isNumeric(options))options = { "glPrimitive": _options }; // old constructor fallback...
        this._log = new Logger("cgl_mesh");
        this._bufVertexAttrib = null;
        this.#bufVerticesIndizes = this.#cgl.gl.createBuffer();
        this._indexType = this.#cgl.gl.UNSIGNED_SHORT;
        this._attributes = [];
        this._attribLocs = {};

        this._lastShader = null;
        this._numInstances = 0;
        this._glPrimitive = options.glPrimitive;

        this.opId = options.opId || "";
        this._preWireframeGeom = null;
        this.addVertexNumbers = false;

        this.feedBackAttributes = [];
        this.setGeom(__geom);

        this._feedBacks = [];
        this._feedBacksChanged = false;
        this._transformFeedBackLoc = -1;
        this._lastAttrUpdate = 0;

        this.memFreed = false;

        this.#cgl.profileData.addHeavyEvent("mesh constructed", this._name);

        this._queryExt = null;
    }

    get geom()
    {
        return this.#geom;
    }

    get numInstances()
    {
        return this._numInstances;
    }

    set numInstances(v)
    {
        this.setNumInstances(v);
    }

    freeMem()
    {
        this.memFreed = true;

        for (let i = 0; i < this._attributes.length; i++)
            this._attributes[i].floatArray = null;
    }

    /**
     * @function updateVertices
     * @memberof Mesh
     * @instance
     * @description update vertices only from a geometry
     * @param {Geometry} geom
     */
    updateVertices(geom)
    {
        this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_POSITION, geom.vertices, 3);
        this._numVerts = geom.vertices.length / 3;
    }

    /**
     * @param {String} attrName
     * @param {String} name
     * @param {Number} stride
     * @param {Number} offset
      */
    setAttributePointer(attrName, name, stride, offset)
    {
        for (let i = 0; i < this._attributes.length; i++)
        {
            if (this._attributes[i].name == attrName)
            {
                if (!this._attributes[i].pointer) this._attributes[i].pointer = [];

                this._attributes[i].pointer.push(
                    {
                        "loc": -1,
                        "name": name,
                        "stride": stride,
                        "offset": offset,
                        "instanced": attrName == constants_CONSTANTS.SHADER.SHADERVAR_INSTANCE_MMATRIX,
                    }
                );
            }
        }
    }

    /**
     * @param {String} name
     * @returns {AttributeObject}
     */
    getAttribute(name)
    {
        for (let i = 0; i < this._attributes.length; i++) if (this._attributes[i].name == name) return this._attributes[i];
    }

    setAttributeRange(attr, array, start, end)
    {
        if (!attr) return;
        if (!start && !end) return;

        if (!attr.name)
            this._log.stack("no attrname?!");

        const gl = this.#cgl.gl;

        gl.bindBuffer(gl.ARRAY_BUFFER, attr.buffer);
        this.#cgl.profileData.profileMeshAttributes += (end - start) || 0;

        this.#cgl.profileData.profileSingleMeshAttribute[this._name] = this.#cgl.profileData.profileSingleMeshAttribute[this._name] || 0;
        this.#cgl.profileData.profileSingleMeshAttribute[this._name] += (end - start) || 0;

        if (attr.numItems < array.length / attr.itemSize)
        {
            this._resizeAttr(array, attr);
        }

        if (end > array.length && !this.warned)
        {
            this.warned = true;
            this._log.warn(this.#cgl.canvas.id + " " + attr.name + " buffersubdata out of bounds ?", array.length, end, start, attr);
            return;
        }

        // if (glVersion == 1) gl.bufferSubData(gl.ARRAY_BUFFER, 0, array); // probably slow/ maybe create and array with only changed size ??
        // else
        gl.bufferSubData(gl.ARRAY_BUFFER, start * 4, array, start, (end - start));
    }

    _resizeAttr(array, attr)
    {
        const gl = this.#cgl.gl;

        if (attr.buffer)
            gl.deleteBuffer(attr.buffer);

        attr.buffer = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, attr.buffer);
        this._bufferArray(array, attr);
        attr.numItems = array.length / attr.itemSize;// numItems;
    }

    _bufferArray(array, attr)
    {
        let floatArray = attr.floatArray || null;
        if (!array) return;

        if (this.#cgl.debugOneFrame)
        {
        console.log("_bufferArray", array.length, attr.name); // eslint-disable-line
        }

        if (!(array instanceof Float32Array))
        {
            if (attr && floatArray && floatArray.length == array.length)
            {
                floatArray.set(array);
            }
            else
            {
                floatArray = new Float32Array(array);

                if (this.#cgl.debugOneFrame)
                {
                console.log("_bufferArray create new float32array", array.length, attr.name); // eslint-disable-line
                }

                if (array.length > 10000)
                {
                    this.#cgl.profileData.profileNonTypedAttrib++;
                    this.#cgl.profileData.profileNonTypedAttribNames = "(" + this._name + ":" + attr.name + ")";
                }
            }
        }
        else floatArray = array;

        attr.arrayLength = floatArray.length;
        attr.floatArray = null;// floatArray;

        this.#cgl.gl.bufferData(this.#cgl.gl.ARRAY_BUFFER, floatArray, this.#cgl.gl.DYNAMIC_DRAW);
    }

    /**
     * @function setAttribute
     * @description update attribute
     * @memberof Mesh
     * @instance
     * @param {String} name
     * @param {Array} array
     * @param {Number} itemSize
     * @param {Object} options
     */
    addAttribute(name, array, itemSize, options)
    {
        this.setAttribute(name, array, itemSize, options);
    }

    /**
     * @param {String} name
     * @param {Array|Float32Array} array
     * @param {Number} itemSize Integer
     * @param {CglMeshAttributeOptions} options
     */
    setAttribute(name, array, itemSize, options = {})
    {
        if (!array)
        {
            this._log.error("mesh addAttribute - no array given! " + name);
            throw new Error();
        }
        let cb = null;
        let instanced = false;
        let i = 0;
        const numItems = array.length / itemSize;

        this.#cgl.profileData.profileMeshAttributes += numItems || 0;

        if (typeof options == "function")
        {
            cb = options;
        }

        if (typeof options == "object")
        {
            if (options.cb) cb = options.cb;
            if (options.instanced) instanced = options.instanced;
        }

        if (name == constants_CONSTANTS.SHADER.SHADERVAR_INSTANCE_MMATRIX) instanced = true;

        for (i = 0; i < this._attributes.length; i++)
        {
            const attr = this._attributes[i];
            if (attr.name == name)
            {
                if (attr.numItems === numItems)
                {
                }
                else
                {
                    this._resizeAttr(array, attr);
                }

                this.#cgl.gl.bindBuffer(this.#cgl.gl.ARRAY_BUFFER, attr.buffer);
                this._bufferArray(array, attr);

                return attr;
            }
        }

        // create new buffer...

        const buffer = this.#cgl.gl.createBuffer();

        this.#cgl.gl.bindBuffer(this.#cgl.gl.ARRAY_BUFFER, buffer);
        // this._cgl.gl.bufferData(this._cgl.gl.ARRAY_BUFFER, floatArray, this._cgl.gl.DYNAMIC_DRAW);

        let type = this.#cgl.gl.FLOAT;
        if (options && options.type) type = options.type;
        const attr = {
            "buffer": buffer,
            "name": name,
            "cb": cb,
            "itemSize": itemSize,
            "numItems": numItems,
            "startItem": 0,
            "instanced": instanced,
            "type": type
        };

        this._bufferArray(array, attr);

        if (name == constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_POSITION) this._bufVertexAttrib = attr;
        this._attributes.push(attr);
        this._attribLocs = {};

        return attr;
    }

    getAttributes()
    {
        return this._attributes;
    }

    /**
     * @function updateTexCoords
     * @description update texture coordinates only from a geometry
     * @memberof Mesh
     * @instance
     * @param {Geometry} geom
     */
    updateTexCoords(geom)
    {
        if (geom.texCoords && geom.texCoords.length > 0)
        {
            this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_TEXCOORD, geom.texCoords, 2);
        }
        else
        {
            const tcBuff = new Float32Array(Math.round((geom.vertices.length / 3) * 2));
            this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_TEXCOORD, tcBuff, 2);
        }
    }

    /**
     * @function updateNormals
     * @description update normals only from a geometry
     * @memberof Mesh
     * @instance
     * @param {Geometry} geom
     */
    updateNormals(geom)
    {
        if (geom.vertexNormals && geom.vertexNormals.length > 0)
        {
            this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_NORMAL, geom.vertexNormals, 3);
        }
        else
        {
            const tcBuff = new Float32Array(Math.round((geom.vertices.length)));
            this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_NORMAL, tcBuff, 3);
        }
    }

    /**
     * @param {Array} [arr]
     */
    _setVertexNumbers(arr = null)
    {
        if (!this._verticesNumbers || this._verticesNumbers.length != this._numVerts || arr)
        {
            if (arr) this._verticesNumbers = arr;
            else
            {
                this._verticesNumbers = new Float32Array(this._numVerts);
                for (let i = 0; i < this._numVerts; i++) this._verticesNumbers[i] = i;
            }

            this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_NUMBER, this._verticesNumbers, 1, (_attr, _geom, shader) =>
            {
                if (!shader.uniformNumVertices) shader.uniformNumVertices = new Uniform(shader, "f", "numVertices", this._numVerts);
                shader.uniformNumVertices.setValue(this._numVerts);
            });
        }
    }

    /**
     * @function setVertexIndices
     * @description update vertex indices / faces
     * @memberof Mesh
     * @instance
     * @param {array} vertIndices
     */
    setVertexIndices(vertIndices)
    {
        if (!this.#bufVerticesIndizes)
        {
            this._log.warn("no bufVerticesIndizes: " + this._name);
            return;
        }
        if (vertIndices.length > 0)
        {
            if (vertIndices instanceof Float32Array) this._log.warn("vertIndices float32Array: " + this._name);

            for (let i = 0; i < vertIndices.length; i++)
            {
                if (vertIndices[i] >= this._numVerts)
                {
                    this._log.warn("invalid index in " + this._name, i, vertIndices[i]);
                    return;
                }
            }

            this.#cgl.gl.bindBuffer(this.#cgl.gl.ELEMENT_ARRAY_BUFFER, this.#bufVerticesIndizes);

            /*
             * todo cache this ?
             * if(!this.vertIndicesTyped || this.vertIndicesTyped.length!=this._geom.verticesIndices.length)
             */

            if (vertIndices.length > 65535)
            {
                this.vertIndicesTyped = new Uint32Array(vertIndices);
                this._indexType = this.#cgl.gl.UNSIGNED_INT;
            }
            else
            if (vertIndices instanceof Uint32Array)
            {
                this.vertIndicesTyped = vertIndices;
                this._indexType = this.#cgl.gl.UNSIGNED_INT;
            }
            else
            if (!(vertIndices instanceof Uint16Array))
            {
                this.vertIndicesTyped = new Uint16Array(vertIndices);
                this._indexType = this.#cgl.gl.UNSIGNED_SHORT;
            }
            else this.vertIndicesTyped = vertIndices;

            this.#cgl.gl.bufferData(this.#cgl.gl.ELEMENT_ARRAY_BUFFER, this.vertIndicesTyped, this.#cgl.gl.DYNAMIC_DRAW);
            this.#bufVerticesIndizes.itemSize = 1;
            this.#bufVerticesIndizes.numItems = vertIndices.length;
        }
        else this.#bufVerticesIndizes.numItems = 0;
    }

    /**
     * @function setGeom
     * @memberof Mesh
     * @instance
     * @description set geometry for mesh
     * @param {Geometry} geom
     * @param {boolean} removeRef
     */
    setGeom(geom, removeRef = false)
    {
        this.#geom = geom;
        if (geom.glPrimitive != null) this._glPrimitive = geom.glPrimitive;
        if (this.#geom && this.#geom.name) this._name = "mesh " + this.#geom.name;

        MESH.lastMesh = null;
        this.#cgl.profileData.profileMeshSetGeom++;

        this._disposeAttributes();

        this.updateVertices(this.#geom);
        this.setVertexIndices(this.#geom.verticesIndices);

        if (this.addVertexNumbers) this._setVertexNumbers();

        const geomAttribs = this.#geom.getAttributes();

        const attribAssoc = {
            "texCoords": constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_TEXCOORD,
            "vertexNormals": constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_NORMAL,
            "vertexColors": constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_COLOR,
            "tangents": "attrTangent",
            "biTangents": "attrBiTangent",
        };

        for (const index in geomAttribs)
            if (geomAttribs[index].data && geomAttribs[index].data.length)
                this.setAttribute(attribAssoc[index] || index, geomAttribs[index].data, geomAttribs[index].itemSize);

        if (removeRef)
        {
            this.#geom = null;
        }
    }

    _preBind(shader)
    {
        for (let i = 0; i < this._attributes.length; i++)
            if (this._attributes[i].cb)
                this._attributes[i].cb(this._attributes[i], this.#geom, shader);
    }

    _checkAttrLengths()
    {
        if (this.memFreed) return;
        // check length
        for (let i = 0; i < this._attributes.length; i++)
        {
            if (this._attributes[i].arrayLength / this._attributes[i].itemSize < this._attributes[0].arrayLength / this._attributes[0].itemSize)
            {
                let name = "unknown";
                if (this.#geom)name = this.#geom.name;

            /*
             * this._log.warn(
             *     name + ": " + this._attributes[i].name +
             *     " wrong attr length. is:", this._attributes[i].arrayLength / this._attributes[i].itemSize,
             *     " should be:", this._attributes[0].arrayLength / this._attributes[0].itemSize,
             * );
             */
            }
        }
    }

    _bind(shader)
    {
        if (!shader) return;
        if (!shader.isValid()) return;

        let attrLocs = [];
        if (this._attribLocs[shader.id]) attrLocs = this._attribLocs[shader.id];
        else this._attribLocs[shader.id] = attrLocs;

        this._lastShader = shader;
        if (shader.lastCompile > this._lastAttrUpdate || attrLocs.length != this._attributes.length)
        {
            this._lastAttrUpdate = shader.lastCompile;
            for (let i = 0; i < this._attributes.length; i++) attrLocs[i] = -1;
        }

        for (let i = 0; i < this._attributes.length; i++)
        {
            const attribute = this._attributes[i];
            if (attrLocs[i] == -1)
            {
                if (attribute._attrLocationLastShaderTime != shader.lastCompile)
                {
                    attribute._attrLocationLastShaderTime = shader.lastCompile;
                    attrLocs[i] = this.#cgl.glGetAttribLocation(shader.getProgram(), attribute.name);
                    // this._log.log('attribloc',attribute.name,attrLocs[i]);
                    this.#cgl.profileData.profileAttrLoc++;
                }
            }

            if (attrLocs[i] != -1)
            {
                this.#cgl.gl.enableVertexAttribArray(attrLocs[i]);
                this.#cgl.gl.bindBuffer(this.#cgl.gl.ARRAY_BUFFER, attribute.buffer);

                if (attribute.instanced)
                {
                // todo: easier way to fill mat4 attribs...
                    if (attribute.itemSize <= 4)
                    {
                        if (!attribute.itemSize || attribute.itemSize == 0) this._log.warn("instanced attrib itemsize error", this.#geom.name, attribute);

                        this.#cgl.gl.vertexAttribPointer(attrLocs[i], attribute.itemSize, attribute.type, false, attribute.itemSize * 4, 0);
                        this.#cgl.gl.vertexAttribDivisor(attrLocs[i], 1);
                    }
                    else if (attribute.itemSize == 16)
                    {
                        const stride = 16 * 4;

                        this.#cgl.gl.vertexAttribPointer(attrLocs[i], 4, attribute.type, false, stride, 0);
                        this.#cgl.gl.enableVertexAttribArray(attrLocs[i] + 1);
                        this.#cgl.gl.vertexAttribPointer(attrLocs[i] + 1, 4, attribute.type, false, stride, 4 * 4 * 1);
                        this.#cgl.gl.enableVertexAttribArray(attrLocs[i] + 2);
                        this.#cgl.gl.vertexAttribPointer(attrLocs[i] + 2, 4, attribute.type, false, stride, 4 * 4 * 2);
                        this.#cgl.gl.enableVertexAttribArray(attrLocs[i] + 3);
                        this.#cgl.gl.vertexAttribPointer(attrLocs[i] + 3, 4, attribute.type, false, stride, 4 * 4 * 3);

                        this.#cgl.gl.vertexAttribDivisor(attrLocs[i], 1);
                        this.#cgl.gl.vertexAttribDivisor(attrLocs[i] + 1, 1);
                        this.#cgl.gl.vertexAttribDivisor(attrLocs[i] + 2, 1);
                        this.#cgl.gl.vertexAttribDivisor(attrLocs[i] + 3, 1);
                    }
                    else
                    {
                        this._log.warn("unknown instance attrib size", attribute.name);
                    }
                }
                else
                {
                    if (!attribute.itemSize || attribute.itemSize == 0) this._log.warn("attrib itemsize error", this._name, attribute);
                    this.#cgl.gl.vertexAttribPointer(attrLocs[i], attribute.itemSize, attribute.type, false, attribute.itemSize * 4, 0);

                    if (attribute.pointer)
                    {
                        for (let ip = 0; ip < attribute.pointer.length; ip++)
                        {
                            const pointer = attribute.pointer[ip];

                            if (pointer.loc == -1)
                                pointer.loc = this.#cgl.glGetAttribLocation(shader.getProgram(), pointer.name);

                            this.#cgl.profileData.profileAttrLoc++;

                            this.#cgl.gl.enableVertexAttribArray(pointer.loc);
                            this.#cgl.gl.vertexAttribPointer(pointer.loc, attribute.itemSize, attribute.type, false, pointer.stride, pointer.offset);
                        }
                    }
                    if (this.bindFeedback) this.bindFeedback(attribute);
                }
            }
        }

        if (this.#bufVerticesIndizes && this.#bufVerticesIndizes.numItems !== 0) this.#cgl.gl.bindBuffer(this.#cgl.gl.ELEMENT_ARRAY_BUFFER, this.#bufVerticesIndizes);
    }

    unBind()
    {
        const shader = this._lastShader;
        this._lastShader = null;
        if (!shader) return;

        let attrLocs = [];
        if (this._attribLocs[shader.id]) attrLocs = this._attribLocs[shader.id];
        else this._attribLocs[shader.id] = attrLocs;

        MESH.lastMesh = null;

        for (let i = 0; i < this._attributes.length; i++)
        {
            if (this._attributes[i].instanced)
            {
            // todo: easier way to fill mat4 attribs...
                if (this._attributes[i].itemSize <= 4)
                {
                    if (attrLocs[i] != -1) this.#cgl.gl.vertexAttribDivisor(attrLocs[i], 0);
                    if (attrLocs[i] >= 0) this.#cgl.gl.disableVertexAttribArray(attrLocs[i]);
                }
                else
                {
                    this.#cgl.gl.vertexAttribDivisor(attrLocs[i], 0);
                    this.#cgl.gl.vertexAttribDivisor(attrLocs[i] + 1, 0);
                    this.#cgl.gl.vertexAttribDivisor(attrLocs[i] + 2, 0);
                    this.#cgl.gl.vertexAttribDivisor(attrLocs[i] + 3, 0);
                    this.#cgl.gl.disableVertexAttribArray(attrLocs[i] + 1);
                    this.#cgl.gl.disableVertexAttribArray(attrLocs[i] + 2);
                    this.#cgl.gl.disableVertexAttribArray(attrLocs[i] + 3);
                }
            }

            if (attrLocs[i] != -1) this.#cgl.gl.disableVertexAttribArray(attrLocs[i]);

        }
    }

    meshChanged()
    {
        return this.#cgl.lastMesh && this.#cgl.lastMesh != this;
    }

    printDebug()
    {
        console.log("--attributes");
        for (let i = 0; i < this._attributes.length; i++)
        {
            console.log("attribute " + i + " " + this._attributes[i].name);
        }
    }

    /**
     * @param {Number} num
     */
    setNumVertices(num)
    {
        // this._bufVerticesIndizes.numItems = num;
        this._bufVertexAttrib.numItems = num;
    }

    /**
     * @returns {Number}
     */
    getNumVertices()
    {
        // return this._bufVerticesIndizes.numItems;
        return this._bufVertexAttrib.numItems;
    }

    /**
     * @param {Number} num
     */
    setNumIndices(num)
    {
        this.#bufVerticesIndizes.numItems = num;
    }

    /**
     * @returns {Number}
     */
    getNumIndices()
    {
        return this.#bufVerticesIndizes.numItems;
    }

    /**
     * @function render
     * @memberof Mesh
     * @instance
     * @description draw mesh to screen
     * @param {CgShader} shader
     */
    render(shader)
    {
        // TODO: enable/disablevertex only if the mesh has changed... think drawing 10000x the same mesh

        if (this.#cgl.aborted) return;
        shader = shader || this.#cgl.getShader();

        if (!shader)
        {
            return console.log("shadern not valid");
        }

        if (!shader.isValid())
        {
            shader = this.#cgl.getErrorShader();
        }

        this._checkAttrLengths();

        if (this.#geom)
        {
            if (this._preWireframeGeom && !shader.wireframe && !this.#geom.isIndexed())
            {
                this.setGeom(this._preWireframeGeom);
                this._preWireframeGeom = null;
            }

            if (shader.wireframe)
            {
                let changed = false;

                if (this.#geom.isIndexed())
                {
                    if (!this._preWireframeGeom)
                    {
                        this._preWireframeGeom = this.#geom;
                        this.#geom = this.#geom.copy();
                    }

                    this.#geom.unIndex();
                    changed = true;
                }

                if (!this.#geom.getAttribute("attrBarycentric"))
                {
                    if (!this._preWireframeGeom)
                    {
                        this._preWireframeGeom = this.#geom;
                        this.#geom = this.#geom.copy();
                    }
                    changed = true;

                    this.#geom.calcBarycentric();
                }
                if (changed) this.setGeom(this.#geom);
            }
        }

        let needsBind = false;
        if (MESH.lastMesh != this)
        {
            if (MESH.lastMesh) MESH.lastMesh.unBind();
            needsBind = true;
        }

        if (needsBind) this._preBind(shader);

        if (!shader.bind()) return;

        this._bind(shader);
        if (this.addVertexNumbers) this._setVertexNumbers();

        MESH.lastMesh = this;

        let prim = this.#cgl.gl.TRIANGLES;
        if (this._glPrimitive !== undefined) prim = this._glPrimitive;
        if (shader.glPrimitive !== null) prim = shader.glPrimitive;

        let elementDiv = 1;
        let doQuery = this.#cgl.profileData.doProfileGlQuery;
        let queryStarted = false;
        if (doQuery)
        {
            let id = this._name + " - " + shader.getName() + " #" + shader.id;
            if (this._numInstances) id += " instanced " + this._numInstances + "x";

            let queryProfilerData = this.#cgl.profileData.glQueryData[id];

            if (!queryProfilerData) queryProfilerData = { "id": id, "num": 0 };

            if (shader.opId)queryProfilerData.shaderOp = shader.opId;
            if (this.opId)queryProfilerData.meshOp = this.opId;

            this.#cgl.profileData.glQueryData[id] = queryProfilerData;

            if (!this._queryExt && this._queryExt !== false) this._queryExt = this.#cgl.enableExtension("EXT_disjoint_timer_query_webgl2") || false;
            if (this._queryExt)
            {
                if (queryProfilerData._drawQuery)
                {
                    const available = this.#cgl.gl.getQueryParameter(queryProfilerData._drawQuery, this.#cgl.gl.QUERY_RESULT_AVAILABLE);
                    if (available)
                    {
                        const elapsedNanos = this.#cgl.gl.getQueryParameter(queryProfilerData._drawQuery, this.#cgl.gl.QUERY_RESULT);
                        const currentTimeGPU = elapsedNanos / 1000000;

                        queryProfilerData._times = queryProfilerData._times || 0;
                        queryProfilerData._times += currentTimeGPU;
                        queryProfilerData._numcount++;
                        queryProfilerData.when = performance.now();
                        queryProfilerData._drawQuery = null;
                        queryProfilerData.queryStarted = false;
                    }
                }

                if (!queryProfilerData.queryStarted)
                {
                    queryProfilerData._drawQuery = this.#cgl.gl.createQuery();
                    this.#cgl.gl.beginQuery(this._queryExt.TIME_ELAPSED_EXT, queryProfilerData._drawQuery);
                    queryStarted = queryProfilerData.queryStarted = true;
                }
            }
        }

        if (this.hasFeedbacks && this.hasFeedbacks()) this.drawFeedbacks(shader, prim);
        else if (!this.#bufVerticesIndizes || this.#bufVerticesIndizes.numItems === 0)
        {

            /*
             * for (let i = 0; i < this._attributes.length; i++)
             * {
             *     if (this._attributes[i].arrayLength / this._attributes[i].itemSize != this._bufVertexAttrib.floatArray.length / 3)
             *     {
             *         this._log.warn("attrib buffer length wrong! ", this._attributes[i].name, this._attributes[i].arrayLength / this._attributes[i].itemSize, this._bufVertexAttrib.floatArray.length / 3, this._attributes[i].itemSize);
             *         // this._log.log(this);
             *         // debugger;
             *         return;
             *     }
             * }
             */

            if (prim == this.#cgl.gl.TRIANGLES)elementDiv = 3;

            if (this._numInstances === 0) this.#cgl.gl.drawArrays(prim, this._bufVertexAttrib.startItem, this._bufVertexAttrib.numItems - this._bufVertexAttrib.startItem);
            else this.#cgl.gl.drawArraysInstanced(prim, this._bufVertexAttrib.startItem, this._bufVertexAttrib.numItems, this._numInstances);
        }
        else
        {
            if (prim == this.#cgl.gl.TRIANGLES)elementDiv = 3;
            if (this._numInstances === 0)
            {
                this.#cgl.gl.drawElements(prim, this.#bufVerticesIndizes.numItems, this._indexType, 0);
            }
            else
            {
                this.#cgl.gl.drawElementsInstanced(prim, this.#bufVerticesIndizes.numItems, this._indexType, 0, this._numInstances);
            }
        }

        if (this.#cgl.debugOneFrame && this.#cgl.gl.getError() != this.#cgl.gl.NO_ERROR)
        {
            this._log.error("mesh draw gl error");
            this._log.error("mesh", this);
            this._log.error("shader", shader);

            const attribNames = [];
            for (let i = 0; i < this.#cgl.gl.getProgramParameter(shader.getProgram(), this.#cgl.gl.ACTIVE_ATTRIBUTES); i++)
            {
                const name = this.#cgl.gl.getActiveAttrib(shader.getProgram(), i).name;
                this._log.error("attrib ", name);
            }
        }

        this.#cgl.profileData.profileMeshNumElements += (this._bufVertexAttrib.numItems / elementDiv) * (this._numInstances || 1);
        this.#cgl.profileData.profileMeshDraw++;

        if (doQuery && queryStarted)
        {
            this.#cgl.gl.endQuery(this._queryExt.TIME_ELAPSED_EXT);
        }

        this.#cgl.printError("mesh render " + this._name);

        this.unBind();
    }

    setNumInstances(n)
    {
        n = Math.max(0, n);
        if (this._numInstances != n)
        {
            this._numInstances = n;
            const indexArr = new Float32Array(n);
            for (let i = 0; i < n; i++) indexArr[i] = i;
            this.setAttribute(constants_CONSTANTS.SHADER.SHADERVAR_INSTANCE_INDEX, indexArr, 1, { "instanced": true });
        }
    }

    _disposeAttributes()
    {
        if (!this._attributes) return;

        for (let i = 0; i < this._attributes.length; i++)
        {
            if (this._attributes[i].buffer)
            {
                this.#cgl.gl.deleteBuffer(this._attributes[i].buffer);
                this._attributes[i].buffer = null;
            }
        }
        this._attributes.length = 0;
    }

    dispose()
    {
        if (this.#cgl.aborted) return;
        if (this._bufVertexAttrib && this._bufVertexAttrib.buffer) this.#cgl.gl.deleteBuffer(this._bufVertexAttrib.buffer);
        if (this.#bufVerticesIndizes) this.#cgl.gl.deleteBuffer(this.#bufVerticesIndizes);
        this.#bufVerticesIndizes = null;

        this._disposeAttributes();
    }
}



;// CONCATENATED MODULE: ./src/core/cg/cg_shader.js






/**
 * @typedef ShaderModule
 * @property {String} title
 * @property {String} name
 * @property {Number} id
 * @property {Number} numId
 * @property {String} group
 * @property {String} prefix
 * @property {Number} priority
 * @property {Number} num
 * @property {String} attributes
 * @property {String} srcBodyFrag
 * @property {String} srcBodyVert
 * @property {String} srcHeadFrag
 * @property {String} srcHeadVert
  */

class CgShader extends Events
{
    id = simpleId();
    _isValid = true;

    /** @type {Array<Array<String>>} */
    _defines = [];

    /** @type {Array<String>} */
    _moduleNames = [];

    _moduleNumId = 0;
    _needsRecompile = true;
    _compileReason = "initial";

    /** @type {Array<ShaderModule>} */
    _modules = [];

    _compileCount = 0;

    logError = true;
    num = -1;
    lastCompile = 0;

    constructor()
    {
        super();
    }

    /**
     * @param {string} reason
     */
    setWhyCompile(reason)
    {
        this._compileReason = reason;
        this._needsRecompile = true;
    }

    getWhyCompile()
    {
        return this._compileReason;
    }

    needsRecompile()
    {
        return this._needsRecompile;
    }

    /**
     * @param {string} name
     */
    removeUniform(name)
    {
        for (let i = 0; i < this._uniforms.length; i++)
        {
            if (this._uniforms[i].getName() == name)
            {
                this._uniforms.splice(i, 1);
            }
        }
        this.setWhyCompile("remove uniform " + name);
    }

    /**
     * @param {String} name
     * @param {number} stage
     */
    hasUniformInStage(name, stage)
    {

        let binding = this.defaultUniBindingFrag;
        if (stage == GPUShaderStage.VERTEX) binding = this.defaultUniBindingVert;
        if (stage == GPUShaderStage.COMPUTE) binding = this.defaultUniBindingCompute;

        for (let i = 0; i < this._uniforms.length; i++)
        {

            console.log("hasuniiiiiiiiiiiiiii", this._uniforms[i].getName(), name);
            if (this._uniforms[i].getName() == name) return true;
        }
        return false;
    }

    /**
     * @param {String} name
     */
    hasUniform(name)
    {
    }

    /**
     * easily enable/disable a define without a value
     * @param {String} name
     * @param {Port|boolean} enabled value or port
     */
    toggleDefine(name, enabled)
    {
        if (enabled && typeof (enabled) == "object" && enabled.addEventListener) // port
        {
            if (enabled.changeListener)enabled.off(enabled.changeListener);

            enabled.onToggleDefine = (v) =>
            {
                this.toggleDefine(name, v);
            };

            enabled.changeListener = enabled.on("change", enabled.onToggleDefine);
            enabled = enabled.get();
        }

        if (enabled) this.define(name);
        else this.removeDefine(name);
    }

    /**
     * add a define to a shader, e.g.  #define DO_THIS_THAT 1
     * @param {String} name
     * @param {any} value (can be empty)
     */
    define(name, value = "")
    {
        if (value === null || value === undefined) value = "";

        if (typeof (value) == "object") // port
        {
            value.removeEventListener("change", value.onDefineChange);
            value.onDefineChange = (v) =>
            {
                this.define(name, v);
            };
            value.on("change", value.onDefineChange);

            value = value.get();
        }

        for (let i = 0; i < this._defines.length; i++)
        {
            if (this._defines[i][0] == name && this._defines[i][1] == value) return;
            if (this._defines[i][0] == name)
            {
                this._defines[i][1] = value;
                this.setWhyCompile("define " + name + " " + value);
                return;
            }
        }
        this.setWhyCompile("define " + name + " " + value);

        this._defines.push([name, value]);
    }

    getDefines()
    {
        return this._defines;
    }

    /**
     * @param {string} name
     */
    getDefine(name)
    {
        for (let i = 0; i < this._defines.length; i++)
            if (this._defines[i][0] == name) return this._defines[i][1];
        return null;
    }

    /**
     * return true if shader has define
     * @function hasDefine
     * @memberof Shader
     * @instance
     * @param {String} name
     * @return {Boolean}
     */
    hasDefine(name)
    {
        for (let i = 0; i < this._defines.length; i++)
            if (this._defines[i][0] == name) return true;
    }

    /**
     * remove a define from a shader
     * @param {string} name
     */
    removeDefine(name)
    {
        for (let i = 0; i < this._defines.length; i++)
        {
            if (this._defines[i][0] == name)
            {
                this._defines.splice(i, 1);
                this.setWhyCompile("define removed:" + name);
                return;
            }
        }
    }

    /**
     * @param {any} modId
     */
    hasModule(modId)
    {
        for (let i = 0; i < this._modules.length; i++)
            if (this._modules[i].id == modId) return true;

        return false;
    }

    /**
     *
     * @param {Array<String>} names
     */
    setModules(names)
    {
        this._moduleNames = names;
    }

    /**
     * remove a module from shader
     * @param {ShaderModule} mod the module to be removed
     */
    removeModule(mod)
    {
        for (let i = 0; i < this._modules.length; i++)
        {
            if (mod && mod.id)
            {
                if (this._modules[i].id == mod.id || !this._modules[i])
                {
                    let found = true;
                    while (found)
                    {
                        found = false;
                        for (let j = 0; j < this._uniforms.length; j++)
                        {
                            if (this._uniforms[j].getName().startsWith(mod.prefix))
                            {
                                this._uniforms.splice(j, 1);
                                found = true;
                                continue;
                            }
                        }
                    }

                    this.setWhyCompile("remove module " + mod.title);
                    this._modules.splice(i, 1);
                    break;
                }
            }
        }
    }

    getNumModules()
    {
        return this._modules.length;
    }

    getCurrentModules() { return this._modules; }

    /**
     * add a module
     * @param {ShaderModule} mod the module to be added
     * @param {ShaderModule} [sibling] sibling module, new module will share the same group
     */
    addModule(mod, sibling)
    {
        if (this.hasModule(mod.id)) return;
        if (!mod.id) mod.id = CABLES.simpleId();
        if (!mod.numId) mod.numId = this._moduleNumId;
        if (!mod.num)mod.num = this._modules.length;
        if (sibling && !sibling.group) sibling.group = simpleId();

        if (!mod.group)
            if (sibling) mod.group = sibling.group;
            else mod.group = simpleId();

        mod.prefix = "mod" + mod.group + "_";
        this._modules.push(mod);

        this.setWhyCompile("add module " + mod.title);
        this._moduleNumId++;

        return mod;
    }

    isValid()
    {
        return this._isValid;
    }

}



;// CONCATENATED MODULE: ./src/core/cgl/cgl_shader_default_glsl.vert
/* harmony default export */ const cgl_shader_default_glsl = ("{{MODULES_HEAD}}\nIN vec3 vPosition; //!@\nIN vec2 attrTexCoord;\nIN vec3 attrVertNormal;\nIN vec3 attrTangent,attrBiTangent;\n\nIN float attrVertIndex;\n\nOUT vec2 texCoord;\nOUT vec3 norm;\nUNI mat4 projMatrix;\nUNI mat4 viewMatrix;\nUNI mat4 modelMatrix;\n\nvoid main()\n{\n    texCoord=attrTexCoord;\n    norm=attrVertNormal;\n    vec4 pos=vec4(vPosition,  1.0);\n    vec3 tangent=attrTangent;\n    vec3 bitangent=attrBiTangent;\n    mat4 mMatrix=modelMatrix;\n    gl_PointSize=10.0;\n\n    {{MODULE_VERTEX_POSITION}}\n\n    mat4 modelViewMatrix=viewMatrix*mMatrix;\n    {{MODULE_VERTEX_MODELVIEW}}\n\n    gl_Position = projMatrix * modelViewMatrix * pos;\n}\n");
;// CONCATENATED MODULE: ./src/core/cgl/cgl_shader.js














// ---------------------------------------------------------------------------

/*

proposal default shader variable names:

attrVertex - currently: vPosition
attrVertexIndex - currently: attrVertIndex
attrTexCoord
attrInstMat - currently: instMat
attrVertColor
attrTangent
attrBiTangent

uProjMatrix - currently: projMatrix
uModelMatrix - currently: modelMatrix
uNormalMatrix - currently: normalMatrix
uCamPosition - currently: camPos

*/

// ---------------------------------------------------------------------------

let materialIdCounter = 0;

function getDefaultVertexShader()
{
    return cgl_shader_default_glsl;
}

/**
 * @param {number} [r]
 * @param {number} [g]
 * @param {number} [b]
 */
function getDefaultFragmentShader(r, g, b)
{
    if (r == undefined)
    {
        r = 0.5;
        g = 0.5;
        b = 0.5;
    }
    return ""
        + nl + "IN vec2 texCoord;"
        + nl + "{{MODULES_HEAD}}"
        + nl + "void main()"
        + nl + "{"

        + nl + "    vec4 col=vec4(" + r + "," + g + "," + b + ",1.0);"
        + nl + "    {{MODULE_COLOR}}"
        + nl + "    outColor = col;"
        + nl + "}";
}

/**
 * @class
 * @namespace external:CGL
 * @hideconstructor
 * @param _cgl
 * @param _name
 * @param _op
 * @example
 * var shader=new CGL.Shader(cgl,'MinimalMaterial');
 * shader.setSource(attachments.shader_vert,attachments.shader_frag);
 */
class CglShader extends CgShader
{

    /** @type {Uniform[]} */
    _uniforms = [];

    /**
     * @param {CglContext} _cgl
     * @param {string} _name
     * @param {Op} [_op]
     */
    constructor(_cgl, _name, _op)
    {
        super();
        if (!_cgl) throw new Error("shader constructed without cgl " + _name);

        this._log = new Logger("cgl_shader");
        this._cgl = _cgl;

        if (!_name) this._log.stack("no shader name given");
        this._name = _name || "unknown";

        if (_op) this.opId = _op.id;
        this.glslVersion = 0;
        if (_cgl.glVersion > 1) this.glslVersion = 300;

        this._materialId = ++materialIdCounter;

        this._program = null;
        this._drawBuffers = [true];
        this.error = null;

        this.ignoreMissingUniforms = false;
        this._projMatrixUniform = null;
        this._mvMatrixUniform = null;
        this._mMatrixUniform = null;
        this._vMatrixUniform = null;
        this._camPosUniform = null;
        this._normalMatrixUniform = null;
        this._inverseViewMatrixUniform = null;
        this._fromUserInteraction = false;

        this._attrVertexPos = -1;
        this.precision = _cgl.patch.config.glslPrecision || "highp";

        this._pMatrixState = -1;
        this._vMatrixState = -1;

        this._countMissingUniforms = 0;
        this._modGroupCount = 0; // not needed anymore...
        this._feedBackNames = [];
        this._attributes = [];

        this.glPrimitive = null;
        this.offScreenPass = false;
        this._extensions = [];
        this.srcVert = getDefaultVertexShader();
        this.srcFrag = getDefaultFragmentShader();
        this.lastCompile = 0;

        this._libs = [];
        this._structNames = [];
        this._structUniformNames = [];
        this._textureStackUni = [];
        this._textureStackTex = [];
        this._textureStackType = [];
        this._textureStackTexCgl = [];

        this._tempNormalMatrix = mat4_create();
        this._tempCamPosMatrix = mat4_create();
        this._tempInverseViewMatrix = mat4_create();
        this._tempInverseProjMatrix = mat4_create();

        this.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_NORMAL", "MODULE_BEGIN_FRAG", "MODULE_VERTEX_MODELVIEW"]);
    }

    isValid()
    {
        return this._isValid;
    }

    getCgl()
    {
        return this._cgl;
    }

    getName()
    {
        return this._name;
    }

    /**
     * @param {string} name
     */
    enableExtension(name)
    {
        this.setWhyCompile("enable extension " + name);

        this._extensions.push(name);
    }

    getAttrVertexPos()
    {
        return this._attrVertexPos;
    }

    hasTextureUniforms()
    {
        for (let i = 0; i < this._uniforms.length; i++)
            if (this._uniforms[i].getType() == "t") return true;
        return false;
    }

    /**
     * copy all uniform values from another shader
     * @param {CglShader} origShader uniform values will be copied from this shader
     */
    copyUniformValues(origShader)
    {
        for (let i = 0; i < origShader._uniforms.length; i++)
        {
            if (!this._uniforms[i])
            {
                this._log.log("unknown uniform?!");
                continue;
            }

            this.getUniform(origShader._uniforms[i].getName()).set(origShader._uniforms[i].getValue());
        }

        this.popTextures();
        for (let i = 0; i < origShader._textureStackUni.length; i++)
        {
            this._textureStackUni[i] = origShader._textureStackUni[i];
            this._textureStackTex[i] = origShader._textureStackTex[i];
            this._textureStackType[i] = origShader._textureStackType[i];
            this._textureStackTexCgl[i] = origShader._textureStackTexCgl[i];
        }

    }

    /**
     * copy current shader
     * @returns {CglShader} newShader
     */
    copy()
    {
        const shader = new CglShader(this._cgl, this._name + " copy");
        shader.setSource(this.srcVert, this.srcFrag);

        shader._modules = JSON.parse(JSON.stringify(this._modules));
        shader._defines = JSON.parse(JSON.stringify(this._defines));

        shader._modGroupCount = this._modGroupCount;
        shader._moduleNames = this._moduleNames;
        shader.glPrimitive = this.glPrimitive;
        shader.offScreenPass = this.offScreenPass;
        shader._extensions = this._extensions;
        shader.wireframe = this.wireframe;
        shader._attributes = this._attributes;

        for (let i = 0; i < this._uniforms.length; i++)
        {
            const u = this._uniforms[i].copy(shader);
            u.resetLoc();
        }

        shader.setWhyCompile("copy");
        return shader;
    }

    /**
     * set shader source code
     * @param {String} srcVert
     * @param {String} srcFrag
     * @param {Boolean} fromUserInteraction
     */
    setSource(srcVert, srcFrag, fromUserInteraction = false)
    {
        this._fromUserInteraction = fromUserInteraction;
        this.srcVert = srcVert;
        this.srcFrag = srcFrag;
        this.setWhyCompile("Source changed");
        this._isValid = true;
    }

    _addLibs(src)
    {
        for (const id in ShaderLibMods)
        {
            if (src.includes(id))
            {
                const lib = new ShaderLibMods[id]();
                src = src.replace("{{" + id + "}}", lib.srcHeadFrag);
                this._libs.push(lib);
                if (lib.initUniforms)lib.initUniforms(this);
            }
        }

        return src;
    }

    createStructUniforms()
    {
        // * create structs
        let structStrFrag = "";
        let structStrVert = ""; // TODO: not used yet

        this._structNames = [];
        // * reset the arrays holding the value each recompile so we don't skip structs
        // * key value mapping so the same struct can be added twice (two times the same modifier)
        this._injectedStringsFrag = {};
        this._injectedStringsVert = {};

        this._structUniformNamesIndicesFrag = [];
        this._structUniformNamesIndicesVert = [];

        for (let i = 0; i < this._uniforms.length; i++)
        {
            // * only add uniforms to struct that are a member of a struct
            if (this._uniforms[i].isStructMember())
            {
                const injectionString = "{{INJECTION_POINT_STRUCT_" + this._uniforms[i]._structName + "}}";

                // * check if struct is not already part of shader
                if (!this._structNames.includes(this._uniforms[i]._structName))
                {
                    // * create struct definition with placeholder string to inject
                    const structDefinition = "struct "
                        + this._uniforms[i]._structName + " {" + nl
                        + injectionString
                        + "};" + nl + nl;

                    if (this._uniforms[i].getShaderType() === "both" || this._uniforms[i].getShaderType() === "frag")
                        structStrFrag = structStrFrag.concat(structDefinition);

                    if (this._uniforms[i].getShaderType() === "both" || this._uniforms[i].getShaderType() === "vert")
                        structStrVert = structStrVert.concat(structDefinition);

                    this._structNames.push(this._uniforms[i]._structName);
                    this._injectedStringsFrag[this._uniforms[i]._structName] = [];
                    this._injectedStringsVert[this._uniforms[i]._structName] = [];
                }

                // * create member & comment
                let comment = "";
                if (this._uniforms[i].comment) comment = " // " + this._uniforms[i].comment;

                let stringToInsert = "";
                if (this._uniforms[i].getGlslTypeString() == undefined)stringToInsert += "//";
                stringToInsert += "  " + this._uniforms[i].getGlslTypeString()
                        + " " + this._uniforms[i]._propertyName + ";"
                        + comment;

                if (this._uniforms[i].getShaderType() === "both")
                {
                    // * inject member before {injectionString}
                    if (
                        !this._injectedStringsFrag[this._uniforms[i]._structName].includes(stringToInsert)
                    && !this._injectedStringsVert[this._uniforms[i]._structName].includes(stringToInsert))
                    {
                        const insertionIndexFrag = structStrFrag.lastIndexOf(injectionString);
                        const insertionIndexVert = structStrVert.lastIndexOf(injectionString);

                        structStrFrag =
                            structStrFrag.slice(0, insertionIndexFrag)
                            + stringToInsert + structStrFrag.slice(insertionIndexFrag - 1);

                        structStrVert =
                            structStrVert.slice(0, insertionIndexVert)
                            + stringToInsert + structStrVert.slice(insertionIndexVert - 1);

                        this._injectedStringsFrag[this._uniforms[i]._structName].push(stringToInsert);
                        this._injectedStringsVert[this._uniforms[i]._structName].push(stringToInsert);
                    }

                    if (!this._structUniformNamesIndicesFrag.includes(i)) this._structUniformNamesIndicesFrag.push(i);
                    if (!this._structUniformNamesIndicesVert.includes(i)) this._structUniformNamesIndicesVert.push(i);
                }
                else if (this._uniforms[i].getShaderType() === "frag")
                {
                    // * inject member before {injectionString}
                    if (!this._injectedStringsFrag[this._uniforms[i]._structName].includes(stringToInsert)) //
                    {
                        const insertionIndexFrag = structStrFrag.lastIndexOf(injectionString);

                        structStrFrag =
                            structStrFrag.slice(0, insertionIndexFrag)
                            + stringToInsert + structStrFrag.slice(insertionIndexFrag - 1);

                        this._injectedStringsFrag[this._uniforms[i]._structName].push(stringToInsert);
                    }

                    if (!this._structUniformNamesIndicesFrag.includes(i)) this._structUniformNamesIndicesFrag.push(i);
                }
                else if (this._uniforms[i].getShaderType() === "vert")
                {
                    // * inject member before {injectionString}
                    if (!this._injectedStringsVert[this._uniforms[i]._structName].includes(stringToInsert))
                    {
                        const insertionIndexVert = structStrVert.lastIndexOf(injectionString);

                        structStrVert =
                            structStrVert.slice(0, insertionIndexVert)
                            + stringToInsert + structStrVert.slice(insertionIndexVert - 1);

                        this._injectedStringsVert[this._uniforms[i]._structName].push(stringToInsert);
                    }

                    if (!this._structUniformNamesIndicesVert.includes(i)) this._structUniformNamesIndicesVert.push(i);
                }
            }
        }

        // * dedupe injected uni declarations
        this._uniDeclarationsFrag = [];
        this._uniDeclarationsVert = [];

        // * remove struct injection points and add uniform in fragment
        for (let i = 0; i < this._structUniformNamesIndicesFrag.length; i += 1)
        {
            const index = this._structUniformNamesIndicesFrag[i];
            const uniDeclarationString = "UNI " + this._uniforms[index]._structName + " " + this._uniforms[index]._structUniformName + ";" + nl;

            if (!this._uniDeclarationsFrag.includes(uniDeclarationString))
            {
                const injectionString = "{{INJECTION_POINT_STRUCT_" + this._uniforms[index]._structName + "}}";

                structStrFrag = structStrFrag.replace(injectionString, "");
                structStrFrag += uniDeclarationString;

                this._uniDeclarationsFrag.push(uniDeclarationString);
            }
        }

        // * remove struct injection points and add uniform in vertex
        for (let i = 0; i < this._structUniformNamesIndicesVert.length; i += 1)
        {
            const index = this._structUniformNamesIndicesVert[i];
            const uniDeclarationString = "UNI " + this._uniforms[index]._structName + " " + this._uniforms[index]._structUniformName + ";" + nl;

            if (!this._uniDeclarationsVert.includes(uniDeclarationString))
            {
                const injectionString = "{{INJECTION_POINT_STRUCT_" + this._uniforms[index]._structName + "}}";

                structStrVert = structStrVert.replace(injectionString, "");
                structStrVert += uniDeclarationString;
                this._uniDeclarationsVert.push(uniDeclarationString);
            }
        }

        return [structStrVert, structStrFrag];
    }

    _getAttrSrc(attr, firstLevel)
    {
        const r = {};
        if (attr.name && attr.type)
        {
            r.srcHeadVert = "";
            if (!firstLevel) r.srcHeadVert += "#ifndef ATTRIB_" + attr.name + nl;
            r.srcHeadVert += "#define ATTRIB_" + attr.name + nl;
            r.srcHeadVert += "IN " + attr.type + " " + attr.name + ";" + nl;
            if (!firstLevel) r.srcHeadVert += "#endif" + nl;

            if (attr.nameFrag)
            {
                r.srcHeadVert += "";
                if (!firstLevel) r.srcHeadVert += "#ifndef ATTRIB_" + attr.nameFrag + nl;
                r.srcHeadVert += "#define ATTRIB_" + attr.nameFrag + nl;
                r.srcHeadVert += "OUT " + attr.type + " " + attr.nameFrag + ";" + nl;
                if (!firstLevel) r.srcHeadVert += "#endif" + nl;

                r.srcVert = "" + nl + attr.nameFrag + "=" + attr.name + ";";

                r.srcHeadFrag = "";
                if (!firstLevel) r.srcHeadFrag += "#ifndef ATTRIB_" + attr.nameFrag + nl;
                r.srcHeadFrag += "#define ATTRIB_" + attr.nameFrag + nl;
                r.srcHeadFrag += "IN " + attr.type + " " + attr.nameFrag + ";" + nl;
                if (!firstLevel) r.srcHeadFrag += "#endif" + nl;
            }
        }
        return r;
    }

    compile()
    {
        if (this._cgl.aborted) return;
        const startTime = performance.now();

        this._cgl.profileData.profileShaderCompiles++;
        this._cgl.profileData.profileShaderCompileName = this._name + " [" + this._compileReason + "]";

        let extensionString = "";
        if (this._extensions)
            for (let i = 0; i < this._extensions.length; i++)
                extensionString += "#extension " + this._extensions[i] + " : enable" + nl;

        let definesStr = "";
        if (this._defines.length) definesStr = "\n// cgl generated" + nl;
        for (let i = 0; i < this._defines.length; i++)
            definesStr += "#define " + this._defines[i][0] + " " + this._defines[i][1] + "" + nl;

        const structStrings = this.createStructUniforms();
        this._cgl.profileData.addHeavyEvent("shader compile", this._name + " [" + this._compileReason + "]");
        this._compileReason = "";

        if (this._uniforms)
        {
            // * we create an array of the uniform names to check our indices & an array to save them
            const uniNames = this._uniforms.map((uni) => { return uni._name; });
            const indicesToRemove = [];

            // * we go through our uniforms and check if the same name is contained somewhere further in the array
            // * if so, we add the current index to be removed later
            for (let i = 0; i < this._uniforms.length; i++)
            {
                const uni = this._uniforms[i];
                const nextIndex = uniNames.indexOf(uni._name, i + 1);
                if (nextIndex > -1) indicesToRemove.push(i);
            }

            // * after that, we go through the uniforms backwards (so we keep the order) and remove the indices
            // * also, we reset the locations of all the other valid uniforms
            for (let j = this._uniforms.length - 1; j >= 0; j -= 1)
            {
                if (indicesToRemove.includes(j)) this._uniforms.splice(j, 1);
                else this._uniforms[j].resetLoc();
            }
        }

        this._cgl.printError("uniform resets");

        this._compileCount++;
        if (this.hasTextureUniforms()) definesStr += "#define HAS_TEXTURES" + nl;

        let vs = "";
        let fs = "";

        if (!this.srcFrag)
        {
            this._log.warn("[cgl shader] has no fragment source!", this._name, this);
            this.srcVert = getDefaultVertexShader();
            this.srcFrag = getDefaultFragmentShader();
        }

        vs = "#version 300 es"
            + nl + "// "
            + nl + "// vertex shader " + this._name
            + nl + "// "
            + nl + "precision " + this.precision + " float;"
            + nl + "precision " + this.precision + " sampler2D;"
            + nl + ""
            + nl + "#define WEBGL2"
            + nl + "#define texture2D texture"
            + nl + "#define UNI uniform"
            + nl + "#define IN in"
            + nl + "#define OUT out"
            + nl;

        fs = "#version 300 es"
            + nl + "// "
            + nl + "// fragment shader " + this._name
            + nl + "// "
            + nl + "precision " + this.precision + " float;"
            + nl + "precision " + this.precision + " sampler2D;"
            + nl + ""
            + nl + "#define WEBGL2"
            + nl + "#define texture2D texture"
            + nl + "#define IN in"
            + nl + "#define OUT out"
            + nl + "#define UNI uniform"
            + nl + "{{DRAWBUFFER}}"

            + nl;

        let uniformsStrVert = "\n// cgl generated" + nl;
        let uniformsStrFrag = "\n// cgl generated" + nl;

        fs += "\n// active mods: --------------- ";
        vs += "\n// active mods: --------------- ";

        let foundModsFrag = false;
        let foundModsVert = false;
        for (let i = 0; i < this._moduleNames.length; i++)
        {
            for (let j = 0; j < this._modules.length; j++)
            {
                if (this._modules[j].name == this._moduleNames[i])
                {
                    if (this._modules[j].srcBodyFrag || this._modules[j].srcHeadFrag)
                    {
                        foundModsFrag = true;
                        fs += "\n// " + i + "." + j + ". " + this._modules[j].title + " (" + this._modules[j].name + ")";
                    }
                    if (this._modules[j].srcBodyVert || this._modules[j].srcHeadVert)
                    {
                        vs += "\n// " + i + "." + j + ". " + this._modules[j].title + " (" + this._modules[j].name + ")";
                        foundModsVert = true;
                    }
                }
            }
        }
        if (!foundModsVert)fs += "\n// no mods used...";
        if (!foundModsFrag)fs += "\n// no mods used...";
        fs += "\n";
        vs += "\n";

        for (let i = 0; i < this._uniforms.length; i++)
        {
            if (this._uniforms[i].shaderType && !this._uniforms[i].isStructMember())
            {
                let uniStr = "";
                if (!this._uniforms[i].getGlslTypeString())uniStr += "// ";
                uniStr += "UNI " + this._uniforms[i].getGlslTypeString() + " " + this._uniforms[i].getName();
                let comment = "";
                if (this._uniforms[i].comment) comment = " // " + this._uniforms[i].comment;

                if (this._uniforms[i].shaderType == "vert" || this._uniforms[i].shaderType == "both")
                    if (!this.srcVert.includes(uniStr) && !this.srcVert.includes("uniform " + this._uniforms[i].getGlslTypeString() + " " + this._uniforms[i].getName()))
                        uniformsStrVert += uniStr + ";" + comment + nl;

                if (this._uniforms[i].shaderType == "frag" || this._uniforms[i].shaderType == "both")
                    if (!this.srcFrag.includes(uniStr) && !this.srcFrag.includes("uniform " + this._uniforms[i].getGlslTypeString() + " " + this._uniforms[i].getName()))
                        uniformsStrFrag += uniStr + ";" + comment + nl;
            }
        }

        let countUniFrag = 0;
        let countUniVert = 0;
        for (let i = 0; i < this._uniforms.length; i++)
        {
            if (this._uniforms[i].shaderType && !this._uniforms[i].isStructMember())
            {
                if (this._uniforms[i].shaderType == "vert" || this._uniforms[i].shaderType == "both") countUniVert++;
                if (this._uniforms[i].shaderType == "frag" || this._uniforms[i].shaderType == "both") countUniFrag++;
            }
        }
        if (countUniFrag >= this._cgl.maxUniformsFrag) this._log.warn("[cgl_shader] num uniforms frag: " + countUniFrag + " / " + this._cgl.maxUniformsFrag);
        if (countUniVert >= this._cgl.maxUniformsVert) this._log.warn("[cgl_shader] num uniforms vert: " + countUniVert + " / " + this._cgl.maxUniformsVert);

        if (!fs.includes("precision")) fs = "precision " + this.precision + " float;" + nl + fs;
        if (!vs.includes("precision")) vs = "precision " + this.precision + " float;" + nl + vs;
        if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent))
        {
            fs += "#define MOBILE" + nl;
            vs += "#define MOBILE" + nl;
        }
        vs = extensionString + vs + definesStr + structStrings[0] + uniformsStrVert + "\n// -- \n" + this.srcVert;
        fs = extensionString + fs + definesStr + structStrings[1] + uniformsStrFrag + "\n// -- \n" + this.srcFrag;

        let srcHeadVert = "";
        let srcHeadFrag = "";

        this._modules.sort(function (a, b)
        {
            return a.priority || 0 - b.priority || 0;
        });

        let addedAttribs = false;

        for (let i = 0; i < this._moduleNames.length; i++)
        {
            let srcVert = "";
            let srcFrag = "";

            if (!addedAttribs)
            {
                addedAttribs = true;

                for (let k = 0; k < this._attributes.length; k++)
                {
                    const r = this._getAttrSrc(this._attributes[k], true);
                    if (r.srcHeadVert)srcHeadVert += r.srcHeadVert;
                    if (r.srcVert)srcVert += r.srcVert;
                    if (r.srcHeadFrag)srcHeadFrag += r.srcHeadFrag;
                }
            }

            for (let j = 0; j < this._modules.length; j++)
            {
                const mod = this._modules[j];
                if (mod.name == this._moduleNames[i])
                {
                    srcHeadVert += "\n//---- MOD: group:" + mod.group + ": idx:" + j + " - prfx:" + mod.prefix + " - " + mod.title + " ------\n";
                    srcHeadFrag += "\n//---- MOD: group:" + mod.group + ": idx:" + j + " - prfx:" + mod.prefix + " - " + mod.title + " ------\n";

                    srcVert += "\n\n//---- MOD: " + mod.title + " / " + mod.priority + " ------\n";
                    srcFrag += "\n\n//---- MOD: " + mod.title + " / " + mod.priority + " ------\n";

                    if (mod.attributes)
                        for (let k = 0; k < mod.attributes.length; k++)
                        {
                            const r = this._getAttrSrc(mod.attributes[k], false);
                            if (r.srcHeadVert)srcHeadVert += r.srcHeadVert;
                            if (r.srcVert)srcVert += r.srcVert;
                            if (r.srcHeadFrag)srcHeadFrag += r.srcHeadFrag;
                        }

                    srcHeadVert += mod.srcHeadVert || "";
                    srcHeadFrag += mod.srcHeadFrag || "";
                    srcVert += mod.srcBodyVert || "";
                    srcFrag += mod.srcBodyFrag || "";

                    srcHeadVert += "\n//---- end mod ------\n";
                    srcHeadFrag += "\n//---- end mod ------\n";

                    srcVert += "\n//---- end mod ------\n";
                    srcFrag += "\n//---- end mod ------\n";

                    srcVert = srcVert.replace(/{{mod}}/g, mod.prefix);
                    srcFrag = srcFrag.replace(/{{mod}}/g, mod.prefix);
                    srcHeadVert = srcHeadVert.replace(/{{mod}}/g, mod.prefix);
                    srcHeadFrag = srcHeadFrag.replace(/{{mod}}/g, mod.prefix);

                    srcVert = srcVert.replace(/MOD_/g, mod.prefix);
                    srcFrag = srcFrag.replace(/MOD_/g, mod.prefix);
                    srcHeadVert = srcHeadVert.replace(/MOD_/g, mod.prefix);
                    srcHeadFrag = srcHeadFrag.replace(/MOD_/g, mod.prefix);
                }
            }

            vs = vs.replace("{{" + this._moduleNames[i] + "}}", srcVert);
            fs = fs.replace("{{" + this._moduleNames[i] + "}}", srcFrag);
        }

        vs = vs.replace("{{MODULES_HEAD}}", srcHeadVert);
        fs = fs.replace("{{MODULES_HEAD}}", srcHeadFrag);

        vs = this._addLibs(vs);
        fs = this._addLibs(fs);

        // SETUP draw buffers / multi texture render targets

        let drawBufferStr = "";
        for (let i = 0; i < 16; i++)
            if (fs.includes("outColor" + i)) this._drawBuffers[i] = true;

        if (this._drawBuffers.length == 1)
        {
            drawBufferStr = "out vec4 outColor;" + nl;
            drawBufferStr += "#define gl_FragColor outColor" + nl;
        }
        else
        {
            drawBufferStr += "#define MULTI_COLORTARGETS" + nl;
            drawBufferStr += "vec4 outColor;" + nl;

            let count = 0;
            for (let i = 0; i < this._drawBuffers.length; i++)
            {
                if (count == 0) drawBufferStr += "#define gl_FragColor outColor" + i + "" + nl;
                drawBufferStr += "layout(location = " + i + ") out vec4 outColor" + i + ";" + nl;
                count++;
            }
        }

        fs = fs.replace("{{DRAWBUFFER}}", drawBufferStr);
        // //////

        if (!this._program)
        {
            this._program = this._createProgram(vs, fs);
        }
        else
        {
            // this.vshader=createShader(vs, gl.VERTEX_SHADER, this.vshader );
            // this.fshader=createShader(fs, gl.FRAGMENT_SHADER, this.fshader );
            // linkProgram(program);
            this._program = this._createProgram(vs, fs);

            this._projMatrixUniform = null;

            for (let i = 0; i < this._uniforms.length; i++) this._uniforms[i].resetLoc();
        }

        this.finalShaderFrag = fs;
        this.finalShaderVert = vs;

        MESH.lastMesh = null;
        MESH.lastShader = null;

        this._countMissingUniforms = 0;
        this._needsRecompile = false;
        this.lastCompile = now();

        this._cgl.profileData.shaderCompileTime += performance.now() - startTime;
    }

    bind()
    {
        if (!this._isValid || this._cgl.aborted) return;

        MESH.lastShader = this;

        if (!this._program || this.needsRecompile()) this.compile();
        if (!this._isValid) return;

        if (!this._projMatrixUniform && !this.ignoreMissingUniforms)
        {
            this._countMissingUniforms++;
            // if (this._countMissingUniforms == 10)this._log.log("stopping getlocation of missing uniforms...", this._name);
            if (this._countMissingUniforms < 10)
            {
                this._projMatrixUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_PROJMAT);
                this._attrVertexPos = this._cgl.glGetAttribLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_VERTEX_POSITION);
                this._mvMatrixUniform = this._cgl.gl.getUniformLocation(this._program, "mvMatrix");
                this._vMatrixUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_VIEWMAT);
                this._mMatrixUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_MODELMAT);
                this._camPosUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_VIEWPOS);
                this._normalMatrixUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_NORMALMAT);
                this._inverseViewMatrixUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_INVVIEWMAT);
                this._inverseProjMatrixUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_INVPROJMAT);
                this._materialIdUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_MATERIALID);
                this._objectIdUniform = this._cgl.gl.getUniformLocation(this._program, constants_CONSTANTS.SHADER.SHADERVAR_UNI_OBJECTID);

                for (let i = 0; i < this._uniforms.length; i++) this._uniforms[i].needsUpdate = true;
            }
        }

        if (this._cgl.currentProgram != this._program)
        {
            this._cgl.profileData.profileShaderBinds++;
            this._cgl.gl.useProgram(this._program);
            this._cgl.currentProgram = this._program;
        }

        for (let i = 0; i < this._uniforms.length; i++)
            if (this._uniforms[i].needsUpdate) this._uniforms[i].updateValue();

        if (this._pMatrixState != this._cgl.getProjectionMatrixStateCount())
        {
            this._pMatrixState = this._cgl.getProjectionMatrixStateCount();
            this._cgl.gl.uniformMatrix4fv(this._projMatrixUniform, false, this._cgl.pMatrix);
            this._cgl.profileData.profileMVPMatrixCount++;
        }

        if (this._objectIdUniform)
            this._cgl.gl.uniform1f(this._objectIdUniform, ++this._cgl.tempData.objectIdCounter);

        if (this._materialIdUniform)
            this._cgl.gl.uniform1f(this._materialIdUniform, this._materialId);

        if (this._vMatrixUniform)
        {
            if (this._vMatrixState != this._cgl.getViewMatrixStateCount())
            {
                this._cgl.gl.uniformMatrix4fv(this._vMatrixUniform, false, this._cgl.vMatrix);
                this._cgl.profileData.profileMVPMatrixCount++;
                this._vMatrixState = this._cgl.getViewMatrixStateCount();

                if (this._inverseViewMatrixUniform)
                {
                    mat4_invert(this._tempInverseViewMatrix, this._cgl.vMatrix);
                    this._cgl.gl.uniformMatrix4fv(this._inverseViewMatrixUniform, false, this._tempInverseViewMatrix);
                    this._cgl.profileData.profileMVPMatrixCount++;
                }
                if (this._inverseProjMatrixUniform)
                {
                    mat4_invert(this._tempInverseProjMatrix, this._cgl.pMatrix);
                    this._cgl.gl.uniformMatrix4fv(this._inverseProjMatrixUniform, false, this._tempInverseProjMatrix);
                    this._cgl.profileData.profileMVPMatrixCount++;
                }
            }
            this._cgl.gl.uniformMatrix4fv(this._mMatrixUniform, false, this._cgl.mMatrix);
            this._cgl.profileData.profileMVPMatrixCount++;

            if (this._camPosUniform)
            {
                mat4_invert(this._tempCamPosMatrix, this._cgl.vMatrix);
                this._cgl.gl.uniform3f(this._camPosUniform, this._tempCamPosMatrix[12], this._tempCamPosMatrix[13], this._tempCamPosMatrix[14]);
                this._cgl.profileData.profileMVPMatrixCount++;
            }
        }
        else
        {
            // mvmatrix deprecated....
            const tempmv = mat4_create();

            mat4_mul(tempmv, this._cgl.vMatrix, this._cgl.mMatrix);
            this._cgl.gl.uniformMatrix4fv(this._mvMatrixUniform, false, tempmv);
            this._cgl.profileData.profileMVPMatrixCount++;
        }

        if (this._normalMatrixUniform)
        {
            // mat4.mul(this._tempNormalMatrix, this._cgl.vMatrix, this._cgl.mMatrix);
            mat4_invert(this._tempNormalMatrix, this._cgl.mMatrix);
            mat4_transpose(this._tempNormalMatrix, this._tempNormalMatrix);

            this._cgl.gl.uniformMatrix4fv(this._normalMatrixUniform, false, this._tempNormalMatrix);
            this._cgl.profileData.profileMVPMatrixCount++;
        }

        for (let i = 0; i < this._libs.length; i++)
        {
            if (this._libs[i].onBind) this._libs[i].onBind.bind(this._libs[i])(this._cgl, this);
        }

        this._bindTextures();

        return this._isValid;
    }

    unBind()
    {
    }

    dispose()
    {

        if (this._program && this._cgl && this._cgl.gl) this._cgl.gl.deleteProgram(this._program);
        this._program = null;
    }

    setDrawBuffers(arr)
    {
        this._log.warn("useless drawbuffers...?!");
    }

    getUniforms()
    {
        return this._uniforms;
    }

    getUniform(name)
    {
        for (let i = 0; i < this._uniforms.length; i++)
            if (this._uniforms[i].getName() == name)
                return this._uniforms[i];
        return null;
    }

    removeAllUniforms()
    {
        this._uniforms = [];
        // for (let i = 0; i < this._uniforms.length; i++)
        //     this.removeUniform(this._uniforms[i].name);
    }

    _addUniform(uni)
    {
        this._uniforms.push(uni);
        this.setWhyCompile("add uniform " + name);
    }

    /**
     * add a uniform to the fragment shader
     * @param {String} type ['f','t', etc]
     * @param {String} name
     * @param {any} valueOrPort value or port
     * @param p2
     * @param p3
     * @param p4
     * @returns {Uniform}
     */
    addUniformFrag(type, name, valueOrPort, p2, p3, p4)
    {
        const uni = new Uniform(this, type, name, valueOrPort, p2, p3, p4);
        uni.shaderType = "frag";
        return uni;
    }

    /**
     * add a uniform to the vertex shader
     * @param {String} type ['f','t', etc]
     * @param {String} name
     * @param {any} valueOrPort value or port
     * @param p2
     * @param p3
     * @param p4
     * @returns {Uniform}
     */
    addUniformVert(type, name, valueOrPort, p2, p3, p4)
    {
        const uni = new Uniform(this, type, name, valueOrPort, p2, p3, p4);
        uni.shaderType = "vert";
        return uni;
    }

    /**
     * add a uniform to both shaders
     * @param {String} type ['f','t', etc]
     * @param {String} name
     * @param {any} valueOrPort value or port
     * @param p2
     * @param p3
     * @param p4
     * @returns {Uniform}
     */
    addUniformBoth(type, name, valueOrPort, p2, p3, p4)
    {
        const uni = new Uniform(this, type, name, valueOrPort, p2, p3, p4);
        uni.shaderType = "both";
        return uni;
    }

    /**
     * add a struct & its uniforms to the fragment shader
     * @param {String} structName name of the struct, i.e.: LightStruct
     * @param {String} uniformName name of the struct uniform in the shader, i.e.: lightUni
     * @param {Array} members array of objects containing the struct members. see example for structure

     * @returns {Object}
     * @example
     * const shader = new CGL.Shader(cgl, 'MinimalMaterial');
     * shader.setSource(attachments.shader_vert, attachments.shader_frag);
     * shader.addUniformStructFrag("Light", "uniformLight", [
     * { "type": "3f", "name": "position", "v1": null },
     * { "type": "4f", "name": "color", "v1": inR, v2: inG, v3: inB, v4: inAlpha }
     * ]);
     */
    addUniformStructFrag(structName, uniformName, members)
    {
        const uniforms = {};

        if (!members) return uniforms;

        for (let i = 0; i < members.length; i += 1)
        {
            const member = members[i];
            if (!this.hasUniform(uniformName + "." + member.name))
            {
                const uni = new Uniform(this, member.type, uniformName + "." + member.name, member.v1, member.v2, member.v3, member.v4, uniformName, structName, member.name);
                uni.shaderType = "frag";
                uniforms[uniformName + "." + member.name] = uni;
            }
        }

        return uniforms;
    }

    /**
     * add a struct & its uniforms to the vertex shader
     * @param {String} structName name of the struct, i.e.: LightStruct
     * @param {String} uniformName name of the struct uniform in the shader, i.e.: lightUni
     * @param {Array} members array of objects containing the struct members. see example for structure
     * @returns {object}
     * @example
     * const shader = new CGL.Shader(cgl, 'MinimalMaterial');
     * shader.setSource(attachments.shader_vert, attachments.shader_frag);
     * shader.addUniformStructVert("Light", "uniformLight", [
     * { "type": "3f", "name": "position", "v1": null },
     * { "type": "4f", "name": "color", "v1": inR, v2: inG, v3: inB, v4: inAlpha }
     * ]);
     */
    addUniformStructVert(structName, uniformName, members)
    {
        const uniforms = {};

        if (!members) return uniforms;

        for (let i = 0; i < members.length; i += 1)
        {
            const member = members[i];
            if (!this.hasUniform(uniformName + "." + member.name))
            {
                const uni = new Uniform(this, member.type, uniformName + "." + member.name, member.v1, member.v2, member.v3, member.v4, uniformName, structName, member.name);
                uni.shaderType = "vert";
                uniforms[uniformName + "." + member.name] = uni;
            }
        }

        return uniforms;
    }

    /**
     * add a struct & its uniforms to the both shaders. PLEASE NOTE: it is not possible to add the same struct to both shaders when it contains ANY integer members.
     * @param {String} structName name of the struct, i.e.: LightStruct
     * @param {String} uniformName name of the struct uniform in the shader, i.e.: lightUni
     * @param {Array} members array of objects containing the struct members. see example for structure

     * @returns {Object}
     * @example
     * const shader = new CGL.Shader(cgl, 'MinimalMaterial');
     * shader.setSource(attachments.shader_vert, attachments.shader_frag);
     * shader.addUniformStructBoth("Light", "uniformLight", [
     * { "type": "3f", "name": "position", "v1": null },
     * { "type": "4f", "name": "color", "v1": inR, v2: inG, v3: inB, v4: inAlpha }
     * ]);
     */
    addUniformStructBoth(structName, uniformName, members)
    {
        const uniforms = {};

        if (!members) return uniforms;

        for (let i = 0; i < members.length; i += 1)
        {
            const member = members[i];
            if ((member.type === "2i" || member.type === "i" || member.type === "3i"))
                this._log.error("Adding an integer struct member to both shaders can potentially error. Please use different structs for each shader. Error occured in struct:", structName, " with member:", member.name, " of type:", member.type, ".");
            if (!this.hasUniform(uniformName + "." + member.name))
            {
                const uni = new Uniform(this, member.type, uniformName + "." + member.name, member.v1, member.v2, member.v3, member.v4, uniformName, structName, member.name);
                uni.shaderType = "both";
                uniforms[uniformName + "." + member.name] = uni;
            }
        }

        return uniforms;
    }

    /**
     * @param {String} vstr
     * @param {String} fstr
     */
    _createProgram(vstr, fstr)
    {
        this._cgl.printError("before _createprogram");

        const program = this._cgl.gl.createProgram();

        this.vshader = CglShader.createShader(this._cgl, vstr, this._cgl.gl.VERTEX_SHADER, this);
        this.fshader = CglShader.createShader(this._cgl, fstr, this._cgl.gl.FRAGMENT_SHADER, this);

        if (this.vshader && this.fshader)
        {
            this._cgl.gl.attachShader(program, this.vshader);
            this._cgl.gl.attachShader(program, this.fshader);

            this._linkProgram(program, vstr, fstr);
        }
        else
        {
            this._isValid = false;
            this._cgl.printError("shader _createProgram");
            this._log.error("could not link shaderprogram");
            return null;
        }

        this._cgl.printError("shader _createProgram");
        return program;
    }

    hasErrors()
    {
        return this._hasErrors;
    }

    /**
     * @param {any} program
     * @param {string} vstr
     * @param {string} fstr
     */
    _linkProgram(program, vstr, fstr)
    {
        this._cgl.printError("before _linkprogram");

        if (this._feedBackNames.length > 0)
        {
            this._cgl.gl.transformFeedbackVaryings(program, this._feedBackNames, this._cgl.gl.SEPARATE_ATTRIBS);
            // INTERLEAVED_ATTRIBS
            // SEPARATE_ATTRIBS
        }

        this._cgl.gl.linkProgram(program);
        this._cgl.printError("gl.linkprogram");
        this._isValid = true;
        this._hasErrors = false;

        if (this._cgl.patch.config.glValidateShader !== false)
        {
            this._cgl.gl.validateProgram(program);

            if (!this._cgl.gl.getProgramParameter(program, this._cgl.gl.VALIDATE_STATUS))
            {
                // validation failed
                this._log.log("shaderprogram validation failed...");

                this._cgl.gl.getProgramInfoLog(program);
            }

            if (!this._cgl.gl.getProgramParameter(program, this._cgl.gl.LINK_STATUS))
            {
                this._hasErrors = true;

                const infoLogFrag = this._cgl.gl.getShaderInfoLog(this.fshader);
                const infoLogVert = this._cgl.gl.getShaderInfoLog(this.vshader);

                if (this.logError)
                    this._log.error(this._name + " shader linking fail...");
                else
                    this._log.warn(this._name + " shader linking fail...");

                if (infoLogFrag) this._log.warn(this._cgl.gl.getShaderInfoLog(this.fshader));
                if (infoLogVert) this._log.warn(this._cgl.gl.getShaderInfoLog(this.vshader));

                this._cgl.gl.getProgramInfoLog(program);
                if (!CABLES.UI) this._log.log(this);
                this._isValid = false;

                this._cgl.printError("shader link err");
            }
        }
    }

    getProgram()
    {
        return this._program;
    }

    /**
     * @param {any[]} names
     */
    setFeedbackNames(names)
    {
        this.setWhyCompile("setFeedbackNames");
        this._feedBackNames = names;
    }

    /**
      * adds attribute definition to shader header without colliding with other shader modules...
     * when attrFrag is defined, vertex shader will output this attribute to the fragment shader
     * @param {Object} attr {type:x,name:x,[nameFrag:x]}
     * @return {Object}
     */
    addAttribute(attr)
    {
        for (let i = 0; i < this._attributes.length; i++)
        {
            if (this._attributes[i].name == attr.name && this._attributes[i].nameFrag == attr.nameFrag) return;
        }
        this._attributes.push(attr);

        this.setWhyCompile("addAttribute");
    }

    bindTextures()
    {
        this._bindTextures();
    }

    _bindTextures()
    {
        if (this._textureStackTex.length > this._cgl.maxTextureUnits)
        {
            this._log.warn("[shader._bindTextures] too many textures bound", this._textureStackTex.length + "/" + this._cgl.maxTextureUnits);
        }

        // for (let i = this._textureStackTex.length + 1; i < this._cgl.maxTextureUnits; i++) this._cgl.setTexture(i, null);

        for (let i = 0; i < this._textureStackTex.length; i++)
        {
            // this._log.log(this._textureStackTex.length, i);
            if (!this._textureStackTex[i] && !this._textureStackTexCgl[i])
            {
                this._log.warn("no texture for pushtexture", this._name);
            }
            else
            {
                let t = this._textureStackTex[i];
                if (this._textureStackTexCgl[i])
                {
                    t = this._textureStackTexCgl[i].tex || CGL.Texture.getEmptyTexture(this._cgl).tex;
                }

                let bindOk = true;

                if (!this._textureStackUni[i])
                {
                    // throw(new Error('no uniform given to texturestack'));
                    this._log.warn("no uniform for pushtexture", this._name);
                    bindOk = this._cgl.setTexture(i, t, this._textureStackType[i]);
                }
                else
                {
                    this._textureStackUni[i].setValue(i);
                    bindOk = this._cgl.setTexture(i, t, this._textureStackType[i]);

                    // this._log.log(bindOk, i, t, this._textureStackType[i]);
                }
                if (!bindOk) this._log.warn("tex bind failed", this.getName(), this._textureStackUni[i]);
            }
        }
    }

    /**
     * @param {Uniform} uni
     * @param {Texture} tex
     */
    setUniformTexture(uni, tex)
    {
        tex = tex || Texture.getTempTexture(this._cgl);
        for (let i = 0; i < this._textureStackUni.length; i++)
            if (this._textureStackUni[i] == uni)
            {
                const old = this._textureStackTex[i] || this._textureStackTexCgl[i];
                if (tex.hasOwnProperty("tex"))
                {
                    this._textureStackTexCgl[i] = tex;
                    this._textureStackTex[i] = null;
                }
                else
                {
                    this._textureStackTexCgl[i] = null;
                    this._textureStackTex[i] = tex;
                }

                // this._textureStackTex[i] = tex;
                // this._cgl.setTexture(i, tex, this._textureStackType[i]);
                return old;
            }
        return null;
    }

    /**
     * push a texture on the stack. those textures will be bound when binding the shader. texture slots are automatically set
     * @param {Uniform} uniform texture uniform
     * @param {Texture} t texture
     * @param {number} type texture type, can be ignored when TEXTURE_2D
     */
    pushTexture(uniform, t, type)
    {
        if (!uniform)
        {
            // this._log.log("pushtexture: no uniform given to texturestack", "shader:"+this._name,uniform,t,type);
            return;
        }
        if (!t)
        {
            // if(uniform)this._log.warn("pushtexture: no tex","shader:"+this._name," uniform:"+uniform.name);
            return;
        }
        if (!t.hasOwnProperty("tex") && !(t instanceof WebGLTexture))
        {
            this._log.warn(new Error("invalid texture").stack);

            this._log.warn("[cgl_shader] invalid texture...", t);
            return;
        }

        this._textureStackUni.push(uniform);

        if (t.hasOwnProperty("tex"))
        {
            this._textureStackTexCgl.push(t);
            this._textureStackTex.push(null);
        }
        else
        {
            this._textureStackTexCgl.push(null);
            this._textureStackTex.push(t);
        }

        this._textureStackType.push(type);
    }

    /**
     * pop last texture
     */
    popTexture()
    {
        this._textureStackUni.pop();
        this._textureStackTex.pop();
        this._textureStackTexCgl.pop();
        this._textureStackType.pop();
    }

    /**
     * pop all textures
     */
    popTextures()
    {
        this._textureStackTex.length =
        this._textureStackTexCgl.length =
        this._textureStackType.length =
        this._textureStackUni.length = 0;
    }

    getMaterialId()
    {
        return this._materialId;
    }

    getInfo()
    {
        const info = {};
        info.name = this._name;
        // info.modules = JSON.parse(JSON.stringify(this._modules));
        // info.defines = JSON.parse(JSON.stringify(this._defines));
        info.defines = this.getDefines();
        info.hasErrors = this.hasErrors();

        return info;
    }

    getDefaultFragmentShader(r, g, b, a)
    {
        return getDefaultFragmentShader(r, g, b, a);
    }

    getDefaultVertexShader()
    {
        return getDefaultVertexShader();
    }
}

// --------------------------

CglShader.getDefaultVertexShader = getDefaultVertexShader;
CglShader.getDefaultFragmentShader = getDefaultFragmentShader;

CglShader.getErrorFragmentShader = function ()
{
    return ""
        + nl + "void main()"
        + nl + "{"
        + nl + "   float g=mod((gl_FragCoord.y+gl_FragCoord.x),50.0)/50.0;"
        + nl + "   g= step(0.1,g);"
        + nl + "   outColor = vec4( g+0.5, 0.0, 0.0, 1.0);"
        + nl + "}";
};

/**
 * @param {CglContext} cgl
 * @param {String} str
 * @param {number} type
 * @param {CglShader} cglShader
 * @returns {CglShader}
 */
CglShader.createShader = function (cgl, str, type, cglShader)
{
    if (cgl.aborted) return;

    const shader = cgl.gl.createShader(type);
    cgl.gl.shaderSource(shader, str);
    cgl.gl.compileShader(shader);

    if (!cgl.gl.getShaderParameter(shader, cgl.gl.COMPILE_STATUS))
    {
        cglShader.error = { "str": str, "infoLog": cgl.gl.getShaderInfoLog(shader) };

        if (CABLES.UI) gui.emitEvent("ShaderError", cglShader);

        if (!cglShader.error.infoLog)
        {
            cglShader._log.warn("empty shader info log", this._name);
            return;
        }

        cglShader.setSource(CglShader.getDefaultVertexShader(), CglShader.getErrorFragmentShader());

        // CABLES.UI.showShaderError(shader);

    }
    return shader;
};



;// CONCATENATED MODULE: ./src/core/cg/cg_canvas.js


class CgCanvas
{
    hasFocus = false;

    constructor(options)
    {
        this._log = new Logger("CgCanvas");
        if (!options)
        {
            this._log.error("CgCanvas no options");
        }
        else
        {
            this._canvasEle = options.canvasEle;
        }

        if (!options.cg) this._log.error("CgCanvas options has no cg");
        if (!options.canvasEle) this._log.error("CgCanvas options has no canvasEle");

        this._cg = options.cg;
        this.pixelDensity = 1;
        this.canvasWidth = this.canvasEle.clientWidth;
        this.canvasHeight = this.canvasEle.clientHeight;

        this._oldWidthRp = -1;
        this._oldHeightRp = -1;

        this.setSize(this.canvasWidth, this.canvasHeight);
        this.canvasEle.addEventListener("focus", () => { this.hasFocus = true; });
        this.canvasEle.addEventListener("blur", () => { this.hasFocus = false; });
    }

    get canvasEle() { return this._canvasEle; }

    setWhyCompile(why)
    {
        this._compileReason = why;
    }

    /**
     * @param {Number} w
     * @param {Number} h
     * @param {any} ignorestyle
     * @returns {any}
     */
    setSize(w, h, ignorestyle = false)
    {
        if (this._oldWidthRp != w * this.pixelDensity || this._oldHeightRp != h * this.pixelDensity)
        {
            this._oldWidthRp = this.canvasEle.width = w * this.pixelDensity;
            this._oldHeightRp = this.canvasEle.height = h * this.pixelDensity;

            if (!ignorestyle)
            {
                this.canvasEle.style.width = w + "px";
                this.canvasEle.style.height = h + "px";
            }

            this.updateSize();

            this._cg.emitEvent("resize");
        }
    }

    updateSize()
    {
        this.canvasEle.width = this.canvasWidth = this.canvasEle.clientWidth * this.pixelDensity;
        this.canvasEle.height = this.canvasHeight = this.canvasEle.clientHeight * this.pixelDensity;
    }

    dispose()
    {
        if (this._canvasEle) this._canvasEle.remove();
        this._canvasEle = null;
    }
}



;// CONCATENATED MODULE: ./src/core/cg/cg_matrixstack.js


class MatrixStack
{
    constructor()
    {
        this._arr = [mat4_create()];
        this._index = 0;
        this.stateCounter = 0;
    }

    /**
     * @param {mat4} m
     */
    push(m)
    {
        this._index++;
        this.stateCounter++;

        if (this._index == this._arr.length)
        {
            const copy = mat4_create();
            this._arr.push(copy);
        }

        mat4_copy(this._arr[this._index], m || this._arr[this._index - 1]);

        return this._arr[this._index];
    }

    pop()
    {
        this.stateCounter++;

        this._index--;
        if (this._index < 0) this._index = 0;

        return this._arr[this._index];
    }

    length()
    {
        return this._index;
    }
}



;// CONCATENATED MODULE: ./src/core/cgl/cgl_profiledata.js
class ProfileData
{
    constructor(cgl)
    {
        this._cgl = cgl;
        this._lastTime = 0;
        this.pause = false;
        this.profileUniformCount = 0;
        this.profileShaderBinds = 0;
        this.profileUniformCount = 0;
        this.profileShaderCompiles = 0;
        this.profileVideosPlaying = 0;
        this.profileMVPMatrixCount = 0;
        this.profileEffectBuffercreate = 0;
        this.profileShaderGetUniform = 0;
        this.profileFrameBuffercreate = 0;
        this.profileMeshSetGeom = 0;
        this.profileTextureNew = 0;
        this.profileGenMipMap = 0;
        this.profileOnAnimFrameOps = 0;

        this.profileFencedPixelRead = 0;
        this.profileMainloopMs = 0;
        this.profileMeshDraw = 0;
        this.profileTextureEffect = 0;
        this.profileTexPreviews = 0;
        this.shaderCompileTime = 0;
        this.profileMeshNumElements = 0;
        this.profileMeshAttributes = 0;
        this.profileSingleMeshAttribute = [];
        this.heavyEvents = [];

        this.doProfileGlQuery = false;
        this.glQueryData = {};
        this.counts = {};
    }

    clear()
    {
        this.counts = {};
        this.profileSingleMeshAttribute = {};
        this.profileMeshAttributes = 0;
        this.profileUniformCount = 0;
        this.profileShaderGetUniform = 0;
        this.profileShaderCompiles = 0;
        this.profileShaderBinds = 0;
        this.profileTextureResize = 0;
        this.profileFrameBuffercreate = 0;
        this.profileEffectBuffercreate = 0;
        this.profileTextureDelete = 0;
        this.profileMeshSetGeom = 0;
        this.profileVideosPlaying = 0;
        this.profileMVPMatrixCount = 0;
        this.profileNonTypedAttrib = 0;
        this.profileNonTypedAttribNames = "";
        this.profileTextureNew = 0;
        this.profileGenMipMap = 0;
        this.profileFramebuffer = 0;
        this.profileMeshDraw = 0;
        this.profileTextureEffect = 0;
        this.profileTexPreviews = 0;
        this.profileMeshNumElements = 0;
        this.profileFencedPixelRead = 0;
    }

    clearGlQuery()
    {
        for (let i in this.glQueryData)
        {
            if (!this.glQueryData[i].lastClear || performance.now() - this.glQueryData[i].lastClear > 1000)
            {
                this.glQueryData[i].time = this.glQueryData[i]._times / this.glQueryData[i]._numcount;
                this.glQueryData[i].num = this.glQueryData[i]._numcount;

                this.glQueryData[i]._times = 0;
                this.glQueryData[i]._numcount = 0;
                this.glQueryData[i].lastClear = performance.now();
            }
        }
    }

    /**
     * @param {string} event
     * @param {string} name
     */
    count(event, name)
    {
        this.counts[event] = this.counts[event] || [];
        this.counts[event].push(name);
    }

    /**
     * @param {string} event
     * @param {string} name
     * @param {string} [info]
     */
    addHeavyEvent(event, name, info)
    {
        const e = { "event": event, "name": name, "info": info, "date": performance.now() };
        this.heavyEvents.push(e);
        this._cgl.emitEvent("heavyEvent", e);
    }
}



;// CONCATENATED MODULE: ./src/core/cg/cg_state.js







class CgContext extends Events
{

    static API_WEBGL = 0;
    static API_WEBGPU = 1;

    gApi = "unknown";

    /**
     * Description
     * @param {Patch} _patch
     */
    constructor(_patch)
    {
        super();

        this._log = new Logger("cg_context", { "onError": _patch.config.onError });

        /** @type {object} */
        this.tempData = this.frameStore = this.frameStore || {};
        this.fpsCounter = new CABLES.CG.FpsCounter();
        this._identView = vec3_create();
        this._ident = vec3_create();
        vec3_set(this._identView, 0, 0, -2);
        vec3_set(this._ident, 0, 0, 0);
        this._onetimeCallbacks = [];
        this.maxTexSize = 2048;
        this._viewPort = [0, 0, 1, 1];
        this._viewPortStack = [];
        this.patch = _patch;
        this.autoReSize = true;

        this.DEPTH_COMPARE_FUNC_NEVER = 0;
        this.DEPTH_COMPARE_FUNC_LESS = 1;
        this.DEPTH_COMPARE_FUNC_EQUAL = 2;
        this.DEPTH_COMPARE_FUNC_LESSEQUAL = 3;
        this.DEPTH_COMPARE_FUNC_GREATER = 4;
        this.DEPTH_COMPARE_FUNC_NOTEQUAL = 5;
        this.DEPTH_COMPARE_FUNC_GREATEREQUAL = 6;
        this.DEPTH_COMPARE_FUNC_ALWAYS = 7;

        this.profileData = new ProfileData(this);

        /**
         * Current projection matrix
         * @memberof Context
         * @instance
         * @type {mat4}
         */
        this.pMatrix = mat4_create();

        /**
         * Current model matrix
         * @memberof Context
         * @instance
         * @type {mat4}
         */
        this.mMatrix = mat4_create();

        /**
         * Current view matrix
         * @memberof Context
         * @instance
         * @type {mat4}
         */
        this.vMatrix = mat4_create();
        this._textureslots = [];

        this._pMatrixStack = new MatrixStack();
        this._mMatrixStack = new MatrixStack();
        this._vMatrixStack = new MatrixStack();

        this.canvasScale = 1;

        mat4_identity(this.mMatrix);
        mat4_identity(this.vMatrix);

        window.matchMedia("screen and (min-resolution: 2dppx)")
            .addEventListener("change", () =>
            {
                this.emitEvent("resize");
            });
    }

    get canvasWidth()
    {
        return this.cgCanvas.canvasWidth;
    }

    get canvasHeight()
    {
        return this.cgCanvas.canvasHeight;
    }

    set pixelDensity(p)
    {
        if (this.cgCanvas.pixelDensity != p)
        {
            this.cgCanvas.pixelDensity = p;
            this.cgCanvas.updateSize();
            this.emitEvent("resize");
        }
    }

    get pixelDensity()
    {
        return this.cgCanvas.pixelDensity;
    }

    getGApiName()
    {
        return ["WebGL", "WebGPU"][this.gApi];
    }

    get canvas()
    {
        return this.cgCanvas.canvasEle;
    }

    get viewPort()
    {
        // TODO: add stack...
        return [0, 0, this.canvasWidth, this.canvasHeight];
    }

    /**
     * @param {HTMLElement} canvEle
     */
    setCanvas(canvEle)
    {
        if (this.cgCanvas && canvEle == this.cgCanvas.canvasEle) return;
        if (typeof canvEle === "string") canvEle = document.getElementById(canvEle);

        this.cgCanvas = new CgCanvas({ "canvasEle": canvEle, "cg": this });

        canvEle.parentElement.classList.add("cablesContainer");
        if (this._setCanvas) this._setCanvas(canvEle);

        this.updateSize();
    }

    /**
     * @param {HTMLElement} _canvEle
     */
    _setCanvas(_canvEle)
    {
    }

    updateSize()
    {
        this.cgCanvas.updateSize();
    }

    /**
     * @param {number} w
     * @param {number} h
     * @param {boolean} ignorestyle
     */
    setSize(w, h, ignorestyle = false)
    {
        this.cgCanvas.setSize(w, h, ignorestyle);
    }

    _resizeToWindowSize()
    {
        if (this.autoReSize)
        {
            this.setSize(window.innerWidth, window.innerHeight);
            this.updateSize();
        }
    }

    _resizeToParentSize()
    {
        if (this.autoReSize)
        {
            const p = this.canvas.parentElement;
            if (!p)
            {
                this._log.error("cables: can not resize to container element");
                return;
            }

            this.setSize(p.clientWidth, p.clientHeight);
            this.updateSize();
        }
    }

    setAutoResize(parent)
    {
        window.removeEventListener("resize", this._resizeToWindowSize.bind(this));
        window.removeEventListener("resize", this._resizeToParentSize.bind(this));

        if (parent == "window")
        {
            window.addEventListener("resize", this._resizeToWindowSize.bind(this));
            window.addEventListener("orientationchange", this._resizeToWindowSize.bind(this));
            this._resizeToWindowSize();
        }
        if (parent == "parent")
        {
            window.addEventListener("resize", this._resizeToParentSize.bind(this));
            this._resizeToParentSize();
        }
    }

    /**
     * push a matrix to the projection matrix stack
     * @function pushPMatrix
     * @memberof Context
     * @instance
     */
    pushPMatrix()
    {
        this.pMatrix = this._pMatrixStack.push(this.pMatrix);
    }

    /**
      * pop projection matrix stack
      * @function popPMatrix
      * @memberof Context
      * @instance
      * @returns {mat4} current projectionmatrix
      */
    popPMatrix()
    {
        this.pMatrix = this._pMatrixStack.pop();
        return this.pMatrix;
    }

    getProjectionMatrixStateCount()
    {
        return this._pMatrixStack.stateCounter;
    }

    /**
      * push a matrix to the model matrix stack
      * @function pushModelMatrix
      * @memberof Context
      * @instance
      * @example
      * // see source code of translate op:
      * cgl.pushModelMatrix();
      * mat4.translate(cgl.mMatrix,cgl.mMatrix, vec);
      * trigger.trigger();
      * cgl.popModelMatrix();
      */
    pushModelMatrix()
    {
        this.mMatrix = this._mMatrixStack.push(this.mMatrix);
    }

    /**
      * pop model matrix stack
      * @function popModelMatrix
      * @memberof Context
      * @instance
      * @returns {mat4} current modelmatrix
      */
    popModelMatrix()
    {
        // todo: DEPRECATE
        // if (this._mMatrixStack.length === 0) throw "Invalid modelview popMatrix!";
        this.mMatrix = this._mMatrixStack.pop();
        return this.mMatrix;
    }

    /**
      * get model matrix
      * @function modelMatrix
      * @memberof Context
      * @instance
      * @returns {mat4} current modelmatrix
      */
    modelMatrix()
    {
        return this.mMatrix;
    }

    /**
     * push a matrix to the view matrix stack
     * @function pushviewMatrix
     * @memberof Context
     * @instance
     */
    pushViewMatrix()
    {
        this.vMatrix = this._vMatrixStack.push(this.vMatrix);
    }

    /**
      * pop view matrix stack
      * @function popViewMatrix
      * @memberof Context
      * @instance
      * @returns {mat4} current viewmatrix
      * @function
      */
    popViewMatrix()
    {
        this.vMatrix = this._vMatrixStack.pop();
    }

    getViewMatrixStateCount()
    {
        return this._vMatrixStack.stateCounter;
    }

    /**
     * @param {vec3} identTranslate
     * @param {vec3} identTranslateView
     */
    _startMatrixStacks(identTranslate, identTranslateView)
    {
        identTranslate = identTranslate || this._ident;
        identTranslateView = identTranslateView || this._identView;

        perspective(this.pMatrix, 45, this.canvasWidth / this.canvasHeight, 0.1, 1000.0);

        mat4_identity(this.mMatrix);
        mat4_identity(this.vMatrix);
        mat4_translate(this.mMatrix, this.mMatrix, identTranslate);
        mat4_translate(this.vMatrix, this.vMatrix, identTranslateView);

        this.pushPMatrix();
        this.pushModelMatrix();
        this.pushViewMatrix();
    }

    _endMatrixStacks()
    {
        this.popViewMatrix();
        this.popModelMatrix();
        this.popPMatrix();
    }

    dispose()
    {
        this.aborted = true;
        if (this.cgCanvas) this.cgCanvas.dispose();
        if (this._dispose) this._dispose();
    }

    _dispose()
    {
    }

    /**
     * @param {any} _op
     */
    shouldDrawHelpers(_op)
    {
        return false;
    }

    /**
     * execute the callback next frame, once
     * @param {function} cb
     */
    addNextFrameOnceCallback(cb)
    {
        if (cb && this._onetimeCallbacks.indexOf(cb) == -1) this._onetimeCallbacks.push(cb);
    }

    _execOneTimeCallbacks()
    {
        if (this._onetimeCallbacks.length > 0)
        {
            for (let i = 0; i < this._onetimeCallbacks.length; i++) this._onetimeCallbacks[i]();
            this._onetimeCallbacks.length = 0;
        }
    }

    /**
     * @param {number} x
     */
    checkTextureSize(x)
    {
        x = x || 1;
        x = Math.floor(x);
        x = Math.min(x, this.maxTexSize);
        x = Math.max(x, 1);
        return x;
    }

    // should be overwritten...
    screenShot(cb, doScreenshotClearAlpha, mimeType, quality)
    {
        console.log("no screenshot function implemented");
    }

    /**
     * @param {string} [filename]
     * @param {function} [cb]
     * @param {number} [pw]
     * @param {number} [ph]
     * @param {boolean} [noclearalpha]
     */
    saveScreenshot(filename, cb, pw, ph, noclearalpha)
    {
        this.patch.renderOneFrame();

        let w = this.canvas.clientWidth * this.pixelDensity;
        let h = this.canvas.clientHeight * this.pixelDensity;

        if (pw)
        {
            this.canvas.width = pw;
            w = pw;
        }
        if (ph)
        {
            this.canvas.height = ph;
            h = ph;
        }

        function padLeft(nr, n, str)
        {
            return Array(n - String(nr).length + 1).join(str || "0") + nr;
        }

        const d = new Date();
        const dateStr = "".concat(String(d.getFullYear()) + String(d.getMonth() + 1) + String(d.getDate()), "_").concat(padLeft(d.getHours(), 2)).concat(padLeft(d.getMinutes(), 2)).concat(padLeft(d.getSeconds(), 2));

        if (!filename) filename = "cables_" + dateStr + ".png";
        else filename += ".png";

        this.screenShot((blob) =>
        {
            this.canvas.width = w;
            this.canvas.height = h;

            if (blob)
            {
                const anchor = document.createElement("a");

                anchor.download = filename;
                anchor.href = URL.createObjectURL(blob);

                console.log("scrrenshot");
                setTimeout(function ()
                {
                    anchor.click();
                    if (cb) cb(blob);
                }, 100);
            }
            else
            {
                this._log.log("screenshot: no blob");
            }
        });
    }

    hasFocus()
    {
        return this.cgCanvas.hasFocus;

    }

}

;// CONCATENATED MODULE: ./src/core/cgl/cgl_state.js














const BLENDS = {
    "BLEND_NONE": 0,
    "BLEND_NORMAL": 1,
    "BLEND_ADD": 2,
    "BLEND_SUB": 3,
    "BLEND_MUL": 4,
};

/**
 * cables gl context/state manager
 * @class
 * @namespace external:CGL
 * @hideconstructor
 */
// const Context(_patch)
class CglContext extends CgContext
{
    constructor(_patch)
    {
        super(_patch);

        this.gApi = CgContext.API_WEBGL;
        this.aborted = false;

        /** @deprecated */
        this.pushMvMatrix = this.pushModelMatrix; // deprecated and wrong... still used??
        /** @deprecated */
        this.popMvMatrix = this.popmMatrix = this.popModelMatrix;// deprecated and wrong... still used??

        this._log = new Logger("cgl_context", { "onError": _patch.config.onError });

        this.glVersion = 0;
        this.glUseHalfFloatTex = false;
        this.clearCanvasTransparent = true;
        this.clearCanvasDepth = true;
        this.debugOneFrame = false;
        this.checkGlErrors = false; // true is slow // false should be default...
        this.maxTextureUnits = 0;
        this.maxVaryingVectors = 0;
        this.currentProgram = null;
        this._hadStackError = false;
        this.glSlowRenderer = false;
        this._isSafariCrap = false;

        this.temporaryTexture = null;
        this.gl = null;

        this._cursor = "auto";
        this._currentCursor = "";

        this._viewPortStack = [];
        this._glFrameBufferStack = [];
        this._frameBufferStack = [];
        this._shaderStack = [];
        this._stackDepthTest = [];
        this.mainloopOp = null;
        this._stackBlendMode = [];
        this._stackBlendModePremul = [];
        this._stackBlend = [];
        this._stackDepthFunc = [];
        this._stackCullFaceFacing = [];
        this._stackCullFace = [];
        this._stackDepthWrite = [];
        this._stackDepthTest = [];
        this._stackStencil = [];

        this._simpleShader = new CglShader(this, "simpleshader");
        this._simpleShader.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG", "MODULE_VERTEX_MODELVIEW"]);
        this._simpleShader.setSource(CglShader.getDefaultVertexShader(), CglShader.getDefaultFragmentShader());

        this._currentShader = this._simpleShader;

        this._oldCanvasWidth = -1;
        this._oldCanvasHeight = -1;
        this._enabledExtensions = {};

        this.errorShader = null;
    }

    // set pixelDensity(p)
    // {
    //     this._pixelDensity = p;
    // }

    // get pixelDensity()
    // {
    //     return this._pixelDensity;
    // }

    get viewPort()
    {
        if (this._viewPortStack.length > 3)
        {
            const l = this._viewPortStack.length;

            return [
                this._viewPortStack[l - 4],
                this._viewPortStack[l - 3],
                this._viewPortStack[l - 2],
                this._viewPortStack[l - 1]
            ];
        }
        else
        {
            // workaround pre viewport stack times / or+and initial value...

            return this._viewPort;
        }
    }

    get mvMatrix() // deprecate
    {
        return this.mMatrix;
    }

    set mvMatrix(m) // deprecate
    {
        this.mMatrix = m;
    }

    _setCanvas(canv)
    {
        if (!canv) this._log.stack("_setCanvas undef");

        if (!this.patch.config.canvas) this.patch.config.canvas = {};
        if (!this.patch.config.canvas.hasOwnProperty("preserveDrawingBuffer")) this.patch.config.canvas.preserveDrawingBuffer = true;
        if (!this.patch.config.canvas.hasOwnProperty("premultipliedAlpha")) this.patch.config.canvas.premultipliedAlpha = false;
        if (!this.patch.config.canvas.hasOwnProperty("alpha")) this.patch.config.canvas.alpha = false;

        this.patch.config.canvas.stencil = true;

        if (this.patch.config.hasOwnProperty("clearCanvasColor")) this.clearCanvasTransparent = this.patch.config.clearCanvasColor;
        if (this.patch.config.hasOwnProperty("clearCanvasDepth")) this.clearCanvasDepth = this.patch.config.clearCanvasDepth;

        // safari stuff..........
        if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) && (navigator.userAgent.match(/iPhone/i)))
        {
            this._isSafariCrap = true;
            this.glUseHalfFloatTex = true;
        }

        if (!this.patch.config.canvas.forceWebGl1) this.gl = canv.getContext("webgl2", this.patch.config.canvas);

        if (!this.gl || this.gl.isContextLost())
        {
            this.aborted = true;
            this._log.error("NO_WEBGL", "sorry, could not initialize WebGL. Please check if your Browser supports WebGL or try to restart your browser.");
            return;
        }

        if (this.gl.getParameter(this.gl.VERSION) != "WebGL 1.0")
        {
            this.glVersion = 2;
        }
        else
        {
            this.gl = canv.getContext("webgl", this.patch.config.canvas) || canv.getContext("experimental-webgl", this.patch.config.canvas);
            this.glVersion = 1;

            // safari
            // if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) && (navigator.userAgent.match(/iPhone/i)))
            // {
            //     this.glUseHalfFloatTex = true;
            // }

            // ios
            // @ts-ignore
            if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream)
            {
                if (!this.patch.config.canvas.hasOwnProperty("powerPreference")) this.patch.config.canvas.powerPreference = "high-performance";
            }

            this.enableExtension("OES_standard_derivatives");
            // this.enableExtension("GL_OES_standard_derivatives");
            const instancingExt = this.enableExtension("ANGLE_instanced_arrays") || this.gl;
            if (instancingExt.vertexAttribDivisorANGLE)
            {
                this.gl.vertexAttribDivisor = instancingExt.vertexAttribDivisorANGLE.bind(instancingExt);
                this.gl.drawElementsInstanced = instancingExt.drawElementsInstancedANGLE.bind(instancingExt);
            }
        }

        const dbgRenderInfo = this.enableExtension("WEBGL_debug_renderer_info");
        if (dbgRenderInfo)
        {
            this.glRenderer = this.gl.getParameter(dbgRenderInfo.UNMASKED_RENDERER_WEBGL);
            if (this.glRenderer === "Google SwiftShader") this.glSlowRenderer = true;
        }

        this.canvas.addEventListener("webglcontextlost", (event) =>
        {
            if (this.aborted) return this._log.warn("[cgl_state] aborted context lost... can be ignored...");
            this._log.error("canvas lost...", event);
            this.emitEvent("webglcontextlost");
            this.aborted = true;
        });

        this.maxAnisotropic = 0;
        if (this.enableExtension("EXT_texture_filter_anisotropic"))
            this.maxAnisotropic = this.gl.getParameter(this.enableExtension("EXT_texture_filter_anisotropic").MAX_TEXTURE_MAX_ANISOTROPY_EXT);

        this.maxVaryingVectors = this.gl.getParameter(this.gl.MAX_VARYING_VECTORS);
        this.maxTextureUnits = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
        this.maxTexSize = this.gl.getParameter(this.gl.MAX_TEXTURE_SIZE);
        this.maxUniformsFrag = this.gl.getParameter(this.gl.MAX_FRAGMENT_UNIFORM_VECTORS);
        this.maxUniformsVert = this.gl.getParameter(this.gl.MAX_VERTEX_UNIFORM_VECTORS);
        this.maxSamples = 0;
        if (this.gl.MAX_SAMPLES) this.maxSamples = this.gl.getParameter(this.gl.MAX_SAMPLES);

        if (this.glVersion == 1)
        {
            this.enableExtension("OES_standard_derivatives");
            const instancingExt = this.enableExtension("ANGLE_instanced_arrays") || this.gl;

            if (instancingExt.vertexAttribDivisorANGLE)
            {
                this.gl.vertexAttribDivisor = instancingExt.vertexAttribDivisorANGLE.bind(instancingExt);
                this.gl.drawElementsInstanced = instancingExt.drawElementsInstancedANGLE.bind(instancingExt);
            }
        }

        this.DEPTH_FUNCS = [
            this.gl.NEVER,
            this.gl.ALWAYS,
            this.gl.LESS,
            this.gl.LEQUAL,
            this.gl.GREATER,
            this.gl.GEQUAL,
            this.gl.EQUAL,
            this.gl.NOTEQUAL
        ];
        this.CULL_MODES = [
            null,
            this.gl.BACK,
            this.gl.FRONT,
            this.gl.FRONT_AND_BACK
        ];
    }

    getInfo()
    {
        return {
            "glVersion": this.glVersion,
            "glRenderer": this.glRenderer,
            "glUseHalfFloatTex": this.glUseHalfFloatTex,
            "maxVaryingVectors": this.maxVaryingVectors,
            "maxTextureUnits": this.maxTextureUnits,
            "maxTexSize": this.maxTexSize,
            "maxUniformsFrag": this.maxUniformsFrag,
            "maxUniformsVert": this.maxUniformsVert,
            "maxSamples": this.maxSamples
        };
    }

    /**
     * @function popViewPort
     * @memberof Context
     * @instance
     * @description pop viewPort stack
     */
    popViewPort()
    {
        this._viewPortStack.pop();
        this._viewPortStack.pop();
        this._viewPortStack.pop();
        this._viewPortStack.pop();

        if (this._viewPortStack.length == 0)
            this.setViewPort(0, 0, this.canvasWidth, this.canvasHeight);
        else
            this.setViewPort(this._viewPortStack[this._viewPort.length - 4], this._viewPortStack[this._viewPort.length - 3], this._viewPortStack[this._viewPort.length - 2], this._viewPortStack[this._viewPort.length - 1]);
    }

    /**
     * @function pushViewPort
     * @memberof Context
     * @instance
     * @description push a new viewport onto stack
     * @param {Number} x
     * @param {Number} y
     * @param {Number} w
     * @param {Number} h
     */

    pushViewPort(x, y, w, h)
    {
        this._viewPortStack.push(x, y, w, h);
        this.setViewPort(x, y, w, h);
    }

    // old
    getViewPort()
    {
        return this._viewPort;
    }

    // old
    resetViewPort()
    {
        this.gl.viewport(this._viewPort[0], this._viewPort[1], this._viewPort[2], this._viewPort[3]);
    }

    // old
    setViewPort(x, y, w, h)
    {
        this._viewPort[0] = Math.round(x);
        this._viewPort[1] = Math.round(y);
        this._viewPort[2] = Math.round(w);
        this._viewPort[3] = Math.round(h);
        this.gl.viewport(this._viewPort[0], this._viewPort[1], this._viewPort[2], this._viewPort[3]);
    }

    /**
     * @param {function} cb
     * @param {boolean} doScreenshotClearAlpha
     * @param {string} mimeType
     * @param {number} quality
     */
    screenShot(cb, doScreenshotClearAlpha, mimeType, quality)
    {
        if (doScreenshotClearAlpha)
        {
            this.gl.clearColor(1, 1, 1, 1);
            this.gl.colorMask(false, false, false, true);
            this.gl.clear(this.gl.COLOR_BUFFER_BIT);
            this.gl.colorMask(true, true, true, true);
        }

        if (this.canvas && this.canvas.toBlob)
        {
            this.canvas.toBlob(
                (blob) =>
                {
                    if (cb) cb(blob);
                    else this._log.log("no screenshot callback...");
                }, mimeType, quality);
        }
    }

    endFrame()
    {
        if (this.patch.isEditorMode()) CABLES.GL_MARKER.drawMarkerLayer(this);

        this.setPreviousShader();

        if (this._vMatrixStack.length() > 0) this.logStackError("view matrix stack length !=0 at end of rendering...");
        if (this._mMatrixStack.length() > 0) this.logStackError("mvmatrix stack length !=0 at end of rendering...");
        if (this._pMatrixStack.length() > 0) this.logStackError("pmatrix stack length !=0 at end of rendering...");
        if (this._glFrameBufferStack.length > 0) this.logStackError("glFrameBuffer stack length !=0 at end of rendering...");
        if (this._stackDepthTest.length > 0) this.logStackError("depthtest stack length !=0 at end of rendering...");
        if (this._stackDepthWrite.length > 0) this.logStackError("depthwrite stack length !=0 at end of rendering...");
        if (this._stackDepthFunc.length > 0) this.logStackError("depthfunc stack length !=0 at end of rendering...");
        if (this._stackBlend.length > 0) this.logStackError("blend stack length !=0 at end of rendering...");
        if (this._stackBlendMode.length > 0) this.logStackError("blendMode stack length !=0 at end of rendering...");
        if (this._shaderStack.length > 0) this.logStackError("this._shaderStack length !=0 at end of rendering...");
        if (this._stackCullFace.length > 0) this.logStackError("this._stackCullFace length !=0 at end of rendering...");
        if (this._stackCullFaceFacing.length > 0) this.logStackError("this._stackCullFaceFacing length !=0 at end of rendering...");
        if (this._viewPortStack.length > 0) this.logStackError("viewport stack length !=0 at end of rendering...");

        this._frameStarted = false;

        if (this._oldCanvasWidth != this.canvasWidth || this._oldCanvasHeight != this.canvasHeight)
        {
            this._oldCanvasWidth = this.canvasWidth;
            this._oldCanvasHeight = this.canvasHeight;
            this.emitEvent("resize");
        }

        if (this._cursor != this._currentCursor)
        {
            this._currentCursor = this.canvas.style.cursor = this._cursor;
        }

        this.emitEvent("endframe");

        this.fpsCounter.endFrame();
    }

    logStackError(str)
    {
        if (!this._hadStackError)
        {
            this._hadStackError = true;
            this._log.warn("[" + this.canvas.id + "]: ", str);
        }
    }

    // shader stack
    getShader()
    {
        if (this._currentShader) if (!this.tempData || ((this.tempData.renderOffscreen === true) == this._currentShader.offScreenPass) === true) return this._currentShader;

        for (let i = this._shaderStack.length - 1; i >= 0; i--) if (this._shaderStack[i]) if (this.tempData.renderOffscreen == this._shaderStack[i].offScreenPass) return this._shaderStack[i];
    }

    getDefaultShader()
    {
        return this._simpleShader;
    }

    /**
     * @deprecated
     * @param {Shader} s
     */
    setShader(s)
    {
        this.pushShader(s);
    }

    /**
     * push a shader to the shader stack
     * @function pushShader
     * @memberof Context
     * @instance
     * @param {Shader} shader
     * @function
     */
    pushShader(shader)
    {
        if (this.tempData.forceShaderMods)
        {
            for (let i = 0; i < this.tempData.forceShaderMods.length; i++)
            {
                // if (!currentShader.forcedMod && currentShader != this.tempData.forceShaderMods[i])
                // {
                //     currentShader.forcedMod = this.tempData.forceShaderMods[i];
                shader = this.tempData.forceShaderMods[i].bind(shader, false);
                // }
                // return currentShader;
                // if (this.tempData.forceShaderMods[i].currentShader() && shader != this.tempData.forceShaderMods[i].currentShader().shader)
            }
        }

        this._shaderStack.push(shader);
        this._currentShader = shader;
    }

    popShader()
    {
        this.setPreviousShader();
    }

    /**
     * pop current used shader from shader stack
     * @function popShader
     * @memberof Context
     * @instance
     * @function
     */
    setPreviousShader()
    {
        if (this.tempData.forceShaderMods)
        {
            for (let i = 0; i < this.tempData.forceShaderMods.length; i++)
            {
                // const a =
                this.tempData.forceShaderMods[i].unbind(false);
                // if (a) return;
                // this.popShader();
            }
        }

        if (this._shaderStack.length === 0) throw new Error("Invalid shader stack pop!");
        this._shaderStack.pop();
        this._currentShader = this._shaderStack[this._shaderStack.length - 1];
    }

    /**
     * push a framebuffer to the framebuffer stack
     * @function pushGlFrameBuffer
     * @memberof Context
     * @instance
     * @param {Object} fb framebuffer
     * @function
     */
    pushGlFrameBuffer(fb)
    {
        this._glFrameBufferStack.push(fb);
    }

    /**
     * pop framebuffer stack
     * @function popGlFrameBuffer
     * @memberof Context
     * @instance
     * @returns {Object} current framebuffer or null
     */
    popGlFrameBuffer()
    {
        if (this._glFrameBufferStack.length == 0) return null;
        this._glFrameBufferStack.pop();
        return this._glFrameBufferStack[this._glFrameBufferStack.length - 1];
    }

    /**
     * get current framebuffer
     * @function getCurrentFrameBuffer
     * @memberof Context
     * @instance
     * @returns {Object} current framebuffer or null
     */
    getCurrentGlFrameBuffer()
    {
        if (this._glFrameBufferStack.length === 0) return null;
        return this._glFrameBufferStack[this._glFrameBufferStack.length - 1];
    }

    /**
     * push a framebuffer to the framebuffer stack
     * @function pushGlFrameBuffer
     * @memberof Context
     * @instance
     * @param {Framebuffer2} fb framebuffer
     */
    pushFrameBuffer(fb)
    {
        this._frameBufferStack.push(fb);
    }

    /**
     * pop framebuffer stack
     * @function popFrameBuffer
     * @memberof Context
     * @instance
     * @returns {Framebuffer2} current framebuffer or null
     */
    popFrameBuffer()
    {
        if (this._frameBufferStack.length == 0) return null;
        this._frameBufferStack.pop();
        return this._frameBufferStack[this._frameBufferStack.length - 1];
    }

    /**
     * get current framebuffer
     * @function getCurrentFrameBuffer
     * @memberof Context
     * @instance
     * @returns {Framebuffer2} current framebuffer or null
     */
    getCurrentFrameBuffer()
    {
        if (this._frameBufferStack.length === 0) return null;
        return this._frameBufferStack[this._frameBufferStack.length - 1];
    }

    renderStart(cgl, identTranslate, identTranslateView)
    {
        this.fpsCounter.startFrame();
        this.pushDepthTest(true);
        this.pushDepthWrite(true);
        this.pushDepthFunc(cgl.gl.LEQUAL);
        this.pushCullFaceFacing(cgl.gl.BACK);
        this.pushCullFace(false);

        // if (this.clearCanvasTransparent)
        // {
        //     cgl.gl.clearColor(0, 0, 0, 0);
        //     cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT);
        // }
        // if (this.clearCanvasDepth) cgl.gl.clear(cgl.gl.DEPTH_BUFFER_BIT);

        cgl.setViewPort(0, 0, cgl.canvasWidth, cgl.canvasHeight);

        this._startMatrixStacks(identTranslate, identTranslateView);

        cgl.pushBlendMode(constants_CONSTANTS.BLEND_MODES.BLEND_NORMAL, false);

        for (let i = 0; i < this._textureslots.length; i++) this._textureslots[i] = null;

        this.pushShader(this._simpleShader);

        this._frameStarted = true;

        this._execOneTimeCallbacks();

        for (let i = 0; i < this._textureslots.length; i++)
        {
            this.gl.activeTexture(this.gl.TEXTURE0 + i);
            this.gl.bindTexture(this.gl.TEXTURE_2D, null);
            this._textureslots[i] = null;
        }

        this.emitEvent("beginFrame");
    }

    renderEnd(cgl)
    {
        this._endMatrixStacks();

        this.popDepthTest();
        this.popDepthWrite();
        this.popDepthFunc();
        this.popCullFaceFacing();
        this.popCullFace();
        this.popBlend();
        this.popBlendMode();

        cgl.endFrame();

        this.emitEvent("endFrame");
    }

    getTexture(slot)
    {
        return this._textureslots[slot];
    }

    hasFrameStarted()
    {
        return this._frameStarted;
    }

    /**
     * log warning to console if the rendering of one frame has not been started / handy to check for async problems
     * @function checkFrameStarted
     * @memberof Context
     * @param string
     * @instance
     */
    checkFrameStarted(string)
    {
        if (!this._frameStarted)
        {
            this._log.warn("frame not started " + string);

            Error.stackTraceLimit = 111; logStack();
            this.patch.printTriggerStack();
        }
    }

    setTexture(slot, t, type)
    {
        this.checkFrameStarted("cgl setTexture");

        if (t === null) t = Texture.getEmptyTexture(this).tex;

        if (this._textureslots[slot] != t)
        {
            this.gl.activeTexture(this.gl.TEXTURE0 + slot);
            this.gl.bindTexture(type || this.gl.TEXTURE_2D, t);
            this._textureslots[slot] = t;
        }

        return true;
    }

    fullScreen()
    {
        if (this.canvas.requestFullscreen) this.canvas.requestFullscreen();
        else if (this.canvas.mozRequestFullScreen) this.canvas.mozRequestFullScreen();
        else if (this.canvas.webkitRequestFullscreen) this.canvas.webkitRequestFullscreen();
        else if (this.canvas.msRequestFullscreen) this.canvas.msRequestFullscreen();
    }

    /**
     * @param {string} [str]
     */
    printError(str)
    {
        if (!this.checkGlErrors) return;
        let found = false;
        let error = this.gl.getError();

        if (error != this.gl.NO_ERROR)
        {
            let errStr = "";
            if (error == this.gl.OUT_OF_MEMORY) errStr = "OUT_OF_MEMORY";
            if (error == this.gl.INVALID_ENUM) errStr = "INVALID_ENUM";
            if (error == this.gl.INVALID_OPERATION) errStr = "INVALID_OPERATION";
            if (error == this.gl.INVALID_FRAMEBUFFER_OPERATION) errStr = "INVALID_FRAMEBUFFER_OPERATION";
            if (error == this.gl.INVALID_VALUE) errStr = "INVALID_VALUE";
            if (error == this.gl.CONTEXT_LOST_WEBGL)
            {
                this.aborted = true;
                errStr = "CONTEXT_LOST_WEBGL";
            }
            if (error == this.gl.NO_ERROR) errStr = "NO_ERROR";

            found = true;

            this._log.warn("gl error [" + this.canvas.id + "]: ", str, error, errStr);

            if (this.canvas.id.includes("glGuiCanvas"))
                if (!this._loggedGlError)
                {
                    this.patch.printTriggerStack();
                    this._log.stack("glerror");
                    this._loggedGlError = true;
                }
        }
        error = this.gl.getError();

        return found;
    }

    _dispose()
    {
        this._simpleShader.dispose();
        this.gl = null;
    }

    // state depthtest

    /**
     * push depth testing enabled state
     * @function pushDepthTest
     * @param {Boolean} enabled
     * @memberof Context
     * @instance
     */

    pushDepthTest(enabled)
    {
        this._stackDepthTest.push(enabled);
        if (!enabled) this.gl.disable(this.gl.DEPTH_TEST);
        else this.gl.enable(this.gl.DEPTH_TEST);
    }

    /**
     * current state of depth testing
     * @function stateCullFace
     * @returns {Boolean} enabled
     * @memberof Context
     * @instance
     */
    stateDepthTest()
    {
        return this._stackDepthTest[this._stackDepthTest.length - 1];
    }

    /**
     * pop depth testing state
     * @function popCullFace
     * @memberof Context
     * @instance
     */
    popDepthTest()
    {
        this._stackDepthTest.pop();

        if (!this._stackDepthTest[this._stackDepthTest.length - 1]) this.gl.disable(this.gl.DEPTH_TEST);
        else this.gl.enable(this.gl.DEPTH_TEST);
    }

    // --------------------------------------
    // state depthwrite

    /**
     * push depth write enabled state
     * @function pushDepthTest
     * @param {Boolean} enabled
     * @memberof Context
     * @instance
     */
    pushDepthWrite(enabled)
    {
        enabled = enabled || false;
        this._stackDepthWrite.push(enabled);
        this.gl.depthMask(enabled);
    }

    /**
     * current state of depth writing
     * @function stateDepthWrite
     * @returns {Boolean} enabled
     * @memberof Context
     * @instance
     */
    stateDepthWrite()
    {
        return this._stackDepthWrite[this._stackDepthWrite.length - 1];
    }

    /**
     * pop depth writing state
     * @function popDepthWrite
     * @memberof Context
     * @instance
     */
    popDepthWrite()
    {
        this._stackDepthWrite.pop();
        this.gl.depthMask(this._stackDepthWrite[this._stackDepthWrite.length - 1] || false);
    }

    // --------------------------------------
    // state CullFace

    /**
     * push face culling face enabled state
     * @function pushCullFace
     * @param {Boolean} enabled
     * @memberof Context
     * @instance
     */
    pushCullFace(enabled)
    {
        this._stackCullFace.push(enabled);

        if (enabled) this.gl.enable(this.gl.CULL_FACE);
        else this.gl.disable(this.gl.CULL_FACE);
    }

    /**
     * current state of face culling
     * @function stateCullFace
     * @returns {Boolean} enabled
     * @memberof Context
     * @instance
     */
    stateCullFace()
    {
        return this._stackCullFace[this._stackCullFace.length - 1];
    }

    /**
     * pop face culling enabled state
     * @function popCullFace
     * @memberof Context
     * @instance
     */
    popCullFace()
    {
        this._stackCullFace.pop();

        if (this._stackCullFace[this._stackCullFace.length - 1]) this.gl.enable(this.gl.CULL_FACE);
        else this.gl.disable(this.gl.CULL_FACE);
    }

    // --------------------------------------
    // state CullFace Facing

    /**
     * push face culling face side
     * @function pushCullFaceFacing
     * @param {Number} face - cgl.gl.FRONT_AND_BACK, cgl.gl.BACK or cgl.gl.FRONT
     * @memberof Context
     * @instance
     */

    pushCullFaceFacing(face)
    {
        this._stackCullFaceFacing.push(face);
        this.gl.cullFace(this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1]);
    }

    /**
     * current state of face culling side
     * @function stateCullFaceFacing
     * @returns {Boolean} enabled
     * @memberof Context
     * @instance
     */
    stateCullFaceFacing()
    {
        return this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1];
    }

    /**
     * pop face culling face side
     * @function popCullFaceFacing
     * @memberof Context
     * @instance
     */
    popCullFaceFacing()
    {
        this._stackCullFaceFacing.pop();
        if (this._stackCullFaceFacing.length > 0) this.gl.cullFace(this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1]);
    }

    // --------------------------------------
    // state depthfunc

    /**
     * enable / disable depth testing
     * like `gl.depthFunc(boolean);`
     * @function pushDepthFunc
     * @memberof Context
     * @instance
     * @param {Boolean} f depthtesting
     */
    pushDepthFunc(f)
    {
        this._stackDepthFunc.push(f);
        this.gl.depthFunc(f);
    }

    /**
     * current state of blend
     * @function stateDepthFunc
     * @memberof Context
     * @instance
     * @returns {Boolean} depth testing enabled/disabled
     */
    stateDepthFunc()
    {
        if (this._stackDepthFunc.length > 0) return this._stackDepthFunc[this._stackDepthFunc.length - 1];
        return false;
    }

    /**
     * pop depth testing and set the previous state
     * @function popDepthFunc
     * @memberof Context
     * @instance
     */
    popDepthFunc()
    {
        this._stackDepthFunc.pop();
        if (this._stackDepthFunc.length > 0) this.gl.depthFunc(this._stackDepthFunc[this._stackDepthFunc.length - 1]);
    }

    // --------------------------------------
    // state blending

    /**
     * enable / disable blend
     * like gl.enable(gl.BLEND); / gl.disable(gl.BLEND);
     * @function pushBlend
     * @memberof Context
     * @instance
     * @param {boolean} b blending
     */
    pushBlend(b)
    {
        this._stackBlend.push(b);
        if (!b) this.gl.disable(this.gl.BLEND);
        else this.gl.enable(this.gl.BLEND);
    }

    /**
     * pop blend state and set the previous state
     * @function popBlend
     * @memberof Context
     * @instance
     */
    popBlend()
    {
        this._stackBlend.pop();

        if (!this._stackBlend[this._stackBlend.length - 1]) this.gl.disable(this.gl.BLEND);
        else this.gl.enable(this.gl.BLEND);
    }

    /**
     * current state of blend
     * @function stateBlend
     * @returns {boolean} blending enabled/disabled
     * @memberof Context
     * @instance
     */
    stateBlend()
    {
        return this._stackBlend[this._stackBlend.length - 1];
    }

    /**
     * push and switch to predefined blendmode (CONSTANTS.BLEND_MODES.BLEND_NONE,CONSTANTS.BLEND_MODES.BLEND_NORMAL,CONSTANTS.BLEND_MODES.BLEND_ADD,CONSTANTS.BLEND_MODES.BLEND_SUB,CONSTANTS.BLEND_MODES.BLEND_MUL)
     * @function pushBlendMode
     * @memberof Context
     * @instance
     * @param {Number} blendMode
     * @param {Boolean} premul premultiplied mode
     */
    pushBlendMode(blendMode, premul)
    {
        this._stackBlendMode.push(blendMode);
        this._stackBlendModePremul.push(premul);

        const n = this._stackBlendMode.length - 1;

        this.pushBlend(this._stackBlendMode[n] !== constants_CONSTANTS.BLEND_MODES.BLEND_NONE);
        this._setBlendMode(this._stackBlendMode[n], this._stackBlendModePremul[n]);
    }

    /**
     * pop predefined blendmode / switch back to previous blendmode
     * @function popBlendMode
     * @memberof Context
     * @instance
     */
    popBlendMode()
    {
        this._stackBlendMode.pop();
        this._stackBlendModePremul.pop();

        const n = this._stackBlendMode.length - 1;

        this.popBlend();

        if (n >= 0) this._setBlendMode(this._stackBlendMode[n], this._stackBlendModePremul[n]);
    }

    // --------------------------------------
    // state stencil

    /**
     * enable / disable stencil testing

    * @function pushStencil
    * @memberof Context
    * @instance
    * @param {Boolean} b enable
    */
    pushStencil(b)
    {
        this._stackStencil.push(b);
        if (!b) this.gl.disable(this.gl.STENCIL_TEST);
        else this.gl.enable(this.gl.STENCIL_TEST);
    }

    /**
     * pop stencil test state and set the previous state
     * @function popStencil
     * @memberof Context
     * @instance
     */
    popStencil()
    {
        this._stackStencil.pop();

        if (!this._stackStencil[this._stackStencil.length - 1]) this.gl.disable(this.gl.STENCIL_TEST);
        else this.gl.enable(this.gl.STENCIL_TEST);
    }

    // --------------------------------------

    glGetAttribLocation(prog, name)
    {
        const l = this.gl.getAttribLocation(prog, name);
        // if (l == -1)
        // {
        //     this._log.warn("get attr loc -1 ", name);
        // }
        return l;
    }

    /**
     * should an op now draw helpermeshes
     * @param {Op} op
     */
    shouldDrawHelpers(op)
    {
        if (this.tempData.shadowPass) return false;
        if (!op.patch.isEditorMode()) return false;

        // const fb = this.getCurrentFrameBuffer();
        // if (fb && fb.getWidth)
        // {
        //     const fbshould = this.canvasWidth / this.canvasHeight == fb.getWidth() / fb.getHeight();
        //     if (!fbshould) return false;
        // }

        return gui.shouldDrawOverlay;// || (CABLES.UI.renderHelperCurrent && op.isCurrentUiOp());
    }

    _setBlendMode(blendMode, premul)
    {
        const gl = this.gl;

        if (blendMode == constants_CONSTANTS.BLEND_MODES.BLEND_NONE)
        {
            // this.gl.disable(this.gl.BLEND);
        }
        else if (blendMode == constants_CONSTANTS.BLEND_MODES.BLEND_ADD)
        {
            if (premul)
            {
                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                gl.blendFuncSeparate(gl.ONE, gl.ONE, gl.ONE, gl.ONE);
            }
            else
            {
                gl.blendEquation(gl.FUNC_ADD);
                gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
            }
        }
        else if (blendMode == constants_CONSTANTS.BLEND_MODES.BLEND_SUB)
        {
            if (premul)
            {
                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                gl.blendFuncSeparate(gl.ZERO, gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ONE_MINUS_SRC_ALPHA);
            }
            else
            {
                gl.blendEquation(gl.FUNC_ADD);
                gl.blendFunc(gl.ZERO, gl.ONE_MINUS_SRC_COLOR);
            }
        }
        else if (blendMode == constants_CONSTANTS.BLEND_MODES.BLEND_MUL)
        {
            if (premul)
            {
                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
            }
            else
            {
                gl.blendEquation(gl.FUNC_ADD);
                gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
            }
        }
        else if (blendMode == constants_CONSTANTS.BLEND_MODES.BLEND_NORMAL)
        {
            if (premul)
            {
                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            }
            else
            {
                gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
                gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            }
        }
        else
        {
            this._log.log("setblendmode: unknown blendmode");
        }
    }

    /**
     * @param {Geometry} geom
     * @param {CglMeshOptions} options
     */
    createMesh(geom, options)
    {
        if (CABLES.isNumeric(options))options = { "glPrimitive": options }; // old constructor fallback...
        return new Mesh(this, geom, options);
    }

    /**
     * set cursor
     * @function setCursor
     * @memberof Context
     * @instance
     * @param {String} str css cursor string
     */
    setCursor(str)
    {
        this._cursor = str;
    }

    /**
     * enable a webgl extension
     * @function enableExtension
     * @memberof Context
     * @instance
     * @param {String} name extension name
     * @returns {Object} extension object or null
     */
    enableExtension(name)
    {
        if (!this.gl) return null;

        if (this._enabledExtensions.hasOwnProperty(name))
            return this._enabledExtensions[name];

        const o = this.gl.getExtension(name);
        this._enabledExtensions[name] = o;

        if (!o) this._log.warn("[cgl_state] extension not available " + name);

        return o;
    }

    getErrorShader()
    {
        if (this.errorShader) return this.errorShader;

        this.errorShader = new CglShader(this, "errormaterial");
        this.errorShader.setSource(CglShader.getDefaultVertexShader(), CglShader.getErrorFragmentShader());
        return this.errorShader;
    }

}

;// CONCATENATED MODULE: ./src/core/core_patch.js











/** @global CABLES.OPS  */

/**
 * @typedef {import("./core_op.js").OpUiAttribs} OpUiAttribs
 */

/**
 * @typedef PatchConfig
 * @property {String} [prefixAssetPath=''] prefix for path to assets
 * @property {String} [assetPath=''] path to assets
 * @property {String} [jsPath=''] path to javascript files
 * @property {String} [glCanvasId='glcanvas'] dom element id of canvas element
 * @property {Function} [onError=null] called when an error occurs
 * @property {Function} [onFinishedLoading=null] called when patch finished loading all assets
 * @property {Function} [onFirstFrameRendered=null] called when patch rendered it's first frame
 * @property {Boolean} [glCanvasResizeToWindow=false] resize canvas automatically to window size
 * @property {Boolean} [glCanvasResizeToParent] resize canvas automatically to parent element
 * @property {Boolean} [doRequestAnimation=true] do requestAnimationFrame set to false if you want to trigger exec() from outside (only do if you know what you are doing)
 * @property {Boolean} [clearCanvasColor=true] clear canvas in transparent color every frame
 * @property {Boolean} [clearCanvasDepth=true] clear depth every frame
 * @property {Boolean} [glValidateShader=true] enable/disable validation of shaders *
 * @property {Boolean} [silent=false]
 * @property {Number} [fpsLimit=0] 0 for maximum possible frames per second
 * @property {String} [glslPrecision='mediump'] default precision for glsl shader
 * @property {String} [prefixJsPath]
 * @property {Function} [onPatchLoaded]
 * @property {Object} [canvas]
 * @property {Object} [patch]
 * @property {String} [patchFile]
 * @property {String} [subPatch] internal use
 * @property {Number} [masterVolume] 0 for maximum possible frames per second
 * @property {HTMLCanvasElement} [glCanvas]
*/

/**
 * @typedef CoreOp
 * @type Op
 */

/**
 * @template {CoreOp} Op
 *
 * Patch class, contains all operators,values,links etc. manages loading and running of the whole patch
 *
 * see {@link PatchConfig}
 *
 * @example
 * CABLES.patch=new CABLES.Patch(
 * {
 *     patch:pStr,
 *     glCanvasId:'glcanvas',
 *     glCanvasResizeToWindow:true,
 *     canvas:{powerPreference:"high-performance"},
 *     prefixAssetPath:'/assets/',
 *     prefixJsPath:'/js/',
 *     onError:function(e){console.log(e);}
 *     glslPrecision:'highp'
 * });
 */
class Patch extends Events
{
    static EVENT_OP_DELETED = "onOpDelete";
    static EVENT_OP_ADDED = "onOpAdd";
    static EVENT_PAUSE = "pause";
    static EVENT_RESUME = "resume";
    static EVENT_PATCHLOADEND = "patchLoadEnd";
    static EVENT_VARIABLES_CHANGED = "variablesChanged";
    static EVENT_RENDER_FRAME = "onRenderFrame";
    static EVENT_RENDERED_ONE_FRAME = "renderedOneFrame";
    static EVENT_LINK = "onLink";

    #renderOneFrame = false;
    #initialDeserialize = true;

    /** @param {PatchConfig} cfg */
    constructor(cfg)
    {
        super();

        this._log = new Logger("core_patch", { "onError": cfg.onError });

        /** @type {Array<Op>} */
        this.ops = [];
        this.settings = {};

        /** @type {PatchConfig} */
        this.config = cfg ||
        {
            "glCanvasResizeToWindow": false,
            "prefixAssetPath": "",
            "prefixJsPath": "",
            "silent": true,
            "onError": null,
            "onFinishedLoading": null,
            "onFirstFrameRendered": null,
            "onPatchLoaded": null,
            "fpsLimit": 0,

        };

        this.timer = new Timer();
        this.freeTimer = new Timer();
        this.animFrameOps = [];
        this.animFrameCallbacks = [];
        this.gui = false;
        CABLES.logSilent = this.silent = true;
        this.profiler = null;
        this.aborted = false;
        this._crashedOps = [];

        this._animReq = null;
        this._opIdCache = {};
        this._triggerStack = [];
        this.storeObjNames = false; // remove after may release

        /** @type {LoadingStatus} */
        this.loading = new LoadingStatus(this);

        this._volumeListeners = [];
        this._paused = false;
        this._frameNum = 0;
        this.onOneFrameRendered = null;
        this.namedTriggers = {};

        this._origData = null;
        this._frameNext = 0;
        this._frameInterval = 0;
        this._lastFrameTime = 0;
        this._frameWasdelayed = true;
        this.tempData = this.frameStore = {};
        this.reqAnimTimeStamp = 0;

        this.cgCanvas = null;

        if (!(function () { return !this; }())) console.log("not in strict mode: core patch");

        if (this.config.hasOwnProperty("silent")) this.silent = CABLES.logSilent = this.config.silent;
        if (!this.config.hasOwnProperty("doRequestAnimation")) this.config.doRequestAnimation = true;

        if (!this.config.prefixAssetPath) this.config.prefixAssetPath = "";
        if (!this.config.prefixJsPath) this.config.prefixJsPath = "";
        if (!this.config.masterVolume) this.config.masterVolume = 1.0;

        this._variables = {};

        this.vars = {};
        if (cfg && cfg.vars) this.vars = cfg.vars; // vars is old!

        this.cgl = new CglContext(this);
        this.cgp = null;

        this._subpatchOpCache = {};

        this.cgl.setCanvas(this.config.glCanvasId || this.config.glCanvas || "glcanvas");
        if (this.config.glCanvasResizeToWindow === true) this.cgl.setAutoResize("window");
        if (this.config.glCanvasResizeToParent === true) this.cgl.setAutoResize("parent");
        this.loading.setOnFinishedLoading(this.config.onFinishedLoading);

        if (this.cgl.aborted) this.aborted = true;
        if (this.cgl.silent) this.silent = true;

        if (!CABLES.OPS)
        {
            this.aborted = true;
            throw new Error("no CABLES.OPS found");
        }
        this.freeTimer.play();
        this.exec();

        if (!this.aborted)
        {
            if (this.config.patch)
            {
                this.deSerialize(this.config.patch);
            }
            else if (this.config.patchFile)
            {
                ajax(
                    this.config.patchFile,
                    (err, _data) =>
                    {
                        try
                        {
                            const data = JSON.parse(_data);
                            if (err)
                            {
                                const txt = "";
                                this._log.error("err", err);
                                this._log.error("data", data);
                                this._log.error("data", data.msg);
                                return;
                            }
                            this.deSerialize(data);
                        }
                        catch (e)
                        {
                            this._log.error("could not load/parse patch ", e);
                        }
                    }
                );
            }
            this.timer.play();
        }

        console.log("made with https://cables.gl"); // eslint-disable-line
        this.cg = undefined;

    }

    isPlaying()
    {
        return !this._paused;
    }

    /** @deprecated */
    renderOneFrame()
    {
        this._paused = true;
        this._renderOneFrame = true;
        this.exec();
        this._renderOneFrame = false;
    }

    /**
     * returns true if patch is opened in editor/gui mode
     * @function isEditorMode
     * @memberof Patch
     * @instance
     * @return {Boolean} editor mode
     */
    isEditorMode()
    {
        return this.config.editorMode === true;
    }

    /**
     * pauses patch execution
     * @function pause
     * @memberof Patch
     * @instance
     */
    pause()
    {
        cancelAnimationFrame(this._animReq);
        this.emitEvent(Patch.EVENT_PAUSE);
        this._animReq = null;
        this._paused = true;
        this.freeTimer.pause();
    }

    /**
     * resumes patch execution
     * @function resume
     * @memberof Patch
     * @instance
     */
    resume()
    {
        if (this._paused)
        {
            cancelAnimationFrame(this._animReq);
            this._paused = false;
            this.freeTimer.play();
            this.emitEvent(Patch.EVENT_RESUME);
            this.exec();
        }
    }

    /**
     * set volume [0-1]
     * @function setVolume
     * @param {Number} v volume
     * @memberof Patch
     * @instance
     */
    setVolume(v)
    {
        this.config.masterVolume = v;
        for (let i = 0; i < this._volumeListeners.length; i++) this._volumeListeners[i].onMasterVolumeChanged(v);
    }

    /**
     * get asset path
     * @function getAssetPath
     * @memberof Patch
     * @param patchId
     * @instance
     */
    getAssetPath(patchId = null)
    {
        if (this.config.hasOwnProperty("assetPath"))
        {
            return this.config.assetPath;
        }
        else if (this.isEditorMode())
        {
            let id = patchId || gui.project()._id;
            return "/assets/" + id + "/";
        }
        else if (document.location.href.indexOf("cables.gl") > 0 || document.location.href.indexOf("cables.local") > 0)
        {
            const parts = document.location.pathname.split("/");
            let id = patchId || parts[parts.length - 1];
            return "/assets/" + id + "/";
        }
        else
        {
            return "assets/";
        }
    }

    /**
     * get js path
     * @function getJsPath
     * @memberof Patch
     * @instance
     */
    getJsPath()
    {
        if (this.config.hasOwnProperty("jsPath"))
        {
            return this.config.jsPath;
        }
        else
        {
            return "js/";
        }
    }

    /**
     * get url/filepath for a filename
     * this uses prefixAssetpath in exported patches
     * @function getFilePath
     * @memberof Patch
     * @instance
     * @param {String} filename
     * @return {String} url
     */
    getFilePath(filename)
    {
        if (!filename) return filename;
        filename = String(filename);
        if (filename.indexOf("https:") === 0 || filename.indexOf("http:") === 0) return filename;
        if (filename.indexOf("data:") === 0) return filename;
        if (filename.indexOf("file:") === 0) return filename;
        filename = filename.replace("//", "/");
        if (filename.startsWith(this.config.prefixAssetPath)) filename = filename.replace(this.config.prefixAssetPath, "");
        return this.config.prefixAssetPath + filename + (this.config.suffixAssetPath || ""); //
    }

    clear()
    {
        this.emitEvent("patchClearStart");
        this.cgl.TextureEffectMesh = null;
        this.animFrameOps.length = 0;
        this.timer = new Timer();
        while (this.ops.length > 0) this.deleteOp(this.ops[0].id);

        this._opIdCache = {};
        this.emitEvent("patchClearEnd");
    }

    /**
     * @param {string} identifier
     * @param {string} id
     * @param {string} [opName]
     * @returns {Op}
     */
    createOp(identifier, id, opName = null)
    {

        /**
         * @type {Op}
         */
        let op = null;
        let objName = "";

        try
        {
            if (!identifier)
            {
                console.error("createop identifier false", identifier);
                console.log((new Error()).stack);
                return;
            }
            if (identifier.indexOf("Ops.") === -1)
            {

                /*
                 * this should be a uuid, not a namespace
                 * creating ops by id should be the default way from now on!
                 */
                const opId = identifier;

                if (CABLES.OPS[opId])
                {
                    objName = CABLES.OPS[opId].objName;
                    op = new CABLES.OPS[opId].f(this, objName, id, opId);
                    op.opId = opId;
                }
                else
                {
                    if (opName)
                    {
                        identifier = opName;
                        this._log.warn("could not find op by id: " + opId);
                    }
                    else
                    {
                        throw new Error("could not find op by id: " + opId, { "cause": "opId:" + opId });
                    }
                }
            }

            if (!op)
            {
                // fallback: create by objname!
                objName = identifier;
                const parts = identifier.split(".");
                const opObj = Patch.getOpClass(objName);

                if (!opObj)
                {
                    this.emitEvent("criticalError", { "title": "unknown op" + objName, "text": "unknown op: " + objName });

                    this._log.error("unknown op: " + objName);
                    throw new Error("unknown op: " + objName);
                }
                else
                {
                    if (parts.length == 2) op = new window[parts[0]][parts[1]](this, objName, id);
                    else if (parts.length == 3) op = new window[parts[0]][parts[1]][parts[2]](this, objName, id);
                    else if (parts.length == 4) op = new window[parts[0]][parts[1]][parts[2]][parts[3]](this, objName, id);
                    else if (parts.length == 5) op = new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]](this, objName, id);
                    else if (parts.length == 6) op = new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]](this, objName, id);
                    else if (parts.length == 7) op = new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]](this, objName, id);
                    else if (parts.length == 8) op = new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]][parts[7]](this, objName, id);
                    else if (parts.length == 9) op = new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]][parts[7]][parts[8]](this, objName, id);
                    else if (parts.length == 10) op = new window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]][parts[7]][parts[8]][parts[9]](this, objName, id);
                    else console.log("parts.length", parts.length);
                }

                if (op)
                {
                    op.opId = null;
                    for (const i in CABLES.OPS)
                    {
                        if (CABLES.OPS[i].objName == objName) op.opId = i;
                    }
                }
            }
        }
        catch (e)
        {
            this._crashedOps.push(objName);

            this._log.error("[instancing error] " + objName, e);

            if (!this.isEditorMode())
            {
                this._log.error("INSTANCE_ERR", "Instancing Error: " + objName, e);
                // throw new Error("instancing error 1" + objName);
            }
        }

        if (op)
        {
            op._objName = objName;
            op.patch = this;
        }
        else
        {
            this._log.log("no op was created!?", identifier, id);
        }
        return op;
    }

    /**
     * create a new op in patch
     * @function addOp
     * @memberof Patch
     * @instance
     * @param {string} opIdentifier uuid or name, e.g. Ops.Math.Sum
     * @param {OpUiAttribs} uiAttribs Attributes
     * @param {string} id
     * @param {boolean} [fromDeserialize]
     * @param {string} [opName] e.g. Ops.Math.Sum
     * @example
     * // add invisible op
     * patch.addOp('Ops.Math.Sum', { showUiAttribs: false });
     */
    addOp(opIdentifier, uiAttribs, id, fromDeserialize = false, opName = null)
    {
        const op = this.createOp(opIdentifier, id, opName);

        if (op)
        {
            uiAttribs = uiAttribs || {};
            if (uiAttribs.hasOwnProperty("errors")) delete uiAttribs.errors;
            if (uiAttribs.hasOwnProperty("error")) delete uiAttribs.error;
            uiAttribs.subPatch = uiAttribs.subPatch || 0;
            op.setUiAttribs(uiAttribs);
            if (op.onCreate) op.onCreate();

            if (op.hasOwnProperty("onAnimFrame")) this.addOnAnimFrame(op);
            if (op.hasOwnProperty("onMasterVolumeChanged")) this._volumeListeners.push(op);

            if (this._opIdCache[op.id])
            {
                this._log.warn("opid with id " + op.id + " already exists in patch!");
                this.deleteOp(op.id); // strange with subpatch ops: why is this needed, somehow ops get added twice ???.....
                // return;
            }

            this.ops.push(op);
            this._opIdCache[op.id] = op;

            if (this._subPatchCacheAdd) this._subPatchCacheAdd(uiAttribs.subPatch, op);
            this.emitEvent(Patch.EVENT_OP_ADDED, op, fromDeserialize);

            if (op.init) op.init();

            op.emitEvent(Op.EVENT_INIT, fromDeserialize);
        }
        else
        {
            this._log.error("addop: op could not be created: ", opIdentifier);
        }

        return op;
    }

    addOnAnimFrame(op)
    {
        for (let i = 0; i < this.animFrameOps.length; i++) if (this.animFrameOps[i] == op) { return; }

        this.animFrameOps.push(op);
    }

    removeOnAnimFrame(op)
    {
        for (let i = 0; i < this.animFrameOps.length; i++)
        {
            if (this.animFrameOps[i] == op)
            {
                this.animFrameOps.splice(i, 1);
                return;
            }
        }
    }

    addOnAnimFrameCallback(cb)
    {
        this.animFrameCallbacks.push(cb);
    }

    removeOnAnimCallback(cb)
    {
        for (let i = 0; i < this.animFrameCallbacks.length; i++)
        {
            if (this.animFrameCallbacks[i] == cb)
            {
                this.animFrameCallbacks.splice(i, 1);
                return;
            }
        }
    }

    deleteOp(opid, tryRelink, reloadingOp)
    {
        let found = false;
        for (const i in this.ops)
        {
            if (this.ops[i].id == opid)
            {
                const op = this.ops[i];

                /** @type {Port} */
                let reLinkP1 = null;

                /** @type {Port} */
                let reLinkP2 = null;

                if (op)
                {
                    found = true;
                    if (tryRelink)
                    {
                        if (op.portsIn.length > 0 && op.portsIn[0].isLinked() && (op.portsOut.length > 0 && op.portsOut[0].isLinked()))
                        {
                            if (op.portsIn[0].getType() == op.portsOut[0].getType() && op.portsIn[0].links[0])
                            {
                                reLinkP1 = op.portsIn[0].links[0].getOtherPort(op.portsIn[0]);
                                reLinkP2 = op.portsOut[0].links[0].getOtherPort(op.portsOut[0]);
                            }
                        }
                    }

                    const opToDelete = this.ops[i];
                    opToDelete.removeLinks();

                    this.ops.splice(i, 1);
                    opToDelete.emitEvent("delete", opToDelete);
                    this.emitEvent(Patch.EVENT_OP_DELETED, opToDelete, reloadingOp);

                    if (this.clearSubPatchCache) this.clearSubPatchCache(opToDelete.uiAttribs.subPatch);

                    if (opToDelete.onDelete) opToDelete.onDelete(reloadingOp);
                    opToDelete.cleanUp();

                    if (reLinkP1 !== null && reLinkP2 !== null)
                    {
                        this.link(reLinkP1.op, reLinkP1.getName(), reLinkP2.op, reLinkP2.getName());
                    }

                    delete this._opIdCache[opid];
                    break;
                }
            }
        }

        if (!found) this._log.warn("core patch deleteop: not found...", opid);
    }

    getFrameNum()
    {
        return this._frameNum;
    }

    emitOnAnimFrameEvent(time, delta)
    {
        time = time || this.timer.getTime();

        for (let i = 0; i < this.animFrameCallbacks.length; ++i)
            if (this.animFrameCallbacks[i])
                this.animFrameCallbacks[i](time, this._frameNum, delta);

        for (let i = 0; i < this.animFrameOps.length; ++i)
            if (this.animFrameOps[i].onAnimFrame)
                this.animFrameOps[i].onAnimFrame(time, this._frameNum, delta);
    }

    renderFrame(timestamp)
    {
        this.timer.update(this.reqAnimTimeStamp);
        this.freeTimer.update(this.reqAnimTimeStamp);
        const time = this.timer.getTime();
        const startTime = performance.now();
        this.cgl.frameStartTime = this.timer.getTime();

        const delta = timestamp - this.reqAnimTimeStamp || timestamp;

        this.emitOnAnimFrameEvent(null, delta);

        this.cgl.profileData.profileFrameDelta = delta;
        this.reqAnimTimeStamp = timestamp;
        this.cgl.profileData.profileOnAnimFrameOps = performance.now() - startTime;

        this.emitEvent(Patch.EVENT_RENDER_FRAME, time);

        this._frameNum++;
        if (this._frameNum == 1)
        {
            if (this.config.onFirstFrameRendered) this.config.onFirstFrameRendered();
        }
    }

    /**
     * @param {number} [timestamp]
     */
    exec(timestamp)
    {
        if (!this.#renderOneFrame && (this._paused || this.aborted)) return;
        this.emitEvent("reqAnimFrame");
        cancelAnimationFrame(this._animReq);

        this.config.fpsLimit = this.config.fpsLimit || 0;
        if (this.config.fpsLimit)
        {
            this._frameInterval = 1000 / this.config.fpsLimit;
        }

        const now = CABLES.now();
        const frameDelta = now - this._frameNext;

        if (this.isEditorMode())
        {
            if (!this.#renderOneFrame)
            {
                if (now - this._lastFrameTime >= 500 && this._lastFrameTime !== 0 && !this._frameWasdelayed)
                {
                    this._lastFrameTime = 0;
                    setTimeout(this.exec.bind(this), 500);
                    this.emitEvent("renderDelayStart");
                    this._frameWasdelayed = true;
                    return;
                }
            }
        }

        if (this.#renderOneFrame || this.config.fpsLimit === 0 || frameDelta > this._frameInterval || this._frameWasdelayed)
        {
            this.renderFrame(timestamp);

            if (this._frameInterval) this._frameNext = now - (frameDelta % this._frameInterval);
        }

        if (this._frameWasdelayed)
        {
            this.emitEvent("renderDelayEnd");
            this._frameWasdelayed = false;
        }

        if (this.#renderOneFrame)
        {
            if (this.onOneFrameRendered) this.onOneFrameRendered(); // todo remove everywhere and use propper event...
            this.emitEvent(Patch.EVENT_RENDERED_ONE_FRAME);
            this._renderOneFrame = false;
        }

        if (this.config.doRequestAnimation) this._animReq = this.cgl.canvas.ownerDocument.defaultView.requestAnimationFrame(this.exec.bind(this));
    }

    /**
     * link two ops/ports
     * @function link
     * @memberof Patch
     * @instance
     * @param {Op} op1
     * @param {String} port1Name
     * @param {Op} op2
     * @param {String} port2Name
     * @param {boolean} lowerCase
     * @param {boolean} fromDeserialize
     */
    link(op1, port1Name, op2, port2Name, lowerCase = false, fromDeserialize = false)
    {
        if (!op1) return this._log.warn("link: op1 is null ");
        if (!op2) return this._log.warn("link: op2 is null");

        const port1 = op1.getPort(port1Name, lowerCase);
        const port2 = op2.getPort(port2Name, lowerCase);

        if (!port1) return this._log.warn("port1 not found! " + port1Name + " (" + op1.objName + ")");
        if (!port2) return this._log.warn("port2 not found! " + port2Name + " of " + op2.name + "(" + op2.objName + ")", op2);

        if (!port1.shouldLink(port1, port2) || !port2.shouldLink(port1, port2)) return false;

        if (Link.canLink(port1, port2))
        {
            const link = new Link(this);
            link.link(port1, port2);

            this.emitEvent(Patch.EVENT_LINK, port1, port2, link, fromDeserialize);
            return link;
        }
    }

    /**
     * @param {Object} options
     * @returns {Object|String}
     */
    serialize(options)
    {
        const obj = {};

        options = options || {};
        obj.ops = [];
        obj.settings = this.settings;
        for (const i in this.ops)
        {
            const op = this.ops[i];
            if (op && op.getSerialized)obj.ops.push(op.getSerialized());
        }

        cleanJson(obj);

        if (options.asObject) return obj;
        return JSON.stringify(obj);
    }

    getOpsByRefId(refId) // needed for instancing ops ?
    {
        const perf = gui.uiProfiler.start("[corepatchetend] getOpsByRefId");
        const refOps = [];
        const ops = gui.corePatch().ops;
        for (let i = 0; i < ops.length; i++)
            if (ops[i].storage && ops[i].storage.ref == refId) refOps.push(ops[i]);
        perf.finish();
        return refOps;
    }

    /**
     * @param {String} opid
     * @returns {Op}
     */
    getOpById(opid)
    {
        return this._opIdCache[opid];
    }

    /**
     * @param {String} name
     */
    getOpsByObjName(name)
    {
        const arr = [];
        for (const i in this.ops)
            if (this.ops[i].objName == name) arr.push(this.ops[i]);
        return arr;
    }

    /**
     * @param {String} opid
     */
    getOpsByOpId(opid)
    {
        const arr = [];
        for (const i in this.ops)
            if (this.ops[i].opId == opid) arr.push(this.ops[i]);
        return arr;
    }

    /**
     * @param {String} which
     */
    loadLib(which)
    {
        ajaxSync(
            "/ui/libs/" + which + ".js",
            (_err, res) =>
            {
                const se = document.createElement("script");
                se.type = "text/javascript";
                se.text = res;
                document.getElementsByTagName("head")[0].appendChild(se);
            },
            "GET",
        );
    }

    getSubPatchOpsByName(patchId, objName)
    {
        const arr = [];
        for (const i in this.ops)
            if (this.ops[i].uiAttribs && this.ops[i].uiAttribs.subPatch == patchId && this.ops[i].objName == objName)
                arr.push(this.ops[i]);

        return arr;
    }

    getSubPatchOp(patchId, objName)
    {
        return this.getFirstSubPatchOpByName(patchId, objName);
    }

    /**
     * @param {string} patchId
     * @param {string} objName
     * @returns {Op}
     */
    getFirstSubPatchOpByName(patchId, objName)
    {
        for (const i in this.ops)
            if (this.ops[i].uiAttribs && this.ops[i].uiAttribs.subPatch == patchId && this.ops[i].objName == objName)
                return this.ops[i];

        return false;
    }

    _addLink(opinid, opoutid, inName, outName)
    {
        return this.link(this.getOpById(opinid), inName, this.getOpById(opoutid), outName, false, true);
    }

    /**
     * @param {String} s
     */
    logStartup(s)
    {
        if (window.logStartup)window.logStartup(s);
    }

    /**
     * @typedef DeserializeOptions
     * @property {boolean} [genIds]
     * @property {boolean} [createRef]
     */

    /**
     * Description
     * @param {Object} obj
     * @param {DeserializeOptions} options
     * @returns {any}
     */
    deSerialize(obj, options = { "genIds": false, "createRef": false })
    {
        if (this.aborted) return;
        const newOps = [];
        const loadingId = this.loading.start("core", "deserialize");

        if (typeof obj === "string") obj = JSON.parse(obj);

        if (this.#initialDeserialize)
        {
            this.#initialDeserialize = false;
            this.namespace = obj.namespace || "";
            this.name = obj.name || "";
            this.settings = obj.settings;
        }

        this.emitEvent("patchLoadStart");

        obj.ops = obj.ops || [];

        this.logStartup("add " + obj.ops.length + " ops... ");

        const addedOps = [];

        // add ops...
        for (let iop = 0; iop < obj.ops.length; iop++)
        {
            const start = CABLES.now();
            const opData = obj.ops[iop];
            let op = null;

            try
            {
                if (opData.opId) op = this.addOp(opData.opId, opData.uiAttribs, opData.id, true, opData.objName);
                else op = this.addOp(opData.objName, opData.uiAttribs, opData.id, true);
            }
            catch (e)
            {
                this._log.error("[instancing error] op data:", opData, e);
                // throw new Error("could not create op by id: <b>" + (opData.objName || opData.opId) + "</b> (" + opData.id + ")");
            }

            if (op)
            {
                addedOps.push(op);
                if (options.genIds) op.id = shortId();
                op.portsInData = opData.portsIn;
                op._origData = JSON.parse(JSON.stringify(opData));
                op.storage = opData.storage;
                // if (opData.hasOwnProperty("disabled"))op.setEnabled(!opData.disabled);

                for (const ipi in opData.portsIn)
                {
                    const objPort = opData.portsIn[ipi];
                    if (objPort && objPort.hasOwnProperty("name"))
                    {
                        const port = op.getPort(objPort.name);

                        if (port && (port.uiAttribs.display == "bool" || port.uiAttribs.type == "bool") && !isNaN(objPort.value)) objPort.value = objPort.value == true ? 1 : 0;
                        if (port && objPort.value !== undefined && port.type != Port.TYPE_TEXTURE) port.set(objPort.value);

                        if (port)
                        {
                            port.deSerializeSettings(objPort);
                        }
                        else
                        {

                            /*
                             * if (port.uiAttribs.hasOwnProperty("title"))
                             * {
                             *     op.preservedPortTitles = op.preservedPortTitles || {};
                             *     op.preservedPortTitles[port.name] = port.uiAttribs.title;
                             * }
                             */
                            op.preservedPortValues = op.preservedPortValues || {};
                            op.preservedPortValues[objPort.name] = objPort.value;
                        }
                    }
                }

                for (const ipo in opData.portsOut)
                {
                    const objPort = opData.portsOut[ipo];
                    if (objPort && objPort.hasOwnProperty("name"))
                    {
                        const port2 = op.getPort(objPort.name);

                        if (port2)
                        {
                            port2.deSerializeSettings(objPort);

                            if (port2.uiAttribs.hasOwnProperty("title"))
                            {
                                op.preservedPortTitles = op.preservedPortTitles || {};
                                op.preservedPortTitles[port2.name] = port2.uiAttribs.title;
                            }

                            if (port2.type != Port.TYPE_TEXTURE && objPort.hasOwnProperty("value"))
                                port2.set(obj.ops[iop].portsOut[ipo].value);

                            if (objPort.expose) port2.setUiAttribs({ "expose": true });
                        }
                    }
                }
                newOps.push(op);
            }

            const timeused = Math.round(100 * (CABLES.now() - start)) / 100;
            if (!this.silent && timeused > 5) console.log("long op init ", obj.ops[iop].objName, timeused);
        }
        this.logStartup("add ops done");

        for (const i in this.ops)
        {
            if (this.ops[i].onLoadedValueSet)
            {
                this.ops[i].onLoadedValueSet(this.ops[i]._origData);
                this.ops[i].onLoadedValueSet = null;
                this.ops[i]._origData = null;
            }
            this.ops[i].emitEvent("loadedValueSet");
        }

        this.logStartup("creating links");

        if (options.opsCreated)options.opsCreated(addedOps);
        // create links...
        if (obj.ops)
        {
            for (let iop = 0; iop < obj.ops.length; iop++)
            {
                if (obj.ops[iop].portsIn)
                {
                    for (let ipi2 = 0; ipi2 < obj.ops[iop].portsIn.length; ipi2++)
                    {
                        if (obj.ops[iop].portsIn[ipi2] && obj.ops[iop].portsIn[ipi2].links)
                        {
                            for (let ili = 0; ili < obj.ops[iop].portsIn[ipi2].links.length; ili++)
                            {
                                this._addLink(
                                    obj.ops[iop].portsIn[ipi2].links[ili].objIn,
                                    obj.ops[iop].portsIn[ipi2].links[ili].objOut,
                                    obj.ops[iop].portsIn[ipi2].links[ili].portIn,
                                    obj.ops[iop].portsIn[ipi2].links[ili].portOut);

                                /*
                                 * const took = performance.now - startTime;
                                 * if (took > 100)console.log(obj().ops[iop].portsIn[ipi2].links[ili].objIn, obj.ops[iop].portsIn[ipi2].links[ili].objOut, took);
                                 */
                            }
                        }
                    }
                }
                if (obj.ops[iop].portsOut)
                    for (let ipi2 = 0; ipi2 < obj.ops[iop].portsOut.length; ipi2++)
                        if (obj.ops[iop].portsOut[ipi2] && obj.ops[iop].portsOut[ipi2].links)
                        {
                            for (let ili = 0; ili < obj.ops[iop].portsOut[ipi2].links.length; ili++)
                            {
                                if (obj.ops[iop].portsOut[ipi2].links[ili])
                                {
                                    if (obj.ops[iop].portsOut[ipi2].links[ili].subOpRef)
                                    {
                                        // lost link
                                        const outOp = this.getOpById(obj.ops[iop].portsOut[ipi2].links[ili].objOut);
                                        let dstOp = null;
                                        let theSubPatch = 0;

                                        for (let i = 0; i < this.ops.length; i++)
                                        {
                                            if (
                                                this.ops[i].storage &&
                                                this.ops[i].storage.ref == obj.ops[iop].portsOut[ipi2].links[ili].subOpRef &&
                                                outOp.uiAttribs.subPatch == this.ops[i].uiAttribs.subPatch
                                            )
                                            {
                                                theSubPatch = this.ops[i].patchId.get();
                                                break;
                                            }
                                        }

                                        for (let i = 0; i < this.ops.length; i++)
                                        {
                                            if (
                                                this.ops[i].storage &&
                                                this.ops[i].storage.ref == obj.ops[iop].portsOut[ipi2].links[ili].refOp &&
                                                this.ops[i].uiAttribs.subPatch == theSubPatch)
                                            {
                                                dstOp = this.ops[i];
                                                break;
                                            }
                                        }

                                        if (!dstOp) this._log.warn("could not find op for lost link");
                                        else
                                        {
                                            this._addLink(
                                                dstOp.id,
                                                obj.ops[iop].portsOut[ipi2].links[ili].objOut,

                                                obj.ops[iop].portsOut[ipi2].links[ili].portIn,
                                                obj.ops[iop].portsOut[ipi2].links[ili].portOut);
                                        }
                                    }
                                    else
                                    {
                                        const l = this._addLink(obj.ops[iop].portsOut[ipi2].links[ili].objIn, obj.ops[iop].portsOut[ipi2].links[ili].objOut, obj.ops[iop].portsOut[ipi2].links[ili].portIn, obj.ops[iop].portsOut[ipi2].links[ili].portOut);

                                        if (!l)
                                        {
                                            const op1 = this.getOpById(obj.ops[iop].portsOut[ipi2].links[ili].objIn);
                                            const op2 = this.getOpById(obj.ops[iop].portsOut[ipi2].links[ili].objOut);

                                            if (!op1)console.log("could not find link op1");
                                            if (!op2)console.log("could not find link op2");

                                            const p1Name = obj.ops[iop].portsOut[ipi2].links[ili].portIn;

                                            if (op1 && !op1.getPort(p1Name))
                                            {
                                                // console.log("PRESERVE port 1 not found", p1Name);

                                                op1.preservedPortLinks[p1Name] = op1.preservedPortLinks[p1Name] || [];
                                                op1.preservedPortLinks[p1Name].push(obj.ops[iop].portsOut[ipi2].links[ili]);
                                            }

                                            const p2Name = obj.ops[iop].portsOut[ipi2].links[ili].portOut;
                                            if (op2 && !op2.getPort(p2Name))
                                            {
                                                // console.log("PRESERVE port 2 not found", obj.ops[iop].portsOut[ipi2].links[ili].portOut);
                                                op2.preservedPortLinks[p1Name] = op2.preservedPortLinks[p1Name] || [];
                                                op2.preservedPortLinks[p1Name].push(obj.ops[iop].portsOut[ipi2].links[ili]);
                                            }
                                        }
                                    }
                                }
                            }
                        }
            }
        }

        this.logStartup("calling ops onloaded");

        for (const i in this.ops)
        {
            if (this.ops[i].onLoaded)
            {
                // TODO: deprecate!!!
                this.ops[i].onLoaded();
                this.ops[i].onLoaded = null;
            }
        }

        this.logStartup("initializing ops...");
        for (const i in this.ops)
        {
            if (this.ops[i].init)
            {
                try
                {
                    this.ops[i].init();
                    this.ops[i].init = null;
                }
                catch (e)
                {
                    console.error("op.init crash", e);
                }
            }
        }

        this.logStartup("initializing vars...");

        if (this.config.variables)
            for (const varName in this.config.variables)
                this.setVarValue(varName, this.config.variables[varName]);

        this.logStartup("initializing var ports");

        for (const i in this.ops)
        {
            this.ops[i].initVarPorts();
            delete this.ops[i].uiAttribs.pasted;
        }

        setTimeout(() => { this.loading.finished(loadingId); }, 100);

        if (this.config.onPatchLoaded) this.config.onPatchLoaded(this);

        this.emitEvent(Patch.EVENT_PATCHLOADEND, newOps, obj, options.genIds);
    }

    profile(enable)
    {
        this.profiler = new Profiler(this);
        for (const i in this.ops)
        {
            this.ops[i].profile(enable);
        }
    }

    // ----------------------

    /**
     * set variable value
     * @function setVariable
     * @memberof Patch
     * @instance
     * @param {String} name of variable
     * @param {Number|String|Boolean} val value
     */
    setVariable(name, val)
    {
        if (this._variables[name] !== undefined)
        {
            this._variables[name].setValue(val);
        }
        else
        {
            this._log.warn("variable " + name + " not found!");
        }
    }

    _sortVars()
    {
        if (!this.isEditorMode()) return;
        const ordered = {};
        Object.keys(this._variables).sort(
            (a, b) =>
            { return a.localeCompare(b, "en", { "sensitivity": "base" }); }
        ).forEach((key) =>
        {
            ordered[key] = this._variables[key];
        });
        this._variables = ordered;
    }

    /**
     * has variable
     * @function hasVariable
     * @memberof Patch
     * @instance
     * @param {String} name of variable
     */
    hasVar(name)
    {
        return this._variables[name] !== undefined;
    }

    // used internally
    setVarValue(name, val, type)
    {
        if (this.hasVar(name))
        {
            this._variables[name].setValue(val);
        }
        else
        {
            this._variables[name] = new PatchVariable(name, val, type);
            this._sortVars();
            this.emitEvent(Patch.EVENT_VARIABLES_CHANGED);
        }
        return this._variables[name];
    }

    // old?
    getVarValue(name, val)
    {
        if (this._variables.hasOwnProperty(name)) return this._variables[name].getValue();
    }

    /**
     * @function getVar
     * @memberof Patch
     * @instance
     * @param {String} name
     * @return {PatchVariable} variable
     */
    getVar(name)
    {
        if (this._variables.hasOwnProperty(name)) return this._variables[name];
    }

    deleteVar(name)
    {
        for (let i = 0; i < this.ops.length; i++)
            for (let j = 0; j < this.ops[i].portsIn.length; j++)
                if (this.ops[i].portsIn[j].getVariableName() == name)
                    this.ops[i].portsIn[j].setVariable(null);

        delete this._variables[name];
        this.emitEvent("variableDeleted", name);
        this.emitEvent("variablesChanged");
    }

    /**
     * @param {number} t
     * @returns {Object}
     */
    getVars(t)
    {
        if (t === undefined) return this._variables;
        if (t === 1) return {};

        const perf = gui.uiProfiler.start("[corepatchetend] getVars");

        const vars = [];
        let tStr = "";
        if (t == Port.TYPE_STRING) tStr = "string";
        else if (t == Port.TYPE_VALUE) tStr = "number";
        else if (t == Port.TYPE_ARRAY) tStr = "array";
        else if (t == Port.TYPE_OBJECT) tStr = "object";
        else
        {
            console.log("unknown,,,", t);
            console.log(new Error().stack);
        }

        for (const i in this._variables)
        {
            if (!this._variables[i].type || this._variables[i].type == tStr || this._variables[i].type == t) vars.push(this._variables[i]);
        }

        perf.finish();

        return vars;
    }

    // getVars(t)
    // {
    //     if (t === undefined) return this._variables;

    //     const vars = [];
    //     let tStr = "";
    //     if (t == Port.TYPE_STRING) tStr = "string";
    //     if (t == Port.TYPE_VALUE) tStr = "number";
    //     if (t == Port.TYPE_ARRAY) tStr = "array";
    //     if (t == Port.TYPE_OBJECT) tStr = "object";

    //     for (const i in this._variables)
    //     {
    //         if (!this._variables[i].type || this._variables[i].type == tStr || this._variables[i].type == t) vars.push(this._variables[i]);
    //     }
    //     return vars;
    // }

    /**
     * @function preRenderOps
     * @memberof Patch
     * @instance
     * @description invoke pre rendering of ops
     * @function
     */
    preRenderOps()
    {
        this._log.log("prerendering...");

        for (let i = 0; i < this.ops.length; i++)
        {
            if (this.ops[i].preRender)
            {
                this.ops[i].preRender();
                this._log.log("prerender " + this.ops[i].objName);
            }
        }
    }

    /**
     * @function dispose
     * @memberof Patch
     * @instance
     * @description stop, dispose and cleanup patch
     */
    dispose()
    {
        this.pause();
        this.clear();
        this.cgl.dispose();
    }

    pushTriggerStack(p)
    {
        this._triggerStack.push(p);
    }

    popTriggerStack()
    {
        this._triggerStack.pop();
    }

    printTriggerStack()
    {
        if (this._triggerStack.length == 0)
        {
            // console.log("stack length", this._triggerStack.length); // eslint-disable-line
            return;
        }
        console.groupCollapsed( // eslint-disable-line
            "trigger port stack " + this._triggerStack[this._triggerStack.length - 1].op.objName + "." + this._triggerStack[this._triggerStack.length - 1].name,
        );

        const rows = [];
        for (let i = 0; i < this._triggerStack.length; i++)
        {
            rows.push(i + ". " + this._triggerStack[i].op.objName + " " + this._triggerStack[i].name);
        }

        console.table(rows); // eslint-disable-line
        console.groupEnd(); // eslint-disable-line
    }

    /**
     * returns document object of the patch could be != global document object when opening canvas ina popout window
     * @function getDocument
     * @memberof Patch
     * @instance
     * @return {Object} document
     */
    getDocument()
    {
        return this.cgl.canvas.ownerDocument;
    }
}

Patch.getOpClass = function (objName)
{
    const parts = objName.split(".");
    let opObj = null;

    try
    {
        if (parts.length == 2) opObj = window[parts[0]][parts[1]];
        else if (parts.length == 3) opObj = window[parts[0]][parts[1]][parts[2]];
        else if (parts.length == 4) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]];
        else if (parts.length == 5) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]];
        else if (parts.length == 6) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]];
        else if (parts.length == 7) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]];
        else if (parts.length == 8) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]][parts[7]];
        else if (parts.length == 9) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]][parts[7]][parts[8]];
        else if (parts.length == 10) opObj = window[parts[0]][parts[1]][parts[2]][parts[3]][parts[4]][parts[5]][parts[6]][parts[7]][parts[8]][parts[9]];
        return opObj;
    }
    catch (e)
    {
        return null;
    }
};

Patch.replaceOpIds = function (json, options)
{
    const opids = {};
    for (const i in json.ops)
    {
        opids[json.ops[i].id] = json.ops[i];
    }

    for (const j in json.ops)
    {
        for (const k in json.ops[j].portsOut)
        {
            const links = json.ops[j].portsOut[k].links;
            if (links)
            {
                let l = links.length;

                while (l--)
                {
                    if (links[l] && (!opids[links[l].objIn] || !opids[links[l].objOut]))
                    {
                        if (!options.doNotUnlinkLostLinks)
                        {
                            links.splice(l, 1);
                        }
                        else
                        {
                            if (options.fixLostLinks)
                            {
                                const op = gui.corePatch().getOpById(links[l].objIn);
                                if (!op) console.log("op not found!");
                                else
                                {
                                    const outerOp = gui.patchView.getSubPatchOuterOp(op.uiAttribs.subPatch);
                                    if (outerOp)
                                    {
                                        op.storage = op.storage || {};
                                        op.storage.ref = op.storage.ref || shortId();
                                        links[l].refOp = op.storage.ref;
                                        links[l].subOpRef = outerOp.storage.ref;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    for (const i in json.ops)
    {
        const op = json.ops[i];
        const oldId = op.id;
        let newId = shortId();

        if (options.prefixHash) newId = prefixedHash(options.prefixHash + oldId);

        else if (options.prefixId) newId = options.prefixId + oldId;
        else if (options.refAsId) // when saving json
        {
            if (op.storage && op.storage.ref)
            {
                newId = op.storage.ref;
                delete op.storage.ref;
            }
            else
            {
                op.storage = op.storage || {};
                op.storage.ref = newId = shortId();
            }
        }

        const newID = op.id = newId;

        if (options.oldIdAsRef) // when loading json
        {
            op.storage = op.storage || {};
            op.storage.ref = oldId;
        }

        for (const j in json.ops)
        {
            if (json.ops[j].portsIn)
                for (const k in json.ops[j].portsIn)
                {
                    if (json.ops[j].portsIn[k].links)
                    {
                        let l = json.ops[j].portsIn[k].links.length;

                        while (l--) if (json.ops[j].portsIn[k].links[l] === null) json.ops[j].portsIn[k].links.splice(l, 1);

                        for (l in json.ops[j].portsIn[k].links)
                        {
                            if (json.ops[j].portsIn[k].links[l].objIn === oldId) json.ops[j].portsIn[k].links[l].objIn = newID;
                            if (json.ops[j].portsIn[k].links[l].objOut === oldId) json.ops[j].portsIn[k].links[l].objOut = newID;
                        }
                    }
                }

            if (json.ops[j].portsOut)
                for (const k in json.ops[j].portsOut)
                {
                    if (json.ops[j].portsOut[k].links)
                    {
                        let l = json.ops[j].portsOut[k].links.length;

                        while (l--) if (json.ops[j].portsOut[k].links[l] === null) json.ops[j].portsOut[k].links.splice(l, 1);

                        for (l in json.ops[j].portsOut[k].links)
                        {
                            if (json.ops[j].portsOut[k].links[l].objIn === oldId) json.ops[j].portsOut[k].links[l].objIn = newID;
                            if (json.ops[j].portsOut[k].links[l].objOut === oldId) json.ops[j].portsOut[k].links[l].objOut = newID;
                        }
                    }
                }
        }
    }

    // set correct subpatch
    const subpatchIds = [];
    const fixedSubPatches = [];

    for (let i = 0; i < json.ops.length; i++)
    {
        // if (CABLES.Op.isSubPatchOpName(json.ops[i].objName))
        if (json.ops[i].storage && json.ops[i].storage.subPatchVer)
        {
            for (const k in json.ops[i].portsIn)
            {
                if (json.ops[i].portsIn[k].name === "patchId")
                {
                    let newId = shortId();

                    if (options.prefixHash) newId = prefixedHash(options.prefixHash + json.ops[i].portsIn[k].value);

                    const oldSubPatchId = json.ops[i].portsIn[k].value;
                    const newSubPatchId = json.ops[i].portsIn[k].value = newId;

                    subpatchIds.push(newSubPatchId);

                    for (let j = 0; j < json.ops.length; j++)
                    {
                        // op has no uiAttribs in export, we don't care about subpatches in export though
                        if (json.ops[j].uiAttribs)
                        {
                            if (json.ops[j].uiAttribs.subPatch === oldSubPatchId)
                            {
                                json.ops[j].uiAttribs.subPatch = newSubPatchId;
                                fixedSubPatches.push(json.ops[j].id);
                            }
                        }
                    }
                }
            }
        }
    }

    for (const kk in json.ops)
    {
        let found = false;
        for (let j = 0; j < fixedSubPatches.length; j++)
        {
            if (json.ops[kk].id === fixedSubPatches[j])
            {
                found = true;
                break;
            }
        }
        // op has no uiAttribs in export, we don't care about subpatches in export though
        if (!found && json.ops[kk].uiAttribs && options.parentSubPatchId != null)
            json.ops[kk].uiAttribs.subPatch = options.parentSubPatchId;
    }

    return json;
};

/**
 * remove an eventlistener
 * @instance
 * @function addEventListener
 * @param {String} name of event
 * @param {function} callback
 */

/**
 * remove an eventlistener
 * @instance
 * @function removeEventListener
 * @param {String} name of event
 * @param {function} callback
 */

/**
 * op added to patch event
 * @event onOpAdd
 *
 * @memberof Patch
 * @type {Object}
 * @property {Op} op new op
 */

/**
 * op deleted from patch
 * @event onOpDelete
 * @memberof Patch
 * @type {Object}
 * @property {Op} op that will be deleted
 */

/**
 * link event - two ports will be linked
 * @event onLink
 * @memberof Patch
 * @type {Object}
 * @property {Port} port1
 * @property {Port} port2
 */

/**
 * unlink event - a link was deleted
 * @event onUnLink
 * @memberof Patch
 * @type {Object}
 */

/**
 * variables has been changed / a variable has been added to the patch
 * @event variablesChanged
 * @memberof Patch
 * @type {Object}
 * @property {Port} port1
 * @property {Port} port2
 */

;// CONCATENATED MODULE: ./src/core/embedding.js



const EMBED = {};

/**
 * add patch into html element (will create canvas and set size to fill containerElement)
 * @name CABLES.EMBED#addPatch
 * @param {object|string} _element containerElement dom element or id of element
 * @param {Object} options patch options
 * @function
 */
EMBED.addPatch = function (_element, options)
{
    let el = _element;
    let id = generateUUID();
    if (typeof _element == "string")
    {
        id = _element;
        el = document.getElementById(id);

        if (!el)
        {
            console.error(id + " Polyshape Container Element not found!");
            return;
        }
    }

    const canvEl = document.createElement("canvas");
    canvEl.id = "glcanvas_" + id;
    canvEl.width = el.clientWidth;
    canvEl.height = el.clientHeight;

    window.addEventListener(
        "resize",
        function ()
        {
            this.setAttribute("width", el.clientWidth);
            this.height = el.clientHeight;
        }.bind(canvEl),
    );

    el.appendChild(canvEl);

    options = options || {};
    options.glCanvasId = canvEl.id;

    if (!options.onError)
    {
        options.onError = function (err)
        {
            console.error(err);
        };
    }

    CABLES.patch = new Patch(options);
    return canvEl;
};



;// CONCATENATED MODULE: ./src/core/webaudio.js
/** @namespace WEBAUDIO */




const WEBAUDIO = {};

WEBAUDIO.toneJsInitialized = false;

/*
 * External JSDoc definitions
 */

/**
 * Part of the Web Audio API, the AudioBuffer interface represents a short audio asset residing in memory.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioBuffer}
 */

/**
 * Part of the Web Audio API, the AudioNode interface is a generic interface for representing an audio processing module.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioNode}
 */

/**
 * The AudioContext interface represents an audio-processing graph built from audio modules linked together
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AudioContext}
 */

/**
 * Checks if a global audio context has been created and creates
 * it if necessary. This audio context can be used for native Web Audio as well as Tone.js ops.
 * Associates the audio context with Tone.js if it is being used
 * @param {Op} op - The operator which needs the Audio Context
 */
WEBAUDIO.createAudioContext = function (op)
{
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    if (window.AudioContext)
    {
        if (!window.audioContext)
        {
            window.audioContext = new AudioContext();
        }
        // check if tone.js lib is being used
        if (window.Tone && !WEBAUDIO.toneJsInitialized)
        {
            // set current audio context in tone.js
            Tone.setContext(window.audioContext);
            WEBAUDIO.toneJsInitialized = true;
        }
    }
    else
    {
        if (op.patch.config.onError)op.logError("NO_WEBAUDIO", "Web Audio is not supported in this browser.");
        return;
    }
    return window.audioContext;
};

/**
 * Returns the audio context.
 * Before `createAudioContext` must have been called at least once.
 * It most cases you should use `createAudioContext`, which just returns the audio context
 * when it has been created already.
 */
WEBAUDIO.getAudioContext = function ()
{
    return window.audioContext;
};

/**
 * Creates an audio in port for the op with name `portName`
 * When disconnected it will disconnect the previous connected audio node
 * from the op's audio node.
 * @param {Op} op - The operator to create the audio port in
 * @param {string} portName - The name of the port
 * @param {AudioNode} audioNode - The audionode incoming connections should connect to
 * @param {number} [inputChannelIndex=0] - If the audio node has multiple inputs, this is the index of the input channel to connect to
 * @returns {Port|undefined} - The newly created audio in port or `undefined` if there was an error
 */
WEBAUDIO.createAudioInPort = function (op, portName, audioNode, inputChannelIndex)
{
    if (!op || !portName || !audioNode)
    {
        const msg = "ERROR: createAudioInPort needs three parameters, op, portName and audioNode";
        op.log(msg);
        throw new Error(msg);
        // return;
    }
    if (!inputChannelIndex)
    {
        inputChannelIndex = 0;
    }
    op.webAudio = op.webAudio || {};
    op.webAudio.audioInPorts = op.webAudio.audioInPorts || [];
    const port = op.inObject(portName);
    port.webAudio = {};
    port.webAudio.previousAudioInNode = null;
    port.webAudio.audioNode = audioNode;

    op.webAudio.audioInPorts[portName] = port;

    port.onChange = function ()
    {
        const audioInNode = port.get();
        // when port disconnected, disconnect audio nodes
        if (!audioInNode)
        {
            if (port.webAudio.previousAudioInNode)
            {
                try
                {
                    if (port.webAudio.previousAudioInNode.disconnect) port.webAudio.previousAudioInNode.disconnect(port.webAudio.audioNode, 0, inputChannelIndex);
                    op.setUiError("audioCtx", null);
                }
                catch (e)
                {
                    try
                    {
                        port.webAudio.previousAudioInNode.disconnect(port.webAudio.audioNode);
                    }
                    catch (er)
                    {
                        op.log(
                            "Disconnecting audio node with in/out port index, as well as without in/out-port-index did not work ",
                            e,
                        );
                        if (e.printStackTrace)
                        {
                            e.printStackTrace();
                        }
                        throw e;
                    }
                }
            }
        }
        else
        {
            try
            {
                if (audioInNode.connect)
                {
                    audioInNode.connect(port.webAudio.audioNode, 0, inputChannelIndex);
                    op.setUiError("audioCtx", null);
                }
                else op.setUiError("audioCtx", "The passed input is not an audio context. Please make sure you connect an audio context to the input.", 2);
            }
            catch (e)
            {
                op.log("Error: Failed to connect web audio node!", e);
                op.log("port.webAudio.audioNode", port.webAudio.audioNode);
                op.log("audioInNode: ", audioInNode);
                op.log("inputChannelIndex:", inputChannelIndex);
                op.log("audioInNode.connect: ", audioInNode.connect);
                throw e;
            }
        }
        port.webAudio.previousAudioInNode = audioInNode;
    };
    // TODO: Maybe add subtype to audio-node-object?
    return port;
};

/**
 * Sometimes it is necessary to replace a node of a port, if so all
 * connections to this node must be disconnected and connections to the new
 * node must be made.
 * Can be used for both Audio ports as well as AudioParam ports
 * if used with an AudioParam pass e.g. `synth.frequency` as newNode
 * @param {Port} port - The port where the audio node needs to be replaced
 * @param oldNode
 * @param newNode
 */
WEBAUDIO.replaceNodeInPort = function (port, oldNode, newNode)
{
    const connectedNode = port.webAudio.previousAudioInNode;
    // check if connected
    if (connectedNode && connectedNode.disconnect)
    {
        try
        {
            connectedNode.disconnect(oldNode);
        }
        catch (e)
        {
            if (e.printStackTrace)
            {
                e.printStackTrace();
            }
            throw new Error("replaceNodeInPort: Could not disconnect old audio node. " + e.name + " " + e.message);
        }
        port.webAudio.audioNode = newNode;
        try
        {
            connectedNode.connect(newNode);
        }
        catch (e)
        {
            if (e.printStackTrace)
            {
                e.printStackTrace();
            }
            throw new Error("replaceNodeInPort: Could not connect to new node. " + e.name + " " + e.message);
        }
    }
};

/**
 * Creates an audio out port which takes care of (dis-)connecting on it’s own
 * @param {Op} op - The op to create an audio out port for
 * @param {string} portName - The name of the port to be created
 * @param {AudioNode} audioNode - The audio node to link to the port
 * @returns {(CABLES.Port|undefined)} - The newly created audio out port or `undefined` if there was an error
 */
WEBAUDIO.createAudioOutPort = function (op, portName, audioNode)
{
    if (!op || !portName || !audioNode)
    {
        const msg = "ERROR: createAudioOutPort needs three parameters, op, portName and audioNode";
        op.log(msg);
        throw new Error(msg);
    }

    const port = op.outObject(portName);
    // TODO: Maybe add subtype to audio-node-object?
    port.set(audioNode);
    return port;
};

/**
 * Creates an audio param in port for the op with name portName.
 * The port accepts other audio nodes as signals as well as values (numbers)
 * When the port is disconnected it will disconnect the previous connected audio node
 * from the op's audio node and restore the number value set before.
 * @param {Op} op - The operator to create an audio param input port for
 * @param {string} portName - The name of the port to create
 * @param audioNode
 * @param options
 * @param defaultValue
 * @returns {(CABLES.Port|undefined)} - The newly created port, which takes care of (dis-)connecting on its own, or `undefined` if there was an error
 */
WEBAUDIO.createAudioParamInPort = function (op, portName, audioNode, options, defaultValue)
{
    if (!op || !portName || !audioNode)
    {
        op.log("ERROR: createAudioParamInPort needs three parameters, op, portName and audioNode");
        if (op && op.name) op.log("opname: ", op.name);
        op.log("portName", portName);
        op.log("audioNode: ", audioNode);
        return;
    }
    op.webAudio = op.webAudio || {};
    op.webAudio.audioInPorts = op.webAudio.audioInPorts || [];
    // var port = op.inObject(portName);
    const port = op.inDynamic(
        portName,
        [CONSTANTS.OP.OP_PORT_TYPE_VALUE, CONSTANTS.OP.OP_PORT_TYPE_OBJECT],
        options,
        defaultValue,
    );
    port.webAudio = {};
    port.webAudio.previousAudioInNode = null;
    port.webAudio.audioNode = audioNode;

    op.webAudio.audioInPorts[portName] = port;

    /*
     * port.onLinkChanged = function() {
     *   op.log("onLinkChanged");
     *   if(port.isLinked()) {
     *
     *       if(port.links[0].portOut.type === CABLES.CONSTANTS.OP.OP_PORT_TYPE_) { // value
     *
     *       } else if(port.links[0].portOut.type === CABLES.CONSTANTS.OP.OP_PORT_TYPE_OBJECT) { // object
     *
     *       }
     *   } else { // unlinked
     *
     *   }
     * };
     */

    port.onChange = function ()
    {
        const audioInNode = port.get();
        const node = port.webAudio.audioNode;
        const audioCtx = WEBAUDIO.getAudioContext();

        if (audioInNode != undefined)
        {
            if (typeof audioInNode === "object" && audioInNode.connect)
            {
                try
                {
                    audioInNode.connect(node);
                }
                catch (e)
                {
                    op.log("Could not connect audio node: ", e);
                    if (e.printStackTrace)
                    {
                        e.printStackTrace();
                    }
                    throw e;
                }
                port.webAudio.previousAudioInNode = audioInNode;
            }
            else
            {
                // tone.js audio param
                if (node._param && node._param.minValue && node._param.maxValue)
                {
                    if (audioInNode >= node._param.minValue && audioInNode <= node._param.maxValue)
                    {
                        try
                        {
                            if (node.setValueAtTime)
                            {
                                node.setValueAtTime(audioInNode, audioCtx.currentTime);
                            }
                            else
                            {
                                node.value = audioInNode;
                            }
                        }
                        catch (e)
                        {
                            op.log("Possible AudioParam problem with tone.js op: ", e);
                            if (e.printStackTrace)
                            {
                                e.printStackTrace();
                            }
                            throw e;
                        }
                    }
                    else
                    {
                        op.log("Warning: The value for an audio parameter is out of range!");
                    }
                } // native Web Audio param
                else if (node.minValue && node.maxValue)
                {
                    if (audioInNode >= node.minValue && audioInNode <= node.maxValue)
                    {
                        try
                        {
                            if (node.setValueAtTime)
                            {
                                node.setValueAtTime(audioInNode, audioCtx.currentTime);
                            }
                            else
                            {
                                node.value = audioInNode;
                            }
                        }
                        catch (e)
                        {
                            op.log(
                                "AudioParam has minValue / maxValue defined, and value is in range, but setting the value failed! ",
                                e,
                            );
                            if (e.printStackTrace)
                            {
                                e.printStackTrace();
                            }
                            throw e;
                        }
                    }
                    else
                    {
                        op.log("Warning: The value for an audio parameter is out of range!");
                    }
                } // no min-max values, try anyway
                else
                {
                    try
                    {
                        if (node.setValueAtTime)
                        {
                            node.setValueAtTime(audioInNode, audioCtx.currentTime);
                        }
                        else
                        {
                            node.value = audioInNode;
                        }
                    }
                    catch (e)
                    {
                        op.log("Possible AudioParam problem (without minValue / maxValue): ", e);
                        if (e.printStackTrace)
                        {
                            e.printStackTrace();
                        }
                        throw e;
                    }
                }

                if (port.webAudio.previousAudioInNode && port.webAudio.previousAudioInNode.disconnect)
                {
                    try
                    {
                        port.webAudio.previousAudioInNode.disconnect(node);
                    }
                    catch (e)
                    {
                        op.log("Could not disconnect previous audio node: ", e);
                        throw e;
                    }
                    port.webAudio.previousAudioInNode = undefined;
                }
            }
        }
        else
        {
            // disconnected
            if (port.webAudio.previousAudioInNode)
            {
            }
        }
    };
    return port;
};

/**
 * Loads an audio file and updates the loading indicators when cables is run in the editor.
 * @param {Patch} patch - The cables patch, when called from inside an op this is `op.patch`
 * @param {string} url - The url of the audio file to load
 * @param {function} onFinished - The callback to be called when the loading is finished, passes the AudioBuffer
 * @param {function} onError - The callback when there was an error loading the file, the rror message is passed
 * @param loadingTask
 * @see {@link https://developer.mozilla.org/de/docs/Web/API/AudioContext/decodeAudioData}
 */
WEBAUDIO.loadAudioFile = function (patch, url, onFinished, onError, loadingTask)
{
    const audioContext = WEBAUDIO.createAudioContext();

    if (!audioContext) onError(new Error("No Audiocontext"));

    let loadingId = null;
    if (loadingTask || loadingTask === undefined)
    {
        loadingId = patch.loading.start("audio", url);
        if (patch.isEditorMode()) gui.jobs().start({ "id": "loadaudio" + loadingId, "title": " loading audio (" + url + ")" });
    }
    const request = new XMLHttpRequest();

    if (!url) return;

    request.open("GET", url, true);
    request.responseType = "arraybuffer";

    request.onload = function ()
    {
        patch.loading.finished(loadingId);
        if (patch.isEditorMode()) gui.jobs().finish("loadaudio" + loadingId);

        audioContext.decodeAudioData(request.response, onFinished, onError).catch((e) =>
        {
            onError(e);
        });
    };
    request.send();
};

/**
 * Checks if the passed time is a valid time to be used in any of the Tone.js ops.
 * @param {(string|number)} t - The time to check
 * @returns {boolean} - True if time is valid, false if not
 */
WEBAUDIO.isValidToneTime = function (t)
{
    try
    {
        const time = new Tone.Time(t);
    }
    catch (e)
    {
        return false;
    }
    return true;
};

/**
 * Checks if the passed note is a valid note to be used with Tone.js
 * @param {string} note - The note to be checked, e.g. `"C4"`
 * @returns {boolean} - True if the note is a valid note, false otherwise
 */
WEBAUDIO.isValidToneNote = function (note)
{
    try
    {
        Tone.Frequency(note);
    }
    catch (e)
    {
        return false;
    }
    return true;
};



;// CONCATENATED MODULE: ./src/core/sessionvar.js
// todo: old... remove this from ops...

/**
 * todo: old... remove this from ops...
 *
 * @class
 */
const Variable = function ()
{
    let value = null;
    const changedCallbacks = [];

    this.onChanged = function (f)
    {
        changedCallbacks.push(f);
    };

    this.getValue = function ()
    {
        return value;
    };

    this.setValue = function (v)
    {
        value = v;
        this.emitChanged();
    };

    this.emitChanged = function ()
    {
        for (let i = 0; i < changedCallbacks.length; i++)
        {
            changedCallbacks[i]();
        }
    };
};



;// CONCATENATED MODULE: ./src/core/cgp/cgp_shader_default.wgsl
/* harmony default export */ const cgp_shader_default = ("\nstruct MyVSInput\n{\n    @location(0) position: vec3<f32>,\n    @location(1) normal: vec3<f32>,\n    @location(2) texcoord: vec2<f32>,\n};\n\nstruct MyVSOutput\n{\n    @builtin(position) position: vec4<f32>,\n    @location(0) normal: vec3<f32>,\n    @location(1) texcoord: vec2<f32>,\n};\n\n@vertex\nfn myVSMain(v: MyVSInput) -> MyVSOutput\n{\n    var vsOut: MyVSOutput;\n    var pos =vec4<f32>(v.position, 1.0);\n\n    var mvMatrix=uniVert.viewMatrix * uniVert.modelMatrix;\n    vsOut.position = uniVert.projMatrix * mvMatrix * pos;\n\n    vsOut.normal = v.normal;\n    vsOut.texcoord = v.texcoord;\n    return vsOut;\n}\n\n@fragment\nfn myFSMain(v: MyVSOutput) -> @location(0) vec4<f32>\n{\n    return vec4<f32>(.5,.5,.5,1.0);\n}\n\n");
;// CONCATENATED MODULE: ./src/core/cgp/cgp_uniform.js




class CgpUniform extends CgUniform
{

    /** @type {CgpContext} */
    #cgp = null;

    /** @type {GPUBuffer} */
    gpuBuffer = null;

    gpuBufferChanged = false;

    /**
     * Description
     * @param {CgpShader} __shader
     * @param {string} __type
     * @param {string} __name
     * @param {any} _value
     * @param {any} _port2
     * @param {any} _port3
     * @param {any} _port4
     */
    constructor(__shader, __type, __name, _value, _port2, _port3, _port4)
    {
        super(__shader, __type, __name, _value, _port2, _port3, _port4);
        this.#cgp = __shader._cgp;

        if (!_value || (_value.get && !_value.get()))
        {
            // if (this.getType() == "m4") this._value = mat4.create();
            if (this.getType() == "t")
            {
                this._value = this.#cgp.getEmptyTexture();
            }
            // else if (this.getType() == "2f") this._value = [0, 0];
            // else if (this.getType() == "4f") this._value = [0, 1, 0, 1];
            // else if (this.getType() == "3f") this._value = [0, 1, 0];
        }

    }

    getInfo()
    {
        return { "name": this.name, "type": this.type, "value": this.getValue() };
    }

    updateValueF() { }

    updateValueArrayF() {}

    setValueArrayF(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    setValueF(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValue2F() { }

    setValue2F(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValue3F() { }

    setValue3F(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValue4F() { }

    setValue4F(v)
    {
        if (v[0] == undefined)
        {
            this._log.stack("uniform value undefined");
            console.error("uniform value undefined");
        }
        this.needsUpdate = true;
        this._value = v;
    }

    setValueT(v)
    {
        // if (this._value != v)
        //     this._shader.needsPipelineUpdate = "texture changed"; // todo really needed ? change binding instead?

        this.needsUpdate = true;
        this._value = v;
    }

    updateValueM4(v) {}

    setValueM4(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    setValueAny(v)
    {
        this.needsUpdate = true;
        this._value = v;
    }

    updateValueAny() {}

    updateValueT() {}

    /**
     * @param {GPUBuffer} b
     */
    setGpuBuffer(b)
    {
        this.gpuBufferChanged = true;
        this.gpuBuffer = b;
    }

    copyToBuffer(buff, pos = 0)
    {
        if (this._type == "f")
        {
            buff[pos] = this._value;
        }
        else if (this._type == "t")
        {
        }
        else if (this._type == "4f")
        {
            buff[pos] = this._value[0];
            buff[pos + 1] = this._value[1];
            buff[pos + 2] = this._value[2];
            buff[pos + 3] = this._value[3];
        }
        else if (this._type == "2f")
        {
            buff[pos] = this._value[0];
            buff[pos + 1] = this._value[1];
        }
        else if (this._type == "3f")
        {
            buff[pos] = this._value[0];
            buff[pos + 1] = this._value[1];
            buff[pos + 2] = this._value[2];
        }
        else if (this._type == "f[]")
        {
            for (let i = 0; i < this._value.length; i++)
                buff[pos + i] = this._value[i];
        }
        else if (this._type == "m4")
        {
            for (let i = 0; i < 16; i++)
                buff[pos + i] = this._value[i];
        }
        else
        {
            this._log.warn("uniform copy to buffer unknown", this._type);
        }
    }

    getWgslTypeStr()
    {
        if (this._type == "m4") return "mat4x4f";
        if (this._type == "4f") return "vec4f";
        if (this._type == "3f") return "vec3f";
        if (this._type == "2f") return "vec2f";
        if (this._type == "f") return "f32";
        if (this._type == "f[]") return "array<vec4f>";
        if (this._type == "i") return "int";
        if (this._type == "sampler") return "sampler";
        if (this._type == "t") return "texture_2d<f32>";
        this._log.warn("unknown type getWgslTypeStr", this._type);
        return "???";
    }

    getSizeBytes()
    {
        const bytesPerFloat = 4;
        const bytesPerInt = 4;
        if (this._type == "t") return 4;
        if (this._type == "sampler") return 4;
        if (this._type == "f") return 1 * bytesPerFloat;
        if (this._type == "2f") return 2 * bytesPerFloat;
        if (this._type == "3f") return 3 * bytesPerFloat;
        if (this._type == "4f") return 4 * bytesPerFloat;
        if (this._type == "f[]") return this._value.length * bytesPerFloat;
        if (this._type == "m4") return 4 * 4 * bytesPerFloat;
        if (this._type == "i") return 1 * bytesPerInt;
        if (this._type == "2i") return 2 * bytesPerInt;

        this._log.warn("unknown type getSizeBytes", this._type);
        return 4;
    }

    /**
     * @param {CgpShader} shader
     */
    copy(shader)
    {
        const uni = new CgpUniform(shader, this._type, this._name, this._value, this._port2, this._port3, this._port4);
        uni.shaderType = this.shaderType;

        // console.log(this._name, this._value, uni._value);

        return uni;
    }

}

;// CONCATENATED MODULE: ./src/core/cg/preproc.js
/**
 * @param {string} str
 * @param {object} vars
 */
function preproc(str, vars)
{
    if (!str)
    {
        console.warn("shader preproc no shader code given");
    }
    str = str || "";
    const lines = str.split("\n");
    const outLines = [];
    let stack = [];

    for (let i = 0; i < lines.length; i++)
    {
        let line = lines[i].trim();
        let parts = line.split(" ");

        if (line.startsWith("#ifdef "))
        {
            const s = vars[parts[1]];
            stack.push({ "state": s });
            continue;
        }
        if (line.startsWith("#ifndef "))
        {
            const s = vars[parts[1]];
            stack.push({ "state": !s });
            continue;
        }
        if (line.startsWith("#endif"))
        {
            stack.pop();
            continue;
        }
        const state = stack[stack.length - 1];

        if (line.startsWith("#else"))
        {
            state.state = !state.state;
            continue;
        }

        if (!state || state.state)
        {
            outLines.push(lines[i]);
        }
    }

    return outLines.join("\n");
}

;// CONCATENATED MODULE: ./src/core/cgp/binding/bindgroup.js




class BindGroup
{

    /** @type {Array<GPUBindGroup>} */
    #gpuBindGroups = [];

    /** @type {Array<Binding>} */
    #bindings = [];

    name = "";

    needsPipelineUpdate = false;

    bla = 1;

    /** @type {CgpContext} */
    #cgp;

    /**
     * @param {CgpContext} cgp
     * @param {string} name
     */
    constructor(cgp, name)
    {
        this.#cgp = cgp;
        this.name = name;
    }

    /**
     * @returns {GPUBindGroup}
     */
    // get gpuBindgroup()
    // {
    //     if (!this.#gpuBindGroup)
    //     {
    //         this.create();
    //     }
    //     // console.log(this.#gpuBindGroup);
    //     return this.#gpuBindGroup;
    // }

    /**
     * @param {Binding} b
     * @returns {boolean}
     */
    hasBinding(b)
    {
        return this.#bindings.includes(b);
    }

    /**
     * @param {string} n
     * @returns {Binding}
     */
    getBindingByName(n)
    {

        for (let i = 0; i < this.#bindings.length; i++)
        {
            if (this.#bindings[i].name == n) return this.#bindings[i];
        }
    }

    /**
     * @param {Binding} b
     */
    removeBinding(b)
    {
        const idx = this.#bindings.indexOf(b);
        this.#bindings.splice(idx, 1);
    }

    /**
     * @param {Binding} b
     * @returns {Binding}
     */
    addBinding(b)
    {
        const oldBinding = this.getBindingByName(b.name);
        if (oldBinding) this.removeBinding(oldBinding);
        b.needsRebuildBindgroup = true;
        b.bindNum = this.#bindings.length;
        this.#bindings.push(b);

        return b;
    }

    // /**
    //  * @param {CgpShader} shader
    //  */
    // bind(shader)
    // {
    //     shader.setBindgroup(this);
    // }

    /**
     * @param {CgpShader} [shader]
     */
    getLayoutEntries(shader)
    {
        const arr = [];
        for (let i = 0; i < this.#bindings.length; i++)
        {
            arr.push(this.#bindings[i].getLayoutEntry(shader));
        }

        if (arr.length == 0)
        {
            // console.log("nooooooooooooooooooooooo");
        }
        return arr;
    }

    /**
     * @returns {Array<GPUBindGroupEntry>}
     * @param {number} inst
     */
    getEntries(inst)
    {
        const arr = [];
        for (let i = 0; i < this.#bindings.length; i++)
        {
            arr.push(this.#bindings[i].getBindgroupEntry(inst));
        }

        if (arr.length == 0)
        {
            // console.log("nooooooooooooooooooooooo");
        }
        return arr;
    }

    /**
     * @param {CgpShader} [shader]
     */
    getLayout(shader)
    {
        // console.log(this.getLayoutEntries(shader));

        /** @type {GPUBindGroupLayout} */
        const bindGroupLayout = this.#cgp.device.createBindGroupLayout(
            {
                "label": "bindgrouplayout " + this.name,
                "entries": this.getLayoutEntries(shader),
            });

        return bindGroupLayout;
    }

    /**
     * @param {number} inst
     */
    create(inst)
    {

        /** @type {GPUBindGroupDescriptor} */
        const bg = {
            "label": " " + this.name + " i" + inst,
            "layout": this.getLayout(),
            "entries": this.getEntries(inst)
        };

        this.#cgp.profileData.count("bindgroup created", this.name);

        // if (bindingGroupEntries.length != this.bindingGroupLayoutEntries.length)
        // {
        //     this.#log.error("bindingGroupEntries.length!= this.bindingGroupLayoutEntries.length", bindingGroupEntries.length, this.bindingGroupLayoutEntries.length);
        //     this.#rebuildNumBindingGroups = true;
        //     this.#isValid = false;
        //     return;
        // }

        try
        {
            this.#gpuBindGroups[inst] = this.#cgp.device.createBindGroup(bg);
            this.needsRebuildBindgroup = true;

        }
        catch (e)
        {
            console.log(bg);
            console.error(e);
        }

        this.updateValues(inst);
    }

    /**
     * @param {number} inst
     */
    updateValues(inst)
    {
        for (let i = 0; i < this.#bindings.length; i++)
        {
            this.#bindings[i].updateValues(inst);
        }
    }

    /**
     * @param {number} inst
     * @param {GPURenderPassEncoder|GPUComputePassEncoder} passEnc
     */
    bind(inst = 0, passEnc = null, idx = 0)
    {
        for (let i = 0; i < this.#bindings.length; i++)
            if (this.#bindings[i].needsRebuildBindgroup)
            {
                // console.log("rebuild bg");
                this.create(inst);
                this.#bindings[i].needsRebuildBindgroup = false;
                this.#gpuBindGroups = [];
                // todo: dispose
            }

        if (!this.#gpuBindGroups[inst]) this.create(inst);
        (passEnc || this.#cgp.passEncoder).setBindGroup(idx, this.#gpuBindGroups[inst]);
    }

    /**
     * @param {CgpShader} shader
     * @param {number} idx
     */
    getShaderHeaderCode(shader, idx)
    {
        const srcs = { "vertex": "", "fragment": "", "compute": "" };

        this.#cgp.profileData.count("bindgroup shadercode", this.name);
        for (let i = 0; i < this.#bindings.length; i++)
        {
            const bind = this.#bindings[i];
            let src = "";
            src += bind.getShaderHeaderCode(shader, idx);
            if (bind.stage & GPUShaderStage.VERTEX)srcs.vertex += src;
            else if (bind.stage === GPUShaderStage.FRAGMENT)srcs.fragment += src;
            else if (bind.stage & GPUShaderStage.COMPUTE)srcs.compute += src;
        }

        return srcs;
    }

    /**
     * @param {CgpShader} shader
     */
    copy(shader)
    {
        const newBg = new BindGroup(this.#cgp, this.name);
        for (let i = 0; i < this.#bindings.length; i++)
        {
            newBg.addBinding(this.#bindings[i].copy(shader));
        }
        return newBg;
    }

    setBindingNums()
    {

        for (let i = 0; i < this.#bindings.length; i++)
        {
            this.#bindings[i].setBindNum(i);
        }
    }

    getInfo()
    {
        const o = { "name": this.name, "bindings": [] };
        for (let i = 0; i < this.#bindings.length; i++)
        {
            o.bindings.push(this.#bindings[i].getInfo());
        }
        return o;
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/binding/binding.js






class Binding
{
    id = simpleId();
    name = "";
    bindNum = 0;
    stage = GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT;
    define = "";
    log = new Logger("binding");
    needsRebuildBindgroup = false;

    /** @type {CgpContext} */
    cgp = null;

    /**
     * Description
     * @param {CgpContext} cgp
     * @param {string} name
     * @param {object} options
     */
    constructor(cgp, name, options)
    {
        this.cgp = cgp;
        this.name = name;
        if (!name) this.log.error("no binding name given");
        this.options = options || {};
        if (options.hasOwnProperty("stage")) this.stage = options.stage;
    }

    /**
     * @param {number} _inst
     */
    getResource(_inst)
    {
        // overwrite
        return null;
    }

    /**
     * @param {number} i
     */
    setBindNum(i)
    {
        if (this.bindNum != i) this.needsRebuildBindgroup = true;
        this.bindNum = i;
    }

    /**
     * @returns {GPUBindGroupLayoutEntry}
     * @param {CgpShader} _shader
     */
    getLayoutEntry(_shader)
    {
        this.log.warn("unknown binding type?", this);
        return null;
    }

    /**
     * @returns {GPUBindGroupEntry}
     * @param {number} inst
     */
    getBindgroupEntry(inst)
    {
        let label = "layout " + this.name + " [" + this.constructor.name;
        label += "]";

        return {
            "binding": this.bindNum,
            "resource": this.getResource(inst)
        };
    }

    /** @param {CgpShader} _shader */
    isActiveByDefine(_shader)
    {
        if (!this.define) return true;
        // if (this.define && !shader.hasDefine(this.define)) return false;
        return true;
    }

    /** @param {number} _inst */
    updateValues(_inst)
    {
        // overwrite
    }

    /**
     * @param {CgpShader} _shader
     * @param {number} _bindGroupNum
     * @returns {String}
     */
    getShaderHeaderCode(_shader, _bindGroupNum)
    {
        return "//getShaderHeaderCode function not emplemented " + nl;
    }

    /**
     * @param {CgpShader} _shader
     * @returns {Binding}
     */
    copy(_shader)
    {
        // implenented in inheriting classes
        return null;
    }

    getInfo()
    {
        const o = { "name": this.name, "id": this.id, "class": this.constructor.name };
        return o;
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_gpubuffer.js



/** @typedef GPUBufferOptions
 * @property {number} [length]
 * @property {GPUBufferDescriptor} [buffCfg]
*/

class CgpGguBuffer extends Events
{
    #name = "unknown";

    /** @type {CgpContext} */
    #cgp = null;

    /** @type {GPUBuffer} */
    #gpuBuffer = null;

    /** @type {GPUBufferDescriptor} */
    buffCfg = null;

    #length = 0;
    id = CABLES.shortId();
    floatArr = null;
    needsUpdate = true;
    #log;

    // static BINDINGTYPE_STORAGE = "storage";
    // static BINDINGTYPE_UNIFORM = "uniform";
    // static BINDINGTYPE_READONLY_STORAGE = "read-only-storage";

    /**
     * Description
     * @param {CgpContext} cgp
     * @param {String} name
     * @param {Array} data=null
     * @param {GPUBufferOptions} options={}
     */
    constructor(cgp, name, data = null, options = {})
    {
        super();
        this.#log = new Logger("cgpGpubuffer");
        if (!cgp.supported) return;

        this.#name = name;
        // this.setData([0, 0, 0, 0]);

        this.buffCfg = options.buffCfg || {};
        if (data) this.setData(data);
        if (options.length) this.setLength(options.length);

        this.buffCfg.usage = this.buffCfg.usage || (GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC);
        this.updateGpuBuffer(cgp);
    }

    /**
     * @param {Array} arr
     */
    setData(arr)
    {
        this.floatArr = new Float32Array(arr);
        this.setLength(this.floatArr.length);

        this.needsUpdate = true;
    }

    /**
     * @param {number} s
     */
    setLength(s)
    {
        this.#length = s;
        if (!this.floatArr || s != this.floatArr.length)
        {
            this.floatArr = new Float32Array(this.#length);
            this.needsUpdate = true;
        }
    }

    /**
     * @param {number} flag
     */
    hasUsage(flag)
    {
        return (this.buffCfg.usage & flag) === flag;
    }

    /** @param {CgpContext} cgp */
    updateGpuBuffer(cgp = null)
    {
        if (cgp) this.#cgp = cgp;
        if (!this.#cgp || !this.#cgp.device)
        {
            this.#log.warn("no cgp...", this.#name, this.#cgp);
            return;
        }

        this.#cgp.pushErrorScope("updateGpuBuffer");
        if (!this.#gpuBuffer || this.buffCfg.mappedAtCreation)
        {
            this.buffCfg = /** @type {GPUBufferDescriptor} */(this.buffCfg || {});
            this.buffCfg.label = "gpuBuffer-" + this.#name;
            if (!this.buffCfg.hasOwnProperty("size") && this.floatArr) this.buffCfg.size = this.floatArr.length * 4;

            this.#gpuBuffer = this.#cgp.device.createBuffer(this.buffCfg);
        }

        if (this.floatArr)
        {
            if (this.buffCfg.mappedAtCreation)
            {
                new Float32Array(this.#gpuBuffer.getMappedRange()).set(this.floatArr);
                this.#gpuBuffer.unmap();

            }
            else

                this.#cgp.device.queue.writeBuffer(
                    this.#gpuBuffer,
                    0,
                    this.floatArr.buffer,
                    this.floatArr.byteOffset,
                    this.floatArr.byteLength
                );
        }

        this.#cgp.popErrorScope();

        this.needsUpdate = false;
    }

    get name()
    {
        return this.#name;
    }

    /** @returns {GPUBuffer} */
    get gpuBuffer()
    {
        if (!this.#gpuBuffer || this.needsUpdate) this.updateGpuBuffer();

        return this.#gpuBuffer;
    }

    get length()
    {
        return this.#length;
    }

    getSizeBytes()
    {
        return this.floatArr.length * 4;
    }

    dispose()
    {
        // setTimeout(() =>
        // {
        //     if (this._gpuBuffer) this._gpuBuffer.destroy();
        // }, 100);
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/binding/binding_uniform.js







/** @extends Binding */
class BindingUniform extends Binding
{

    /** @type {Array<CgpUniform>} */
    #uniforms = [];

    /** @type {Array<CgpGguBuffer>} */
    cgpBuffer = [];

    /**
     * Description
     * @param {CgpContext} cgp
     * @param {string} name
     * @param {object} options
     */
    constructor(cgp, name, options)
    {
        super(cgp, name, options);

        console.log("new binding uniform", this.id);
        // CABLES.logStack();
    }

    /**
     * @param {CgpShader} shader
     * @returns {Binding}
     */
    copy(shader)
    {
        const b = new BindingUniform(this.cgp, this.name, this.options);
        console.log("copybinuni", this.id, b.id);
        b.stage = this.stage;

        for (let i = 0; i < this.#uniforms.length; i++)
        {
            let foundWorldUni = false;
            for (let j = 0; j < shader.worldUniforms.length; j++)
            {
                if (shader.worldUniforms[j].getName() == this.#uniforms[i].getName())
                {
                    b.addUniform(shader.worldUniforms[j]);
                    foundWorldUni = true;
                }
            }
            if (!foundWorldUni) b.addUniform(this.#uniforms[i]);
        }

        return b;
    }

    /**
     * @param {CgpUniform} u
     */
    addUniform(u)
    {
        this.#uniforms.push(u);
        this.needsRebuildBindgroup = true;
        console.log(this.#uniforms, this);
        // CABLES.logStack();
        return u;
    }

    /**
     * @returns {GPUBindingResource}
     * @param {number} inst
     */
    getResource(inst)
    {
        this.updateBuffer(inst);
        return {
            "buffer": this.cgpBuffer[inst].gpuBuffer,
        };
    }

    getSizeBytes()
    {
        let size = 0;
        for (let i = 0; i < this.#uniforms.length; i++)
            size += this.#uniforms[i].getSizeBytes();

        return size;
    }

    /**
     * @param {string} name
     */
    getUniform(name)
    {
        for (let i = 0; i < this.#uniforms.length; i++)
        {
            if (this.#uniforms[i].name == name) return this.#uniforms[i];
        }
        return null;
    }

    /**
     * @param {string} name
     */
    removeUniformByName(name)
    {
        for (let i = 0; i < this.#uniforms.length; i++)
            if (this.#uniforms[i].name == name)
            {
                this.needsRebuildBindgroup = true;
                return this.#uniforms.splice(i, 1);
            }
    }

    /**
     * @param {number} inst
     */
    createBuffer(inst)
    {
        let buffCfg = {
            "label": this.name,
            "size": this.getSizeBytes(),
            "usage": GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM
        };

        this.cgpBuffer[inst] = new CgpGguBuffer(this.cgp, this.name + " buff", null, { "buffCfg": buffCfg });
    }

    pipelineUpdated()
    {
        this.needsRebuildBindgroup = false;
    }

    needsPipeUpdate()
    {
        return this.needsRebuildBindgroup;
    }

    /**
     * @param {number} inst
     */
    updateBuffer(inst)
    {
        let info = { "name": this.#uniforms.length + " uniforms", "stage ": CgpShader.getStageString(this.stage), "uniforms": [] };

        let s = this.getSizeBytes() / 4;
        info.s = this.getSizeBytes();
        if (s == 16)s = 16;
        if (!this.cgpBuffer[inst])
        {
            this.createBuffer(inst);
            // console.log("no cpubuff? ", s, this.#uniforms);
            // return;
        }
        this.cgpBuffer[inst].setLength(s);

        let off = 0;
        for (let i = 0; i < this.#uniforms.length; i++)
        {
            this.#uniforms[i].copyToBuffer(this.cgpBuffer[inst].floatArr, off);

            if (this.#uniforms[i].gpuBufferChanged)
                console.log("un changed", this.cgpBuffer[inst].floatArr);

            info.uniforms.push(this.#uniforms[i].getInfo());

            off += this.#uniforms[i].getSizeBytes() / 4;
        }
        if (this.cgp.branchProfiler) this.cgp.branchProfiler.push("binding update buff", CgpShader.getStageString(this.stage), { "info": info });

        this.cgpBuffer[inst].updateGpuBuffer();

        if (this.cgp.branchProfiler) this.cgp.branchProfiler.pop();
    }

    /**
     * @param {CgpShader} shader
     * @param {number} bindGroupNum
     */
    getShaderHeaderCode(shader, bindGroupNum)
    {
        this.cgp.profileData.count("shadercode uni", this.name);
        let str = "";
        let typeStr = "";
        let name = this.name;

        str += "//   [binding_uniform] - \"" + this.name + "\" " + this.id + " uniforms:" + this.#uniforms.length + "\n";

        if (!this.isActiveByDefine(shader))
        {
            str += "// " + typeStr + " " + this.name + ": excluded because define " + this.define + "\n";
            return str;
        }

        if (this.#uniforms.length > 1)
        {
            typeStr = "strct_" + name;

            str += "struct " + typeStr + "\n";
            str += "{\n";
            // if (this.#uniforms.length == 0) str += "placehoder:1.";
            // else
            for (let i = 0; i < this.#uniforms.length; i++)
            {
                str += "    " + this.#uniforms[i].name + ": " + this.#uniforms[i].getWgslTypeStr();
                if (i != this.#uniforms.length - 1)str += ",";
                str += "\n";
            }
            str += "};\n";

        }
        else if (this.#uniforms.length == 1)
        {
            typeStr = this.#uniforms[0].getWgslTypeStr();
            name = this.#uniforms[0].name;
        }
        else if (this.#uniforms.length == 0)
        {
            return str;
            // typeStr = "float";
            // name = "placeholder";
        }

        // console.log("shadercode uniforms", this.#uniforms[0].name);
        str += "@group(" + bindGroupNum + ") ";
        str += "@binding(" + this.bindNum + ") ";

        str += "var<uniform> ";
        str += name + ": " + typeStr + ";\n";

        // console.log(str);
        return str + "\n";
    }

    /** @returns {GPUBindGroupLayoutEntry} */
    getLayoutEntry()
    {
        return {
            "visibility": this.stage,
            "binding": this.bindNum,
            "minBindingSize": this.getSizeBytes(),
            "hasDynamicOffset": 0,
            "buffer": {}
        };
    }

    /**
     * @param {number} inst
     */
    updateValues(inst)
    {
        for (let i = 0; i < this.#uniforms.length; i++)
        {
            // if (this.#uniforms[i].needsUpdate)
        }
        return this.updateBuffer(inst);

    }

    getInfo()
    {
        const o = { "name": this.name, "id": this.id, "stage": this.stage, "class": this.constructor.name, "uniforms": [] };

        for (let i = 0; i < this.#uniforms.length; i++)
        {
            o.uniforms.push(this.#uniforms[i].getInfo());
        }
        return o;
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/binding/binding_sampler.js



/** @extends Binding */
class BindingSampler extends Binding
{

    /** @type {GPUSamplerDescriptor} */
    smplDesc = {
        "addressModeU": "mirror-repeat",
        "addressModeV": "mirror-repeat",
        "magFilter": "linear",
        "minFilter": "linear",
        "mipmapFilter": "linear",
    };

    /** @type {GPUSampler} */
    sampler = null;

    constructor(cgp, name, options)
    {
        super(cgp, name, options);
        this.sampler = this.cgp.device.createSampler(this.smplDesc);

    }

    copy()
    {
        const b = new BindingSampler(this.cgp, this.name, this.options);
        return b;
    }

    getResource()
    {
        return this.sampler;
    }

    /** @returns {GPUBindGroupLayoutEntry} */
    getLayoutEntry()
    {
        return {
            "visibility": this.stage,
            "binding": this.bindNum,
            "sampler": {}
        };
    }

    /**
     * @param {CgpShader} shader
     * @param {number} bindGroupNum
     */
    getShaderHeaderCode(shader, bindGroupNum)
    {
        let str = "@group(" + bindGroupNum + ") @binding(" + this.bindNum + ") ";
        str += "var " + this.name + ": sampler;".endl();
        return str;
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/binding/binding_texture.js






/** @extends {Binding} */
class BindingTexture extends Binding
{

    /** @type {GPUSampler} */
    sampler = null;
    uniform = null;

    /**
     * @param {CgpContext} cgp
     * @param {string} name
     * @param {object} options
     */
    constructor(cgp, name, options)
    {
        super(cgp, name, options);

        /** @type {CgpUniform} */
        this.uniform = options.uniform;

        if (this.uniform.port)
        {
            this.uniform.port.on("change", () =>
            {
                this.needsRebuildBindgroup = true;
            });
        }

        console.log(this.uniform);
    }

    copy()
    {
        const b = new BindingTexture(this.cgp, this.name, this.options);
        return b;
    }

    getResource()
    {
        if (this.uniform.getValue() && this.uniform.getValue().gpuTexture) return this.uniform.getValue().gpuTexture.createView();
        else return this.cgp.getDefaultTexture().createView();
    }

    /** @returns {GPUBindGroupLayoutEntry} */
    getLayoutEntry()
    {
        return {
            "visibility": this.stage,
            "binding": this.bindNum,
            "texture": {}
        };
    }

    /**
     * @param {CgpShader} _shader
     * @param {number} bindGroupNum
     */
    getShaderHeaderCode(_shader, bindGroupNum)
    {
        let str = "@group(" + bindGroupNum + ") @binding(" + this.bindNum + ") ";
        str += "var " + this.name + ": " + this.uniform.getWgslTypeStr() + ";\n";
        return str;
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_shader.js














/** @typedef CgpShaderOptions
 * @property {Boolean} [compute]
 * @property {String} [entryPoint]
 */

class CgpShader extends CgShader
{

    #lastCompileReason = "first";

    /** @type {CgpUniform} */
    uniModelMatrix;

    /** @type {CgpUniform} */
    uniViewMatrix;

    /** @type {CgpUniform} */
    uniProjMatrix;

    /**
     * @type {GPUCompilationInfo}
     */
    compilationInfo;

    /**
     * @param {CgpContext} _cgp
     * @param {String} _name
     * @param {CgpShaderOptions} options={}
     */
    constructor(_cgp, _name, options = {})
    {
        super();
        if (!_cgp) throw new Error("shader constructed without cgp " + _name);
        this._log = new Logger("cgp_shader");
        this._cgp = _cgp;
        this._name = _name;
        this.options = options;
        this.options.compute = this.options.compute || false;

        if (!_name) this._log.stack("no shader name given");
        this._name = _name || "unknown";
        this.gpuShaderModule = null;
        this.frameUsageCounter = 0;
        this.lastFrameUsageCounter = -2;
        this.frameUsageFrame = -1;

        this._bindingIndexCount = 0;
        this.compileCount = 0;
        this.worldUniforms = [];

        this.defaultBindGroup = new BindGroup(_cgp, this._name);
        this.modsBindGroup = new BindGroup(_cgp, this._name);

        /** @type {Array<BindGroup>} */
        this.bindGroups = [this.defaultBindGroup, this.modsBindGroup];

        if (!this.options.compute)
        {
            // this.bindingWorld = new BindingUniform(_cgp, "world", { "stage": GPUShaderStage.VERTEX });
            // this.defaultBindGroup.addBinding(this.bindingWorld);

            this.defaultUniBindingVert = new BindingUniform(_cgp, "uniVert", { "stage": GPUShaderStage.VERTEX });
            this.defaultBindGroup.addBinding(this.defaultUniBindingVert);

            this.defaultUniBindingFrag = new BindingUniform(_cgp, "uniFrag", { "stage": GPUShaderStage.FRAGMENT });
            this.defaultBindGroup.addBinding(this.defaultUniBindingFrag);
        }
        else
        {
            this.defaultUniBindingCompute = new BindingUniform(_cgp, "uniCompute", { "stage": GPUShaderStage.COMPUTE });
            this.defaultBindGroup.addBinding(this.defaultUniBindingCompute);
        }

        if (!this.options.compute)
        {
            this.uniModelMatrix = this.addUniform(new CgpUniform(this, "m4", "modelMatrix"), GPUShaderStage.VERTEX);
            this.uniViewMatrix = this.addUniform(new CgpUniform(this, "m4", "viewMatrix"), GPUShaderStage.VERTEX);
            this.uniProjMatrix = this.addUniform(new CgpUniform(this, "m4", "projMatrix"), GPUShaderStage.VERTEX);
            this.uniNormalMatrix = this.addUniform(new CgpUniform(this, "m4", "normalMatrix"), GPUShaderStage.VERTEX);
            this.uniModelViewMatrix = this.addUniform(new CgpUniform(this, "m4", "modelViewMatrix"), GPUShaderStage.VERTEX);
            this._tempNormalMatrix = mat4_create();
            this._tempModelViewMatrix = mat4_create();
            this.worldUniforms.push(this.uniModelMatrix, this.uniViewMatrix, this.uniProjMatrix, this.uniNormalMatrix, this.uniModelViewMatrix);
        }

        this._src = "";

        this._cgp.on("deviceChange", () =>
        {
            this.gpuShaderModule = null;
            this.setWhyCompile("device changed");
        });
    }

    reInit()
    {

    }

    /** @returns {boolean} */
    isValid()
    {
        return this._isValid;
    }

    getName()
    {
        return this._name;
    }

    incFrameUsageCount()
    {
        if (this.frameUsageFrame != this._cgp.frame)
        {
            this.lastFrameUsageCounter = this.frameUsageCounter;
            this.frameUsageCounter = 0;
        }
        else this.frameUsageCounter++;
        this.frameUsageFrame = this._cgp.frame;

        return this.frameUsageCounter;
    }

    getNewBindingGroupIndex()
    {
        return ++this._bindingIndexCount;
    }

    /**
     * @param {String} src
     */
    setSource(src)
    {
        this._src = src;
        this.setWhyCompile("Source changed");
    }

    /**
     * @param {import("../cg/cg_shader.js").ShaderModule} mod
     * @param {string} src
     */
    _replaceModPrefixes(mod, src)
    {
        return src.replace(/MOD_/g, mod.prefix);
    }

    /**
     * @param {String} vs
     * @param {{}} defs
     */
    _replaceMods(vs, defs)
    {
        let srcHeadVert = "";
        for (let i = 0; i < this._moduleNames.length; i++)
        {
            let srcVert = "";

            for (let j = 0; j < this._modules.length; j++)
            {
                const mod = this._modules[j];
                if (mod.name == this._moduleNames[i])
                {
                    srcHeadVert += nl + nl + "//---- MOD: group:" + mod.group + ": idx:" + j + " - prfx:" + mod.prefix + " - " + mod.title + " ------" + nl;

                    srcVert += nl + nl + "//---- MOD: " + mod.title + " / " + mod.priority + " ------" + nl;

                    if (mod.attributes)
                        for (let k = 0; k < mod.attributes.length; k++)
                        {
                            const r = this._getAttrSrc(mod.attributes[k], false);
                            if (r.srcHeadVert)srcHeadVert += r.srcHeadVert;
                            if (r.srcVert)srcVert += r.srcVert;
                        }

                    srcHeadVert += mod.srcHead || "";
                    srcVert += mod.srcBody || "";

                    srcHeadVert += nl + "//---- end mod ------" + nl;

                    srcVert += nl + "//---- end mod ------" + nl;

                    srcVert = this._replaceModPrefixes(mod, srcVert);
                    srcHeadVert = this._replaceModPrefixes(mod, srcHeadVert);

                }
            }

            srcVert = preproc(srcVert, defs);
            vs = vs.replace("{{" + this._moduleNames[i] + "}}", srcVert);
        }

        srcHeadVert = preproc(srcHeadVert, defs);
        vs = vs.replace("{{MODULES_HEAD}}", srcHeadVert);
        return vs;
    }

    /**
     * @param {string} src
     */
    _replaceVertexOutputs(src = "")
    {
        const strVertOut = "{{VERTEX_OUTPUT";
        const posVertOut = src.indexOf(strVertOut);
        if (posVertOut > -1)
        {
            try
            {
                let str = src.substring(posVertOut + strVertOut.length, posVertOut + 100);
                let endPos = str.indexOf("}}");
                let startNum = parseInt(str.substring(0, endPos));

                for (let j = 0; j < this._modules.length; j++)
                {
                    if (!this._modules[j].outputs) continue;
                    let outs = this._modules[j].outputs;
                    let l = 0;
                    while (outs.indexOf("@location(" + l + ")") > -1)
                    {
                        outs = outs.replaceAll("@location(" + l + ")", "@location(" + (l + startNum) + ")");
                    }
                    outs = this._replaceModPrefixes(this._modules[j], outs);
                    src = src.replaceAll(strVertOut + " " + startNum + "}}", outs);
                }

            }
            catch (e)
            {
                console.log(e);
            }
        }
        return src;
    }

    getDefines()
    {
        return this._defines;
    }

    getProcessedSource()
    {
        const defs = {};
        for (let i = 0; i < this._defines.length; i++)
            defs[this._defines[i][0]] = this._defines[i][1] || true;

        let src = "";
        src += preproc(this._src, defs);

        let strDefs = "";
        for (let i = 0; i < this._defines.length; i++)
            strDefs += "// #define " + this._defines[i] + "\n";

        let bindingsHeadVert = "";
        let bindingsHeadFrag = "";
        let bindingsHeadCompute = "";

        for (let i = 0; i < this.bindGroups.length; i++)
        {
            const src = this.bindGroups[i].getShaderHeaderCode(this, i);
            bindingsHeadFrag += src.fragment || "";
            bindingsHeadVert += src.vertex || "";
            bindingsHeadCompute += src.compute || "";
        }

        if (this.options.compute)
            src = bindingsHeadCompute + "\n\n////////////////\n\n" + src;
        else
            src = bindingsHeadFrag + "\n\n////////////////\n\n" + bindingsHeadVert + "\n\n////////////////\n\n" + src;

        src = this._replaceMods(src, defs);

        src = this._replaceVertexOutputs(src);

        const strVertOut = "{{VERTEX_OUTPUT";
        const posVertOut = src.indexOf(strVertOut);
        if (posVertOut > -1)
        {
            try
            {
                let str = src.substring(posVertOut + strVertOut.length, posVertOut + 100);
                let endPos = str.indexOf("}}");
                let startNum = parseInt(str.substring(0, endPos));
                let locCode = "@location(" + (startNum) + ") pos:vec4f, // generated";

                src = src.replaceAll(strVertOut + " " + startNum + "}}", locCode);
            }
            catch (e)
            {
                console.log(e);
            }
        }
        src = strDefs + "\n" + src;

        let srcHead = "//" + nl + "// ";
        if (this.options.compute)srcHead += "Compute ";
        else srcHead += "Render ";

        srcHead += "Shader: " + this._name + " - " + this.id + nl;
        srcHead += "//" + nl;

        return srcHead + src;
    }

    compile()
    {
        this._isValid = true;
        this._cgp.pushErrorScope("cgp_shader " + this._name);

        if (this._cgp.branchProfiler) this._cgp.branchProfiler.push("shadercompile", this._name, { "info": this.getInfo() });

        this._cgp.profileData.count("shader compile", this._name);
        this.gpuShaderModule = this._cgp.device.createShaderModule({ "code": this.getProcessedSource(), "label": this._name });

        this.gpuShaderModule.getCompilationInfo().then((compInfo) =>
        {
            this.compilationInfo = compInfo;
            if (compInfo.messages.length > 0)
            {
                let hasErrors = false;
                for (const msg of compInfo.messages)
                {
                    switch (msg.type)
                    {
                    case "error":
                        console.error("Shader " + msg.type + " at line " + msg.lineNum + ":" + msg.linePos + " :" + msg.message);
                        hasErrors = true;
                    case "warning":
                        console.warn("Shader " + msg.type + " at line " + msg.lineNum + ":" + msg.linePos + " :" + msg.message);
                        break;
                    case "info":
                        console.info("Shader " + msg.type + " at line " + msg.lineNum + ":" + msg.linePos + " :" + msg.message);
                        break;
                    }
                }
                if (hasErrors)
                {
                    console.log("has errrrrrrrrrr");
                    CABLES.UI.showShaderErrorCgp(this, compInfo, this.getProcessedSource());
                }

            }
        });

        this._cgp.popErrorScope(this.error.bind(this));

        this.#lastCompileReason = this._compileReason;

        this.lastCompile = now();
        // console.log("#lastCompileReason", this.#lastCompileReason);

        this.emitEvent("compiled", this._compileReason);
        this._needsRecompile = false;
        this._compileReason = "none";
        this.compileCount++;

        if (this._cgp.branchProfiler) this._cgp.branchProfiler.pop();
    }

    error(e)
    {
        this._isValid = false;
    }

    bind(passEnc = null)
    {

        this.incFrameUsageCount();
        if (!this.options.compute)
        {
            this.uniModelMatrix.setValue(this._cgp.mMatrix);
            this.uniViewMatrix.setValue(this._cgp.vMatrix);
            this.uniProjMatrix.setValue(this._cgp.pMatrix);

            // mat4.invert(this._tempNormalMatrix, this._cgp.mMatrix);
            // mat4.transpose(this._tempNormalMatrix, this._tempNormalMatrix);
            mat4_mul(this._tempModelViewMatrix, this._cgp.vMatrix, this._cgp.mMatrix);
            this.uniModelViewMatrix.setValue(this._tempModelViewMatrix);

            mat4_copy(this._tempNormalMatrix, this._cgp.mMatrix);
            mat4_invert(this._tempNormalMatrix, this._tempNormalMatrix);
            mat4_transpose(this._tempNormalMatrix, this._tempNormalMatrix);

            // cpu billboarding?
            // this._tempModelViewMatrix[0 * 4 + 0] = 1.0;
            // this._tempModelViewMatrix[0 * 4 + 1] = 0.0;
            // this._tempModelViewMatrix[0 * 4 + 2] = 0.0;

            // // #ifndef BILLBOARDING_CYLINDRIC
            // this._tempModelViewMatrix[1 * 4 + 0] = 0.0;
            // this._tempModelViewMatrix[1 * 4 + 1] = 1.0;
            // this._tempModelViewMatrix[1 * 4 + 2] = 0.0;
            // // #endif

            // this._tempModelViewMatrix[2 * 4 + 0] = 0.0;
            // this._tempModelViewMatrix[2 * 4 + 1] = 0.0;
            // this._tempModelViewMatrix[2 * 4 + 2] = 1.0;

            this.uniNormalMatrix.setValue(this._tempNormalMatrix);
        }

        for (let i = 0; i < this.bindGroups.length; i++)
        {
            this.bindGroups[i].updateValues(this.frameUsageCounter);
            this.bindGroups[i].bind(this.frameUsageCounter, passEnc, i);
        }
        if (this._needsRecompile) this.compile();
    }

    /**
     * @param {number} stage
     * @returns {BindingUniform}
     */
    getDefaultUniBinding(stage)
    {
        let binding = this.defaultUniBindingFrag;
        if (stage == GPUShaderStage.VERTEX) binding = this.defaultUniBindingVert;
        if (this.options.compute && stage == GPUShaderStage.COMPUTE) binding = this.defaultUniBindingCompute;
        return binding;
    }

    pipelineUpdated()
    {

        if (this.defaultUniBindingFrag) this.defaultUniBindingFrag.pipelineUpdated();
        if (this.defaultUniBindingVert) this.defaultUniBindingVert.pipelineUpdated();
        if (this.defaultUniBindingCompute) this.defaultUniBindingCompute.pipelineUpdated();
    }

    bindingsNeedPipeUpdate()
    {
        return (
            (this.defaultUniBindingFrag && this.defaultUniBindingFrag.needsPipeUpdate()) ||
            (this.defaultUniBindingVert && this.defaultUniBindingVert.needsPipeUpdate()) ||
            (this.defaultUniBindingCompute && this.defaultUniBindingCompute.needsPipeUpdate())
        );
    }

    /**
     * @param {String} name
     * @param {number} stage
     */
    hasUniformInStage(name, stage)
    {
        let binding = this.getDefaultUniBinding(stage);

        // console.log("bindingget uni", stage, binding, CgpShader.getStageString(stage));
        if (!binding) return false;
        return !!binding.getUniform(name);
    }

    /**
     * @param {String} name
     */
    hasUniform(name)
    {
        return this.hasUniformInStage(name, GPUShaderStage.FRAGMENT) || this.hasUniformInStage(name, GPUShaderStage.VERTEX) || this.hasUniformInStage(name, GPUShaderStage.COMPUTE);
    }

    /**
     * @param {CgpUniform} u
     * @param {number} stage
     * @returns {CgpUniform}
     */
    addUniform(u, stage)
    {
        const binding = this.getDefaultUniBinding(stage);
        if (u.type == "t") this.defaultBindGroup.addBinding(new BindingTexture(this._cgp, u.name, { "uniform": u }));
        else if (u.type == "sampler") this.defaultBindGroup.addBinding(new BindingSampler(this._cgp, u.name, { "uniform": u }));
        else
        {
            binding.addUniform(u);
        }

        this.needsPipelineUpdate = "add uniform";
        console.log("adduni2", this._name, u.name, this.id, binding, CgpShader.getStageString(stage));
        console.log("code", binding.getShaderHeaderCode(this, 0));

        // if (!this.defaultBindGroup.hasBinding(binding)) this.defaultBindGroup.addBinding(binding);
        return u;
    }

    removeUniformByName(name)
    {
        const binding = this.getDefaultUniBinding(stage);
        binding.removeUniformByName(name);

    }

    /**
     * copy current shader
     * @returns newShader
     */
    copy()
    {
        this.bind();
        const shader = new CgpShader(this._cgp, this._name + " copy", this.options);
        console.log("copyyyyyy", this.id, shader.id);
        shader.setSource(this._src);

        shader._modules = JSON.parse(JSON.stringify(this._modules));
        shader._defines = JSON.parse(JSON.stringify(this._defines));

        shader._moduleNames = this._moduleNames;

        shader.bindGroups = [];
        for (let i = 0; i < this.bindGroups.length; i++)
        {
            const bg = this.bindGroups[i].copy(shader);
            shader.bindGroups.push(bg);

            if (this.bindGroups[i] == this.defaultBindGroup) shader.defaultBindGroup = bg;
            // if (this.bindGroups[i] == this.modsBindGroup) shader.modsBindGroup = bg;
            bg.setBindingNums();
        }

        shader.setWhyCompile("copy");
        shader.compile();
        return shader;
    }

    dispose()
    {

    }

    /**
     * @param {number} stage
     */
    static getStageString(stage)
    {
        if (stage == GPUShaderStage.FRAGMENT) return "frag";
        if (stage == GPUShaderStage.VERTEX) return "vertex";
        if (stage == (GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX)) return "frag+vertex";
        if (stage == (GPUShaderStage.FRAGMENT | GPUShaderStage.VERTEX | GPUShaderStage.COMPUTE)) return "frag+vertex+comp";
        if (stage == GPUShaderStage.COMPUTE) return "compute";

        return "unknown" + stage;
    }

    getInfo()
    {
        const o = {
            "class": this.constructor.name,
            "id": this.id,
            "name": this._name,
            "needsPipelineUpdate": this.needsPipelineUpdate,
            "frameUsageCounter": this.lastFrameUsageCounter,
            "lastCompileReason": this.#lastCompileReason,
            "compileCount": this.compileCount,
            "defines": this._defines,
            "isCompute": this.options.compute,
            "modules": [],
            "bindgroups": []
        };

        for (let i = 0; i < this.bindGroups.length; i++)
        {
            o.bindgroups.push(this.bindGroups[i].getInfo());
        }

        for (let i = 0; i < this._modules.length; i++)
        {
            o.modules.push(this._modules[i].title + " " + this._modules[i].name + " " + this._modules[i].group);
            // console.log(this._modules[i]);
        }

        return o;
    }

    copyUniformValues(orig)
    {

    }
}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_texture.js




class cgp_texture_Texture extends CgTexture
{
    #log = new Logger("cgp_texture");

    /** @type {CgpContext} */
    #cgp = null;

    /** @type {GPUTexture} */
    gpuTexture = null;

    /** @type {GPUTextureDescriptor} */
    gpuTextureDescriptor = null;
    name = "unknown";
    width = 8;
    height = 8;
    textureType = "???";

    samplerDesc = {};

    /**
    * @param {CgpContext} _cgp
    * @param {Object} options={}
    */
    constructor(_cgp, options = {})
    {
        super(options);
        options = options || {};

        this.#cgp = _cgp;
        if (!this.#cgp) throw new Error("no cgp");

        if (options.name) this.name = options.name;
        if (options.height && options.width) this.setSize(options.width, options.height);

        this.#cgp.on("deviceChange", () =>
        {
        });
        this.samplerDesc = {
            "addressModeU": options.wrap || options.addressModeU || "clamp-to-edge",
            "addressModeV": options.wrap || options.addressModeV || "clamp-to-edge",
            "magFilter": options.magFilter || options.filter || "linear",
            "minFilter": options.minFilter || options.filter || "linear",
        };

    }

    /**
     * @param {Number} w
     * @param {Number} h
     */
    setSize(w, h)
    {
        this.width = w;
        this.height = h;
    }

    /**
     * set texture data from an image/canvas object
     * @function initTexture
     * @memberof Texture
     * @instance
     * @param {Object} img image
     * @param {Number} filter
     */
    initTexture(img, filter)
    {
        this.width = img.width;
        this.height = img.height;

        const textureType = "rgba8unorm";

        this.#cgp.pushErrorScope("inittexture", { "logger": this.#log });

        this.gpuTextureDescriptor = {

            "size": { "width": img.width, "height": img.height },
            "format": textureType,
            // "sampleCount": 4,
            "usage": GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT
        };

        this.gpuTexture = this.#cgp.device.createTexture(this.gpuTextureDescriptor);
        this.#cgp.device.queue.copyExternalImageToTexture({ "source": img }, { "texture": this.gpuTexture }, this.gpuTextureDescriptor.size);

        this.#cgp.popErrorScope();

        return this.gpuTexture;
    }

    dispose()
    {
        console.log("todo dispose");
    }

    getInfo()
    {
        const obj = {};

        obj.name = this.name || "???";
        obj.size = this.width + " x " + this.height;

        obj.textureType = this.textureType;

        return obj;
    }

    createView()
    {
        if (!this.gpuTexture)
        {
            console.log("no gputexture...");
            return null;
        }
        return this.gpuTexture.createView();
    }

    getSampler()
    {
        // "clamp-to-edge"
        // "repeat"
        // "mirror-repeat"

        return this.samplerDesc;
    }

    /**
     * @function initFromData
     * @memberof Texture
     * @instance
     * @description create texturem from rgb data
     * @param {ArrayBuffer} data rgb color array [r,g,b,a,r,g,b,a,...]
     * @param {Number} w width
     * @param {Number} h height
     * @param {Number} filter
     * @param {Number} wrap
     */
    initFromData(data, w, h, filter, wrap)
    {
        if (!w || !h) this.#log.error("texture size is 0");
        this.width = w;
        this.height = h;
        this.gpuTexture = this.#cgp.device.createTexture(
            {
                "size": [w, h],
                "format": "rgba8unorm",
                "usage": GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,
            });

        this.#cgp.device.queue.writeTexture(
            { "texture": this.gpuTexture },
            data,
            { "bytesPerRow": w * 4 },
            { "width": w, "height": h });
    }

    /**
     * @param {any} v
     */
    setWrap(v)
    {
        this.samplerDesc.addressModeU = this.samplerDesc.addressModeV = v;
    }

    /**
     * @param {any} v
     */
    setFilter(v)
    {
        this.samplerDesc.minFilter = this.samplerDesc.magFilter = v;
    }
}

/**
 * @function load
 * @static
 * @memberof Texture
 * @description load an image from an url
 * @param {CgpContext} cgp
 * @param {String} url
 * @param {Function} onFinished
 * @param {Object} settings
 */
cgp_texture_Texture.load = function (cgp, url, onFinished, settings)
{
    fetch(url).then((response) =>
    {
        const texture = new cgp_texture_Texture(cgp, { "name": url });

        response.blob().then((blob) =>
        {
            createImageBitmap(blob).then((imgBitmap) =>
            {
                texture.initTexture(imgBitmap);
                if (onFinished)onFinished(texture);
                else console.log("Texture.load no onFinished callback");
            }).catch((err) =>
            {
                if (onFinished)onFinished(cgp.getErrorTexture());
            });
        });
    });
};

;// CONCATENATED MODULE: ./src/core/cgp/cgp_pipeline.js
/// <reference types="@webgpu/types" />





class Pipeline
{
    static TYPE_RENDER = 0;
    static TYPE_COMPUTE = 1;

    #log = new Logger("pipeline");
    name = "";

    /** @type {CgpContext} */
    #cgp = null;
    #isValid = true;

    /** @type {string} */
    presentationFormat = null;

    /** @type {GPURenderPipelineDescriptor} */
    #pipeCfg = null;

    /** @type {GPUBindGroupLayout} */
    bindGroupLayout = null;

    /** @type {Array<string>} */
    #shaderListeners = [];
    #type = -1;
    lastRebuildReason = "first";
    rebuildCount = 0;
    profile = false;

    /** @type {Array<GPUBindGroupLayoutEntry>} */
    bindingGroupLayoutEntries = [];

    /**
     * Description
     * @param {CgpContext} _cgp
     * @param {String} name
     * @param {Number} type
     */
    constructor(_cgp, name, type = 0)
    {
        if (!_cgp) throw new Error("Pipeline constructed without cgp " + name);
        this.name = name;
        this.#cgp = _cgp;
        this.#type = type;

        // this.#cgp.on("deviceChange", () =>
        // {
        //     this.#renderPipeline = null;
        // });
    }

    get passEncoder()
    {
        return this.#cgp.passEncoder;
    }

    get log()
    {
        return this.#log;
    }

    get cgp()
    {
        return this.#cgp;
    }

    get isValid() { return this.#isValid; }

    /**
     * @param {String} name
     */
    setName(name)
    {
        this.name = name;
    }

    // setShaderListener(oldShader, newShader)
    // {
    //     for (let i = 0; i < this.#shaderListeners.length; i++) oldShader.off(this.#shaderListeners[i]);
    //     this.#shaderListeners = [];
    //     this.#shaderListeners.push(
    //         newShader.on("compiled", (/** @type {string} */ reason) =>
    //         {
    //             this.needsRebuildReason = "shader compiled: " + reason || "???";
    //         }));
    // }

    getInfo()
    {
        const info = {
            "class": this.constructor.name,
            "name": this.name,
            "rebuildReason": this.lastRebuildReason,
            "rebuildCount": this.rebuildCount,
            // "numBindgroups": this.#bindingInstances.length,
            "bindingGroupLayoutEntries": this.bindingGroupLayoutEntries,
        };

        if (this.#type == Pipeline.TYPE_COMPUTE)info.type = "COMPUTE";
        if (this.#type == Pipeline.TYPE_RENDER)info.type = "RENDER";

        return info;
    }

    pushDebug()
    {
        this.#cgp.currentPipeDebug =
        {
            "name": this.name,
            "rebuildreason": this.lastRebuildReason,
            "rebuildCount": this.rebuildCount,
            "cfg": this.#pipeCfg,
            "bindingGroupLayoutEntries": this.bindingGroupLayoutEntries
        };
    }

    /**
     * @param {CgpShader} shader
     */
    _bindUniforms(shader)
    {
        shader.bind();
    }

    dispose()
    {
        // todo...
    }

}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_renderpipeline.js
/// <reference types="@webgpu/types" />






class RenderPipeline extends Pipeline
{
    static DEPTH_COMPARE_FUNCS_STRINGS = ["never", "less", "equal", "lessequal", "greater", "notequal", "greaterequal", "always"];

    #isValid = true;

    /** @type {string} */
    presentationFormat = null;

    /** @type {GPURenderPipelineDescriptor} */
    #pipeCfg = null;

    /** @type {GPURenderPipeline} */
    #renderPipeline = null;

    /** @type {GPUBindGroupLayout} */
    bindGroupLayout = null;

    /** @type {GPURenderPassEncoder} */
    #passEncoder;

    // #shaderListeners = [];
    #old = {};
    #type = RenderPipeline.TYPE_RENDER;
    lastRebuildReason = "first";
    #rebuildNumBindingGroups = false;
    #compileCount = -1;

    /**
     * Description
     * @param {CgpContext} _cgp
     * @param {String} name
     */
    constructor(_cgp, name)
    {
        super(_cgp, name, Pipeline.TYPE_RENDER);
    }

    /**
     * @param {CgpShader} shader
     * @param {CgpMesh} mesh
     */
    setPipeline(shader, mesh = null)
    {
        if (this.#type == RenderPipeline.TYPE_RENDER)
        {
            if (!mesh)
            {
                this.log.log("pipeline unknown mesh");
                return;
            }
        }
        if (!shader)
        {
            this.log.log("pipeline unknown shader");
            return;
        }

        if (this.cgp.branchProfiler) this.cgp.branchProfiler.push("setPipeline", this.name, { "info": this.getInfo(), "shader": shader.getInfo() });

        let needsRebuildReason = "";
        if (!this.#renderPipeline) needsRebuildReason = "no renderpipeline";
        if (!this.#pipeCfg)needsRebuildReason = "no pipecfg";
        if (this.#old.mesh != mesh)needsRebuildReason = "no mesh";
        if (this.#old.shader != shader)
        {
            // this.setShaderListener(this.#old.shader, shader);
            needsRebuildReason = "shader changed";
        }

        if (shader.needsPipelineUpdate)
        {
            needsRebuildReason = "shader needs update: " + shader.needsPipelineUpdate;
            shader.needsPipelineUpdate = "";
        }

        if (this.#type == RenderPipeline.TYPE_RENDER && mesh.needsPipelineUpdate)
        {
            needsRebuildReason = "mesh needs update";
            mesh.needsPipelineUpdate = false;
        }

        if (this.bindingGroupLayoutEntries.length != shader.defaultBindGroup.getLayoutEntries(shader).length)
        {
            needsRebuildReason = "num bindgroup layouts wrong...";
        }

        if (shader.bindingsNeedPipeUpdate())
        {
            console.log("binding needs uptate");
            needsRebuildReason = "bindings needs update";
            this.needsRebuildBindgroup = true;
        }

        // if (this.#rebuildNumBindingGroups)
        // {
        //     needsRebuildReason = "num bindgroups wrong...";
        // }

        if (this.#pipeCfg)
        {
            this.#pipeCfg =/** @type {GPURenderPipelineDescriptor} */ (this.#pipeCfg || {});
            if (this.#pipeCfg.depthStencil.depthWriteEnabled != this.cgp.stateDepthWrite())
                needsRebuildReason = "depth changed";

            if (this.#pipeCfg.fragment.targets[0].blend != this.cgp.stateBlend())
            {
                needsRebuildReason = "blend changed";
                this.#pipeCfg.fragment.targets[0].blend = this.cgp.stateBlend();
            }

            if (this.#pipeCfg.depthStencil.depthCompare != this.cgp.getDepthCompare())
                needsRebuildReason = "depth compare changed";

            if (this.#pipeCfg.primitive.cullMode != this.cgp.stateCullFaceFacing())
                needsRebuildReason = "cullmode change";

            if (this.#pipeCfg.multisample.count != this.cgp.stateMultisampling())
                needsRebuildReason = "multisample change";

        }
        if (this.#compileCount != shader.compileCount)
        {
            needsRebuildReason = "shader compiled " + shader.compileCount;
        }

        this.pushDebug();

        if (needsRebuildReason != "")
        {
            this.cgp.profileData.addHeavyEvent("pipeline created", this.name, needsRebuildReason);
            this.lastRebuildReason = needsRebuildReason;
            this.rebuildCount++;
            this.cgp.pushErrorScope("createPipeline", { "logger": this.log });

            this.#rebuildNumBindingGroups = false;

            this.#pipeCfg = this.getPipelineObject(shader);

            this.#old.device = this.cgp.device;
            this.#old.shader = shader;
            this.#old.mesh = mesh;
            this.#isValid = true;
            this.#compileCount = shader.compileCount;
            shader.pipelineUpdated();

            try
            {

                this.#renderPipeline = this.cgp.device.createRenderPipeline(this.#pipeCfg);

            }
            catch (e)
            {

                console.error("pipe error catch...", e.message, this.#pipeCfg);
                this.#isValid = false;
            }

            this.cgp.popErrorScope(
                () =>
                {
                    console.log("this.#pipeCfg", this.#pipeCfg);
                });
        }

        if (this.#renderPipeline && this.#isValid)
        {
            this.cgp.pushErrorScope("setpipeline", { "logger": this.log });

            let passEnc = this.cgp.passEncoder;

            // if (this.#type != RenderPipeline.TYPE_RENDER) passEnc = this.#passEncoder;

            if (this.cgp.branchProfiler) this.cgp.branchProfiler.push("pipe updateUniforms", this.name, { "shader": shader.getInfo() });

            /// ///////////////////

            shader.bind();
            passEnc.setPipeline(this.#renderPipeline);

            if (this.cgp.branchProfiler) this.cgp.branchProfiler.pop();

            this.cgp.popErrorScope();
        }
        if (this.cgp.branchProfiler) this.cgp.branchProfiler.pop();

    }

    /**
     * @param {CgpShader} shader
     * @returns {GPURenderPipelineDescriptor}
     */
    getPipelineObject(shader)
    {

        this.bindingGroupLayoutEntries = [];
        this.bindingGroupLayoutEntries = shader.defaultBindGroup.getLayoutEntries(shader);

        const bindGroupLayouts = [shader.defaultBindGroup.getLayout(shader)];

        /** @type {GPUPipelineLayout} */
        const pipelineLayout = this.cgp.device.createPipelineLayout({
            "label": "pipe layout " + this.name,
            "bindGroupLayouts": bindGroupLayouts
        });

        /** @type {Array<GPUVertexBufferLayout>} */
        let buffers = [
            // position
            {
                "arrayStride": 3 * 4, // 3 floats, 4 bytes each
                "attributes": [
                    { "shaderLocation": 0, "offset": 0, "format": "float32x3" },
                ],
            },
            // texcoords
            {
                "arrayStride": 2 * 4, // 2 floats, 4 bytes each
                "attributes": [
                    { "shaderLocation": 2, "offset": 0, "format": "float32x2", },
                ],
            },
            // normals
            {
                "arrayStride": 3 * 4, // 3 floats, 4 bytes each
                "attributes": [
                    { "shaderLocation": 1, "offset": 0, "format": "float32x3" },
                ],
            }];

        /** @type {GPURenderPipelineDescriptor} */
        let pipeCfg = {
            "label": this.name,
            "layout": pipelineLayout,

            "primitive": {
                "topology": "triangle-list",
                "cullMode": this.cgp.stateCullFaceFacing(), // back/none/front
            // "point-list",
            // "line-list",
            // "line-strip",
            // "triangle-list",
            // "triangle-strip"
            },
            "multisample": {
                "count": this.cgp.stateMultisampling(),
                "alphaToCoverageEnabled": false // Enable if using alpha testing
            },
            "depthStencil": {
                "depthWriteEnabled": this.cgp.stateDepthWrite(),
                "depthCompare": this.cgp.getDepthCompare(),
                "format": "depth24plus",

            },
            "vertex":
            {
                "module": shader.gpuShaderModule,
                "entryPoint": "myVSMain",
                "buffers": buffers
            },
            "fragment":
            {
                "module": shader.gpuShaderModule,
                "entryPoint": "myFSMain",
                "targets": [
                    {
                        "format": this.cgp.presentationFormat,
                        "blend": this.cgp.stateBlend()
                    },
                ],
            }
        };
        return pipeCfg;
    }

    dispose()
    {
        // todo...
    }

}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_mesh.js






class CgpMesh extends CgMesh
{
    #log = new Logger("cgl_mesh");
    needsPipelineUpdate = false;

    /**
     * @param {any} _cgp
     * @param {any} __geom
     */
    constructor(_cgp, __geom)
    {
        super();

        this.cgp = _cgp;
        this._geom = null;
        this.numIndex = 0;
        this.instances = 1;

        this._pipe = new RenderPipeline(this.cgp, "pipe mesh " + __geom.name);
        this._numNonIndexed = 0;
        this._positionBuffer = null;

        this._attributes = [];

        if (__geom) this.setGeom(__geom);
    }

    /**
     * @param {GPUDevice} device
     * @param {any} data
     * @param {any} usage
     */
    _createBuffer(device, data, usage)
    {
        let bo = {
            "size": data.byteLength,
            "usage": usage,
            "mappedAtCreation": true,
        };
        const buffer = device.createBuffer(bo);
        const dst = new data.constructor(buffer.getMappedRange());
        dst.set(data);
        buffer.unmap();
        return buffer;
    }

    /**
     * @function setGeom
     * @memberof Mesh
     * @instance
     * @description set geometry for mesh
     * @param {Geometry} geom geometry
     */
    setGeom(geom)
    {
        this.needsPipelineUpdate = true;
        this._geom = geom;
        this._disposeAttributes();

        this._positionBuffer = this._createBuffer(this.cgp.device, new Float32Array(geom.vertices), GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);

        let vi = geom.verticesIndices;
        if (!geom.isIndexed()) vi = Array.from(Array(geom.vertices.length / 3).keys());
        this._numIndices = vi.length;
        this._indicesBuffer = this._createBuffer(this.cgp.device, new Uint32Array(vi), GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST);

        if (geom.texCoords && geom.texCoords.length) this.setAttribute("texCoords", geom.texCoords, 2);
        if (geom.vertexNormals && geom.vertexNormals.length) this.setAttribute("normals", geom.vertexNormals, 3);

        this.setAttribute("normals", geom.vertexNormals, 3);
    }

    _disposeAttributes()
    {
        this.needsPipelineUpdate = true;
        for (let i = 0; i < this._attributes.length; i++) this._attributes[i].buffer.destroy();
        this._attributes.length = 0;
    }

    dispose()
    {
        this._disposeAttributes();
    }

    /**
     * @function setAttribute
     * @description update attribute
     * @memberof Mesh
     * @instance
     * @param {String} name attribute name
     * @param {Array} array data
     * @param {Number} itemSize
     * @param {Object} options
     */
    setAttribute(name, array, itemSize, options = {})
    {
        if (!array)
        {
            this.#log.error("mesh addAttribute - no array given! " + name);
            throw new Error();
        }

        let instanced = false;
        if (options.instanced) instanced = options.instanced;

        const buffer = this._createBuffer(this.cgp.device, new Float32Array(array), GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST);

        const attr = {
            "buffer": buffer,
            "name": name,
            "instanced": instanced,
        };
        this._attributes.push(attr);

        return attr;
    }

    /**
     * @param {CgpShader} shader
     */
    render(shader)
    {
        if (!this._positionBuffer) return;
        if (this.instances <= 0) return;

        if (this.cgp.branchProfiler) this.cgp.branchProfiler.push("mesh.render()", "geom " + this._geom.name);

        shader = shader || this.cgp.getShader();
        if (shader)shader.bind();

        if (!shader || !shader.isValid)
        {
            // this.status = "shader invalid";
            return;
        }

        this._pipe.setName("mesh.render " + this._geom.name + " " + shader.getName() + " " + shader.id);
        this._pipe.setPipeline(shader, this);

        if (this._pipe.isValid)
        {
            if (this.cgp.branchProfiler) this.cgp.branchProfiler.push("mesh.render().draw", "geom " + this._geom.name, {
                "geom": this._geom.getInfo(),
                "shader": shader.getInfo(),
                "numAttributes": this._attributes.length
            });

            this.cgp.passEncoder.setVertexBuffer(0, this._positionBuffer);
            for (let i = 0; i < this._attributes.length; i++)
                this.cgp.passEncoder.setVertexBuffer(i + 1, this._attributes[i].buffer);

            this.cgp.passEncoder.setIndexBuffer(this._indicesBuffer, "uint32");

            this.cgp.profileData.count("draw mesh", this._name);
            if (this._numNonIndexed)
                this.cgp.passEncoder.draw(this._numIndices, this.instances);
            else
                this.cgp.passEncoder.drawIndexed(this._numIndices, this.instances);

            if (this.cgp.branchProfiler) this.cgp.branchProfiler.pop();
        }
        else
        {
            if (this.cgp.branchProfiler)
            {
                this.cgp.branchProfiler.push("mesh invalid pipeline ", "geom " + this._geom.name);
                this.cgp.branchProfiler.pop();
            }
        }

        if (this.cgp.branchProfiler) this.cgp.branchProfiler.pop();

        // if (shader)shader.unbind();
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_state.js












// https://github.com/greggman/webgpu-utils
// https://developer.chrome.com/blog/from-webgl-to-webgpu/
// https://gpuweb.github.io/gpuweb/explainer/

/**
 * cables webgpu context/state manager
 * @class
 * @namespace external:CGP
 * @hideconstructor
 */
class CgpContext extends CgContext
{

    branchProfiler = null;

    /**
     * @param {Patch} _patch
     */
    constructor(_patch)
    {
        super(_patch);
        this.patch = _patch;

        this.lastErrorMsg = "";

        this._log = new Logger("WebGpuContext");
        this.gApi = CgContext.API_WEBGPU;
        this._viewport = [0, 0, 256, 256];
        this._shaderStack = [];
        this._simpleShader = null;
        this.frame = 0;
        this.catchErrors = true;

        this._stackCullFaceFacing = [];
        this._stackDepthTest = [];
        this._stackCullFace = [];
        this._stackDepthFunc = [];
        this._stackDepthWrite = [];
        this._stackErrorScope = [];
        this._stackBlend = [];
        this._stackErrorScopeLogs = [];
        this._stackMultisampling = [];

        this.currentPipeDebug = null;
        this.canvasAttachments = [];

        /** @type {GPUDevice} */
        this.device = null;

        /** @type {GPURenderPassEncoder} */
        this.passEncoder = null;

        this._defaultBlend = {
            "color": {
                "operation": "add",
                "srcFactor": "one",
                "dstFactor": "zero",
            },
            "alpha": {
                "operation": "add",
                "srcFactor": "one",
                "dstFactor": "zero",
            },
        };

        this.DEPTH_FUNCS = [
            "never",
            "always",
            "less",
            "less-equal",
            "greater",
            "greater-equal",
            "equal",
            "not-equal"
        ];

        this.CULL_MODES = [
            "none",
            "back",
            "front",
            "none" // both does not exist in webgpu
        ];

        /** @type {GPUTextureFormat} */
        this.presentationFormat = "bgra8unorm";
    }

    get supported()
    {
        return !!navigator.gpu;
    }

    /// ////////////////////

    /**
     * Description
     * @param {any} cgp
     * @param {any} identTranslate
     * @param {any} identTranslateView
     * @returns {any}
     */
    renderStart(cgp, identTranslate, identTranslateView)
    {

        this.frame++;
        this.pushErrorScope("cgpstate internal", { "scope": "internal" });
        this.pushErrorScope("cgpstate out-of-memory", { "scope": "out-of-memory" });

        if (!this._simpleShader)
        {
            this._simpleShader = new CgpShader(this, "simple default shader");
            this._simpleShader.setSource(cgp_shader_default);

            this._simpleShader.addUniform(new CgpUniform(this._simpleShader, "4f", "color", [1, 1, 0, 1]), GPUShaderStage.FRAGMENT);
        }

        this.fpsCounter.startFrame();

        this._startMatrixStacks(identTranslate, identTranslateView);
        this.setViewPort(0, 0, this.canvasWidth, this.canvasHeight);

        this.pushShader(this._simpleShader);
        this.pushDepthTest(true);
        this.pushDepthWrite(true);
        this.pushDepthFunc("less-equal");

        this.pushBlend(this._defaultBlend);

        this._execOneTimeCallbacks();

        this.emitEvent("beginFrame");
    }

    renderEnd()
    {
        this._endMatrixStacks();

        this.popShader();
        this.popDepthFunc();
        this.popDepthWrite();
        this.popDepthTest();

        this.popErrorScope();
        this.popErrorScope();

        if (this._stackErrorScope.length > 0)console.log("error scope stack length invalid...");
        this._stackErrorScope.length = 0;

        this.emitEvent("endFrame");
        this.fpsCounter.endFrame();
    }

    /**
     * @param {number} x
     * @param {number} [y]
     * @param {undefined} [w]
     * @param {undefined} [h]
     */
    setViewPort(x, y, w, h)
    {
        this._viewport = [x, y, w, h];
    }

    /**
     * @function getViewPort
     * @memberof Context
     * @instance
     * @description get current gl viewport
     * @returns {Array} array [x,y,w,h]
     */
    getViewPort()
    {
        return this._viewPort;
    }

    /**
     * @param {Geometry} geom
     * @param {any} glPrimitive
     * @returns {CgpMesh}
     */
    createMesh(geom, glPrimitive)
    {
        return new CgpMesh(this, geom);
    }

    /**
     * @function popViewPort
     * @memberof Context
     * @instance
     * @description pop viewPort stack
     */
    popViewPort()
    {
        this._viewPortStack.pop();

        if (this._viewPortStack.length == 0)
            this._viewPort = [0, 0, this.canvasWidth, this.canvasHeight];
        else
            this.setViewPort(this._viewPortStack[this._viewPort.length - 1]);
    }

    /**
     * @function pushViewPort
     * @memberof Context
     * @instance
     * @description push a new viewport onto stack
     * @param {Number} x
     * @param {Number} y
     * @param {Number} w
     * @param {Number} h
     */

    pushViewPort(x, y, w, h)
    {
        this._viewPortStack.push([x, y, w, h]);
        this._viewPort = [x, y, w, h];
    }

    /**
     * push a shader to the shader stack
     * @function pushShader
     * @memberof Context
     * @instance
     * @param {Object} shader
     * @function
    */
    pushShader(shader)
    {
        this._shaderStack.push(shader);
        // currentShader = shader;
    }

    /**
     * pop current used shader from shader stack
     * @function popShader
     * @memberof Context
     * @instance
     * @function
     */
    popShader()
    {
        if (this._shaderStack.length === 0) throw new Error("Invalid shader stack pop!");
        this._shaderStack.pop();
        // currentShader = this._shaderStack[this._shaderStack.length - 1];
    }

    getShader()
    {
        return this._shaderStack[this._shaderStack.length - 1];
    }

    /**
     * @param {GPUDevice} device
     */
    setDevice(device)
    {
        this.device = device;

        if (this._emptyTexture) this._emptyTexture = this._emptyTexture.dispose();
        if (this._defaultTexture) this._defaultTexture = this._defaultTexture.dispose();
        if (this._errorTexture) this._errorTexture = this._errorTexture.dispose();

        this.emitEvent("deviceChange");
    }

    /**
     * @typedef ErrorScopeOptions
     * @property {Logger} [logger]
     * @property {GPUErrorFilter} [scope]
    */

    /**
     * @param {String} name
     * @param {ErrorScopeOptions} options
     */
    pushErrorScope(name, options = { })
    {
        if (this.catchErrors)
        {
            this._stackErrorScope.push(name);
            this._stackErrorScopeLogs.push(options.logger || null);
            this.device.pushErrorScope(options.scope || "validation");
        }
    }

    /**
     * @param {Function} [cb]
     */
    popErrorScope(cb)
    {
        if (this.catchErrors)
        {
            const name = this._stackErrorScope.pop();
            const logger = this._stackErrorScopeLogs.pop();
            this.device.popErrorScope().then((error) =>
            {
                if (error)
                {
                    if (this.lastErrorMsg == error.message)
                    {
                        // this._log.warn("last error once more...");
                    }
                    else
                    {
                        (logger || this._log).error(error.constructor.name, "in ERROR SCOPE:", name);
                        (logger || this._log).error(error.message);
                    }
                    this.lastErrorMsg = error.message;

                    if (cb)cb(error);
                }
            });
        }
    }

    /**
     * push depth testing enabled state
     * @function pushDepthTest
     * @param {Boolean} b enabled
     * @memberof Context
     * @instance
     */
    pushDepthTest(b)
    {
        this._stackDepthTest.push(b);
    }

    getDepthCompare()
    {
        let depthComp = this.stateDepthFunc();
        if (!this.stateDepthTest())depthComp = "always";
        return depthComp;
    }

    /**
     * current state of depth testing
     * @function stateDepthTest
     * @returns {Boolean} enabled
     * @memberof Context
     * @instance
     */
    stateDepthTest()
    {
        return this._stackDepthTest[this._stackDepthTest.length - 1];
    }

    /**
     * pop depth testing state
     * @function popDepthTest
     * @memberof Context
     * @instance
     */
    popDepthTest()
    {
        this._stackDepthTest.pop();
    }

    // --------------------------------------
    // state depthwrite

    /**
     * push depth write enabled state
     * @function pushDepthWrite
     * @param {Boolean} b enabled
     * @memberof Context
     * @instance
     */
    pushDepthWrite(b)
    {
        b = b || false;
        this._stackDepthWrite.push(b);
    }

    /**
     * current state of depth writing
     * @returns {Boolean} enabled
     * @memberof Context
     * @instance
     */
    stateDepthWrite()
    {
        return this._stackDepthWrite[this._stackDepthWrite.length - 1];
    }

    /**
     * pop depth writing state
     * @memberof Context
     * @instance
     */
    popDepthWrite()
    {
        this._stackDepthWrite.pop();
    }

    // --------------------------------------
    // state depthfunc

    /**
     * @function pushDepthFunc
     * @memberof Context
     * @instance
     * @param {GPUCompareFunction} depthFunc depth compare func
     */
    pushDepthFunc(depthFunc)
    {
        this._stackDepthFunc.push(depthFunc);
    }

    /**
     * @function stateDepthFunc
     * @memberof Context
     * @instance
     * @returns {GPUCompareFunction}
     */
    stateDepthFunc()
    {
        if (this._stackDepthFunc.length > 0) return this._stackDepthFunc[this._stackDepthFunc.length - 1];
        return "less";
    }

    /**
     * pop depth compare func
     * @function popDepthFunc
     * @memberof Context
     * @instance
     */
    popDepthFunc()
    {
        this._stackDepthFunc.pop();
    }

    // --------------------------------------
    // state CullFace

    /**
     * push face culling face enabled state
     * @function pushCullFace
     * @param {Boolean} b enabled
     * @memberof Context
     * @instance
     */
    pushCullFace(b)
    {
        this._stackCullFace.push(b);
    }

    // --------------------------------------
    // state multisambling
    /**
     * @returns {number}
     */
    stateMultisampling()
    {
        return this._stackMultisampling[this._stackMultisampling.length - 1];
    }

    /**
     * @param {number} samples
     */
    pushMultisampling(samples)
    {
        this._stackMultisampling.push(samples);
    }

    popMultisampling()
    {
        this._stackMultisampling.pop();
    }

    // --------------------------------------
    // state CullFace Facing

    /**
     * push face culling face side
     * @param {string} b
     * @instance
     */
    pushCullFaceFacing(b)
    {
        this._stackCullFaceFacing.push(b);
    }

    /**
     * current state of face culling side
     * @returns {string}
     */
    stateCullFaceFacing()
    {
        return this._stackCullFaceFacing[this._stackCullFaceFacing.length - 1];
    }

    /**
     * pop face culling face side
     * @function popCullFaceFacing
     * @memberof Context
     * @instance
     */
    popCullFaceFacing()
    {
        this._stackCullFaceFacing.pop();
    }

    pushBlend(b)
    {
        this._stackBlend.push(b);
    }

    popBlend()
    {
        this._stackBlend.pop();
    }

    /**
     * @returns {GPUBlendComponent}
     */
    stateBlend()
    {
        return this._stackBlend[this._stackBlend.length - 1];
    }

    getEmptyTexture()
    {
        if (this._emptyTexture) return this._emptyTexture;
        const size = 8;
        this._emptyTexture = new cgp_texture_Texture(this, {});
        this._emptyTexture.initFromData(CgTexture.getDefaultTextureData("empty", size), size, size);
        return this._emptyTexture;
    }

    getErrorTexture()
    {
        // if (this._errorTexture) return this._errorTexture;
        const size = 256;
        this._errorTexture = new cgp_texture_Texture(this, {});
        this._errorTexture.initFromData(CgTexture.getDefaultTextureData("stripes", size, { "r": 1, "g": 0, "b": 0 }), size, size);
        return this._errorTexture;
    }

    getDefaultTexture()
    {
        if (this._defaultTexture) return this._defaultTexture;
        const size = 256;
        this._defaultTexture = new cgp_texture_Texture(this, {});
        this._defaultTexture.initFromData(CgTexture.getDefaultTextureData("stripes", size), size, size);
        return this._defaultTexture;
    }

    /**
     * @param {function} cb
     * @param {boolean} _doScreenshotClearAlpha
     * @param {string} mimeType
     * @param {number} quality
     */
    screenShot(cb, _doScreenshotClearAlpha, mimeType, quality)
    {
        if (this.canvas && this.canvas.toBlob)
        {
            this.canvas.toBlob((blob) =>
            {
                if (cb) cb(blob);
                else this._log.log("no screenshot callback...");
            }, mimeType, quality);
        }

    }

}

;// CONCATENATED MODULE: ./src/core/cg/cg_boundingbox.js








/**
 * bounding box
 *
 * @namespace external:CGL
 * @param {Geometry} geometry or bounding box
 */
class BoundingBox
{

    /**
     * @param {Geometry} geom
     */
    constructor(geom)
    {
        this._init();
        this._first = true;
        this._wireMesh = null;

        if (geom) this.apply(geom);
    }

    _init()
    {
        this._max = [-0, -0, -0];
        this._min = [0, 0, 0];
        this._center = [0, 0, 0];
        this._size = [0, 0, 0];
        this._maxAxis = 0.0;
        this._first = true;
    }

    /**
     * get biggest number of maxX,maxY,maxZ
     * @type {Number}
     */
    get maxAxis() { return this._maxAxis || 1; }

    /**
     * size of bounding box
     * @type {vec3}
     */
    get size() { return this._size; }

    /**
     * center of bounding box
     * @type {vec3}
     */
    get center() { return this._center; }

    /**
     * center x
     * @type {Number}
     */
    get x() { return this._center[0]; }

    /**
     * center y
     * @type {Number}
     */
    get y() { return this._center[1]; }

    /**
     * center z
     * @type {Number}
     */
    get z() { return this._center[2]; }

    /**
     * minimum x
     * @type {Number}
     */
    get minX() { return this._min[0]; }

    /**
     * minimum y
     * @type {Number}
     */
    get minY() { return this._min[1]; }

    /**
     * minimum z
     * @type {Number}
     */
    get minZ() { return this._min[2]; }

    /**
     * maximum x
     * @type {Number}
     */
    get maxX() { return this._max[0]; }

    /**
     * maximum y
     * @type {Number}
     */
    get maxY() { return this._max[1]; }

    /**
     * maximum z
     * @type {Number}
     */
    get maxZ() { return this._max[2]; }

    /**
     * @param {Geometry} geom
     */
    apply(geom)
    {
        if (!geom) return;

        if (geom instanceof BoundingBox)
        {
            const bb = geom;

            this.applyPos(bb.maxX, bb.maxY, bb.maxZ);
            this.applyPos(bb.minX, bb.minY, bb.minZ);
        }
        else
        {
            for (let i = 0; i < geom.vertices.length; i += 3)
                this.applyPos(geom.vertices[i], geom.vertices[i + 1], geom.vertices[i + 2]);
        }
        this.calcCenterSize();
    }

    /**
     * returns a copy of the bounding box
     * @function copy
     * @memberof BoundingBox
     * @instance
     */
    copy()
    {
        return new BoundingBox(this);
    }

    get changed()
    {
        return !(this._max[0] == -Number.MAX_VALUE && this._max[1] == -Number.MAX_VALUE && this._max[2] == -Number.MAX_VALUE);
    }

    /**
     * @param {number} x
     * @param {number} y
     * @param {number} z
     */
    applyPos(x, y, z)
    {
        if (x == Number.MAX_VALUE || x == -Number.MAX_VALUE ||
            y == Number.MAX_VALUE || y == -Number.MAX_VALUE ||
            z == Number.MAX_VALUE || z == -Number.MAX_VALUE) return;

        if (!CABLES.isNumeric(x) || !CABLES.isNumeric(y) || !CABLES.isNumeric(z)) return;

        if (this._first)
        {
            this._max[0] = x;
            this._max[1] = y;
            this._max[2] = z;

            this._min[0] = x;
            this._min[1] = y;
            this._min[2] = z;
            this._first = false;
            return;
        }

        this._max[0] = Math.max(this._max[0], x);
        this._max[1] = Math.max(this._max[1], y);
        this._max[2] = Math.max(this._max[2], z);

        this._min[0] = Math.min(this._min[0], x);
        this._min[1] = Math.min(this._min[1], y);
        this._min[2] = Math.min(this._min[2], z);
    }

    calcCenterSize()
    {
        if (this._first) return;

        this._size[0] = this._max[0] - this._min[0];
        this._size[1] = this._max[1] - this._min[1];
        this._size[2] = this._max[2] - this._min[2];

        this._center[0] = (this._min[0] + this._max[0]) / 2;
        this._center[1] = (this._min[1] + this._max[1]) / 2;
        this._center[2] = (this._min[2] + this._max[2]) / 2;

        this._maxAxis = Math.max(this._size[2], Math.max(this._size[0], this._size[1]));
    }

    /**
     * @param {mat4} m
     */
    mulMat4(m)
    {
        if (this._first)
        {
            this._max[0] = 0;
            this._max[1] = 0;
            this._max[2] = 0;

            this._min[0] = 0;
            this._min[1] = 0;
            this._min[2] = 0;
            this._first = false;
        }
        transformMat4(this._max, this._max, m);
        transformMat4(this._min, this._min, m);
        this.calcCenterSize();
    }

    /**
     * @param {CglContext} cgl
     * @param {Shader} _shader
     * @param {Op} op
     */
    render(cgl, _shader, op)
    {
        if (!this._wireMesh) this._wireMesh = new CGL.WireCube(cgl);

        cgl.pushModelMatrix();
        mat4_translate(cgl.mMatrix, cgl.mMatrix, this._center);

        if (CABLES.UI && op)
        {
            CABLES.UI.OverlayMeshes.drawCube(op, this._size[0] / 2, this._size[1] / 2, this._size[2] / 2);
        }

        cgl.popModelMatrix();
    }
}

;// CONCATENATED MODULE: ./src/core/cg/cg_geom.js




/**
 * a geometry contains all information about a mesh, vertices, texturecoordinates etc. etc.
 * @param {String} name
 * @example
 * // create a triangle with all attributes
 * const geom=new Geometry("triangle"),
 *
 * geom.vertices = [
 *      0.0,           sizeH.get(),  0.0,
 *     -sizeW.get(),  -sizeH.get(),  0.0,
 *      sizeW.get(),  -sizeH.get(),  0.0 ];
 *
 * geom.vertexNormals = [
 *      0.0,  0.0,  1.0,
 *      0.0,  0.0,  1.0,
 *      0.0,  0.0,  1.0 ];
 *
 * geom.tangents = [
 *     1,0,0,
 *     1,0,0,
 *     1,0,0 ];
 *
 * geom.biTangents = [
 *     0,1,0,
 *     0,1,0,
 *     0,1,0 ];
 *
 * geom.texCoords = [
 *      0.5,  0.0,
 *      1.0,  1.0,
 *      0.0,  1.0, ];
 *
 * geom.verticesIndices = [
 *     0, 1, 2 ];
 *
 */

class Geometry
{

    /**
     * @param {String} name
    */
    constructor(name)
    {
        this.name = name || "unknown";
        this._log = new Logger("cgl_geometry");

        this.faceVertCount = 3;
        this.glPrimitive = null;
        this._attributes = {};

        /** @type {Array|Float32Array} */
        this._vertices = [];

        /** @type {Array} */
        this.verticesIndices = [];

        this.isGeometry = true;

        this.morphTargets = [];
    }

    get vertices()
    {
        return this._vertices;
    }

    set vertices(v)
    {
        this.setVertices(v);
    }

    get texCoords()
    {
        const att = this.getAttribute("texCoords");
        if (!att) return [];
        return att.data;
    }

    set texCoords(v)
    {
        this.setAttribute("texCoords", v, 2);
    }

    get vertexNormals()
    {
        const att = this.getAttribute("vertexNormals");
        if (!att) return [];
        return att.data;
    }

    set vertexNormals(v)
    {
        this.setAttribute("vertexNormals", v, 3);
    }

    get tangents()
    {
        const att = this.getAttribute("tangents");
        if (!att) return [];
        return att.data;
    }

    set tangents(v)
    {
        this.setAttribute("tangents", v, 3);
    }

    get biTangents()
    {
        const att = this.getAttribute("biTangents");
        if (!att) return [];
        return att.data;
    }

    set biTangents(v)
    {
        this.setAttribute("biTangents", v, 3);
    }

    get vertexColors()
    {
        const att = this.getAttribute("vertexColors");
        if (!att) return [];
        return att.data;
    }

    set vertexColors(v)
    {
        this.setAttribute("vertexColors", v, 4);
    }

    /**
     * @description clear all buffers/set them to length 0
     */
    clear()
    {
        this._vertices = new Float32Array([]);
        this.verticesIndices = [];
        this.texCoords = new Float32Array([]);
        this.vertexNormals = new Float32Array([]);
        this.tangents = [];
        this.biTangents = [];
        this._attributes = {};
    }

    /**
    * @return {Object} returns array of attribute objects
    */
    getAttributes()
    {
        return this._attributes;
    }

    /**
     * @function getAttribute
     * @memberof Geometry
     * @instance
     * @param {String} name
     * @return {Object}
     */
    getAttribute(name)
    {
        for (const i in this._attributes)
        {
            if (this._attributes[i].name == name) return this._attributes[i];
        }
        return null;
    }

    /**
     * @function setAttribute
     * @description create an attribute
     * @memberof Geometry
     * @instance
     * @param {String} name
     * @param {Array} arr
     * @param {Number} itemSize
     */
    setAttribute(name, arr, itemSize)
    {
        let attrType = "";
        if (!itemSize || itemSize > 4)
        {
            this._log.warn("itemsize wrong?", itemSize, name);
            this._log.stack("itemsize");

            itemSize = 3;
        }

        if (itemSize == 1) attrType = "float";
        else if (itemSize == 2) attrType = "vec2";
        else if (itemSize == 3) attrType = "vec3";
        else if (itemSize == 4) attrType = "vec4";

        const attr = {
            "name": name,
            "data": arr,
            "itemSize": itemSize,
            "type": attrType,
        };

        this._attributes[name] = attr;
    }

    /**
     * @param {string} name
     * @param {Geometry} newgeom
     */
    copyAttribute(name, newgeom)
    {
        const attr = this.getAttribute(name);
        newgeom.setAttribute(name, new Float32Array(attr.data), attr.itemSize);
    }

    /**
     * @function setVertices
     * @memberof Geometry
     * @instance
     * @description set vertices
     * @param {Array|Float32Array} arr [x,y,z,x,y,z,...]
     */
    setVertices(arr)
    {
        if (arr instanceof Float32Array) this._vertices = arr;
        else this._vertices = new Float32Array(arr);
    }

    /**
     * set texcoords
     * @param {Array|Float32Array} arr [u,v,u,v,...]
     */
    setTexCoords(arr)
    {
        if (arr instanceof Float32Array) this.texCoords = arr;
        else this.texCoords = new Float32Array(arr);
    }

    // deprecated
    calcNormals(smooth)
    {
        const options = { "smooth": smooth };
        this.calculateNormals(options);
    }

    /**
     * @param {number} x
     * @param {number} y
     * @param {number} z
     */
    flipNormals(x, y, z)
    {
        let vec = vec3_create();

        if (x == undefined)x = 1;
        if (y == undefined)y = 1;
        if (z == undefined)z = 1;

        for (let i = 0; i < this.vertexNormals.length; i += 3)
        {
            vec3_set(vec,
                this.vertexNormals[i + 0],
                this.vertexNormals[i + 1],
                this.vertexNormals[i + 2]);

            vec[0] *= -x;
            vec[1] *= -y;
            vec[2] *= -z;

            normalize(vec, vec);

            this.vertexNormals[i + 0] = vec[0];
            this.vertexNormals[i + 1] = vec[1];
            this.vertexNormals[i + 2] = vec[2];
        }
    }

    getNumTriangles()
    {
        if (this.verticesIndices && this.verticesIndices.length) return this.verticesIndices.length / 3;
        return this.vertices.length / 3;
    }

    /**
     * flip order of vertices in geom faces
     */
    flipVertDir()
    {
        const newInd = [];
        newInd.length = this.verticesIndices.length;
        for (let i = 0; i < this.verticesIndices.length; i += 3)
        {
            newInd[i] = this.verticesIndices[i + 2];
            newInd[i + 1] = this.verticesIndices[i + 1];
            newInd[i + 2] = this.verticesIndices[i];
        }
        this.verticesIndices = newInd;
    }

    /**
     * @param {Array} verts
     */
    setPointVertices(verts)
    {
        if (verts.length % 3 !== 0)
        {
            this._log.error("SetPointVertices: Array must be multiple of three.");
            return;
        }

        if (!(verts instanceof Float32Array)) this.vertices = new Float32Array(verts);
        else this.vertices = verts;

        if (!(this.texCoords instanceof Float32Array)) this.texCoords = new Float32Array((verts.length / 3) * 2);

        // this.texCoords.length=verts.length/3*2;
        this.verticesIndices.length = verts.length / 3;
        // this.verticesIndices=[];

        for (let i = 0; i < verts.length / 3; i++)
        {
            this.verticesIndices[i] = i;
            this.texCoords[i * 2] = 0;
            this.texCoords[i * 2 + 1] = 0;
        }
    }

    /**
     * merge a different geometry into the this geometry
     * @param {Geometry} geom
     */
    merge(geom)
    {
        if (!geom) return;

        if (this.isIndexed() != geom.isIndexed())
        {
            if (this.isIndexed())
            {
                this.unIndex(false, true);
            }
            if (geom.isIndexed())
            {
                const g = geom.copy();
                g.unIndex(false, true);
                geom = g;
            }
        }

        const oldIndizesLength = this.verticesIndices.length;
        const vertLength = this._vertices.length / 3;

        this.verticesIndices.length += geom.verticesIndices.length;
        for (let i = 0; i < geom.verticesIndices.length; i++)
            this.verticesIndices[oldIndizesLength + i] = geom.verticesIndices[i] + vertLength;

        this.vertices = CABLES.float32Concat(this._vertices, geom.vertices);
        this.texCoords = CABLES.float32Concat(this.texCoords, geom.texCoords);
        this.vertexNormals = CABLES.float32Concat(this.vertexNormals, geom.vertexNormals);
        this.tangents = CABLES.float32Concat(this.tangents, geom.tangents);
        this.biTangents = CABLES.float32Concat(this.biTangents, geom.biTangents);
    }

    /**
     *   a copy of the geometry
     * @function copy
     * @memberof Geometry
     * @instance
     */
    copy()
    {
        const geom = new Geometry(this.name + " copy");
        geom.faceVertCount = this.faceVertCount;
        geom.glPrimitive = this.glPrimitive;

        geom.setVertices(this._vertices.slice(0));

        if (this.verticesIndices)
        {
            geom.verticesIndices.length = this.verticesIndices.length;
            for (let i = 0; i < this.verticesIndices.length; i++) geom.verticesIndices[i] = this.verticesIndices[i];
        }

        for (let i in this._attributes) this.copyAttribute(i, geom);

        geom.morphTargets.length = this.morphTargets.length;
        for (let i = 0; i < this.morphTargets.length; i++) geom.morphTargets[i] = this.morphTargets[i];

        return geom;
    }

    /**
     * Calculaten normals
     * @function calculateNormals
     * @param {{ smooth?: any; forceZUp?: any; }} options
     */
    calculateNormals(options = null)
    {
        // todo: should check angle of normals to get edges    https://community.khronos.org/t/calculating-accurate-vertex-normals/28152
        options = options || {};
        if (options.smooth === false) this.unIndex();

        const u = vec3_create();
        const v = vec3_create();
        const n = vec3_create();

        function calcNormal(triangle)
        {
            vec3_subtract(u, triangle[0], triangle[1]);
            vec3_subtract(v, triangle[0], triangle[2]);
            cross(n, u, v);
            normalize(n, n);

            if (options && options.forceZUp)
            {
                if (n[2] < 0)
                {
                    n[0] *= -1;
                    n[1] *= -1;
                    n[2] *= -1;
                }
            }
            return n;
        }

        this.getVertexVec = function (which)
        {
            const vec = [0, 0, 0];
            vec[0] = this.vertices[which * 3 + 0];
            vec[1] = this.vertices[which * 3 + 1];
            vec[2] = this.vertices[which * 3 + 2];
            return vec;
        };

        if (!(this.vertexNormals instanceof Float32Array) || this.vertexNormals.length != this.vertices.length) this.vertexNormals = new Float32Array(this.vertices.length);

        for (let i = 0; i < this.vertices.length; i++)
        {
            this.vertexNormals[i] = 0;
        }

        if (!this.isIndexed())
        {
            const norms = [];
            for (let i = 0; i < this.vertices.length; i += 9)
            {
                const triangle = [[this.vertices[i + 0], this.vertices[i + 1], this.vertices[i + 2]], [this.vertices[i + 3], this.vertices[i + 4], this.vertices[i + 5]], [this.vertices[i + 6], this.vertices[i + 7], this.vertices[i + 8]]];
                const nn = calcNormal(triangle);
                norms.push(nn[0], nn[1], nn[2], nn[0], nn[1], nn[2], nn[0], nn[1], nn[2]);
            }
            this.vertexNormals = norms;
        }
        else
        {
            const faceNormals = [];

            faceNormals.length = Math.floor(this.verticesIndices.length / 3);

            for (let i = 0; i < this.verticesIndices.length; i += 3)
            {
                const triangle = [this.getVertexVec(this.verticesIndices[i + 0]), this.getVertexVec(this.verticesIndices[i + 1]), this.getVertexVec(this.verticesIndices[i + 2])];

                faceNormals[i / 3] = calcNormal(triangle);

                this.vertexNormals[this.verticesIndices[i + 0] * 3 + 0] += faceNormals[i / 3][0];
                this.vertexNormals[this.verticesIndices[i + 0] * 3 + 1] += faceNormals[i / 3][1];
                this.vertexNormals[this.verticesIndices[i + 0] * 3 + 2] += faceNormals[i / 3][2];

                this.vertexNormals[this.verticesIndices[i + 1] * 3 + 0] += faceNormals[i / 3][0];
                this.vertexNormals[this.verticesIndices[i + 1] * 3 + 1] += faceNormals[i / 3][1];
                this.vertexNormals[this.verticesIndices[i + 1] * 3 + 2] += faceNormals[i / 3][2];

                this.vertexNormals[this.verticesIndices[i + 2] * 3 + 0] += faceNormals[i / 3][0];
                this.vertexNormals[this.verticesIndices[i + 2] * 3 + 1] += faceNormals[i / 3][1];
                this.vertexNormals[this.verticesIndices[i + 2] * 3 + 2] += faceNormals[i / 3][2];
            }

            for (let i = 0; i < this.verticesIndices.length; i += 3) // faces
            {
                for (let k = 0; k < 3; k++) // triangles
                {
                    const vv = [this.vertexNormals[this.verticesIndices[i + k] * 3 + 0], this.vertexNormals[this.verticesIndices[i + k] * 3 + 1], this.vertexNormals[this.verticesIndices[i + k] * 3 + 2]];
                    normalize(vv, vv);
                    this.vertexNormals[this.verticesIndices[i + k] * 3 + 0] = vv[0];
                    this.vertexNormals[this.verticesIndices[i + k] * 3 + 1] = vv[1];
                    this.vertexNormals[this.verticesIndices[i + k] * 3 + 2] = vv[2];
                }
            }
        }
    }

    /**
     * Calculates tangents & bitangents with the help of uv-coordinates. Adapted from
     * Lengyel, Eric. “Computing Tangent Space Basis Vectors for an Arbitrary Mesh”.
     * Terathon Software 3D Graphics Library.
     * https://fenix.tecnico.ulisboa.pt/downloadFile/845043405449073/Tangent%20Space%20Calculation.pdf
     *
     * @function calcTangentsBitangents
     */
    calcTangentsBitangents()
    {
        if (!this.vertices.length)
        {
            // this._log.error("Cannot calculate tangents/bitangents without vertices.");
            return;
        }
        if (!this.vertexNormals.length)
        {
            // this._log.error("Cannot calculate tangents/bitangents without normals.");
            return;
        }
        if (!this.texCoords.length)
        {
            const texCoordLength = (this.vertices.length / 3) * 2;
            this.texCoords = new Float32Array(texCoordLength);
            for (let i = 0; i < texCoordLength; i += 1) this.texCoords[i] = 0;
        }
        if (!this.verticesIndices || !this.verticesIndices.length)
        {
            // this._log.error("Cannot calculate tangents/bitangents without vertex indices.");
            return;
        }
        // this code assumes that we have three indices per triangle
        if (this.verticesIndices.length % 3 !== 0)
        {
            this._log.error("Vertex indices mismatch!");
            return;
        }

        const triangleCount = this.verticesIndices.length / 3;
        const vertexCount = this.vertices.length / 3;

        this.tangents = new Float32Array(this.vertexNormals.length);
        this.biTangents = new Float32Array(this.vertexNormals.length);

        // temporary buffers
        const tempVertices = [];
        tempVertices.length = vertexCount * 2;
        const v1 = vec3_create();
        const v2 = vec3_create();
        const v3 = vec3_create();

        const w1 = vec2_create();
        const w2 = vec2_create();
        const w3 = vec2_create();

        const sdir = vec3_create();
        const tdir = vec3_create();

        // for details on calculation, see article referenced above
        for (let tri = 0; tri < triangleCount; tri += 1)
        {
            // indices of the three vertices for a triangle
            const i1 = this.verticesIndices[tri * 3];
            const i2 = this.verticesIndices[tri * 3 + 1];
            const i3 = this.verticesIndices[tri * 3 + 2];

            // vertex position as vec3
            vec3_set(v1, this.vertices[i1 * 3], this.vertices[i1 * 3 + 1], this.vertices[i1 * 3 + 2]);
            vec3_set(v2, this.vertices[i2 * 3], this.vertices[i2 * 3 + 1], this.vertices[i2 * 3 + 2]);
            vec3_set(v3, this.vertices[i3 * 3], this.vertices[i3 * 3 + 1], this.vertices[i3 * 3 + 2]);

            // texture coordinate as vec2
            vec2_set(w1, this.texCoords[i1 * 2], this.texCoords[i1 * 2 + 1]);
            vec2_set(w2, this.texCoords[i2 * 2], this.texCoords[i2 * 2 + 1]);
            vec2_set(w3, this.texCoords[i3 * 2], this.texCoords[i3 * 2 + 1]);

            const x1 = v2[0] - v1[0];
            const x2 = v3[0] - v1[0];
            const y1 = v2[1] - v1[1];
            const y2 = v3[1] - v1[1];
            const z1 = v2[2] - v1[2];
            const z2 = v3[2] - v1[2];

            const s1 = w2[0] - w1[0];
            const s2 = w3[0] - w1[0];
            const t1 = w2[1] - w1[1];
            const t2 = w3[1] - w1[1];

            const r = 1.0 / (s1 * t2 - s2 * t1);

            vec3_set(sdir, (t2 * x1 - t1 * x2) * r, (t2 * y1 - t1 * y2) * r, (t2 * z1 - t1 * z2) * r);
            vec3_set(tdir, (s1 * x2 - s2 * x1) * r, (s1 * y2 - s2 * y1) * r, (s1 * z2 - s2 * z1) * r);

            tempVertices[i1] = sdir;
            tempVertices[i2] = sdir;
            tempVertices[i3] = sdir;

            tempVertices[i1 + vertexCount] = tdir;
            tempVertices[i2 + vertexCount] = tdir;
            tempVertices[i3 + vertexCount] = tdir;
        }

        const normal = vec3_create();
        const tempVert = vec3_create();
        const tan = vec3_create();
        const bitan = vec3_create();
        const temp1 = vec3_create();
        const temp2 = vec3_create();
        const crossPd = vec3_create();
        const normalized = vec3_create();

        for (let vert = 0; vert < vertexCount; vert += 1)
        {
            // NOTE: some meshes don't have index 0 - n in their indexbuffer, if this is the case, skip calculation of this vertex
            if (!tempVertices[vert]) continue;

            vec3_set(normal, this.vertexNormals[vert * 3], this.vertexNormals[vert * 3 + 1], this.vertexNormals[vert * 3 + 2]);
            vec3_set(tempVert, tempVertices[vert][0], tempVertices[vert][1], tempVertices[vert][2]);

            // Gram-Schmidt orthagonalize
            const _dp = vec3_dot(normal, tempVert);
            vec3_scale(temp1, normal, _dp);
            vec3_subtract(temp2, tempVert, temp1);

            normalize(normalized, temp2);
            cross(crossPd, normal, tempVert);

            // const intermDot = vec3.dot(crossPd, tempVertices[vert + vertexCount]);
            const w = 1.0;// intermDot < 0.0 ? -1.0 : 1.0;

            vec3_scale(tan, normalized, 1 / w);
            cross(bitan, normal, tan);

            this.tangents[vert * 3 + 0] = tan[0];
            this.tangents[vert * 3 + 1] = tan[1];
            this.tangents[vert * 3 + 2] = tan[2];
            this.biTangents[vert * 3 + 0] = bitan[0];
            this.biTangents[vert * 3 + 1] = bitan[1];
            this.biTangents[vert * 3 + 2] = bitan[2];
        }
    }

    isIndexed()
    {
        if (this._vertices.length == 0) return true;
        return this.verticesIndices.length != 0;
    }

    /**
     * @function unIndex
     * @memberof Geometry
     * @instance
     * @description remove all vertex indizes, vertices array will contain 3*XYZ for every triangle
     * @param {boolean} reIndex
     * @param {boolean} dontCalcNormals
     */
    unIndex(reIndex = false, dontCalcNormals = false)
    {
        const newVerts = [];
        const newIndizes = [];
        let count = 0;

        for (let j in this._attributes)
        {
            const attr = this._attributes[j];
            let na = [];

            for (let i = 0; i < this.verticesIndices.length; i += 3)
            {
                for (let s = 0; s < 3; s++)
                {
                    if (attr.itemSize == 3)
                        na.push(
                            attr.data[this.verticesIndices[i + s] * 3 + 0],
                            attr.data[this.verticesIndices[i + s] * 3 + 1],
                            attr.data[this.verticesIndices[i + s] * 3 + 2]);
                    else if (attr.itemSize == 4)
                        na.push(
                            attr.data[this.verticesIndices[i + s] * 4 + 0],
                            attr.data[this.verticesIndices[i + s] * 4 + 1],
                            attr.data[this.verticesIndices[i + s] * 4 + 2],
                            attr.data[this.verticesIndices[i + s] * 4 + 3]);
                    else if (attr.itemSize == 2)
                        na.push(
                            attr.data[this.verticesIndices[i + s] * 2 + 0],
                            attr.data[this.verticesIndices[i + s] * 2 + 1]);
                    else if (attr.itemSize == 1)
                        na.push(
                            attr.data[this.verticesIndices[i + s]]);
                    else this._log.warn("unknown attr", attr);
                }
            }
            this.setAttribute(attr.name, na, attr.itemSize);
        }

        for (let i = 0; i < this.verticesIndices.length; i += 3)
        {
            newVerts.push(
                this.vertices[this.verticesIndices[i + 0] * 3 + 0],
                this.vertices[this.verticesIndices[i + 0] * 3 + 1],
                this.vertices[this.verticesIndices[i + 0] * 3 + 2]);

            newIndizes.push(count);
            count++;

            newVerts.push(
                this.vertices[this.verticesIndices[i + 1] * 3 + 0],
                this.vertices[this.verticesIndices[i + 1] * 3 + 1],
                this.vertices[this.verticesIndices[i + 1] * 3 + 2]);

            newIndizes.push(count);
            count++;

            newVerts.push(
                this.vertices[this.verticesIndices[i + 2] * 3 + 0],
                this.vertices[this.verticesIndices[i + 2] * 3 + 1],
                this.vertices[this.verticesIndices[i + 2] * 3 + 2]);

            newIndizes.push(count);
            count++;
        }

        this.vertices = newVerts;

        this.verticesIndices = [];
        if (reIndex) this.verticesIndices = newIndizes;

        if (!dontCalcNormals) this.calculateNormals();
    }

    calcBarycentric()
    {
        let barycentrics = [];
        barycentrics.length = this.vertices.length;
        for (let i = 0; i < this.vertices.length; i++) barycentrics[i] = 0;

        let count = 0;
        for (let i = 0; i < this.vertices.length; i += 3)
        {
            barycentrics[i + count] = 1;
            count++;
            if (count == 3) count = 0;
        }

        this.setAttribute("attrBarycentric", barycentrics, 3);
    }

    getBounds()
    {
        return new BoundingBox(this);
    }

    /**
     * @param {boolean} x
     * @param {boolean} y
     * @param {boolean} z
     * @returns {Array} offset
     */
    center(x, y, z)
    {
        if (x === undefined)
        {
            x = true;
            y = true;
            z = true;
        }

        let i = 0;
        const bounds = this.getBounds();
        const offset = [bounds.minX + (bounds.maxX - bounds.minX) / 2, bounds.minY + (bounds.maxY - bounds.minY) / 2, bounds.minZ + (bounds.maxZ - bounds.minZ) / 2];

        for (i = 0; i < this.vertices.length; i += 3)
        {
            if (this.vertices[i + 0] == this.vertices[i + 0])
            {
                if (x) this.vertices[i + 0] -= offset[0];
                if (y) this.vertices[i + 1] -= offset[1];
                if (z) this.vertices[i + 2] -= offset[2];
            }
        }

        return offset;
    }

    mapTexCoords2d()
    {
        const bounds = this.getBounds();
        const num = this.vertices.length / 3;

        this.texCoords = new Float32Array(num * 2);

        for (let i = 0; i < num; i++)
        {
            const vertX = this.vertices[i * 3 + 0];
            const vertY = this.vertices[i * 3 + 1];
            this.texCoords[i * 2 + 0] = vertX / (bounds.maxX - bounds.minX) + 0.5;
            this.texCoords[i * 2 + 1] = 1.0 - vertY / (bounds.maxY - bounds.minY) + 0.5;
        }
    }

    getInfoOneLine()
    {
        let txt = "";
        if (this.faceVertCount == 3 && this.verticesIndices)txt += this.verticesIndices.length / 3;
        else txt += 0;

        txt += " tris ";

        if (this.vertices)txt += this.vertices.length / 3;
        else txt += 0;

        txt += " verts";

        return txt;
    }

    getInfo()
    {
        const info = {};

        info.name = this.name;
        info.class = this.constructor.name;

        if (this.faceVertCount == 3 && this.verticesIndices)info.numFaces = this.verticesIndices.length / 3;
        else info.numFaces = 0;

        if (this.verticesIndices && this.verticesIndices.length)info.indices = this.verticesIndices.length;

        if (this.vertices)info.numVerts = this.vertices.length / 3;
        else info.numVerts = 0;

        if (this.vertexNormals) info.numNormals = this.vertexNormals.length / 3;
        else info.numNormals = 0;

        if (this.texCoords) info.numTexCoords = this.texCoords.length / 2;
        else info.numTexCoords = 0;

        if (this.tangents) info.numTangents = this.tangents.length / 3;
        else info.numTangents = 0;

        if (this.biTangents) info.numBiTangents = this.biTangents.length / 3;
        else info.numBiTangents = 0;

        if (this.biTangents) info.numBiTangents = this.biTangents.length / 3;
        else info.numBiTangents = 0;

        if (this.vertexColors) info.numVertexColors = this.vertexColors.length / 4;
        else info.numVertexColors = 0;

        if (this.getAttributes()) info.numAttribs = Object.keys(this.getAttributes()).length;
        else info.numAttribs = 0;

        info.isIndexed = this.isIndexed();

        return info;
    }

    // -----------------
}

// TODO : rewritwe circle op 1
/** @deprecated */
Geometry.buildFromFaces = function (arr, name, optimize)
{
    const vertices = [];
    const verticesIndices = [];

    for (let i = 0; i < arr.length; i += 3)
    {
        const a = arr[i + 0];
        const b = arr[i + 1];
        const c = arr[i + 2];
        const face = [-1, -1, -1];

        if (optimize)
            for (let iv = 0; iv < vertices.length; iv += 3)
            {
                if (vertices[iv + 0] == a[0] && vertices[iv + 1] == a[1] && vertices[iv + 2] == a[2]) face[0] = iv / 3;
                if (vertices[iv + 0] == b[0] && vertices[iv + 1] == b[1] && vertices[iv + 2] == b[2]) face[1] = iv / 3;
                if (vertices[iv + 0] == c[0] && vertices[iv + 1] == c[1] && vertices[iv + 2] == c[2]) face[2] = iv / 3;
            }

        if (face[0] == -1)
        {
            vertices.push(a[0], a[1], a[2]);
            face[0] = (vertices.length - 1) / 3;
        }

        if (face[1] == -1)
        {
            vertices.push(b[0], b[1], b[2]);
            face[1] = (vertices.length - 1) / 3;
        }

        if (face[2] == -1)
        {
            vertices.push(c[0], c[1], c[2]);
            face[2] = (vertices.length - 1) / 3;
        }

        verticesIndices.push(face[0]);
        verticesIndices.push(face[1]);
        verticesIndices.push(face[2]);
    }

    const geom = new Geometry(name);
    geom.name = name;
    geom.vertices = vertices;
    geom.verticesIndices = verticesIndices;

    return geom;
};

;// CONCATENATED MODULE: ./src/core/cgl/cgl_simplerect.js



const MESHES = {};

MESHES.getSimpleRect = function (cgl, name, size = 1.0)
{
    const geom = new Geometry(name);

    geom.vertices = [1.0 * size, 1.0 * size, 0.0, -1.0 * size, 1.0 * size, 0.0, 1.0 * size, -1.0 * size, 0.0, -1.0 * size, -1.0 * size, 0.0];
    geom.texCoords = [1.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0];
    geom.verticesIndices = [0, 1, 2, 2, 1, 3];
    geom.vertexNormals = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];

    return cgl.createMesh(geom);
};

MESHES.getSimpleCube = function (cgl, name)
{
    const geom = new Geometry(name);
    geom.vertices = [-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, -1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1, 1, 1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1, 1, -1];
    geom.setTexCoords([0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 0, 0, 0,]);
    geom.verticesIndices = [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23];
    geom.vertexNormals = new Float32Array([0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0, -1.0, 0.0, 0.0]);
    geom.tangents = new Float32Array([0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1]);
    geom.biTangents = new Float32Array([-1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0, 0, -1, 0, 0, -1, 0, 0, -1]);

    return new Mesh(cgl, geom);
};



;// CONCATENATED MODULE: ./src/core/cgp/cgp_canvasattachment.js


class WebGpuCanvasAttachment
{

    /** @type {HTMLCanvasElement} */
    #canvas = null;

    /** @type {CgpContext} */
    #cgp = null;

    /** @type {GPUCanvasContext} */
    #ctx = null;

    /**
     * @param {CgpContext} cgp
     */
    constructor(cgp)
    {
        this.#cgp = cgp;
        this.#canvas = document.createElement("canvas");
        this.#canvas.id = "webgpucanvasOut";
        this.#canvas.style.width = 128 + "px";
        this.#canvas.style.height = 128 + "px";
    }

    get canvas()
    {
        return this.#canvas;
    }

    /**
     * @param {function} cb
     */
    render(cb)
    {

        const canvas = this.#cgp.canvas;
        if (this.#canvas.width != canvas.width || this.#canvas.height != canvas.height)
        {
            this.#canvas.style.width = canvas.width + "px";
            this.#canvas.style.height = canvas.height + "px";
            this.#canvas.width = canvas.width;
            this.#canvas.height = canvas.height;
        }

        if (!this.#ctx)
        {
            this.#ctx = this.#canvas.getContext("webgpu");

            if (!this.#ctx)
                return console.log("no context", this.#canvas, this.#ctx);
            this.#ctx.configure({
                "device": this.#cgp.device,
                "format": this.#cgp.presentationFormat
            });

        }

        // const cgp = this.#cgp;
        // cgp.canvasInfo.depthTextureView = this.#ctx.createView();

        this.#cgp.renderPassDescriptor = {
            "label": "preview renderpass",
            "colorAttachments": [
                {
                    "view": this.#ctx.getCurrentTexture().createView(),
                    "loadOp": "clear",
                    "storeOp": "store",
                },

            ],
            "depthStencilAttachment": {
                "view": this.#cgp.canvasInfo.depthTextureView,
                "depthClearValue": 1,
                "depthLoadOp": "clear",
                "depthStoreOp": "store",
            },
        };

        // make a render pass encoder to encode render specific commands
        this.#cgp.passEncoder = this.#cgp.commandEncoder.beginRenderPass(this.#cgp.renderPassDescriptor);
        this.#cgp.textureView = this.#ctx.getCurrentTexture().createView();
        this.#cgp.renderStart();

        cb();

        this.#cgp.tempPrevCanvas = this.#canvas;

        this.#cgp.renderEnd();
        this.#cgp.passEncoder.end();

    }

}

;// CONCATENATED MODULE: ./src/core/cgp/binding/binding_storagebuffer.js





/** @extends Binding */
class BindingStorage extends Binding
{

    /** @type {CgpGguBuffer} */
    cgpbuffer = null;
    bindingType = "read-only-storage";

    /**
     * Description
     * @param {CgpContext} cgp
     * @param {string} name
     * @param {object} options
     */
    constructor(cgp, name, options)
    {
        super(cgp, name, options);
        this.cgpbuffer = options.cgpBuffer || new CgpGguBuffer(cgp, "temp", [0, 0, 0, 0]);
    }

    copy()
    {
        const b = new BindingStorage(this.cgp, this.name, this.options);
        return b;
    }

    /**
     * @returns {GPUBindingResource}
     * @param {number} _inst
     */
    getResource(_inst)
    {
        return {
            "buffer": this.cgpbuffer.gpuBuffer,
        };
    }

    /**
     * @returns {GPUBindGroupLayoutEntry}
     * @param {CgpShader} [_shader]
     */
    getLayoutEntry(_shader = null)
    {

        /** @type {GPUBufferBindingType} */
        let access = "read-only-storage";

        if (this.stage & GPUShaderStage.COMPUTE)
            if (this.cgpbuffer.hasUsage(GPUBufferUsage.COPY_SRC) && this.cgpbuffer.hasUsage(GPUBufferUsage.COPY_DST)) access = "storage";
        // else if (this.cgpbuffer.hasUsage(GPUBufferUsage.COPY_DST)) access = "write-only-storage";

        return {
            "visibility": this.stage,
            "binding": this.bindNum,
            // "minBindingSize": this.getSizeBytes(),
            // "hasDynamicOffset": 0,
            "buffer": {
                "type": access
            } };
    }

    /**
     * @param {CgpShader} _shader
     * @param {number} bindGroupNum
     */
    getShaderHeaderCode(_shader, bindGroupNum)
    {
        this.cgp.profileData.count("shadercode storage", this.name);
        let str = "";

        let access = "read";

        if (this.stage & GPUShaderStage.COMPUTE)
            if (this.cgpbuffer.hasUsage(GPUBufferUsage.COPY_SRC) && this.cgpbuffer.hasUsage(GPUBufferUsage.COPY_DST)) access = "read_write";
            else if (this.cgpbuffer.hasUsage(GPUBufferUsage.COPY_DST)) access = "write";

        str += "@group(" + bindGroupNum + ") ";
        str += "@binding(" + this.bindNum + ") ";

        str += "var<storage," + access + "> ";
        let typeStr = "array<f32>";
        str += this.name + ": " + typeStr + ";\n";

        return str + "\n";
    }
}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_computepipeline.js
/// <reference types="@webgpu/types" />






class ComputePipeline extends Pipeline
{

    #isValid = true;

    /** @type {string} */
    presentationFormat = null;

    /** @type {GPUComputePipelineDescriptor} */
    #pipeCfg = null;

    /** @type {GPUComputePipeline} */
    #computePipeline = null;

    /** @type {GPUBindGroupLayout} */
    bindGroupLayout = null;

    /** @type {GPUComputePassEncoder} */
    #computePassEncoder;

    #shaderListeners = [];
    #old = {};
    #errorCount = 0;
    lastRebuildReason = "first";
    rebuildCount = 0;
    profile = false;
    #rebuildNumBindingGroups = false;

    /**
     * Description
     * @param {CgpContext} _cgp
     * @param {String} name
     */
    constructor(_cgp, name)
    {
        super(_cgp, name, Pipeline.TYPE_COMPUTE);
    }

    /**
     * @param {CgpShader} shader
     * @param {CgpMesh} mesh
     */
    setPipeline(shader, mesh = null)
    {
        if (!shader)
        {
            this.log.log("pipeline unknown shader");
            return;
        }

        let needsRebuildReason = "";
        if (!this.#pipeCfg)needsRebuildReason = "no pipecfg";
        if (this.#old.mesh != mesh)needsRebuildReason = "no mesh";
        if (this.#old.shader != shader)
        {
            needsRebuildReason = "shader changed";
        }

        if (shader.needsPipelineUpdate)
        {
            needsRebuildReason = "shader needs update: " + shader.needsPipelineUpdate;
            shader.needsPipelineUpdate = "";
        }

        if (this.#rebuildNumBindingGroups)
        {
            needsRebuildReason = "num bindgroups wrong...";
        }

        this.pushDebug();

        if (needsRebuildReason != "")
        {
            this.cgp.profileData.count("pipeline created", this.name);

            this.lastRebuildReason = needsRebuildReason;
            this.rebuildCount++;
            // console.log("needsRebuildReason");
            this.cgp.pushErrorScope("createPipeline", { "logger": this.log });

            this.#rebuildNumBindingGroups = false;

            this.#pipeCfg = this.getPipelineObject(shader);
            console.log(this.#pipeCfg);

            this.#old.device = this.cgp.device;
            this.#old.shader = shader;
            this.#old.mesh = mesh;
            this.#isValid = true;
            console.log(this.#pipeCfg);
            try
            {
                this.#computePipeline = this.cgp.device.createComputePipeline(this.#pipeCfg);
            }
            catch (e)
            {
                console.error("pipe error catch...", e.message, this.#pipeCfg);
                this.#isValid = false;
            }

            this.cgp.popErrorScope(
                () =>
                {
                    console.log("this.#pipeCfg", this.#pipeCfg);
                });
        }

        if (this.cgp.branchProfiler) this.cgp.branchProfiler.pop();

    }

    /**
     * @param {CgpShader} shader
     * @returns {GPUComputePipelineDescriptor}
     */
    getPipelineObject(shader)
    {

        /** @type {Array<GPUBindGroupLayoutEntry>} */
        this.bindingGroupLayoutEntries = [];
        this.bindingGroupLayoutEntries = shader.defaultBindGroup.getLayoutEntries(shader);

        const bindGroupLayouts = [shader.defaultBindGroup.getLayout(shader)];

        /** @type {GPUPipelineLayout} */
        const pipelineLayout = this.cgp.device.createPipelineLayout({
            "label": "pipe layout " + this.name,
            "bindGroupLayouts": bindGroupLayouts
        });

        /** @type {GPUComputePipelineDescriptor} */
        let pipeCfg = {
            "label": this.name,
            "layout": pipelineLayout,
            "compute":
            {
                "module": shader.gpuShaderModule,
                "entryPoint": shader.options.entryPoint || "main"
            }
        };
        console.log("pipecft", pipeCfg, bindGroupLayouts);

        return pipeCfg;
    }

    /**
     * @param {CgpShader} shader
     * @param {Array} workGroups
     */
    compute(shader, workGroups = [8, 8])
    {
        if (!shader.gpuShaderModule) shader.compile();

        /** @type {GPUCommandEncoder} */
        const commandEncoder = this.cgp.device.createCommandEncoder();

        this.#computePassEncoder = commandEncoder.beginComputePass({ "label": "computepass " + shader.getName() });

        // if (!this.#computePipeline)
        this.setPipeline(shader);

        if (!this.#computePipeline)
        {
            this.log.warn("no render pipe");
            return;
        }

        this.#computePassEncoder.setPipeline(this.#computePipeline);
        shader.bind(this.#computePassEncoder);

        if (workGroups.length == 1) this.#computePassEncoder.dispatchWorkgroups(workGroups[0] || 8);
        else if (workGroups.length == 2) this.#computePassEncoder.dispatchWorkgroups(workGroups[0] || 8, workGroups[1] || 8);
        else if (workGroups.length == 3) this.#computePassEncoder.dispatchWorkgroups(workGroups[0] || 8, workGroups[1] || 8, workGroups[2] || 8);
        else console.log("workgroups length wrong,,,");

        this.#computePassEncoder.end();

        this.cgp.profileData.count("compute pipe", this.name);
        // console.log("llllllll", shader.defaultBindGroup.getLayout());
        const gpuCommands = commandEncoder.finish();
        this.cgp.device.queue.submit([gpuCommands]);
        this.pushDebug();
        // const entry = shader.bindingsVert[i].getBindingGroupEntry(shader.bindingCounter);
        // this._passEncoder = commandEncoder.beginComputePass();
        // this._passEncoder.setPipeline(computePipeline);
        // this.#passEncoder.setBindGroup(0, shader.defaultBindGroupshader.defaultBindGroup;
        // outBuff.setRef(gpuBuff);

    }

    dispose()
    {
        // todo...
    }

}

;// CONCATENATED MODULE: ./src/core/cgp/cgp_shadermodifier.js







/**
 * @typedef UniformDescrip
 * @property {string} name
 * @property {string} type
 * @property {number} stage
 * @property {any} v1
 * @property {any} v2
 * @property {any} v3
 * @property {any} v4
 */

class ShaderModifier
{
    onBind = null;

    /**
     * @param {CgpContext} cgl
     * @param {string} name
     * @param {object} options
     */
    constructor(cgl, name, options)
    {

        /** @type {CgpContext} */
        this._cgl = cgl;
        this._name = name;
        this._origShaders = {};

        /** @type {Array<UniformDescrip>} */
        this._uniforms = [];
        this._structUniforms = [];
        this._definesToggled = {};
        this._defines = {};
        this._mods = [];
        this._textures = [];

        /** @type {object} */
        this._boundShader = null;
        this._changedDefines = true;
        this._changedUniforms = true;
        this._modulesChanged = false;
        this.needsTexturePush = false;

        /** @type {CgpShader} */
        this._lastShader = null;
        this._attributes = [];
        if (options && options.opId) this.opId = options.opId;

    }

    /**
     * @param {CgpShader} curShader
     * @param {boolean} pushShader
     */
    bind(curShader, pushShader = true)
    {
        const shader = curShader || this._cgl.getShader();
        if (!shader) return;

        this._boundShader = this._origShaders[shader.id];
        let missingMod = false;

        if (this._boundShader && this._lastShader != this._boundShader.shader) // shader changed since last bind
        {
            if (!this._boundShader.shader.hasModule(this._mods[0].id)) missingMod = true;
        }

        if (missingMod) console.warn("copy because  (missingMod)");
        if (!this._boundShader) console.warn("copy because  (!this._boundShader)");
        else if (shader.lastCompile != this._boundShader.lastCompile) console.warn("copy because  shader.lastCompile");
        if (this._modulesChanged) console.warn("copy because  this._modulesChanged");
        if (shader._needsRecompile) console.warn("copy because  shader._needsRecompile ", shader._compileReason);

        if (missingMod || !this._boundShader || shader.lastCompile != this._boundShader.lastCompile || this._modulesChanged || shader._needsRecompile)
        {
            if (this._boundShader) this._boundShader.shader.dispose();
            if (shader._needsRecompile) shader.compile();
            this.needsTexturePush = true;

            this._boundShader = this._origShaders[shader.id] =
            {
                "lastCompile": shader.lastCompile,
                "orig": shader,
                "shader": shader.copy()
            };

            console.log("mod shaderrrrrrrrrrr", shader.getName(), this._boundShader.shader.getName());

            this._addModulesToShader(this._boundShader.shader);
            this._updateDefinesShader(this._boundShader.shader);
            this._updateUniformsShader(this._boundShader.shader);
        }

        this._boundShader.wireframe = shader.wireframe;
        if (this._changedDefines) this._updateDefines();
        if (this._changedUniforms) this._updateUniforms();

        if (pushShader)
        {
            this._cgl.pushShader(this._boundShader.shader);
            // console.log(this._boundShader.shader.id);
        }

        // this._boundShader.shader.copyUniformValues(this._boundShader.orig);

        if (this.needsTexturePush)
        {
            for (let j = 0; j < this._textures.length; j++)
            {
                const uniformName = this._textures[j][0];
                const tex = this._textures[j][1];
                const texType = this._textures[j][2];

                if (this._getUniform(uniformName))
                {
                    const name = this.getPrefixedName(uniformName);
                    const uni = this._boundShader.shader.getUniform(name);

                    if (uni) this._boundShader.shader.pushTexture(uni, tex, texType);
                }
            }

            this.needsTexturePush = false;
            this._textures.length = 0;
        }

        this._modulesChanged = false;

        this._boundShader.shader.fromMod = this;

        if (this.onBind) this.onBind(this._boundShader.shader);

        return this._boundShader.shader;
    }

    /**
     * @param {boolean} popShader
     */
    unbind(popShader = true)
    {
        if (this._boundShader)
            if (popShader) this._cgl.popShader();

        this._boundShader = null;
    }

    /**
     * @param {CgpShader} shader
     */
    _addModulesToShader(shader)
    {
        let firstMod;

        if (this._mods.length > 1) firstMod = this._mods[0];

        for (let i = 0; i < this._mods.length; i++) shader.addModule(this._mods[i], firstMod);
    }

    /**
     * @param {import("../cg/cg_shader.js").ShaderModule} mod
     */
    _removeModulesFromShader(mod)
    {
        for (const j in this._origShaders) this._origShaders[j].shader.removeModule(mod);
    }

    /**
     * @param {import("../cg/cg_shader.js").ShaderModule} mod
     */
    addModule(mod)
    {
        this._mods.push(mod);
        this._modulesChanged = true;
    }

    /**
     * @param {string} title
     */
    removeModule(title)
    {
        const indicesToRemove = [];

        let found = false;
        for (let i = 0; i < this._mods.length; i++)
        {
            if (this._mods[i].title == title)
            {
                found = true;
                this._removeModulesFromShader(this._mods[i]);
                indicesToRemove.push(i);
            }
        }

        // * go in reverse order so the indices of the mods stay the same
        for (let j = indicesToRemove.length - 1; j >= 0; j -= 1)
            this._mods.splice(indicesToRemove[j], 1);

        this._modulesChanged = true;
    }

    /**
     * @param {CgpShader} shader
     */
    _updateUniformsShader(shader)
    {
        for (let i = 0; i < this._uniforms.length; i++)
        {
            const uni = this._uniforms[i];
            const name = this.getPrefixedName(uni.name);

            if (!shader.hasUniform(name))
            {
                console.log("shadermod uni ", name, shader.id, uni.stage);
                const u = new CgpUniform(shader, uni.type, name, uni.v1, uni.v2, uni.v3, uni.v4);

                console.log(uni);
                shader.addUniform(u, uni.stage);
            }
        }
    }

    _updateUniforms()
    {
        for (const j in this._origShaders)
            this._updateUniformsShader(this._origShaders[j].shader);

        this._changedUniforms = false;
    }

    /**
     * @param {CgShader} shader
     * @param {string} uniformName
     * @param {number} value
     */
    _setUniformValue(shader, uniformName, value)
    {
        const uniform = shader.getUniform(uniformName);

        if (uniform) uniform.setValue(value);
    }

    /**
     * @param {string} name
     * @param {number} value
     */
    setUniformValue(name, value)
    {
        const uni = this._getUniform(name);
        if (!uni) return;

        const defineName = this.getPrefixedName(name);

        for (const j in this._origShaders)
        {
            this._setUniformValue(this._origShaders[j].shader, defineName, value);
        }
    }

    /**
     * @param {string} name
     */
    hasUniform(name)
    {
        return !!this._getUniform(name);
    }

    /**
     * @param {string} name
     */
    _getUniform(name)
    {
        for (let i = 0; i < this._uniforms.length; i++)
        {
            if (this._uniforms[i].name == name) return this._uniforms[i];
        }
        return null;
    }

    /**
     * @param {number} stage
     * @param {string} name
     * @param {string} type
     * @param {any} valOrPort
     * @param {any} v2
     * @param {any} v3
     * @param {any} v4
     */
    addUniform(stage, type, name, valOrPort, v2, v3, v4)
    {
        if (!this._getUniform(name))
        {
            this._uniforms.push(
                {
                    "name": name,
                    "stage": stage,
                    "type": type,
                    "v1": valOrPort,
                    "v2": v2,
                    "v3": v3,
                    "v4": v4,
                });
            this._changedUniforms = true;
        }
    }

    // addUniformFrag(type, name, valOrPort, v2, v3, v4)
    // {
    //     this.addUniform(type, name, valOrPort, v2, v3, v4, null, null, null, "frag");
    //     this._changedUniforms = true;
    // }

    // addUniformVert(type, name, valOrPort, v2, v3, v4)
    // {
    //     this.addUniform(type, name, valOrPort, v2, v3, v4, null, null, null, "vert");
    //     this._changedUniforms = true;
    // }

    // addUniformBoth(type, name, valOrPort, v2, v3, v4)
    // {
    //     this.addUniform(type, name, valOrPort, v2, v3, v4, null, null, null, "both");
    //     this._changedUniforms = true;
    // }

    // addUniformStruct(structName, uniformName, members, shaderType)
    // {
    //     for (let i = 0; i < members.length; i += 1)
    //     {
    //         const member = members[i];
    //         if ((member.type === "2i" || member.type === "i" || member.type === "3i") && shaderType === "both")
    //             console.error("Adding an integer struct member to both shaders can potentially error. Please use different structs for each shader. Error occured in struct:", structName, " with member:", member.name, " of type:", member.type, ".");

    //         if (!this._getUniform(uniformName + "." + member.name))
    //         {
    //             this.addUniform(
    //                 member.type,
    //                 uniformName + "." + member.name,
    //                 member.v1,
    //                 member.v2,
    //                 member.v3,
    //                 member.v4,
    //                 uniformName,
    //                 structName,
    //                 member.name,
    //                 shaderType
    //             );
    //         }
    //     }
    //     if (!this._getStructUniform(uniformName))
    //     {
    //         this._structUniforms.push({
    //             "structName": structName,
    //             "uniformName": uniformName,
    //             "members": members,
    //             "shaderType": shaderType,
    //         });
    //     }
    // }

    // addUniformStructVert(structName, uniformName, members)
    // {
    //     this.addUniformStruct(structName, uniformName, members, "vert");
    // }

    // addUniformStructFrag(structName, uniformName, members)
    // {
    //     this.addUniformStruct(structName, uniformName, members, "frag");
    // }

    // addUniformStructBoth(structName, uniformName, members)
    // {
    //     this.addUniformStruct(structName, uniformName, members, "both");
    // }

    addAttribute(attr)
    {
        for (let i = 0; i < this._attributes.length; i++)
        {
            if (this._attributes[i].name == attr.name && this._attributes[i].nameFrag == attr.nameFrag) return;
        }
        this._attributes.push(attr);
    }

    pushTexture(uniformName, tex, texType)
    {
        if (!tex) throw (new Error("no texture given to texturestack"));

        this._textures.push([uniformName, tex, texType]);
        this.needsTexturePush = true;
    }

    /**
     * @param {string} name
     * @param {CgShader} shader
     */
    _removeUniformFromShader(name, shader)
    {
        if (shader.hasUniform(name)) shader.removeUniform(name);
    }

    /**
     * @param {string} name
     */
    removeUniform(name)
    {
        if (this._getUniform(name))
        {
            for (let j = this._uniforms.length - 1; j >= 0; j -= 1)
            {
                const nameToRemove = name;

                if (this._uniforms[j].name == name)
                {
                    for (const k in this._origShaders)
                    {
                        this._removeUniformFromShader(
                            this.getPrefixedName(nameToRemove),
                            this._origShaders[k].shader
                        );
                    }

                    this._uniforms.splice(j, 1);
                }
            }
            this._changedUniforms = true;
        }
    }

    /**
     * @param {string} name
     */
    getPrefixedName(name)
    {
        const prefix = this._mods[0].group;
        if (prefix === undefined)
        {
            return;
        }
        if (name.startsWith("MOD_"))
        {
            name = name.substr("MOD_".length);
            name = "mod" + prefix + "_" + name;
        }
        return name;
    }

    /**
     * @param {CgpShader} shader
     */
    _updateDefinesShader(shader)
    {
        for (const i in this._defines)
        {
            const name = this.getPrefixedName(i);
            if (this._defines[i] !== null && this._defines[i] !== undefined) shader.define(name, this._defines[i]);
            else shader.removeDefine(name);
        }

        for (const i in this._definesToggled)
        {
            const name = this.getPrefixedName(i);
            shader.toggleDefine(name, this._definesToggled[i]);
        }
    }

    _updateDefines()
    {
        for (const j in this._origShaders) this._updateDefinesShader(this._origShaders[j].shader);

        this._changedDefines = false;
    }

    /**
     * @param {string | number} what
     * @param {boolean} value
     */
    define(what, value)
    {
        if (value === undefined)value = true;
        this._defines[what] = value;
        this._changedDefines = true;
    }

    /**
     * @param {string} name
     */
    removeDefine(name)
    {
        this._defines[name] = null;
        this._changedDefines = true;
    }

    /**
     * @param {string} name
     */
    hasDefine(name)
    {
        if (this._defines[name] !== null && this._defines[name] !== undefined) return true;
        return false;
    }

    /**
     * @param {string} name
     * @param {any} b
     */
    toggleDefine(name, b)
    {
        this._changedDefines = true;
        this._definesToggled[name] = b;
    }

    currentShader()
    {
        if (!this._boundShader) return null;
        return this._boundShader.shader;
    }

    dispose()
    {

    }
}



;// CONCATENATED MODULE: ./src/core/cgp/index.js
















const CGP = {
    "Context": CgpContext,
    "Shader": CgpShader,
    "Mesh": CgpMesh,
    "Texture": cgp_texture_Texture,
    "Uniform": CgpUniform,
    "MESHES": MESHES,
    "GPUBuffer": CgpGguBuffer
};

window.CABLES = window.CABLES || {};
window.CABLES.CGP = CGP;
window.CGP = CGP;
window.CGP.WebGpuCanvasAttachment = WebGpuCanvasAttachment;
window.CGP.RenderPipeline = RenderPipeline;
window.CGP.ComputePipeline = ComputePipeline;
window.CGP.ShaderModifier = ShaderModifier;

window.CGP.BindingStorage = BindingStorage;
window.CGP.BindingUniform = BindingUniform;
window.CGP.BindingTexture = BindingTexture;
window.CGP.BindingSampler = BindingSampler;



;// CONCATENATED MODULE: ./src/core/cg/cg_fpscounter.js


class FpsCounter extends Events
{
    constructor()
    {
        super();
        this._timeStartFrame = 0;
        this._timeStartSecond = 0;
        this._fpsCounter = 0;
        this._msCounter = 0;
        this._frameCount = 0;
        this.logFps = false;

        this.stats = { "ms": 0, "fps": 0 };
    }

    get frameCount()
    {
        return this._frameCount;
    }

    startFrame()
    {
        this._timeStartFrame = CABLES.now();
    }

    endFrame()
    {
        this._frameCount++;
        this._fpsCounter++;

        const timeFrame = CABLES.now() - this._timeStartFrame;
        this._msCounter += timeFrame;

        if (CABLES.now() - this._timeStartSecond > 1000) this.endSecond();
    }

    endSecond()
    {
        this.stats.fps = this._fpsCounter;
        this.stats.ms = Math.round(this._msCounter / this._fpsCounter * 100) / 100;

        this.emitEvent("performance", this.stats);
        if (this.logFps)console.log(this.stats);

        // reset
        this._fpsCounter = 0;
        this._msCounter = 0;
        this._timeStartSecond = CABLES.now();
    }
}

;// CONCATENATED MODULE: ./src/core/cg/cg_constants.js





const CG = {

    "DEPTH_COMPARE_NEVER": 0,
    "DEPTH_COMPARE_LESS": 1,
    "DEPTH_COMPARE_EQUAL": 2,
    "DEPTH_COMPARE_LESSEQUAL": 3,
    "DEPTH_COMPARE_GREATER": 4,
    "DEPTH_COMPARE_NOTEQUAL": 5,
    "DEPTH_COMPARE_GREATEREQUAL": 6,
    "DEPTH_COMPARE_ALWAYS": 7,

    "CULL_NONE": 0,
    "CULL_BACK": 1,
    "CULL_FRONT": 2,
    "CULL_BOTH": 3,

    "Geometry": Geometry,
    "BoundingBox": BoundingBox,
    "FpsCounter": FpsCounter,

    "CgCanvas": CgCanvas
};



;// CONCATENATED MODULE: ./src/core/cgl/cgl_framebuffer2.js




class Framebuffer2
{

    /**
     * @param {CglContext} cgl
     * @param {number} w
     * @param {number} h
     * @param {object} options
     */
    constructor(cgl, w, h, options)
    {
        this._log = new Logger("cgl_framebuffer2");
        if (cgl.glVersion == 1) this._log.error("framebuffer2 used on webgl1");
        this.Framebuffer2DrawTargetsDefault = null;
        this.Framebuffer2BlittingFramebuffer = null;
        this.Framebuffer2FinalFramebuffer = null;
        this._cgl = cgl;

        this._cgl.printError("before framebuffer2 constructor");

        this._width = 0;
        this._height = 0;
        this.valid = true;

        this._depthRenderbuffer = null;
        this._frameBuffer = null;
        this._textureFrameBuffer = null;
        this._colorRenderbuffers = [];
        this._drawTargetArray = [];
        this._disposed = false;

        if (!this.Framebuffer2BlittingFramebuffer) this.Framebuffer2BlittingFramebuffer = cgl.gl.createFramebuffer();
        if (!this.Framebuffer2FinalFramebuffer) this.Framebuffer2FinalFramebuffer = cgl.gl.createFramebuffer();

        if (!this.Framebuffer2DrawTargetsDefault) this.Framebuffer2DrawTargetsDefault = [cgl.gl.COLOR_ATTACHMENT0];

        this._options = options || {
            "isFloatingPointTexture": false,
        };

        this.name = this._options.name || "unknown";

        this._cgl.profileData.addHeavyEvent("framebuffer create", this.name);

        if (!this._options.hasOwnProperty("numRenderBuffers")) this._options.numRenderBuffers = 1;
        if (!this._options.hasOwnProperty("depth")) this._options.depth = true;
        if (!this._options.hasOwnProperty("clear")) this._options.clear = true;
        if (!this._options.hasOwnProperty("multisampling"))
        {
            this._options.multisampling = false;
            this._options.multisamplingSamples = 0;
        }

        if (this._options.multisamplingSamples)
        {
            if (this._cgl.glSlowRenderer) this._options.multisamplingSamples = 0;
            if (!this._cgl.gl.MAX_SAMPLES) this._options.multisamplingSamples = 0;
            else this._options.multisamplingSamples = Math.min(this._cgl.maxSamples, this._options.multisamplingSamples);
        }

        if (!this._options.hasOwnProperty("filter")) this._options.filter = Texture.FILTER_LINEAR;
        if (!this._options.hasOwnProperty("wrap")) this._options.wrap = Texture.WRAP_REPEAT;

        this._numRenderBuffers = this._options.numRenderBuffers;
        this._colorTextures = [];

        this.clearColors = [];
        for (let i = 0; i < this._numRenderBuffers; i++) this.clearColors.push([0, 0, 0, 1]);

        if (!options.pixelFormat)
        {
            if (options.isFloatingPointTexture) this._options.pixelFormat = Texture.PFORMATSTR_RGBA32F;
            else this._options.pixelFormat = Texture.PFORMATSTR_RGBA8UB;
        }

        for (let i = 0; i < this._numRenderBuffers; i++)
        {
            this._colorTextures[i] = new Texture(cgl, {
                "name": "fb2 " + this.name + " " + i,
                "isFloatingPointTexture": this._options.isFloatingPointTexture,
                "anisotropic": this._options.anisotropic || 0,
                "pixelFormat": this._options.pixelFormat,
                "filter": this._options.filter,
                "wrap": this._options.wrap,
            });
        }

        let fil = Texture.FILTER_NEAREST;
        if (this._options.shadowMap) fil = Texture.FILTER_LINEAR;

        const defaultTexSize = 512;

        if (this._options.depth)
        {
            this._textureDepth = new Texture(cgl,
                {
                    "name": "fb2 depth " + this.name,
                    "isDepthTexture": true,
                    "filter": fil,
                    "shadowMap": this._options.shadowMap || false,
                    "width": w || defaultTexSize,
                    "height": h || defaultTexSize,
                });
        }

        if (cgl.aborted) return;

        this.setSize(w || defaultTexSize, h || defaultTexSize);

        this._cgl.printError("framebuffer2 constructor");
    }

    getWidth()
    {
        return this._width;
    }

    getHeight()
    {
        return this._height;
    }

    getGlFrameBuffer()
    {
        return this._frameBuffer;
    }

    getDepthRenderBuffer()
    {
        return this._depthRenderbuffer;
    }

    getTextureColor()
    {
        return this._colorTextures[0];
    }

    getTextureColorNum(i)
    {
        return this._colorTextures[i];
    }

    getTextureDepth()
    {
        return this._textureDepth;
    }

    setFilter(f)
    {
        for (let i = 0; i < this._numRenderBuffers; i++)
        {
            this._colorTextures[i].filter = f;
            this._colorTextures[i].setSize(this._width, this._height);
        }
    }

    delete()
    {
        this.dispose();
    }

    dispose()
    {
        this._disposed = true;
        let i = 0;
        for (i = 0; i < this._numRenderBuffers; i++) this._colorTextures[i].delete();
        // this._texture.delete();
        if (this._textureDepth) this._textureDepth.delete();
        for (i = 0; i < this._numRenderBuffers; i++) this._cgl.gl.deleteRenderbuffer(this._colorRenderbuffers[i]);
        this._cgl.gl.deleteRenderbuffer(this._depthRenderbuffer);
        this._cgl.gl.deleteFramebuffer(this._frameBuffer);
        this._cgl.gl.deleteFramebuffer(this._textureFrameBuffer);
    }

    /**
     * @param {number} w
     * @param {number} h
     */
    setSize(w, h)
    {
        if (this._disposed) return this._log.warn("disposed framebuffer setsize...");
        this._cgl.profileData.addHeavyEvent("framebuffer resize", this.name);

        let i = 0;

        this._width = this._cgl.checkTextureSize(w);
        this._height = this._cgl.checkTextureSize(h);

        this._cgl.profileData.profileFrameBuffercreate++;

        if (this._frameBuffer)
        {
            for (i = 0; i < this._numRenderBuffers; i++) this._cgl.gl.deleteRenderbuffer(this._colorRenderbuffers[i]);
            // this._cgl.gl.deleteRenderbuffer(this._colorRenderbuffer);
            this._cgl.gl.deleteRenderbuffer(this._depthRenderbuffer);
            this._cgl.gl.deleteFramebuffer(this._frameBuffer);
            this._cgl.gl.deleteFramebuffer(this._textureFrameBuffer);
        }

        this._frameBuffer = this._cgl.gl.createFramebuffer();
        this._textureFrameBuffer = this._cgl.gl.createFramebuffer();

        const depth = this._options.depth;

        for (i = 0; i < this._numRenderBuffers; i++)
        {
            this._colorTextures[i].setSize(this._width, this._height);
        }

        for (i = 0; i < this._numRenderBuffers; i++)
        {
            const renderBuffer = this._cgl.gl.createRenderbuffer();

            // color renderbuffer

            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuffer);
            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, renderBuffer);

            const info = Texture.setUpGlPixelFormat(this._cgl, this._options.pixelFormat);
            let internFormat = info.glInternalFormat;

            // if (this._options.isFloatingPointTexture)
            // {
            if (CGL.Texture.isPixelFormatHalfFloat(info.pixelFormat))
            {
                if (!this._cgl.enableExtension("OES_texture_float_linear"))
                {
                    this._options.filter = Texture.FILTER_NEAREST;
                    this.setFilter(this._options.filter);
                }
            }
            else if (CGL.Texture.isPixelFormatFloat(info.pixelFormat))
            {
                if (!this._cgl.enableExtension("OES_texture_float_linear"))
                {
                    this._log.warn("no linear pixelformat,using nearest");
                    this._options.filter = Texture.FILTER_NEAREST;
                    this.setFilter(this._options.filter);
                }
            }
            // else if (info.pixelFormat == Texture.PFORMATSTR_RGBA32F || info.pixelFormat == Texture.PFORMATSTR_R11FG11FB10F
            // else if (info.pixelFormat == Texture.PFORMATSTR_RGBA32F || info.pixelFormat == Texture.PFORMATSTR_R11FG11FB10F
            // else if (info.pixelFormat == Texture.PFORMATSTR_RG16F)
            // {
            //     const extcb = this._cgl.enableExtension("EXT_color_buffer_float");

            //     if (!this._cgl.enableExtension("OES_texture_float_linear"))
            //     {
            //         console.log("no linear pixelformat,switching to nearest");
            //         this._options.filter = Texture.FILTER_NEAREST;
            //         this.setFilter(this._options.filter);
            //     }
            // }
            // }

            if (this._options.multisampling && this._options.multisamplingSamples)
            {
                this._cgl.gl.renderbufferStorageMultisample(this._cgl.gl.RENDERBUFFER, this._options.multisamplingSamples, internFormat, this._width, this._height);
            }
            else
            {
                this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER, internFormat, this._width, this._height);
            }

            this._cgl.gl.framebufferRenderbuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0 + i, this._cgl.gl.RENDERBUFFER, renderBuffer);
            this._colorRenderbuffers[i] = renderBuffer;
        }

        // this._cgl.gl.bindFramebuffer(this._cgl.gl.DRAW_FRAMEBUFFER, this._textureFrameBuffer);
        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._textureFrameBuffer);

        for (i = 0; i < this._numRenderBuffers; i++)
        {
            this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0 + i, this._cgl.gl.TEXTURE_2D, this._colorTextures[i].tex, 0);
        }

        if (this._options.depth)
        {
            this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.DEPTH_ATTACHMENT, this._cgl.gl.TEXTURE_2D, this._textureDepth.tex, 0);
        }

        // depth renderbuffer

        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuffer);

        let depthType = this._cgl.gl.DEPTH_COMPONENT32F;

        if (this._cgl.glSlowRenderer) depthType = this._cgl.gl.DEPTH_COMPONENT16;
        if (depth)
        {
            this._textureDepth.setSize(this._width, this._height);
            this._depthRenderbuffer = this._cgl.gl.createRenderbuffer();

            this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, this._depthRenderbuffer);
            if (this._options.isFloatingPointTexture)
            {
                if (this._options.multisampling) this._cgl.gl.renderbufferStorageMultisample(this._cgl.gl.RENDERBUFFER, this._options.multisamplingSamples, depthType, this._width, this._height);
                else this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER, depthType, this._width, this._height);
            }
            else if (this._options.multisampling)
            {
                this._cgl.gl.renderbufferStorageMultisample(this._cgl.gl.RENDERBUFFER, this._options.multisamplingSamples, depthType, this._width, this._height);
            // this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER,depthType, this._width, this._height);
            }
            else
            {
                this._cgl.gl.renderbufferStorage(this._cgl.gl.RENDERBUFFER, depthType, this._width, this._height);
            }

            this._cgl.gl.framebufferRenderbuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.DEPTH_ATTACHMENT, this._cgl.gl.RENDERBUFFER, this._depthRenderbuffer);
        }

        // this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);
        // this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._textureFrameBuffer);

        this._drawTargetArray.length = 0;
        for (i = 0; i < this._numRenderBuffers; i++) this._drawTargetArray.push(this._cgl.gl.COLOR_ATTACHMENT0 + i);

        // this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);

        if (!this._cgl.gl.isFramebuffer(this._textureFrameBuffer)) this._log.warn("invalid framebuffer");// throw new Error("Invalid framebuffer");
        const status = this._cgl.gl.checkFramebufferStatus(this._cgl.gl.FRAMEBUFFER);

        if (status != this._cgl.gl.FRAMEBUFFER_COMPLETE)
        {
            this._log.error("framebuffer incomplete: " + this.name, this);
            this._log.log("options", this._options);
            this._log.log("options pixelformat", this._options.pixelFormat);

            switch (status)
            {
            case this._cgl.gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                this._log.warn("FRAMEBUFFER_INCOMPLETE_ATTACHMENT...", this);
                throw new Error("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT");
            case this._cgl.gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                this._log.warn("FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
                throw new Error("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT");
            case this._cgl.gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                this._log.warn("FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
                throw new Error("Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS");
            case this._cgl.gl.FRAMEBUFFER_UNSUPPORTED:
                this._log.warn("FRAMEBUFFER_UNSUPPORTED");
                throw new Error("Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED");
            default:
                this.valid = false;
                this._log.error("incomplete framebuffer", status, this._frameBuffer);
                this._cgl.printError();

                this._frameBuffer = null;
                // debugger;
                throw new Error("Incomplete framebuffer: " + status);

        // throw("Incomplete framebuffer: " + status);
            }
        }

        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);
        this._cgl.gl.bindRenderbuffer(this._cgl.gl.RENDERBUFFER, null);

    // this._cgl.printError("fb setsize");
    }

    renderStart()
    {
        if (this._disposed) return this._log.warn("disposed framebuffer renderStart...");
        this._cgl.checkFrameStarted("fb2 renderstart");
        this._cgl.pushModelMatrix(); // needed ??

        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuffer);
        this._cgl.pushGlFrameBuffer(this._frameBuffer);
        this._cgl.pushFrameBuffer(this);

        this._cgl.pushPMatrix();
        this._cgl.pushViewPort(0, 0, this._width, this._height);

        this._cgl.gl.drawBuffers(this._drawTargetArray);

        if (this._options.clear)
        {
            this._cgl.gl.clearColor(0, 0, 0, 0);
            this._cgl.gl.clear(this._cgl.gl.COLOR_BUFFER_BIT | this._cgl.gl.DEPTH_BUFFER_BIT);
        }
    }

    clear()
    {
        if (this._numRenderBuffers <= 1)
        {
            this._cgl.gl.bindFramebuffer(this._cgl.gl.READ_FRAMEBUFFER, this._frameBuffer);
            this._cgl.gl.bindFramebuffer(this._cgl.gl.DRAW_FRAMEBUFFER, this._textureFrameBuffer);
        }
        else this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._frameBuffer);

        this._cgl.gl.drawBuffers(this._drawTargetArray);

        for (let i = 0; i < this._numRenderBuffers; i++)
        {
            this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0 + i, this._cgl.gl.TEXTURE_2D, this._colorTextures[i].tex, 0);
            this._cgl.gl.clearBufferfv(this._cgl.gl.COLOR, i, this.clearColors[i]);
        }
        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);
    }

    renderEnd()
    {
        if (this._disposed) return this._log.warn("disposed framebuffer renderEnd...");
        this._cgl.popPMatrix();

        this._cgl.profileData.profileFramebuffer++;

        if (this._numRenderBuffers <= 1)
        {
            this._cgl.gl.bindFramebuffer(this._cgl.gl.READ_FRAMEBUFFER, this._frameBuffer);
            this._cgl.gl.bindFramebuffer(this._cgl.gl.DRAW_FRAMEBUFFER, this._textureFrameBuffer);

            this._cgl.gl.clearBufferfv(this._cgl.gl.COLOR, 0, [0.0, 0.0, 0.0, 1.0]);
            this._cgl.gl.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, this._cgl.gl.COLOR_BUFFER_BIT | this._cgl.gl.DEPTH_BUFFER_BIT, this._cgl.gl.NEAREST);
        }
        else
        {
            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this.Framebuffer2BlittingFramebuffer);
            this._cgl.gl.framebufferRenderbuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.DEPTH_ATTACHMENT, this._cgl.gl.RENDERBUFFER, this._depthRenderbuffer);

            this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this.Framebuffer2FinalFramebuffer);
            this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.DEPTH_ATTACHMENT, this._cgl.gl.TEXTURE_2D, this._textureDepth.tex, 0);

            for (let i = 0; i < this._numRenderBuffers; i++)
            {
                this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this.Framebuffer2BlittingFramebuffer);
                this._cgl.gl.framebufferRenderbuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0, this._cgl.gl.RENDERBUFFER, this._colorRenderbuffers[i]);

                this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this.Framebuffer2FinalFramebuffer);
                this._cgl.gl.framebufferTexture2D(this._cgl.gl.FRAMEBUFFER, this._cgl.gl.COLOR_ATTACHMENT0, this._cgl.gl.TEXTURE_2D, this._colorTextures[i].tex, 0);

                this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, null);

                this._cgl.gl.bindFramebuffer(this._cgl.gl.READ_FRAMEBUFFER, this.Framebuffer2BlittingFramebuffer);
                this._cgl.gl.bindFramebuffer(this._cgl.gl.DRAW_FRAMEBUFFER, this.Framebuffer2FinalFramebuffer);

                // this._cgl.gl.clearBufferfv(this._cgl.gl.COLOR, i, [0.0, 0.0, 0.0, 1.0]);

                let flags = this._cgl.gl.COLOR_BUFFER_BIT;
                if (i == 0) flags |= this._cgl.gl.DEPTH_BUFFER_BIT;

                this._cgl.gl.blitFramebuffer(0, 0, this._width, this._height, 0, 0, this._width, this._height, flags, this._cgl.gl.NEAREST);
            }
        }

        this._cgl.gl.bindFramebuffer(this._cgl.gl.FRAMEBUFFER, this._cgl.popGlFrameBuffer());
        this._cgl.popFrameBuffer();

        this._cgl.popModelMatrix();
        this._cgl.popViewPort();

        if (this._colorTextures[0].filter == Texture.FILTER_MIPMAP)
        {
            for (let i = 0; i < this._numRenderBuffers; i++)
            {
                this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, this._colorTextures[i].tex);
                this._colorTextures[i].updateMipMap();
                this._cgl.gl.bindTexture(this._cgl.gl.TEXTURE_2D, null);
            }
        }
    }
}

;// CONCATENATED MODULE: ./src/core/cgl/cgl_marker.js
/** @type {function}
 * @deprecated
*/
const Marker = function (_cgl) // deprecated...
{
    this.draw = function (cgl, _size, depthTest) {};
};

/** @type {function}
 * @deprecated
*/
const WirePoint = function (cgl) // deprecated...
{
    this.render = function (_cgl, _size) {};
};

/** @type {function}
 * @deprecated
*/
const WireCube = function (cgl) // deprecated...
{
    this.render = function (_cgl, sizeX, sizeY, sizeZ) {};
};

;// CONCATENATED MODULE: ./src/core/cgl/cgl_unicolorshader.js


class UniColorShader
{
    constructor(_cgl)
    {
        this.shader = new CGL.Shader(_cgl, "markermaterial");

        const frag = ""
            .endl() + "void main()"
            .endl() + "{"
            .endl() + "    outColor = vec4(color.rgb,1.0);"
            .endl() + "}";

        const vert = ""
            .endl() + "IN vec3 vPosition;"
            .endl() + "UNI mat4 projMatrix;"
            .endl() + "UNI mat4 mvMatrix;"

            .endl() + "void main()"
            .endl() + "{"
            .endl() + "   gl_Position = projMatrix * mvMatrix * vec4(vPosition,1.0);"
            .endl() + "}";

        this.shader.setSource(vert, frag);
        this.coloruni = this.shader.addUniformFrag("4f", "color", [1, 0.777, 1, 1]);
    }

    setColor(r, g, b, a)
    {
        this.coloruni.set(r, g, b, a);
    }
}

;// CONCATENATED MODULE: ./src/core/cgl/cgl_utils.js
/**
 * @namespace CGL
 */

/**
 * multiply to get radians from degree, e.g. `360 * CGL.DEG2RAD`
 * @const {Number}
 * @memberof CGL
 * @static
 */
const cgl_utils_DEG2RAD = Math.PI / 180.0;

/**
 * to get degrees from radians, e.g. `3.14 * CGL.RAD2DEG`
 * @const {number}
 * @memberof CGL
 */
const cgl_utils_RAD2DEG = 180.0 / Math.PI;

const onLoadingAssetsFinished = null; // deprecated / remove later

/**
 * get normalized mouse wheel delta (including browser specific adjustment)
 * @function getWheelDelta
 * @static
 * @memberof CGL
 * @param {MouseEvent} event
 * @return {Number} normalized delta
 */
const isWindows = window.navigator.userAgent.includes("Windows");
const getWheelDelta_ = function (event)
{
    let normalized;
    if (event.wheelDelta)
    {
        // chrome
        normalized = (event.wheelDelta % 120) - 0 == -0 ? event.wheelDelta / 120 : event.wheelDelta / 30;
        normalized *= -1.5;
        if (isWindows) normalized *= 2;
    }
    else
    {
        // firefox
        let d = event.deltaY;
        if (event.shiftKey) d = event.deltaX;
        const rawAmmount = d || event.detail;
        normalized = -(rawAmmount % 3 ? rawAmmount * 10 : rawAmmount / 3);
        normalized *= -3;
    }

    if (normalized > 20) normalized = 20;
    if (normalized < -20) normalized = -20;

    return normalized;
};

const getWheelSpeed = getWheelDelta_;
const getWheelDelta = getWheelDelta_;

// from https://github.com/lodash/lodash/blob/master/escape.js

const htmlEscapes = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    "\"": "&quot;",
    "'": "&#39;",
};

/** Used to match HTML entities and HTML characters. */
const reUnescapedHtml = /[&<>"']/g;
const reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/*  eslint-disable */
const escapeHTML = function(string)
{
    return string && reHasUnescapedHtml.test(string) ?
        string.replace(reUnescapedHtml, function(chr) { return htmlEscapes[chr]; })
        : string || "";
}
/* eslint-enable */

;// CONCATENATED MODULE: ./src/core/cgl/index.js



















const cgl_CGL = {
    "Framebuffer2": Framebuffer2,
    "Geometry": Geometry,
    "BoundingBox": BoundingBox,
    "Marker": Marker,
    "WirePoint": WirePoint,
    "WireCube": WireCube,
    "MatrixStack": MatrixStack,
    "Mesh": Mesh,
    "MESH": MESH,
    "ShaderLibMods": ShaderLibMods,
    "Shader": CglShader,
    "Uniform": Uniform,
    "MESHES": MESHES,
    "Context": CglContext,
    "Texture": Texture,
    "TextureEffect": TextureEffect,
    "isWindows": isWindows,
    "getWheelSpeed": getWheelSpeed,
    "getWheelDelta": getWheelDelta,
    "onLoadingAssetsFinished": onLoadingAssetsFinished,
    "ProfileData": ProfileData,
    "UniColorShader": UniColorShader,
    ...constants_CONSTANTS.BLEND_MODES,
    ...constants_CONSTANTS.SHADER,
    ...constants_CONSTANTS.MATH,
    ...constants_CONSTANTS.BLEND_MODES,
};

window.CGL = cgl_CGL;



;// CONCATENATED MODULE: ./src/core/index.js




























window.glMatrix = common_namespaceObject;
window.mat2 = mat2_namespaceObject;
window.mat2d = mat2d_namespaceObject;
window.mat3 = mat3_namespaceObject;
window.mat4 = mat4_namespaceObject;
window.quat = quat_namespaceObject;
window.quat2 = quat2_namespaceObject;
window.vec2 = vec2_namespaceObject;

window.vec3 = vec3_namespaceObject;
window.vec4 = vec4_namespaceObject;

window.CABLES = window.CABLES || {};

CABLES.CGL = cgl_CGL;
CABLES.CG = CG;
CABLES.CGP = CGP;
CABLES.EMBED = EMBED;
CABLES.Link = Link;
CABLES.Port = Port;
CABLES.Op = Op;
CABLES.Profiler = Profiler;
CABLES.Patch = Patch;
CABLES.Timer = Timer;
CABLES.WEBAUDIO = WEBAUDIO;
CABLES.Variable = Variable;
CABLES.LoadingStatus = LoadingStatus;
CABLES.now = now;
CABLES.internalNow = internalNow;
CABLES.Anim = Anim;
CABLES.AnimKey = AnimKey;

CABLES.shortId = shortId;
CABLES.uuid = uuid;
CABLES.getShortOpName = getShortOpName;
CABLES.simpleId = simpleId;
CABLES.clamp = clamp;
CABLES.map = map;
CABLES.shuffleArray = shuffleArray;
CABLES.generateUUID = generateUUID;
CABLES.prefixedHash = prefixedHash;
CABLES.smoothStep = smoothStep;
CABLES.smootherStep = smootherStep;
CABLES.cacheBust = cacheBust;
CABLES.copyArray = copyArray;
CABLES.basename = basename;
CABLES.logStack = logStack;
CABLES.filename = filename;
CABLES.ajaxSync = ajaxSync;
CABLES.ajax = ajax;
CABLES.request = request;
CABLES.logErrorConsole = logErrorConsole;
CABLES.isNumeric = isNumeric;
CABLES.isArray = isArray;
CABLES.float32Concat = float32Concat;
CABLES.uniqueArray = uniqueArray;
CABLES.CGState = CgContext;
CABLES.CgContext = CgContext;

/** @type {Array<Op>} */
CABLES.OPS = [];

CABLES = Object.assign(CABLES,
    CONSTANTS.PORT,
    CONSTANTS.PACO,
    CONSTANTS.ANIM,
    CONSTANTS.OP
);

/* harmony default export */ const core = (CABLES);



if (!(function () { return !this; }())) console.warn("not in strict mode: index core"); // eslint-disable-line

CABLES = __webpack_exports__["default"];
/******/ })()
;


var CABLES = CABLES || {}; CABLES.build = {"timestamp":1746794515172,"created":"2025-05-09T12:41:55.172Z","git":{"branch":"develop","commit":"76ef009e7cd4094f652b549693aac6b50d0035ab","date":"1746794495","message":"log"}};

if(!CABLES.exportedPatches) CABLES.exportedPatches={};CABLES.exportedPatches['hORckJ']={
    "_id": "680ab2f69291206ccc547eb9",
    "ops": [
        {
            "id": "o0nrth932",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Max Pixel Density (DPR)",
                    "value": 2
                },
                {
                    "name": "FPS Limit",
                    "value": 0
                },
                {
                    "name": "Reduce FPS unfocussed",
                    "value": 0
                },
                {
                    "name": "Transparent",
                    "value": 0
                },
                {
                    "name": "Active",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "Trigger",
                            "portOut": "trigger",
                            "objIn": "1mmrrs9ic",
                            "objOut": "o0nrth932"
                        }
                    ]
                },
                {
                    "name": "width",
                    "value": 571.875
                },
                {
                    "name": "height",
                    "value": 245.625
                },
                {
                    "name": "Pixel Density",
                    "value": 0.9375
                }
            ],
            "objName": "Ops.Gl.MainLoop_v2"
        },
        {
            "id": "zt692mfvi",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Element index",
                    "value": 0
                },
                {
                    "name": "Element",
                    "value": "Input"
                },
                {
                    "name": "Type index",
                    "value": 0
                },
                {
                    "name": "Type",
                    "value": "Text"
                },
                {
                    "name": "Default Value",
                    "value": ""
                },
                {
                    "name": "Placeholder",
                    "value": "make a word"
                },
                {
                    "name": "Id",
                    "value": "wordInput"
                },
                {
                    "name": "Class",
                    "value": ""
                },
                {
                    "name": "Style",
                    "value": "color: black;\nbackground-color: white;\nborder: solid black 1px;\npadding:4px; \nborder-radius: 4px;\nfont-size: 2vw;\nfont-family: Montserrat;\nposition: absolute;\nleft: 50%;\nbottom: 10%;\ntransform: translate(-50%,50%);\nwidth: 40%;\nheight: 6%;"
                },
                {
                    "name": "Autocomplete",
                    "value": 0
                },
                {
                    "name": "Max Length",
                    "value": 0
                },
                {
                    "name": "Interactive",
                    "value": 1
                },
                {
                    "name": "Visible",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "DOM Element",
                    "links": [
                        {
                            "portIn": "Child",
                            "portOut": "DOM Element",
                            "objIn": "08pnib7vt",
                            "objOut": "zt692mfvi"
                        }
                    ]
                },
                {
                    "name": "Value",
                    "links": [
                        {
                            "portIn": "String in",
                            "portOut": "Value",
                            "objIn": "12u8rrp3y",
                            "objOut": "zt692mfvi"
                        }
                    ]
                },
                {
                    "name": "Hover",
                    "value": 0
                }
            ],
            "objName": "Ops.Html.Elements.InputElement"
        },
        {
            "id": "vmvm0cg8n",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "key code",
                    "value": 13
                },
                {
                    "name": "canvas only",
                    "value": 0
                },
                {
                    "name": "Mod Key index",
                    "value": 0
                },
                {
                    "name": "Mod Key",
                    "value": "none"
                },
                {
                    "name": "Enabled",
                    "value": 1
                },
                {
                    "name": "Prevent Default",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "on press",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "on press",
                            "objIn": "rs9bt9e01",
                            "objOut": "vmvm0cg8n"
                        },
                        {
                            "portIn": "exe",
                            "portOut": "on press",
                            "objIn": "p980lyvd6",
                            "objOut": "vmvm0cg8n"
                        },
                        {
                            "portIn": "Clear",
                            "portOut": "on press",
                            "objIn": "zt692mfvi",
                            "objOut": "vmvm0cg8n"
                        }
                    ]
                },
                {
                    "name": "Pressed",
                    "value": 0
                },
                {
                    "name": "Key",
                    "value": "Enter"
                }
            ],
            "objName": "Ops.Devices.Keyboard.KeyPressLearn"
        },
        {
            "id": "1mmrrs9ic",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Active",
                    "value": 1
                },
                {
                    "name": "Force index",
                    "value": 1
                },
                {
                    "name": "Force",
                    "value": "Aspect Ratio"
                },
                {
                    "name": "Center In Parent",
                    "value": 1
                },
                {
                    "name": "Scale to fit Parent",
                    "value": 0
                },
                {
                    "name": "Set Width",
                    "value": 300
                },
                {
                    "name": "Set Height",
                    "value": 200
                },
                {
                    "name": "Aspect Ratio index",
                    "value": 1
                },
                {
                    "name": "Aspect Ratio",
                    "value": "21:9"
                },
                {
                    "name": "Ratio",
                    "value": 2.3333333333333335
                },
                {
                    "name": "Fill Parent index",
                    "value": 0
                },
                {
                    "name": "Fill Parent",
                    "value": "Auto"
                }
            ],
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "Input_0",
                            "portOut": "Next",
                            "objIn": "vxr3otkkk",
                            "objOut": "1mmrrs9ic"
                        }
                    ]
                },
                {
                    "name": "Width",
                    "value": 610
                },
                {
                    "name": "Height",
                    "value": 262
                },
                {
                    "name": "Margin Left",
                    "value": -0.499969482421875
                },
                {
                    "name": "Margin Top",
                    "value": 95.00001525878906
                }
            ],
            "objName": "Ops.Gl.ForceCanvasSize"
        },
        {
            "id": "08pnib7vt",
            "uiAttribs": {},
            "objName": "Ops.Html.AppendChild_v2"
        },
        {
            "id": "8qvkwltht",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "CSS Width",
                    "value": 610
                },
                {
                    "name": "CSS Height",
                    "value": 262
                },
                {
                    "name": "Pixel Ratio",
                    "value": 0.9375
                },
                {
                    "name": "Pixel Width",
                    "value": 571.875
                },
                {
                    "name": "Pixel Height",
                    "value": 245.625
                },
                {
                    "name": "Aspect Ratio",
                    "value": 2.3282442748091605
                },
                {
                    "name": "Landscape",
                    "value": 1
                },
                {
                    "name": "Canvas Parent",
                    "links": [
                        {
                            "portIn": "Parent",
                            "portOut": "Canvas Parent",
                            "objIn": "08pnib7vt",
                            "objOut": "8qvkwltht"
                        }
                    ]
                }
            ],
            "objName": "Ops.Gl.CanvasInfo_v3"
        },
        {
            "id": "cocw9n6jl",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Output",
                    "multiPortNum": 2
                },
                {
                    "name": "Output_0",
                    "links": [
                        {
                            "portIn": "4ac9zc8zo",
                            "portOut": "Output_0",
                            "objIn": "rttd7cou9",
                            "objOut": "cocw9n6jl"
                        }
                    ]
                },
                {
                    "name": "Output_1",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "Input_0",
                            "portOut": "Output_1",
                            "objIn": "47cc1e8fc",
                            "objOut": "cocw9n6jl"
                        }
                    ]
                },
                {
                    "name": "Output_2",
                    "links": [
                        {
                            "portIn": "render",
                            "portOut": "Output_2",
                            "objIn": "2spo4t96x",
                            "objOut": "cocw9n6jl"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.SequenceMultiPort"
        },
        {
            "id": "rs9bt9e01",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Total Connections",
                    "value": 6
                },
                {
                    "name": "Trigger",
                    "multiPortNum": 6
                },
                {
                    "name": "Trigger_0",
                    "links": [
                        {
                            "portIn": "zgdzm1396",
                            "portOut": "Trigger_0",
                            "objIn": "rttd7cou9",
                            "objOut": "rs9bt9e01"
                        }
                    ]
                },
                {
                    "name": "Trigger_1",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "zgdzm1396",
                            "portOut": "Trigger_1",
                            "objIn": "rmb46f1to",
                            "objOut": "rs9bt9e01"
                        }
                    ]
                },
                {
                    "name": "Trigger_2",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "zgdzm1396",
                            "portOut": "Trigger_2",
                            "objIn": "co26ecvrt",
                            "objOut": "rs9bt9e01"
                        }
                    ]
                },
                {
                    "name": "Trigger_3",
                    "links": [
                        {
                            "portIn": "zgdzm1396",
                            "portOut": "Trigger_3",
                            "objIn": "y07w21pod",
                            "objOut": "rs9bt9e01"
                        }
                    ]
                },
                {
                    "name": "Trigger_4",
                    "links": [
                        {
                            "portIn": "zgdzm1396",
                            "portOut": "Trigger_4",
                            "objIn": "dia49nr11",
                            "objOut": "rs9bt9e01"
                        }
                    ]
                },
                {
                    "name": "Trigger_5",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "zgdzm1396",
                            "portOut": "Trigger_5",
                            "objIn": "uocx3doao",
                            "objOut": "rs9bt9e01"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.RouteTriggerMultiPort"
        },
        {
            "id": "12u8rrp3y",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Default string",
                    "value": ""
                },
                {
                    "name": "Set inactive to default",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Index 0 string",
                    "links": [
                        {
                            "portIn": "77ynzu99p",
                            "portOut": "Index 0 string",
                            "objIn": "rttd7cou9",
                            "objOut": "12u8rrp3y"
                        }
                    ]
                },
                {
                    "name": "Index 1 string",
                    "links": [
                        {
                            "portIn": "77ynzu99p",
                            "portOut": "Index 1 string",
                            "objIn": "rmb46f1to",
                            "objOut": "12u8rrp3y"
                        }
                    ]
                },
                {
                    "name": "Index 2 string",
                    "links": [
                        {
                            "portIn": "77ynzu99p",
                            "portOut": "Index 2 string",
                            "objIn": "co26ecvrt",
                            "objOut": "12u8rrp3y"
                        }
                    ]
                },
                {
                    "name": "Index 3 string",
                    "links": [
                        {
                            "portIn": "77ynzu99p",
                            "portOut": "Index 3 string",
                            "objIn": "y07w21pod",
                            "objOut": "12u8rrp3y"
                        }
                    ]
                },
                {
                    "name": "Index 4 string",
                    "links": [
                        {
                            "portIn": "77ynzu99p",
                            "portOut": "Index 4 string",
                            "objIn": "dia49nr11",
                            "objOut": "12u8rrp3y"
                        }
                    ]
                },
                {
                    "name": "Index 5 string",
                    "links": [
                        {
                            "portIn": "77ynzu99p",
                            "portOut": "Index 5 string",
                            "objIn": "uocx3doao",
                            "objOut": "12u8rrp3y"
                        }
                    ]
                },
                {
                    "name": "Index 6 string",
                    "value": ""
                },
                {
                    "name": "Index 7 string",
                    "value": ""
                },
                {
                    "name": "Index 8 string",
                    "value": ""
                },
                {
                    "name": "Index 9 string",
                    "value": ""
                }
            ],
            "objName": "Ops.String.RouteString"
        },
        {
            "id": "ucbfesl89",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Switch Value",
                            "portOut": "result",
                            "objIn": "rs9bt9e01",
                            "objOut": "ucbfesl89"
                        },
                        {
                            "portIn": "Index",
                            "portOut": "result",
                            "objIn": "12u8rrp3y",
                            "objOut": "ucbfesl89"
                        },
                        {
                            "portIn": "number2",
                            "portOut": "result",
                            "objIn": "cqu7wuhrs",
                            "objOut": "ucbfesl89"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Number"
        },
        {
            "id": "neq8i0xm9",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "timesTriggered",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "timesTriggered",
                            "objIn": "ucbfesl89",
                            "objOut": "neq8i0xm9"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.TriggerCounter"
        },
        {
            "id": "p980lyvd6",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "delay",
                    "value": 0.2
                }
            ],
            "portsOut": [
                {
                    "name": "next",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "next",
                            "objIn": "neq8i0xm9",
                            "objOut": "p980lyvd6"
                        }
                    ]
                },
                {
                    "name": "Delaying",
                    "value": false
                }
            ],
            "objName": "Ops.Trigger.DelayedTrigger"
        },
        {
            "id": "e3946w5fi",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "r",
                    "value": 0.9983333333333333
                },
                {
                    "name": "g",
                    "value": 0.9983333333333333
                },
                {
                    "name": "b",
                    "value": 0.9983333333333333
                },
                {
                    "name": "a",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "Input_0",
                            "portOut": "trigger",
                            "objIn": "cocw9n6jl",
                            "objOut": "e3946w5fi"
                        }
                    ]
                }
            ],
            "objName": "Ops.Gl.ClearColor"
        },
        {
            "id": "v6sem8zha",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "PointSize",
                    "value": 6
                },
                {
                    "name": "Size in Pixels",
                    "value": 0
                },
                {
                    "name": "Random Size",
                    "value": 1
                },
                {
                    "name": "Round",
                    "value": 1
                },
                {
                    "name": "Round Antialias",
                    "value": 1
                },
                {
                    "name": "Scale by Distance",
                    "value": 1
                },
                {
                    "name": "r",
                    "value": 0.9789583333333334
                },
                {
                    "name": "g",
                    "value": 0.9789583333333334
                },
                {
                    "name": "b",
                    "value": 0.9789583333333334
                },
                {
                    "name": "Vertex Colors",
                    "value": 0
                },
                {
                    "name": "Colorize Texture",
                    "value": 0
                },
                {
                    "name": "Mask Channel index",
                    "value": 0
                },
                {
                    "name": "Mask Channel",
                    "value": "R"
                },
                {
                    "name": "Colorize Randomize",
                    "value": 0
                },
                {
                    "name": "Point Size Channel index",
                    "value": 0
                },
                {
                    "name": "Point Size Channel",
                    "value": "R"
                },
                {
                    "name": "Texture Point Size Mul",
                    "value": 1
                },
                {
                    "name": "Map Size 0 index",
                    "value": 0
                },
                {
                    "name": "Map Size 0",
                    "value": "Black"
                },
                {
                    "name": "Flip Texture",
                    "value": 0
                },
                {
                    "name": "Random Atlas",
                    "value": 0
                },
                {
                    "name": "Atlas Repeat X",
                    "value": 4
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "trigger",
                            "objIn": "3fulrhg8n",
                            "objOut": "v6sem8zha"
                        }
                    ]
                }
            ],
            "objName": "Ops.Gl.Shader.PointMaterial_v4"
        },
        {
            "id": "secjq9231",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Draw Mesh",
                    "value": 0
                },
                {
                    "name": "Scale Mesh",
                    "value": 0.69
                },
                {
                    "name": "Size index",
                    "value": 1
                },
                {
                    "name": "Size",
                    "value": "Manual"
                },
                {
                    "name": "Auto Height",
                    "value": 0
                },
                {
                    "name": "Auto Line Breaks",
                    "value": 1
                },
                {
                    "name": "font",
                    "value": "monospace"
                },
                {
                    "name": "weight",
                    "value": "bold"
                },
                {
                    "name": "fontSize",
                    "value": 200
                },
                {
                    "name": "align index",
                    "value": 1
                },
                {
                    "name": "align",
                    "value": "center"
                },
                {
                    "name": "Vertical align index",
                    "value": 1
                },
                {
                    "name": "Vertical align",
                    "value": "Middle"
                },
                {
                    "name": "Letter Spacing",
                    "value": 5
                },
                {
                    "name": "Line Height Add",
                    "value": 0
                },
                {
                    "name": "Padding Y Top",
                    "value": 40
                },
                {
                    "name": "Padding Y Bottom",
                    "value": -40
                },
                {
                    "name": "Padding X",
                    "value": 2
                },
                {
                    "name": "filter index",
                    "value": 0
                },
                {
                    "name": "filter",
                    "value": "nearest"
                },
                {
                    "name": "Wrap index",
                    "value": 2
                },
                {
                    "name": "Wrap",
                    "value": "clamp to edge"
                },
                {
                    "name": "Anisotropic index",
                    "value": 0
                },
                {
                    "name": "Anisotropic",
                    "value": "0"
                },
                {
                    "name": "Reuse Texture",
                    "value": 1
                },
                {
                    "name": "Show Debug",
                    "value": 0
                },
                {
                    "name": "Redraw On Font Load",
                    "value": 1
                },
                {
                    "name": "r",
                    "value": 1
                },
                {
                    "name": "g",
                    "value": 1
                },
                {
                    "name": "b",
                    "value": 1
                },
                {
                    "name": "Opacity",
                    "value": 1
                },
                {
                    "name": "background R",
                    "value": 0.021380208333333317
                },
                {
                    "name": "background G",
                    "value": 0.002819006045659381
                },
                {
                    "name": "background B",
                    "value": 0.002819006045659381
                },
                {
                    "name": "background A",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "update",
                            "portOut": "Next",
                            "objIn": "iue5c9do0",
                            "objOut": "secjq9231"
                        }
                    ]
                },
                {
                    "name": "Ratio",
                    "value": 0.9960159362549801
                },
                {
                    "name": "texture",
                    "links": [
                        {
                            "portIn": "texture",
                            "portOut": "texture",
                            "objIn": "iue5c9do0",
                            "objOut": "secjq9231"
                        }
                    ]
                },
                {
                    "name": "Aspect",
                    "value": 1.004
                },
                {
                    "name": "Num Lines",
                    "value": 1
                }
            ],
            "objName": "Ops.Gl.Textures.TextTexture_v5"
        },
        {
            "id": "iue5c9do0",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Num Points",
                    "value": 600
                },
                {
                    "name": "Seed",
                    "value": 1
                },
                {
                    "name": "Z Position index",
                    "value": 0
                },
                {
                    "name": "Z Position",
                    "value": "None"
                },
                {
                    "name": "Z Multiply",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "Points",
                    "links": [
                        {
                            "portIn": "array 0",
                            "portOut": "Points",
                            "objIn": "c9rpuzcyf",
                            "objOut": "iue5c9do0"
                        }
                    ]
                },
                {
                    "name": "NumPoints",
                    "links": [
                        {
                            "portIn": "Num Values",
                            "portOut": "NumPoints",
                            "objIn": "3e0f6s0zs",
                            "objOut": "iue5c9do0"
                        }
                    ]
                }
            ],
            "objName": "Ops.Gl.TextureToRandomPoints"
        },
        {
            "id": "3fulrhg8n",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Array",
                    "title": "Positions"
                },
                {
                    "name": "Num Points",
                    "value": 0
                },
                {
                    "name": "Scramble Texcoords",
                    "value": 1
                },
                {
                    "name": "Seed",
                    "value": 1
                },
                {
                    "name": "Coordinates",
                    "value": 0,
                    "title": "Texture Coordinates"
                },
                {
                    "name": "Point sizes",
                    "value": 0
                },
                {
                    "name": "Vertex Colors",
                    "value": 0
                }
            ],
            "objName": "Ops.Gl.Meshes.PointCloudFromArray"
        },
        {
            "id": "c1zi4nzdq",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Blend Mode index",
                    "value": 0
                },
                {
                    "name": "Blend Mode",
                    "value": "normal"
                },
                {
                    "name": "Alpha Mask index",
                    "value": 0
                },
                {
                    "name": "Alpha Mask",
                    "value": "Off"
                },
                {
                    "name": "Amount",
                    "value": 1
                },
                {
                    "name": "Width",
                    "value": 1
                },
                {
                    "name": "Type index",
                    "value": 0
                },
                {
                    "name": "Type",
                    "value": "X"
                },
                {
                    "name": "Pos",
                    "value": 0.5
                },
                {
                    "name": "Smoothstep",
                    "value": 0
                },
                {
                    "name": "sRGB",
                    "value": 0
                },
                {
                    "name": "color space index",
                    "value": 1
                },
                {
                    "name": "color space",
                    "value": "Oklab"
                },
                {
                    "name": "b",
                    "value": 0.9893631744384765
                },
                {
                    "name": "r2",
                    "value": 0.689
                },
                {
                    "name": "r3",
                    "value": 0.7566200209907644
                },
                {
                    "name": "b3",
                    "value": 0.7578361838542487
                }
            ],
            "objName": "Ops.Gl.ImageCompose.Gradient_v2"
        },
        {
            "id": "yd1lrnjmq",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Size index",
                    "value": 0
                },
                {
                    "name": "Size",
                    "value": "Auto"
                },
                {
                    "name": "Width",
                    "value": 640
                },
                {
                    "name": "Height",
                    "value": 480
                },
                {
                    "name": "Filter index",
                    "value": 1
                },
                {
                    "name": "Filter",
                    "value": "linear"
                },
                {
                    "name": "Wrap index",
                    "value": 1
                },
                {
                    "name": "Wrap",
                    "value": "repeat"
                },
                {
                    "name": "Anisotropic index",
                    "value": 0
                },
                {
                    "name": "Anisotropic",
                    "value": "0"
                },
                {
                    "name": "Pixel Format index",
                    "value": 4
                },
                {
                    "name": "Pixel Format",
                    "value": "RGBA 8bit ubyte"
                },
                {
                    "name": "Clear",
                    "value": 1
                },
                {
                    "name": "R",
                    "value": 0
                },
                {
                    "name": "G",
                    "value": 0
                },
                {
                    "name": "B",
                    "value": 0
                },
                {
                    "name": "A",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "Render",
                            "portOut": "Next",
                            "objIn": "c1zi4nzdq",
                            "objOut": "yd1lrnjmq"
                        },
                        {
                            "portIn": "exe",
                            "portOut": "Next",
                            "objIn": "9oo5ss5cu",
                            "objOut": "yd1lrnjmq"
                        }
                    ]
                },
                {
                    "name": "texture_out",
                    "links": [
                        {
                            "portIn": "Texture Colorize",
                            "portOut": "texture_out",
                            "objIn": "v6sem8zha",
                            "objOut": "yd1lrnjmq"
                        }
                    ]
                },
                {
                    "name": "Aspect Ratio",
                    "value": 2.330612244897959
                },
                {
                    "name": "Texture Width",
                    "value": 571
                },
                {
                    "name": "Texture Height",
                    "value": 245
                }
            ],
            "objName": "Ops.Gl.ImageCompose.ImageCompose_v4"
        },
        {
            "id": "vh79bxs15",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "projection mode index",
                    "value": 0
                },
                {
                    "name": "projection mode",
                    "value": "prespective"
                },
                {
                    "name": "frustum near",
                    "value": 0.01
                },
                {
                    "name": "frustum far",
                    "value": 50
                },
                {
                    "name": "fov",
                    "value": 25
                },
                {
                    "name": "Auto Aspect Ratio",
                    "value": 1
                },
                {
                    "name": "Aspect Ratio",
                    "value": 1
                },
                {
                    "name": "eye X",
                    "value": 0
                },
                {
                    "name": "eye Y",
                    "value": 0
                },
                {
                    "name": "eye Z",
                    "value": 0.09
                },
                {
                    "name": "center X",
                    "value": 0
                },
                {
                    "name": "center Y",
                    "value": 0
                },
                {
                    "name": "center Z",
                    "value": 0
                },
                {
                    "name": "truck",
                    "value": 0.08
                },
                {
                    "name": "boom",
                    "value": 0.07
                },
                {
                    "name": "dolly",
                    "value": 0
                },
                {
                    "name": "tilt",
                    "value": 0
                },
                {
                    "name": "pan",
                    "value": 0
                },
                {
                    "name": "roll",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "render",
                            "portOut": "trigger",
                            "objIn": "v6sem8zha",
                            "objOut": "vh79bxs15"
                        }
                    ]
                },
                {
                    "name": "Aspect",
                    "value": 2.3252032520325203
                }
            ],
            "objName": "Ops.Gl.Matrix.Camera"
        },
        {
            "id": "3e0f6s0zs",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Mode index",
                    "value": 2
                },
                {
                    "name": "Mode",
                    "value": "ABC"
                },
                {
                    "name": "Integer",
                    "value": 0
                },
                {
                    "name": "Last == First",
                    "value": 0
                },
                {
                    "name": "Min A",
                    "value": -0.5
                },
                {
                    "name": "Max A",
                    "value": 0.5
                },
                {
                    "name": "Min B",
                    "value": -1
                },
                {
                    "name": "Max B",
                    "value": 1
                },
                {
                    "name": "Min C",
                    "value": -1
                },
                {
                    "name": "Max C",
                    "value": 1
                },
                {
                    "name": "Min D",
                    "value": -1
                },
                {
                    "name": "Max D",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Array Out",
                    "links": [
                        {
                            "portIn": "Next Array",
                            "portOut": "Array Out",
                            "objIn": "j343s4149",
                            "objOut": "3e0f6s0zs"
                        }
                    ]
                },
                {
                    "name": "Chunks Amount",
                    "value": 600
                },
                {
                    "name": "Array length",
                    "value": 1800
                }
            ],
            "objName": "Ops.Array.RandomNumbersArray_v4"
        },
        {
            "id": "c9rpuzcyf",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Math function index",
                    "value": 0
                },
                {
                    "name": "Math function",
                    "value": "+"
                }
            ],
            "portsOut": [
                {
                    "name": "Array result",
                    "links": [
                        {
                            "portIn": "Array",
                            "portOut": "Array result",
                            "objIn": "3fulrhg8n",
                            "objOut": "c9rpuzcyf"
                        }
                    ]
                },
                {
                    "name": "Array length",
                    "value": 1800
                }
            ],
            "objName": "Ops.Array.ArrayMathArray"
        },
        {
            "id": "tz2x1l5vm",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Math function index",
                    "value": 2
                },
                {
                    "name": "Math function",
                    "value": "*"
                }
            ],
            "portsOut": [
                {
                    "name": "Array result",
                    "links": [
                        {
                            "portIn": "array 1",
                            "portOut": "Array result",
                            "objIn": "c9rpuzcyf",
                            "objOut": "tz2x1l5vm"
                        }
                    ]
                },
                {
                    "name": "Array length",
                    "value": 1800
                }
            ],
            "objName": "Ops.Array.ArrayMath"
        },
        {
            "id": "cohjmnvpn",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "easing index",
                    "value": 23
                },
                {
                    "name": "easing",
                    "value": "Elastic Out"
                },
                {
                    "name": "duration",
                    "value": 1
                },
                {
                    "name": "Direction index",
                    "value": 0
                },
                {
                    "name": "Direction",
                    "value": "Both"
                },
                {
                    "name": "value false",
                    "value": 3
                },
                {
                    "name": "value true",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "trigger",
                            "objIn": "8do9a5cbh",
                            "objOut": "cohjmnvpn"
                        }
                    ]
                },
                {
                    "name": "value",
                    "links": [
                        {
                            "portIn": "Number for math",
                            "portOut": "value",
                            "objIn": "tz2x1l5vm",
                            "objOut": "cohjmnvpn"
                        },
                        {
                            "portIn": "value",
                            "portOut": "value",
                            "objIn": "hvx6xrr6l",
                            "objOut": "cohjmnvpn"
                        }
                    ]
                },
                {
                    "name": "finished",
                    "value": 1
                }
            ],
            "objName": "Ops.Anim.BoolAnim"
        },
        {
            "id": "j343s4149",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "easing index",
                    "value": 2
                },
                {
                    "name": "easing",
                    "value": "smoothstep"
                }
            ],
            "portsOut": [
                {
                    "name": "Matrix",
                    "links": [
                        {
                            "portIn": "array 0",
                            "portOut": "Matrix",
                            "objIn": "tz2x1l5vm",
                            "objOut": "j343s4149"
                        }
                    ]
                }
            ],
            "objName": "Ops.Array.AnimArray_v2"
        },
        {
            "id": "5tt1o6u5n",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "value",
                    "value": 20
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Duration",
                            "portOut": "result",
                            "objIn": "j343s4149",
                            "objOut": "5tt1o6u5n"
                        },
                        {
                            "portIn": "number1",
                            "portOut": "result",
                            "objIn": "gpx1tma1x",
                            "objOut": "5tt1o6u5n"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Number"
        },
        {
            "id": "8do9a5cbh",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "min",
                    "value": 0
                },
                {
                    "name": "max",
                    "value": 100
                },
                {
                    "name": "easing index",
                    "value": 0
                },
                {
                    "name": "easing",
                    "value": "linear"
                }
            ],
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "Update",
                            "portOut": "Next",
                            "objIn": "j343s4149",
                            "objOut": "8do9a5cbh"
                        }
                    ]
                },
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Random Seed ",
                            "portOut": "result",
                            "objIn": "3e0f6s0zs",
                            "objOut": "8do9a5cbh"
                        }
                    ]
                }
            ],
            "objName": "Ops.Anim.RandomAnim_v2"
        },
        {
            "id": "na23k1rea",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "value",
                    "value": 0.1
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "duration",
                            "portOut": "result",
                            "objIn": "8do9a5cbh",
                            "objOut": "na23k1rea"
                        },
                        {
                            "portIn": "number2",
                            "portOut": "result",
                            "objIn": "gpx1tma1x",
                            "objOut": "na23k1rea"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Number"
        },
        {
            "id": "gpx1tma1x",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "pause between",
                            "portOut": "result",
                            "objIn": "8do9a5cbh",
                            "objOut": "gpx1tma1x"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.Subtract"
        },
        {
            "id": "gsgivsfz7",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "value",
                    "value": 1000
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Height",
                            "portOut": "result",
                            "objIn": "secjq9231",
                            "objOut": "gsgivsfz7"
                        },
                        {
                            "portIn": "Width",
                            "portOut": "result",
                            "objIn": "secjq9231",
                            "objOut": "gsgivsfz7"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Number"
        },
        {
            "id": "hvx6xrr6l",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "old min",
                    "value": 0
                },
                {
                    "name": "old max",
                    "value": 3
                },
                {
                    "name": "new min",
                    "value": 1
                },
                {
                    "name": "new max",
                    "value": 0.3
                },
                {
                    "name": "Easing index",
                    "value": 0
                },
                {
                    "name": "Easing",
                    "value": "Linear"
                },
                {
                    "name": "Clamp",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "a",
                            "portOut": "result",
                            "objIn": "v6sem8zha",
                            "objOut": "hvx6xrr6l"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.MapRange"
        },
        {
            "id": "47cc1e8fc",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Output",
                    "multiPortNum": 5
                },
                {
                    "name": "Output_0",
                    "links": [
                        {
                            "portIn": "Render",
                            "portOut": "Output_0",
                            "objIn": "yd1lrnjmq",
                            "objOut": "47cc1e8fc"
                        }
                    ]
                },
                {
                    "name": "Output_1",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "render",
                            "portOut": "Output_1",
                            "objIn": "vh79bxs15",
                            "objOut": "47cc1e8fc"
                        }
                    ]
                },
                {
                    "name": "Output_2",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "Output_2",
                            "objIn": "cohjmnvpn",
                            "objOut": "47cc1e8fc"
                        }
                    ]
                },
                {
                    "name": "Output_3",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "Trigger",
                            "portOut": "Output_3",
                            "objIn": "91o9003wc",
                            "objOut": "47cc1e8fc"
                        }
                    ]
                },
                {
                    "name": "Output_4",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "Render",
                            "portOut": "Output_4",
                            "objIn": "secjq9231",
                            "objOut": "47cc1e8fc"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.SequenceMultiPort"
        },
        {
            "id": "91o9003wc",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Value",
                    "value": 0
                },
                {
                    "name": "Variable",
                    "value": "showParticleWord"
                }
            ],
            "objName": "Ops.Vars.VarTriggerNumber"
        },
        {
            "id": "685mimg8y",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Value",
                    "value": "Word Bubbles"
                },
                {
                    "name": "Variable",
                    "value": "currentWord"
                }
            ],
            "objName": "Ops.Vars.VarTriggerString"
        },
        {
            "id": "7lb79ypl8",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "file",
                    "value": "assets/Montserrat-VariableFont_wght.ttf",
                    "display": "file"
                },
                {
                    "name": "family",
                    "value": "Montserrat"
                },
                {
                    "name": "Active",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Loaded",
                    "value": 1
                }
            ],
            "objName": "Ops.Html.FontFile_v2"
        },
        {
            "id": "5ezk67hnh",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "title",
                    "value": "Patch Samples"
                },
                {
                    "name": "text",
                    "value": "Circular#4\nby OneTenEleven\nhttps://cables.gl/p/YQuLuD\n\nGenuary 1 - Particles, lots of them\nby esperanc\nhttps://cables.gl/p/3keGDO"
                }
            ],
            "objName": "Ops.Ui.Comment_v2"
        },
        {
            "id": "cqbtptq2f",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "True",
                    "links": [
                        {
                            "portIn": "reset",
                            "portOut": "True",
                            "objIn": "neq8i0xm9",
                            "objOut": "cqbtptq2f"
                        }
                    ]
                }
            ],
            "objName": "Ops.Boolean.TriggerOnChangeBoolean"
        },
        {
            "id": "4bypyc9jz",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "number1",
                            "portOut": "result",
                            "objIn": "cqu7wuhrs",
                            "objOut": "4bypyc9jz"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Number"
        },
        {
            "id": "cqu7wuhrs",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Value",
                            "portOut": "result",
                            "objIn": "cqbtptq2f",
                            "objOut": "cqu7wuhrs"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.Compare.Equals"
        },
        {
            "id": "jhtzptvhc",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Font Loaded",
                    "links": [
                        {
                            "portIn": "Trigger",
                            "portOut": "Font Loaded",
                            "objIn": "685mimg8y",
                            "objOut": "jhtzptvhc"
                        }
                    ]
                }
            ],
            "objName": "Ops.Html.FontsLoaded"
        },
        {
            "id": "jgsi4yt7i",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "String",
                    "links": [
                        {
                            "portIn": "text",
                            "portOut": "String",
                            "objIn": "secjq9231",
                            "objOut": "jgsi4yt7i"
                        }
                    ]
                }
            ],
            "objName": "Ops.String.String_v2"
        },
        {
            "id": "46ivur84j",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Value",
                            "portOut": "result",
                            "objIn": "ssirebiiu",
                            "objOut": "46ivur84j"
                        }
                    ]
                }
            ],
            "objName": "Ops.Boolean.Boolean"
        },
        {
            "id": "ss7cd5igd",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "value",
                    "value": 3
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Voice index",
                            "portOut": "result",
                            "objIn": "ynum5sd9k",
                            "objOut": "ss7cd5igd"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Number"
        },
        {
            "id": "b5ry1o2rh",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Volume",
                    "value": 0.571
                },
                {
                    "name": "Mute",
                    "value": 0
                },
                {
                    "name": "Show Audio Suspended Button",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Current Volume",
                    "value": 0.571
                },
                {
                    "name": "Number Of Channels",
                    "value": 2
                },
                {
                    "name": "Context State",
                    "value": "running"
                }
            ],
            "objName": "Ops.WebAudio.Output_v2"
        },
        {
            "id": "scx6ere5d",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "delay",
                    "value": 0.5
                }
            ],
            "portsOut": [
                {
                    "name": "next",
                    "links": [
                        {
                            "portIn": "Say",
                            "portOut": "next",
                            "objIn": "ynum5sd9k",
                            "objOut": "scx6ere5d"
                        }
                    ]
                },
                {
                    "name": "Delaying",
                    "value": false
                }
            ],
            "objName": "Ops.Trigger.DelayedTrigger"
        },
        {
            "id": "uu0cim0uz",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "min",
                    "value": 0
                },
                {
                    "name": "max",
                    "value": 1000
                },
                {
                    "name": "Integer",
                    "value": 0
                },
                {
                    "name": "No consecutive duplicates",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Seed",
                            "portOut": "result",
                            "objIn": "fbw80qrnv",
                            "objOut": "uu0cim0uz"
                        },
                        {
                            "portIn": "Seed",
                            "portOut": "result",
                            "objIn": "do1oenkai",
                            "objOut": "uu0cim0uz"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.TriggerRandomNumber_v2"
        },
        {
            "id": "fbw80qrnv",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Min",
                    "value": 0.3
                },
                {
                    "name": "Max",
                    "value": 0.8
                }
            ],
            "portsOut": [
                {
                    "name": "X",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "X",
                            "objIn": "wankju4x1",
                            "objOut": "fbw80qrnv"
                        }
                    ]
                },
                {
                    "name": "Y",
                    "links": [
                        {
                            "portIn": "Feedback",
                            "portOut": "Y",
                            "objIn": "bq0a165nh",
                            "objOut": "fbw80qrnv"
                        }
                    ]
                },
                {
                    "name": "Z",
                    "links": [
                        {
                            "portIn": "Mix %",
                            "portOut": "Z",
                            "objIn": "bq0a165nh",
                            "objOut": "fbw80qrnv"
                        }
                    ]
                },
                {
                    "name": "W",
                    "value": 0.37626144929861827
                }
            ],
            "objName": "Ops.Math.RandomNumbers_v3"
        },
        {
            "id": "wankju4x1",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "old min",
                    "value": 0.3
                },
                {
                    "name": "old max",
                    "value": 0.8
                },
                {
                    "name": "new min",
                    "value": 0.1
                },
                {
                    "name": "new max",
                    "value": 1.2
                },
                {
                    "name": "Easing index",
                    "value": 0
                },
                {
                    "name": "Easing",
                    "value": "Linear"
                },
                {
                    "name": "Clamp",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Delay Time",
                            "portOut": "result",
                            "objIn": "bq0a165nh",
                            "objOut": "wankju4x1"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.MapRange"
        },
        {
            "id": "bq0a165nh",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Sync BPM",
                    "value": 0
                },
                {
                    "name": "BPM",
                    "value": 100
                },
                {
                    "name": "Note Division",
                    "value": 4
                },
                {
                    "name": "Type index",
                    "value": 0
                },
                {
                    "name": "Type",
                    "value": "normal"
                },
                {
                    "name": "Bypass",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "Audio Out",
                    "links": [
                        {
                            "portIn": "Audio In",
                            "portOut": "Audio Out",
                            "objIn": "b5ry1o2rh",
                            "objOut": "bq0a165nh"
                        }
                    ]
                }
            ],
            "objName": "Ops.Team.ToneAudio.FeedbackDelay"
        },
        {
            "id": "do1oenkai",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Min",
                    "value": 0
                },
                {
                    "name": "Max",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "X",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "X",
                            "objIn": "jihek464t",
                            "objOut": "do1oenkai"
                        }
                    ]
                },
                {
                    "name": "Y",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "Y",
                            "objIn": "kcb8jgge4",
                            "objOut": "do1oenkai"
                        }
                    ]
                },
                {
                    "name": "Z",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "Z",
                            "objIn": "dwq2saks0",
                            "objOut": "do1oenkai"
                        }
                    ]
                },
                {
                    "name": "W",
                    "value": 0.15252289859723653
                }
            ],
            "objName": "Ops.Math.RandomNumbers_v3"
        },
        {
            "id": "dwq2saks0",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "old min",
                    "value": 0
                },
                {
                    "name": "old max",
                    "value": 1
                },
                {
                    "name": "new min",
                    "value": 0
                },
                {
                    "name": "new max",
                    "value": 17
                },
                {
                    "name": "Easing index",
                    "value": 0
                },
                {
                    "name": "Easing",
                    "value": "Linear"
                },
                {
                    "name": "Clamp",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Integer",
                            "portOut": "result",
                            "objIn": "wuogy3j45",
                            "objOut": "dwq2saks0"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.MapRange"
        },
        {
            "id": "jihek464t",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "old min",
                    "value": 0.2
                },
                {
                    "name": "old max",
                    "value": 0.8
                },
                {
                    "name": "new min",
                    "value": 0
                },
                {
                    "name": "new max",
                    "value": 1
                },
                {
                    "name": "Easing index",
                    "value": 0
                },
                {
                    "name": "Easing",
                    "value": "Linear"
                },
                {
                    "name": "Clamp",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Pitch",
                            "portOut": "result",
                            "objIn": "ynum5sd9k",
                            "objOut": "jihek464t"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.MapRange"
        },
        {
            "id": "kcb8jgge4",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "old min",
                    "value": 0
                },
                {
                    "name": "old max",
                    "value": 1
                },
                {
                    "name": "new min",
                    "value": 150
                },
                {
                    "name": "new max",
                    "value": 250
                },
                {
                    "name": "Easing index",
                    "value": 0
                },
                {
                    "name": "Easing",
                    "value": "Linear"
                },
                {
                    "name": "Clamp",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "Speed (WPM)",
                            "portOut": "result",
                            "objIn": "ynum5sd9k",
                            "objOut": "kcb8jgge4"
                        }
                    ]
                }
            ],
            "objName": "Ops.Math.MapRange"
        },
        {
            "id": "wuogy3j45",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Number out",
                    "links": [
                        {
                            "portIn": "Variants index",
                            "portOut": "Number out",
                            "objIn": "ynum5sd9k",
                            "objOut": "wuogy3j45"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.Integer"
        },
        {
            "id": "0ei62y5z7",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "Next",
                            "objIn": "scx6ere5d",
                            "objOut": "0ei62y5z7"
                        },
                        {
                            "portIn": "exe",
                            "portOut": "Next",
                            "objIn": "snecpb55q",
                            "objOut": "0ei62y5z7"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.TriggerExtender"
        },
        {
            "id": "snecpb55q",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "delay",
                    "value": 0.1
                }
            ],
            "portsOut": [
                {
                    "name": "next",
                    "links": [
                        {
                            "portIn": "Generate",
                            "portOut": "next",
                            "objIn": "uu0cim0uz",
                            "objOut": "snecpb55q"
                        }
                    ]
                },
                {
                    "name": "Delaying",
                    "value": false
                }
            ],
            "objName": "Ops.Trigger.DelayedTrigger"
        },
        {
            "id": "wlf2upvzp",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Strings",
                    "multiPortNum": 6
                },
                {
                    "name": "Strings_6",
                    "value": "",
                    "title": "add port"
                }
            ],
            "portsOut": [
                {
                    "name": "String",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "String",
                            "objIn": "jgsi4yt7i",
                            "objOut": "wlf2upvzp"
                        },
                        {
                            "portIn": "Text",
                            "portOut": "String",
                            "objIn": "ynum5sd9k",
                            "objOut": "wlf2upvzp"
                        }
                    ]
                },
                {
                    "name": "Num Values",
                    "value": 6
                }
            ],
            "objName": "Ops.String.SwitchStringMultiPort"
        },
        {
            "id": "4w3bb9c5x",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Value 0",
                    "value": 0
                },
                {
                    "name": "Value 1",
                    "value": 1
                },
                {
                    "name": "Value 2",
                    "value": 2
                },
                {
                    "name": "Value 3",
                    "value": 3
                },
                {
                    "name": "Value 4",
                    "value": 4
                },
                {
                    "name": "Value 5",
                    "value": 5
                },
                {
                    "name": "Value 6",
                    "value": 6
                },
                {
                    "name": "Value 7",
                    "value": 7
                },
                {
                    "name": "Default Value",
                    "value": "0"
                }
            ],
            "portsOut": [
                {
                    "name": "Value",
                    "links": [
                        {
                            "portIn": "Index",
                            "portOut": "Value",
                            "objIn": "wlf2upvzp",
                            "objOut": "4w3bb9c5x"
                        }
                    ]
                },
                {
                    "name": "Last Value",
                    "value": "0"
                }
            ],
            "objName": "Ops.Number.SwitchNumberOnTrigger"
        },
        {
            "id": "ynum5sd9k",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Amplitude",
                    "value": 1
                },
                {
                    "name": "Voice",
                    "value": "el (Greek)"
                },
                {
                    "name": "Word Gap",
                    "value": 0
                },
                {
                    "name": "Variants",
                    "value": "f1"
                },
                {
                    "name": "Line-break length",
                    "value": 0
                },
                {
                    "name": "Capitals",
                    "value": 0
                },
                {
                    "name": "Punctuation",
                    "value": "False"
                },
                {
                    "name": "No Stop",
                    "value": 0
                },
                {
                    "name": "UTF16",
                    "value": 0
                },
                {
                    "name": "SSML",
                    "value": 0
                },
                {
                    "name": "Log Console",
                    "value": 1
                },
                {
                    "name": "Pan",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Audio Out",
                    "links": [
                        {
                            "portIn": "Audio In",
                            "portOut": "Audio Out",
                            "objIn": "bq0a165nh",
                            "objOut": "ynum5sd9k"
                        }
                    ]
                },
                {
                    "name": "Speaking",
                    "links": [
                        {
                            "portIn": "cdavz1kxu",
                            "portOut": "Speaking",
                            "objIn": "rttd7cou9",
                            "objOut": "ynum5sd9k"
                        },
                        {
                            "portIn": "cdavz1kxu",
                            "portOut": "Speaking",
                            "objIn": "rmb46f1to",
                            "objOut": "ynum5sd9k"
                        },
                        {
                            "portIn": "cdavz1kxu",
                            "portOut": "Speaking",
                            "objIn": "co26ecvrt",
                            "objOut": "ynum5sd9k"
                        },
                        {
                            "portIn": "cdavz1kxu",
                            "portOut": "Speaking",
                            "objIn": "y07w21pod",
                            "objOut": "ynum5sd9k"
                        },
                        {
                            "portIn": "cdavz1kxu",
                            "portOut": "Speaking",
                            "objIn": "dia49nr11",
                            "objOut": "ynum5sd9k"
                        },
                        {
                            "portIn": "cdavz1kxu",
                            "portOut": "Speaking",
                            "objIn": "uocx3doao",
                            "objOut": "ynum5sd9k"
                        }
                    ]
                },
                {
                    "name": "Voice Loaded",
                    "value": true
                }
            ],
            "objName": "Ops.Patch.PhORckJ.MeSpeak"
        },
        {
            "id": "9oo5ss5cu",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "min",
                    "value": 0
                },
                {
                    "name": "max",
                    "value": 0.7
                },
                {
                    "name": "duration",
                    "value": 0.5
                },
                {
                    "name": "pause between",
                    "value": 0
                },
                {
                    "name": "easing index",
                    "value": 0
                },
                {
                    "name": "easing",
                    "value": "linear"
                }
            ],
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "Next",
                            "objIn": "ln2vc338p",
                            "objOut": "9oo5ss5cu"
                        }
                    ]
                },
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "r",
                            "portOut": "result",
                            "objIn": "c1zi4nzdq",
                            "objOut": "9oo5ss5cu"
                        },
                        {
                            "portIn": "g2",
                            "portOut": "result",
                            "objIn": "c1zi4nzdq",
                            "objOut": "9oo5ss5cu"
                        }
                    ]
                }
            ],
            "objName": "Ops.Anim.RandomAnim_v2"
        },
        {
            "id": "ln2vc338p",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "min",
                    "value": 0
                },
                {
                    "name": "max",
                    "value": 0.7
                },
                {
                    "name": "duration",
                    "value": 0.5
                },
                {
                    "name": "pause between",
                    "value": 0
                },
                {
                    "name": "easing index",
                    "value": 0
                },
                {
                    "name": "easing",
                    "value": "linear"
                }
            ],
            "portsOut": [
                {
                    "name": "result",
                    "links": [
                        {
                            "portIn": "g",
                            "portOut": "result",
                            "objIn": "c1zi4nzdq",
                            "objOut": "ln2vc338p"
                        },
                        {
                            "portIn": "b2",
                            "portOut": "result",
                            "objIn": "c1zi4nzdq",
                            "objOut": "ln2vc338p"
                        },
                        {
                            "portIn": "g3",
                            "portOut": "result",
                            "objIn": "c1zi4nzdq",
                            "objOut": "ln2vc338p"
                        }
                    ]
                }
            ],
            "objName": "Ops.Anim.RandomAnim_v2"
        },
        {
            "id": "ssirebiiu",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Delay",
                    "value": 0.4
                }
            ],
            "portsOut": [
                {
                    "name": "Out Value",
                    "links": [
                        {
                            "portIn": "bool",
                            "portOut": "Out Value",
                            "objIn": "cohjmnvpn",
                            "objOut": "ssirebiiu"
                        }
                    ]
                }
            ],
            "objName": "Ops.Number.DelayNumberSimple"
        },
        {
            "id": "rttd7cou9",
            "uiAttribs": {},
            "storage": {
                "blueprintVer": 2,
                "subPatchVer": 2
            },
            "portsIn": [
                {
                    "name": "4ac9zc8zo",
                    "title": "Execute"
                },
                {
                    "name": "sfpeahgy9",
                    "value": 0,
                    "title": "result"
                },
                {
                    "name": "zgdzm1396",
                    "title": "Trigger"
                },
                {
                    "name": "77ynzu99p",
                    "title": "Text"
                },
                {
                    "name": "cdavz1kxu",
                    "title": "Value"
                },
                {
                    "name": "patchId",
                    "value": "bp2sub_rttd7cou9"
                }
            ],
            "portsOut": [
                {
                    "name": "kg5qtugsw",
                    "title": "Execute",
                    "links": [
                        {
                            "portIn": "4ac9zc8zo",
                            "portOut": "kg5qtugsw",
                            "objIn": "rmb46f1to",
                            "objOut": "rttd7cou9"
                        }
                    ]
                },
                {
                    "name": "6midlo8lx",
                    "title": "result",
                    "links": [
                        {
                            "portIn": "sfpeahgy9",
                            "portOut": "6midlo8lx",
                            "objIn": "rmb46f1to",
                            "objOut": "rttd7cou9"
                        }
                    ]
                },
                {
                    "name": "wahl89i9c",
                    "title": "Result",
                    "links": [
                        {
                            "portIn": "Strings_0",
                            "portOut": "wahl89i9c",
                            "objIn": "wlf2upvzp",
                            "objOut": "rttd7cou9"
                        }
                    ]
                },
                {
                    "name": "we8ds0m13",
                    "title": "Out Value",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "we8ds0m13",
                            "objIn": "46ivur84j",
                            "objOut": "rttd7cou9"
                        }
                    ]
                },
                {
                    "name": "epjdyyi1u",
                    "title": "Left Click",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "epjdyyi1u",
                            "objIn": "0ei62y5z7",
                            "objOut": "rttd7cou9"
                        },
                        {
                            "portIn": "Trigger 0",
                            "portOut": "epjdyyi1u",
                            "objIn": "4w3bb9c5x",
                            "objOut": "rttd7cou9"
                        }
                    ]
                }
            ],
            "objName": "Ops.Patch.PhORckJ.WordBubble"
        },
        {
            "id": "rmb46f1to",
            "uiAttribs": {},
            "storage": {
                "blueprintVer": 2,
                "subPatchVer": 2
            },
            "portsIn": [
                {
                    "name": "4ac9zc8zo",
                    "title": "Execute"
                },
                {
                    "name": "sfpeahgy9",
                    "title": "result"
                },
                {
                    "name": "zgdzm1396",
                    "title": "Trigger"
                },
                {
                    "name": "77ynzu99p",
                    "title": "Text"
                },
                {
                    "name": "cdavz1kxu",
                    "title": "Value"
                },
                {
                    "name": "patchId",
                    "value": "bp2sub_rmb46f1to"
                }
            ],
            "portsOut": [
                {
                    "name": "kg5qtugsw",
                    "title": "Execute",
                    "links": [
                        {
                            "portIn": "4ac9zc8zo",
                            "portOut": "kg5qtugsw",
                            "objIn": "co26ecvrt",
                            "objOut": "rmb46f1to"
                        }
                    ]
                },
                {
                    "name": "6midlo8lx",
                    "title": "result",
                    "links": [
                        {
                            "portIn": "sfpeahgy9",
                            "portOut": "6midlo8lx",
                            "objIn": "co26ecvrt",
                            "objOut": "rmb46f1to"
                        }
                    ]
                },
                {
                    "name": "wahl89i9c",
                    "title": "Result",
                    "links": [
                        {
                            "portIn": "Strings_1",
                            "portOut": "wahl89i9c",
                            "objIn": "wlf2upvzp",
                            "objOut": "rmb46f1to"
                        }
                    ]
                },
                {
                    "name": "we8ds0m13",
                    "title": "Out Value",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "we8ds0m13",
                            "objIn": "46ivur84j",
                            "objOut": "rmb46f1to"
                        }
                    ]
                },
                {
                    "name": "epjdyyi1u",
                    "title": "Left Click",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "epjdyyi1u",
                            "objIn": "0ei62y5z7",
                            "objOut": "rmb46f1to"
                        },
                        {
                            "portIn": "Trigger 1",
                            "portOut": "epjdyyi1u",
                            "objIn": "4w3bb9c5x",
                            "objOut": "rmb46f1to"
                        }
                    ]
                }
            ],
            "objName": "Ops.Patch.PhORckJ.WordBubble"
        },
        {
            "id": "co26ecvrt",
            "uiAttribs": {},
            "storage": {
                "blueprintVer": 2,
                "subPatchVer": 2
            },
            "portsIn": [
                {
                    "name": "4ac9zc8zo",
                    "title": "Execute"
                },
                {
                    "name": "sfpeahgy9",
                    "title": "result"
                },
                {
                    "name": "zgdzm1396",
                    "title": "Trigger"
                },
                {
                    "name": "77ynzu99p",
                    "title": "Text"
                },
                {
                    "name": "cdavz1kxu",
                    "title": "Value"
                },
                {
                    "name": "patchId",
                    "value": "bp2sub_co26ecvrt"
                }
            ],
            "portsOut": [
                {
                    "name": "kg5qtugsw",
                    "title": "Execute",
                    "links": [
                        {
                            "portIn": "4ac9zc8zo",
                            "portOut": "kg5qtugsw",
                            "objIn": "y07w21pod",
                            "objOut": "co26ecvrt"
                        }
                    ]
                },
                {
                    "name": "6midlo8lx",
                    "title": "result",
                    "links": [
                        {
                            "portIn": "sfpeahgy9",
                            "portOut": "6midlo8lx",
                            "objIn": "y07w21pod",
                            "objOut": "co26ecvrt"
                        }
                    ]
                },
                {
                    "name": "wahl89i9c",
                    "title": "Result",
                    "links": [
                        {
                            "portIn": "Strings_2",
                            "portOut": "wahl89i9c",
                            "objIn": "wlf2upvzp",
                            "objOut": "co26ecvrt"
                        }
                    ]
                },
                {
                    "name": "we8ds0m13",
                    "title": "Out Value",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "we8ds0m13",
                            "objIn": "46ivur84j",
                            "objOut": "co26ecvrt"
                        }
                    ]
                },
                {
                    "name": "epjdyyi1u",
                    "title": "Left Click",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "epjdyyi1u",
                            "objIn": "0ei62y5z7",
                            "objOut": "co26ecvrt"
                        },
                        {
                            "portIn": "Trigger 2",
                            "portOut": "epjdyyi1u",
                            "objIn": "4w3bb9c5x",
                            "objOut": "co26ecvrt"
                        }
                    ]
                }
            ],
            "objName": "Ops.Patch.PhORckJ.WordBubble"
        },
        {
            "id": "y07w21pod",
            "uiAttribs": {},
            "storage": {
                "blueprintVer": 2,
                "subPatchVer": 2
            },
            "portsIn": [
                {
                    "name": "4ac9zc8zo",
                    "title": "Execute"
                },
                {
                    "name": "sfpeahgy9",
                    "title": "result"
                },
                {
                    "name": "zgdzm1396",
                    "title": "Trigger"
                },
                {
                    "name": "77ynzu99p",
                    "title": "Text"
                },
                {
                    "name": "cdavz1kxu",
                    "title": "Value"
                },
                {
                    "name": "patchId",
                    "value": "bp2sub_y07w21pod"
                }
            ],
            "portsOut": [
                {
                    "name": "kg5qtugsw",
                    "title": "Execute",
                    "links": [
                        {
                            "portIn": "4ac9zc8zo",
                            "portOut": "kg5qtugsw",
                            "objIn": "dia49nr11",
                            "objOut": "y07w21pod"
                        }
                    ]
                },
                {
                    "name": "6midlo8lx",
                    "title": "result",
                    "links": [
                        {
                            "portIn": "sfpeahgy9",
                            "portOut": "6midlo8lx",
                            "objIn": "dia49nr11",
                            "objOut": "y07w21pod"
                        }
                    ]
                },
                {
                    "name": "wahl89i9c",
                    "title": "Result",
                    "links": [
                        {
                            "portIn": "Strings_3",
                            "portOut": "wahl89i9c",
                            "objIn": "wlf2upvzp",
                            "objOut": "y07w21pod"
                        }
                    ]
                },
                {
                    "name": "we8ds0m13",
                    "title": "Out Value",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "we8ds0m13",
                            "objIn": "46ivur84j",
                            "objOut": "y07w21pod"
                        }
                    ]
                },
                {
                    "name": "epjdyyi1u",
                    "title": "Left Click",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "epjdyyi1u",
                            "objIn": "0ei62y5z7",
                            "objOut": "y07w21pod"
                        },
                        {
                            "portIn": "Trigger 3",
                            "portOut": "epjdyyi1u",
                            "objIn": "4w3bb9c5x",
                            "objOut": "y07w21pod"
                        }
                    ]
                }
            ],
            "objName": "Ops.Patch.PhORckJ.WordBubble"
        },
        {
            "id": "dia49nr11",
            "uiAttribs": {},
            "storage": {
                "blueprintVer": 2,
                "subPatchVer": 2
            },
            "portsIn": [
                {
                    "name": "4ac9zc8zo",
                    "title": "Execute"
                },
                {
                    "name": "sfpeahgy9",
                    "title": "result"
                },
                {
                    "name": "zgdzm1396",
                    "title": "Trigger"
                },
                {
                    "name": "77ynzu99p",
                    "title": "Text"
                },
                {
                    "name": "cdavz1kxu",
                    "title": "Value"
                },
                {
                    "name": "patchId",
                    "value": "bp2sub_dia49nr11"
                }
            ],
            "portsOut": [
                {
                    "name": "kg5qtugsw",
                    "title": "Execute",
                    "links": [
                        {
                            "portIn": "4ac9zc8zo",
                            "portOut": "kg5qtugsw",
                            "objIn": "uocx3doao",
                            "objOut": "dia49nr11"
                        }
                    ]
                },
                {
                    "name": "6midlo8lx",
                    "title": "result",
                    "links": [
                        {
                            "portIn": "sfpeahgy9",
                            "portOut": "6midlo8lx",
                            "objIn": "uocx3doao",
                            "objOut": "dia49nr11"
                        }
                    ]
                },
                {
                    "name": "wahl89i9c",
                    "title": "Result",
                    "links": [
                        {
                            "portIn": "Strings_4",
                            "portOut": "wahl89i9c",
                            "objIn": "wlf2upvzp",
                            "objOut": "dia49nr11"
                        }
                    ]
                },
                {
                    "name": "we8ds0m13",
                    "title": "Out Value",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "we8ds0m13",
                            "objIn": "46ivur84j",
                            "objOut": "dia49nr11"
                        }
                    ]
                },
                {
                    "name": "epjdyyi1u",
                    "title": "Left Click",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "epjdyyi1u",
                            "objIn": "0ei62y5z7",
                            "objOut": "dia49nr11"
                        },
                        {
                            "portIn": "Trigger 4",
                            "portOut": "epjdyyi1u",
                            "objIn": "4w3bb9c5x",
                            "objOut": "dia49nr11"
                        }
                    ]
                }
            ],
            "objName": "Ops.Patch.PhORckJ.WordBubble"
        },
        {
            "id": "uocx3doao",
            "uiAttribs": {},
            "storage": {
                "blueprintVer": 2,
                "subPatchVer": 2
            },
            "portsIn": [
                {
                    "name": "4ac9zc8zo",
                    "title": "Execute"
                },
                {
                    "name": "sfpeahgy9",
                    "title": "result"
                },
                {
                    "name": "zgdzm1396",
                    "title": "Trigger"
                },
                {
                    "name": "77ynzu99p",
                    "title": "Text"
                },
                {
                    "name": "cdavz1kxu",
                    "title": "Value"
                },
                {
                    "name": "patchId",
                    "value": "bp2sub_uocx3doao"
                }
            ],
            "portsOut": [
                {
                    "name": "6midlo8lx",
                    "title": "result",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "6midlo8lx",
                            "objIn": "4bypyc9jz",
                            "objOut": "uocx3doao"
                        }
                    ]
                },
                {
                    "name": "wahl89i9c",
                    "title": "Result",
                    "links": [
                        {
                            "portIn": "Strings_5",
                            "portOut": "wahl89i9c",
                            "objIn": "wlf2upvzp",
                            "objOut": "uocx3doao"
                        }
                    ]
                },
                {
                    "name": "we8ds0m13",
                    "title": "Out Value",
                    "links": [
                        {
                            "portIn": "value",
                            "portOut": "we8ds0m13",
                            "objIn": "46ivur84j",
                            "objOut": "uocx3doao"
                        }
                    ]
                },
                {
                    "name": "epjdyyi1u",
                    "title": "Left Click",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "epjdyyi1u",
                            "objIn": "0ei62y5z7",
                            "objOut": "uocx3doao"
                        },
                        {
                            "portIn": "Trigger 5",
                            "portOut": "epjdyyi1u",
                            "objIn": "4w3bb9c5x",
                            "objOut": "uocx3doao"
                        }
                    ]
                }
            ],
            "objName": "Ops.Patch.PhORckJ.WordBubble"
        },
        {
            "id": "f598d6rct",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Font Loaded",
                    "links": [
                        {
                            "portIn": "exe",
                            "portOut": "Font Loaded",
                            "objIn": "wjevfffko",
                            "objOut": "f598d6rct"
                        }
                    ]
                }
            ],
            "objName": "Ops.Html.FontsLoaded"
        },
        {
            "id": "ca85vt4vm",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Style index",
                    "value": 1
                },
                {
                    "name": "Style",
                    "value": "Ring"
                }
            ],
            "objName": "Ops.Html.Utils.LoadingIndicator"
        },
        {
            "id": "9kvstixiz",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Scale index",
                    "value": 1
                },
                {
                    "name": "Scale",
                    "value": "Fit"
                },
                {
                    "name": "Flip Y",
                    "value": 0
                },
                {
                    "name": "Flip X",
                    "value": 0
                }
            ],
            "objName": "Ops.Gl.Meshes.FullscreenRectangle_v2"
        },
        {
            "id": "f9lknxl5d",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "r",
                    "value": 0.9516666666666667
                },
                {
                    "name": "g",
                    "value": 0.9516666666666667
                },
                {
                    "name": "b",
                    "value": 0.9516666666666667
                },
                {
                    "name": "colorizeTexture",
                    "value": 0
                },
                {
                    "name": "Vertex Colors",
                    "value": 0
                },
                {
                    "name": "Alpha Mask Source index",
                    "value": 0
                },
                {
                    "name": "Alpha Mask Source",
                    "value": "Luminance"
                },
                {
                    "name": "Opacity TexCoords Transform",
                    "value": 0
                },
                {
                    "name": "Discard Transparent Pixels",
                    "value": 0
                },
                {
                    "name": "diffuseRepeatX",
                    "value": 1
                },
                {
                    "name": "diffuseRepeatY",
                    "value": 1
                },
                {
                    "name": "Tex Offset X",
                    "value": 0
                },
                {
                    "name": "Tex Offset Y",
                    "value": 0
                },
                {
                    "name": "Crop TexCoords",
                    "value": 0
                },
                {
                    "name": "billboard",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "render",
                            "portOut": "trigger",
                            "objIn": "9kvstixiz",
                            "objOut": "f9lknxl5d"
                        }
                    ]
                }
            ],
            "objName": "Ops.Gl.Shader.BasicMaterial_v3"
        },
        {
            "id": "snoi7qa0a",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Pass Through",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Trigger out",
                    "links": [
                        {
                            "portIn": "render",
                            "portOut": "Trigger out",
                            "objIn": "f9lknxl5d",
                            "objOut": "snoi7qa0a"
                        },
                        {
                            "portIn": "exe",
                            "portOut": "Trigger out",
                            "objIn": "j5lrgu01k",
                            "objOut": "snoi7qa0a"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.GateTrigger"
        },
        {
            "id": "jjtcf5xhe",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Result",
                    "links": [
                        {
                            "portIn": "Visible",
                            "portOut": "Result",
                            "objIn": "ca85vt4vm",
                            "objOut": "jjtcf5xhe"
                        },
                        {
                            "portIn": "bool",
                            "portOut": "Result",
                            "objIn": "j5lrgu01k",
                            "objOut": "jjtcf5xhe"
                        },
                        {
                            "portIn": "Boolean",
                            "portOut": "Result",
                            "objIn": "uv05tgzbu",
                            "objOut": "jjtcf5xhe"
                        }
                    ]
                }
            ],
            "objName": "Ops.Boolean.BoolByTrigger"
        },
        {
            "id": "7zwdbo5ol",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Next",
                    "links": [
                        {
                            "portIn": "True",
                            "portOut": "Next",
                            "objIn": "jjtcf5xhe",
                            "objOut": "7zwdbo5ol"
                        }
                    ]
                },
                {
                    "name": "Was Triggered",
                    "value": 1
                }
            ],
            "objName": "Ops.Trigger.TriggerOnce"
        },
        {
            "id": "vxr3otkkk",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Output",
                    "multiPortNum": 3
                },
                {
                    "name": "Output_0",
                    "links": [
                        {
                            "portIn": "Exec",
                            "portOut": "Output_0",
                            "objIn": "7zwdbo5ol",
                            "objOut": "vxr3otkkk"
                        }
                    ]
                },
                {
                    "name": "Output_1",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "Output_1",
                            "objIn": "2cfv6s3m9",
                            "objOut": "vxr3otkkk"
                        }
                    ]
                },
                {
                    "name": "Output_2",
                    "title": "add port",
                    "links": [
                        {
                            "portIn": "Execute",
                            "portOut": "Output_2",
                            "objIn": "snoi7qa0a",
                            "objOut": "vxr3otkkk"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.SequenceMultiPort"
        },
        {
            "id": "2cfv6s3m9",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Trigger out",
                    "links": [
                        {
                            "portIn": "render",
                            "portOut": "Trigger out",
                            "objIn": "e3946w5fi",
                            "objOut": "2cfv6s3m9"
                        }
                    ]
                }
            ],
            "objName": "Ops.Trigger.GateTrigger"
        },
        {
            "id": "uv05tgzbu",
            "uiAttribs": {},
            "portsOut": [
                {
                    "name": "Result",
                    "links": [
                        {
                            "portIn": "Pass Through",
                            "portOut": "Result",
                            "objIn": "2cfv6s3m9",
                            "objOut": "uv05tgzbu"
                        }
                    ]
                }
            ],
            "objName": "Ops.Boolean.Not"
        },
        {
            "id": "j5lrgu01k",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "easing index",
                    "value": 9
                },
                {
                    "name": "easing",
                    "value": "Expo In Out"
                },
                {
                    "name": "duration",
                    "value": 3
                },
                {
                    "name": "Direction index",
                    "value": 2
                },
                {
                    "name": "Direction",
                    "value": "Only False"
                },
                {
                    "name": "value false",
                    "value": 0
                },
                {
                    "name": "value true",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "value",
                    "links": [
                        {
                            "portIn": "a",
                            "portOut": "value",
                            "objIn": "f9lknxl5d",
                            "objOut": "j5lrgu01k"
                        }
                    ]
                },
                {
                    "name": "finished",
                    "value": 1
                }
            ],
            "objName": "Ops.Anim.BoolAnim"
        },
        {
            "id": "wjevfffko",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "delay",
                    "value": 2
                }
            ],
            "portsOut": [
                {
                    "name": "next",
                    "links": [
                        {
                            "portIn": "false",
                            "portOut": "next",
                            "objIn": "jjtcf5xhe",
                            "objOut": "wjevfffko"
                        }
                    ]
                },
                {
                    "name": "Delaying",
                    "value": false
                }
            ],
            "objName": "Ops.Trigger.DelayedTrigger"
        },
        {
            "id": "0hb37gqt4",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "file",
                    "value": "assets/MajorMonoDisplay-Regular.ttf",
                    "display": "file"
                },
                {
                    "name": "family",
                    "value": "Major"
                },
                {
                    "name": "Active",
                    "value": 1
                }
            ],
            "portsOut": [
                {
                    "name": "Loaded",
                    "value": 1
                }
            ],
            "objName": "Ops.Html.FontFile_v2"
        },
        {
            "id": "j0iexe11w",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "Text",
                    "value": "MaKE WORD"
                },
                {
                    "name": "Scale Text",
                    "value": 1
                },
                {
                    "name": "Scale",
                    "value": 1,
                    "title": "Line Scale"
                },
                {
                    "name": "Font",
                    "value": "Major"
                },
                {
                    "name": "align index",
                    "value": 1
                },
                {
                    "name": "align",
                    "value": "center"
                },
                {
                    "name": "vertical align index",
                    "value": 1
                },
                {
                    "name": "vertical align",
                    "value": "Middle"
                },
                {
                    "name": "Line Height",
                    "value": 1
                },
                {
                    "name": "Letter Spacing",
                    "value": 0.18
                },
                {
                    "name": "filter index",
                    "value": 2
                },
                {
                    "name": "filter",
                    "value": "mipmap"
                },
                {
                    "name": "Anisotropic index",
                    "value": 0
                },
                {
                    "name": "Anisotropic",
                    "value": 0
                },
                {
                    "name": "r",
                    "value": 0.1383333333333333
                },
                {
                    "name": "g",
                    "value": 0.1383333333333333
                },
                {
                    "name": "b",
                    "value": 0.1383333333333333
                },
                {
                    "name": "a",
                    "value": 0.786
                }
            ],
            "portsOut": [
                {
                    "name": "Total Lines",
                    "value": 1
                },
                {
                    "name": "Width",
                    "value": 3.2785715198199994
                },
                {
                    "name": "Font Available",
                    "value": 1
                }
            ],
            "objName": "Ops.Gl.Meshes.TextMesh_v2"
        },
        {
            "id": "2spo4t96x",
            "uiAttribs": {},
            "portsIn": [
                {
                    "name": "posX",
                    "value": 2.12
                },
                {
                    "name": "posY",
                    "value": 1.02
                },
                {
                    "name": "posZ",
                    "value": 0
                },
                {
                    "name": "scale",
                    "value": 0.12
                },
                {
                    "name": "rotX",
                    "value": 0
                },
                {
                    "name": "rotY",
                    "value": 0
                },
                {
                    "name": "rotZ",
                    "value": 0
                }
            ],
            "portsOut": [
                {
                    "name": "trigger",
                    "links": [
                        {
                            "portIn": "Render",
                            "portOut": "trigger",
                            "objIn": "j0iexe11w",
                            "objOut": "2spo4t96x"
                        }
                    ]
                }
            ],
            "objName": "Ops.Gl.Matrix.Transform"
        }
    ],
    "export": {
        "time": "2025-05-09 20:51",
        "service": "github",
        "exportNumber": 5
    }
};
if(!CABLES.exportedPatch){CABLES.exportedPatch=CABLES.exportedPatches['hORckJ']}
"use strict";

var CABLES=CABLES||{};
CABLES.OPS=CABLES.OPS||{};

var Ops=Ops || {};
Ops.Gl=Ops.Gl || {};
Ops.Ui=Ops.Ui || {};
Ops.Anim=Ops.Anim || {};
Ops.Html=Ops.Html || {};
Ops.Math=Ops.Math || {};
Ops.Team=Ops.Team || {};
Ops.Vars=Ops.Vars || {};
Ops.Array=Ops.Array || {};
Ops.Patch=Ops.Patch || {};
Ops.Number=Ops.Number || {};
Ops.String=Ops.String || {};
Ops.Boolean=Ops.Boolean || {};
Ops.Devices=Ops.Devices || {};
Ops.Trigger=Ops.Trigger || {};
Ops.Html.CSS=Ops.Html.CSS || {};
Ops.WebAudio=Ops.WebAudio || {};
Ops.Extension=Ops.Extension || {};
Ops.Gl.Matrix=Ops.Gl.Matrix || {};
Ops.Gl.Meshes=Ops.Gl.Meshes || {};
Ops.Gl.Shader=Ops.Gl.Shader || {};
Ops.Html.Utils=Ops.Html.Utils || {};
Ops.Gl.Textures=Ops.Gl.Textures || {};
Ops.Math.Compare=Ops.Math.Compare || {};
Ops.Html.Elements=Ops.Html.Elements || {};
Ops.Patch.PhORckJ=Ops.Patch.PhORckJ || {};
Ops.Team.ToneAudio=Ops.Team.ToneAudio || {};
Ops.Gl.ImageCompose=Ops.Gl.ImageCompose || {};
Ops.Devices.Keyboard=Ops.Devices.Keyboard || {};
Ops.Gl.ShaderEffects=Ops.Gl.ShaderEffects || {};
Ops.Extension.Deprecated=Ops.Extension.Deprecated || {};



// **************************************************************
// 
// Ops.Patch.PhORckJ.WordBubble
// 
// **************************************************************

Ops.Patch.PhORckJ.WordBubble= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"inc_gen_ports_js":"const port_4ac9zc8zo=op.inTrigger(\"4ac9zc8zo\");\nport_4ac9zc8zo.setUiAttribs({title:\"Execute\",display:\"button\",});\n\nconst port_sfpeahgy9=op.inFloat(\"sfpeahgy9\",1);\nport_sfpeahgy9.setUiAttribs({title:\"result\",});\n\nconst port_zgdzm1396=op.inTrigger(\"zgdzm1396\");\nport_zgdzm1396.setUiAttribs({title:\"Trigger\",display:\"button\",});\n\nconst port_77ynzu99p=op.inString(\"77ynzu99p\",\"\");\nport_77ynzu99p.setUiAttribs({title:\"Text\",});\n\nconst port_cdavz1kxu=op.inFloat(\"cdavz1kxu\",0);\nport_cdavz1kxu.setUiAttribs({title:\"Value\",display:\"bool\",});\n\nconst port_kg5qtugsw=op.outTrigger(\"kg5qtugsw\");\nport_kg5qtugsw.setUiAttribs({title:\"Execute\",});\n\nconst port_6midlo8lx=op.outNumber(\"6midlo8lx\");\nport_6midlo8lx.setUiAttribs({title:\"result\",});\n\nconst port_wahl89i9c=op.outString(\"wahl89i9c\");\nport_wahl89i9c.setUiAttribs({title:\"Result\",});\n\nconst port_we8ds0m13=op.outNumber(\"we8ds0m13\");\nport_we8ds0m13.setUiAttribs({title:\"Out Value\",});\n\nconst port_epjdyyi1u=op.outTrigger(\"epjdyyi1u\");\nport_epjdyyi1u.setUiAttribs({title:\"Left Click\",});\n\nop.initInnerPorts=function(addedOps)\n{\n  for(let i=0;i<addedOps.length;i++)\n  {\n    if(addedOps[i].innerInput)\n    {\nconst innerOut_4ac9zc8zo = addedOps[i].outTrigger(\"innerOut_4ac9zc8zo\");\ninnerOut_4ac9zc8zo.setUiAttribs({title:\"Execute\"});\nport_4ac9zc8zo.onTriggered = () => { innerOut_4ac9zc8zo.trigger(); };\n\nconst innerOut_sfpeahgy9 = addedOps[i].outNumber(\"innerOut_sfpeahgy9\");\ninnerOut_sfpeahgy9.set(port_sfpeahgy9.get() );\ninnerOut_sfpeahgy9.setUiAttribs({title:\"result\"});\nport_sfpeahgy9.on(\"change\", (a,v) => { innerOut_sfpeahgy9.set(a); });\n\nconst innerOut_zgdzm1396 = addedOps[i].outTrigger(\"innerOut_zgdzm1396\");\ninnerOut_zgdzm1396.setUiAttribs({title:\"Trigger\"});\nport_zgdzm1396.onTriggered = () => { innerOut_zgdzm1396.trigger(); };\n\nconst innerOut_77ynzu99p = addedOps[i].outString(\"innerOut_77ynzu99p\");\ninnerOut_77ynzu99p.set(port_77ynzu99p.get() );\ninnerOut_77ynzu99p.setUiAttribs({title:\"Text\"});\nport_77ynzu99p.on(\"change\", (a,v) => { innerOut_77ynzu99p.set(a); });\n\nconst innerOut_cdavz1kxu = addedOps[i].outNumber(\"innerOut_cdavz1kxu\");\ninnerOut_cdavz1kxu.set(port_cdavz1kxu.get() );\ninnerOut_cdavz1kxu.setUiAttribs({title:\"Value\"});\nport_cdavz1kxu.on(\"change\", (a,v) => { innerOut_cdavz1kxu.set(a); });\n\n    }\nif(addedOps[i].innerOutput)\n{\nconst innerIn_kg5qtugsw = addedOps[i].inTrigger(\"innerIn_kg5qtugsw\");\ninnerIn_kg5qtugsw.setUiAttribs({title:\"Execute\"});\ninnerIn_kg5qtugsw.onTriggered = () => { port_kg5qtugsw.trigger(); };\n\nconst innerIn_6midlo8lx = addedOps[i].inFloat(\"innerIn_6midlo8lx\");\ninnerIn_6midlo8lx.setUiAttribs({title:\"result\"});\ninnerIn_6midlo8lx.on(\"change\", (a,v) => { port_6midlo8lx.set(a); });\n\nconst innerIn_wahl89i9c = addedOps[i].inString(\"innerIn_wahl89i9c\");\ninnerIn_wahl89i9c.setUiAttribs({title:\"Result\"});\ninnerIn_wahl89i9c.on(\"change\", (a,v) => { port_wahl89i9c.set(a); });\n\nconst innerIn_we8ds0m13 = addedOps[i].inFloat(\"innerIn_we8ds0m13\");\ninnerIn_we8ds0m13.setUiAttribs({title:\"Out Value\"});\ninnerIn_we8ds0m13.on(\"change\", (a,v) => { port_we8ds0m13.set(a); });\n\nconst innerIn_epjdyyi1u = addedOps[i].inTrigger(\"innerIn_epjdyyi1u\");\ninnerIn_epjdyyi1u.setUiAttribs({title:\"Left Click\"});\ninnerIn_epjdyyi1u.onTriggered = () => { port_epjdyyi1u.trigger(); };\n\n}\n}\n};\n","subpatch_json":"{\"ops\":[{\"id\":\"bp0-0\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"percent\",\"value\":1.1},{\"name\":\"segments\",\"value\":180},{\"name\":\"radius\",\"value\":0.46}],\"portsOut\":[{\"name\":\"Points\",\"links\":[{\"portIn\":\"Points\",\"portOut\":\"Points\",\"objIn\":\"bp0-3\",\"objOut\":\"bp0-0\"}]},{\"name\":\"Total points\",\"value\":199},{\"name\":\"Array lengths\",\"value\":597}],\"objName\":\"Ops.Extension.Deprecated.PointsCircle\"},{\"id\":\"bp0-1\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"innerRadius\",\"value\":0.99},{\"name\":\"segments\",\"value\":90},{\"name\":\"percent\",\"value\":1},{\"name\":\"steps\",\"value\":0},{\"name\":\"invertSteps\",\"value\":0},{\"name\":\"mapping index\",\"value\":0},{\"name\":\"mapping\",\"value\":\"flat\"},{\"name\":\"Spline\",\"value\":0},{\"name\":\"Draw\",\"value\":1}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-8\",\"objOut\":\"bp0-1\"}]}],\"objName\":\"Ops.Gl.Meshes.Circle\"},{\"id\":\"bp0-2\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"r\",\"value\":0},{\"name\":\"g\",\"value\":0},{\"name\":\"b\",\"value\":0},{\"name\":\"a\",\"value\":1},{\"name\":\"colorizeTexture\",\"value\":0},{\"name\":\"billboard\",\"value\":0},{\"name\":\"Opacity TexCoords Transform\",\"value\":0},{\"name\":\"preMultiplied alpha\",\"value\":0},{\"name\":\"diffuseRepeatX\",\"value\":1},{\"name\":\"diffuseRepeatY\",\"value\":1},{\"name\":\"Tex Offset X\",\"value\":0},{\"name\":\"Tex Offset Y\",\"value\":0}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"trigger\",\"objIn\":\"bp0-10\",\"objOut\":\"bp0-2\"}]}],\"objName\":\"Ops.Gl.Shader.BasicMaterial\"},{\"id\":\"bp0-3\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Num Points\",\"value\":0},{\"name\":\"Line Strip\",\"value\":1},{\"name\":\"TexCoords index\",\"value\":0},{\"name\":\"TexCoords\",\"value\":\"0\"},{\"name\":\"TexCoords Array\",\"value\":0},{\"name\":\"Vertex Colors\",\"value\":0}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"Next\",\"objIn\":\"bp0-13\",\"objOut\":\"bp0-3\"}]}],\"objName\":\"Ops.Gl.Meshes.SimpleSpline\"},{\"id\":\"bp0-4\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"num\",\"value\":5}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-6\",\"objOut\":\"bp0-4\"}]},{\"name\":\"index\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"index\",\"objIn\":\"bp0-7\",\"objOut\":\"bp0-4\"}]}],\"objName\":\"Ops.Trigger.Repeat\"},{\"id\":\"bp0-5\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"b\",\"value\":1},{\"name\":\"a\",\"value\":1},{\"name\":\"colorizeTexture\",\"value\":0},{\"name\":\"billboard\",\"value\":0},{\"name\":\"Opacity TexCoords Transform\",\"value\":0},{\"name\":\"preMultiplied alpha\",\"value\":0},{\"name\":\"diffuseRepeatX\",\"value\":1},{\"name\":\"diffuseRepeatY\",\"value\":1},{\"name\":\"Tex Offset X\",\"value\":0},{\"name\":\"Tex Offset Y\",\"value\":0}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"trigger\",\"objIn\":\"bp0-4\",\"objOut\":\"bp0-5\"}]}],\"objName\":\"Ops.Gl.Shader.BasicMaterial\"},{\"id\":\"bp0-6\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"posX\",\"value\":0},{\"name\":\"posY\",\"value\":0},{\"name\":\"posZ\",\"value\":0},{\"name\":\"rotX\",\"value\":0},{\"name\":\"rotY\",\"value\":0},{\"name\":\"rotZ\",\"value\":0}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"Render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-3\",\"objOut\":\"bp0-6\"}]}],\"objName\":\"Ops.Gl.Matrix.Transform\"},{\"id\":\"bp0-7\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"number2\",\"value\":30}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"scale\",\"portOut\":\"result\",\"objIn\":\"bp0-6\",\"objOut\":\"bp0-7\"}]}],\"objName\":\"Ops.Math.Divide\"},{\"id\":\"bp0-8\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Scale\",\"anim\":{\"keys\":[{\"t\":0,\"v\":0,\"e\":0},{\"t\":1,\"v\":1,\"e\":0}],\"loop\":false,\"tlActive\":true}},{\"name\":\"Size\",\"value\":1,\"anim\":{\"keys\":[{\"t\":0,\"v\":1,\"e\":0}],\"loop\":false,\"tlActive\":true}},{\"name\":\"Strength\",\"value\":1},{\"name\":\"Smooth\",\"value\":1},{\"name\":\"Output index\",\"value\":0},{\"name\":\"Output\",\"value\":\"Add XYZ\"},{\"name\":\"x\",\"value\":0},{\"name\":\"y\",\"value\":0},{\"name\":\"z\",\"value\":0},{\"name\":\"WorldSpace\",\"value\":0}],\"objName\":\"Ops.Gl.ShaderEffects.PerlinAreaDeform_v2\"},{\"id\":\"bp0-9\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":1},{\"name\":\"max\",\"value\":10},{\"name\":\"random seed\",\"value\":0},{\"name\":\"duration\",\"value\":2},{\"name\":\"pause between\",\"value\":0},{\"name\":\"easing index\",\"value\":9},{\"name\":\"easing\",\"value\":\"Expo In Out\"}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-17\",\"objOut\":\"bp0-9\"}]},{\"name\":\"result\",\"value\":1.9326774691358026}],\"objName\":\"Ops.Anim.RandomAnim\"},{\"id\":\"bp0-10\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"num\",\"value\":5}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-1\",\"objOut\":\"bp0-10\"}]},{\"name\":\"index\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"index\",\"objIn\":\"bp0-11\",\"objOut\":\"bp0-10\"}]}],\"objName\":\"Ops.Trigger.Repeat\"},{\"id\":\"bp0-11\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"number2\",\"value\":7}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"radius\",\"portOut\":\"result\",\"objIn\":\"bp0-1\",\"objOut\":\"bp0-11\"}]}],\"objName\":\"Ops.Math.Divide\"},{\"id\":\"bp0-12\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":1},{\"name\":\"max\",\"value\":2},{\"name\":\"random seed\",\"value\":0},{\"name\":\"duration\",\"value\":2},{\"name\":\"pause between\",\"value\":0},{\"name\":\"easing index\",\"value\":6},{\"name\":\"easing\",\"value\":\"Cubic In Out\"}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-9\",\"objOut\":\"bp0-12\"}]},{\"name\":\"result\",\"value\":1.0605195473251028}],\"objName\":\"Ops.Anim.RandomAnim\"},{\"id\":\"bp0-13\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Scale\",\"anim\":{\"keys\":[{\"t\":0,\"v\":0,\"e\":0},{\"t\":1,\"v\":1,\"e\":0}],\"loop\":false,\"tlActive\":true}},{\"name\":\"Size\",\"value\":1,\"anim\":{\"keys\":[{\"t\":0,\"v\":1,\"e\":0}],\"loop\":false,\"tlActive\":true}},{\"name\":\"Smooth\",\"value\":1},{\"name\":\"Output index\",\"value\":0},{\"name\":\"Output\",\"value\":\"Add XYZ\"},{\"name\":\"x\",\"value\":0},{\"name\":\"y\",\"value\":0},{\"name\":\"z\",\"value\":0},{\"name\":\"WorldSpace\",\"value\":0}],\"objName\":\"Ops.Gl.ShaderEffects.PerlinAreaDeform_v2\"},{\"id\":\"bp0-14\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Mode index\",\"value\":0},{\"name\":\"Mode\",\"value\":\"Sine\"},{\"name\":\"phase\",\"value\":0},{\"name\":\"frequency\",\"value\":1},{\"name\":\"amplitude\",\"value\":1}],\"portsOut\":[{\"name\":\"Trigger out\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Trigger out\",\"objIn\":\"bp0-12\",\"objOut\":\"bp0-14\"}]},{\"name\":\"result\",\"links\":[{\"portIn\":\"value\",\"portOut\":\"result\",\"objIn\":\"bp0-15\",\"objOut\":\"bp0-14\"}]}],\"objName\":\"Ops.Anim.SineAnim\"},{\"id\":\"bp0-15\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"old min\",\"value\":-1},{\"name\":\"old max\",\"value\":1},{\"name\":\"new min\",\"value\":0},{\"name\":\"new max\",\"value\":1},{\"name\":\"Easing index\",\"value\":0},{\"name\":\"Easing\",\"value\":\"Linear\"},{\"name\":\"Clamp\",\"value\":1}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Scale\",\"portOut\":\"result\",\"objIn\":\"bp0-8\",\"objOut\":\"bp0-15\"},{\"portIn\":\"Scale\",\"portOut\":\"result\",\"objIn\":\"bp0-13\",\"objOut\":\"bp0-15\"}]}],\"objName\":\"Ops.Math.MapRange\"},{\"id\":\"bp0-16\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Speed\",\"value\":1},{\"name\":\"Play\",\"value\":1},{\"name\":\"Sync to timeline\",\"value\":0}],\"portsOut\":[{\"name\":\"Time\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Time\",\"objIn\":\"bp0-78\",\"objOut\":\"bp0-16\"}]}],\"objName\":\"Ops.Anim.Timer_v2\"},{\"id\":\"bp0-17\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":0},{\"name\":\"max\",\"value\":0.7},{\"name\":\"duration\",\"value\":0.5},{\"name\":\"pause between\",\"value\":0},{\"name\":\"easing index\",\"value\":0},{\"name\":\"easing\",\"value\":\"linear\"}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-18\",\"objOut\":\"bp0-17\"}]},{\"name\":\"result\",\"links\":[{\"portIn\":\"g\",\"portOut\":\"result\",\"objIn\":\"bp0-5\",\"objOut\":\"bp0-17\"}]}],\"objName\":\"Ops.Anim.RandomAnim_v2\"},{\"id\":\"bp0-18\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":0},{\"name\":\"max\",\"value\":0.7},{\"name\":\"duration\",\"value\":0.5},{\"name\":\"pause between\",\"value\":0},{\"name\":\"easing index\",\"value\":0},{\"name\":\"easing\",\"value\":\"linear\"}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-60\",\"objOut\":\"bp0-18\"}]},{\"name\":\"result\",\"links\":[{\"portIn\":\"r\",\"portOut\":\"result\",\"objIn\":\"bp0-5\",\"objOut\":\"bp0-18\"}]}],\"objName\":\"Ops.Anim.RandomAnim_v2\"},{\"id\":\"bp0-19\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Output\",\"multiPortNum\":4},{\"name\":\"Output_0\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"Output_0\",\"objIn\":\"bp0-21\",\"objOut\":\"bp0-19\"}]},{\"name\":\"Output_1\",\"title\":\"add port\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Output_1\",\"objIn\":\"bp0-14\",\"objOut\":\"bp0-19\"}]},{\"name\":\"Output_2\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"Output_2\",\"objIn\":\"bp0-2\",\"objOut\":\"bp0-19\"}]},{\"name\":\"Output_3\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"Output_3\",\"objIn\":\"bp0-87\",\"objOut\":\"bp0-19\"}]}],\"objName\":\"Ops.Trigger.SequenceMultiPort\"},{\"id\":\"bp0-20\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"posZ\",\"value\":0},{\"name\":\"rotX\",\"value\":0},{\"name\":\"rotY\",\"value\":0}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"Execute\",\"portOut\":\"trigger\",\"objIn\":\"bp0-24\",\"objOut\":\"bp0-20\"},{\"portIn\":\"Trigger in\",\"portOut\":\"trigger\",\"objIn\":\"bp0-58\",\"objOut\":\"bp0-20\"}]}],\"objName\":\"Ops.Gl.Matrix.Transform\"},{\"id\":\"bp0-21\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"posX\",\"value\":0},{\"name\":\"posY\",\"value\":0},{\"name\":\"posZ\",\"value\":0},{\"name\":\"scale\",\"value\":8.77},{\"name\":\"rotX\",\"value\":0},{\"name\":\"rotY\",\"value\":0},{\"name\":\"rotZ\",\"value\":0}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-5\",\"objOut\":\"bp0-21\"}]}],\"objName\":\"Ops.Gl.Matrix.Transform\"},{\"id\":\"bp0-22\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Speed\",\"value\":400},{\"name\":\"Play\",\"value\":1},{\"name\":\"Sync to timeline\",\"value\":0}],\"portsOut\":[{\"name\":\"Time\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Time\",\"objIn\":\"bp0-77\",\"objOut\":\"bp0-22\"}]}],\"objName\":\"Ops.Anim.Timer_v2\"},{\"id\":\"bp0-23\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"CSS Width\",\"value\":610},{\"name\":\"CSS Height\",\"value\":262},{\"name\":\"Pixel Ratio\",\"value\":0.9375},{\"name\":\"Pixel Width\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Pixel Width\",\"objIn\":\"bp0-69\",\"objOut\":\"bp0-23\"}]},{\"name\":\"Pixel Height\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Pixel Height\",\"objIn\":\"bp0-70\",\"objOut\":\"bp0-23\"}]},{\"name\":\"Aspect Ratio\",\"value\":2.3282442748091605},{\"name\":\"Landscape\",\"value\":1}],\"objName\":\"Ops.Gl.CanvasInfo_v3\"},{\"id\":\"bp0-24\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Pixel Unit index\",\"value\":0},{\"name\":\"Pixel Unit\",\"value\":\"Display\"}],\"portsOut\":[{\"name\":\"Trigger\",\"links\":[{\"portIn\":\"Input_0\",\"portOut\":\"Trigger\",\"objIn\":\"bp0-19\",\"objOut\":\"bp0-24\"}]},{\"name\":\"X\",\"links\":[{\"portIn\":\"number2\",\"portOut\":\"X\",\"objIn\":\"bp0-30\",\"objOut\":\"bp0-24\"},{\"portIn\":\"number1\",\"portOut\":\"X\",\"objIn\":\"bp0-33\",\"objOut\":\"bp0-24\"}]},{\"name\":\"Y\",\"links\":[{\"portIn\":\"number2\",\"portOut\":\"Y\",\"objIn\":\"bp0-39\",\"objOut\":\"bp0-24\"},{\"portIn\":\"number1\",\"portOut\":\"Y\",\"objIn\":\"bp0-42\",\"objOut\":\"bp0-24\"}]},{\"name\":\"Visible\",\"value\":true}],\"objName\":\"Ops.Gl.Matrix.ScreenCoordinates_v2\"},{\"id\":\"bp0-25\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Limit\",\"value\":0},{\"name\":\"Length\",\"value\":10},{\"name\":\"Mode index\",\"value\":0},{\"name\":\"Mode\",\"value\":\"Rewind\"},{\"name\":\"Default\",\"value\":0}],\"portsOut\":[{\"name\":\"Value\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Value\",\"objIn\":\"bp0-26\",\"objOut\":\"bp0-25\"}]}],\"objName\":\"Ops.Math.Incrementor\"},{\"id\":\"bp0-26\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"number2\",\"value\":0.05}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-27\",\"objOut\":\"bp0-26\"}]}],\"objName\":\"Ops.Math.Multiply\"},{\"id\":\"bp0-27\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"duration\",\"value\":0.5},{\"name\":\"easing index\",\"value\":0},{\"name\":\"easing\",\"value\":\"linear\"}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-37\",\"objOut\":\"bp0-27\"},{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-68\",\"objOut\":\"bp0-27\"}]},{\"name\":\"result\",\"links\":[{\"portIn\":\"posX\",\"portOut\":\"result\",\"objIn\":\"bp0-20\",\"objOut\":\"bp0-27\"}]}],\"objName\":\"Ops.Anim.AnimNumber\"},{\"id\":\"bp0-28\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Nth\",\"value\":10}],\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"Execute\",\"portOut\":\"Next\",\"objIn\":\"bp0-29\",\"objOut\":\"bp0-28\"},{\"portIn\":\"Execute\",\"portOut\":\"Next\",\"objIn\":\"bp0-38\",\"objOut\":\"bp0-28\"}]}],\"objName\":\"Ops.Trigger.NthTrigger_v2\"},{\"id\":\"bp0-29\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Total Connections\",\"value\":2},{\"name\":\"Trigger\",\"multiPortNum\":2},{\"name\":\"Trigger_0\",\"links\":[{\"portIn\":\"Increment\",\"portOut\":\"Trigger_0\",\"objIn\":\"bp0-25\",\"objOut\":\"bp0-29\"}]},{\"name\":\"Trigger_1\",\"title\":\"add port\",\"links\":[{\"portIn\":\"Decrement\",\"portOut\":\"Trigger_1\",\"objIn\":\"bp0-25\",\"objOut\":\"bp0-29\"}]}],\"objName\":\"Ops.Trigger.RouteTriggerMultiPort\"},{\"id\":\"bp0-30\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-31\",\"objOut\":\"bp0-30\"}]}],\"objName\":\"Ops.Math.Compare.LessThan\"},{\"id\":\"bp0-31\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"True\",\"links\":[{\"portIn\":\"trigger\",\"portOut\":\"True\",\"objIn\":\"bp0-32\",\"objOut\":\"bp0-31\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-32\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Switch Value\",\"portOut\":\"result\",\"objIn\":\"bp0-29\",\"objOut\":\"bp0-32\"}]}],\"objName\":\"Ops.Boolean.ToggleBool_v2\"},{\"id\":\"bp0-33\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-34\",\"objOut\":\"bp0-33\"}]}],\"objName\":\"Ops.Math.Compare.LessThan\"},{\"id\":\"bp0-34\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"True\",\"links\":[{\"portIn\":\"trigger\",\"portOut\":\"True\",\"objIn\":\"bp0-32\",\"objOut\":\"bp0-34\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-35\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Limit\",\"value\":0},{\"name\":\"Length\",\"value\":10},{\"name\":\"Mode index\",\"value\":0},{\"name\":\"Mode\",\"value\":\"Rewind\"},{\"name\":\"Default\",\"value\":0}],\"portsOut\":[{\"name\":\"Value\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Value\",\"objIn\":\"bp0-36\",\"objOut\":\"bp0-35\"}]}],\"objName\":\"Ops.Math.Incrementor\"},{\"id\":\"bp0-36\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"number2\",\"value\":0.05}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-37\",\"objOut\":\"bp0-36\"}]}],\"objName\":\"Ops.Math.Multiply\"},{\"id\":\"bp0-37\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"duration\",\"value\":0.5},{\"name\":\"easing index\",\"value\":0},{\"name\":\"easing\",\"value\":\"linear\"}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"posY\",\"portOut\":\"result\",\"objIn\":\"bp0-20\",\"objOut\":\"bp0-37\"}]}],\"objName\":\"Ops.Anim.AnimNumber\"},{\"id\":\"bp0-38\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Total Connections\",\"value\":2},{\"name\":\"Trigger\",\"multiPortNum\":2},{\"name\":\"Trigger_0\",\"links\":[{\"portIn\":\"Increment\",\"portOut\":\"Trigger_0\",\"objIn\":\"bp0-35\",\"objOut\":\"bp0-38\"}]},{\"name\":\"Trigger_1\",\"title\":\"add port\",\"links\":[{\"portIn\":\"Decrement\",\"portOut\":\"Trigger_1\",\"objIn\":\"bp0-35\",\"objOut\":\"bp0-38\"}]}],\"objName\":\"Ops.Trigger.RouteTriggerMultiPort\"},{\"id\":\"bp0-39\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-40\",\"objOut\":\"bp0-39\"}]}],\"objName\":\"Ops.Math.Compare.LessThan\"},{\"id\":\"bp0-40\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"True\",\"links\":[{\"portIn\":\"trigger\",\"portOut\":\"True\",\"objIn\":\"bp0-41\",\"objOut\":\"bp0-40\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-41\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Switch Value\",\"portOut\":\"result\",\"objIn\":\"bp0-38\",\"objOut\":\"bp0-41\"}]}],\"objName\":\"Ops.Boolean.ToggleBool_v2\"},{\"id\":\"bp0-42\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-43\",\"objOut\":\"bp0-42\"}]}],\"objName\":\"Ops.Math.Compare.LessThan\"},{\"id\":\"bp0-43\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"True\",\"links\":[{\"portIn\":\"trigger\",\"portOut\":\"True\",\"objIn\":\"bp0-41\",\"objOut\":\"bp0-43\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-44\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Next\",\"links\":[{\"portIn\":\"Execute\",\"portOut\":\"Next\",\"objIn\":\"bp0-45\",\"objOut\":\"bp0-44\"},{\"portIn\":\"exe\",\"portOut\":\"Next\",\"objIn\":\"bp0-49\",\"objOut\":\"bp0-44\"}]}],\"objName\":\"Ops.Trigger.TriggerExtender\"},{\"id\":\"bp0-45\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Trigger out\",\"links\":[{\"portIn\":\"Execute\",\"portOut\":\"Trigger out\",\"objIn\":\"bp0-28\",\"objOut\":\"bp0-45\"},{\"portIn\":\"exe\",\"portOut\":\"Trigger out\",\"objIn\":\"bp0-27\",\"objOut\":\"bp0-45\"}]}],\"objName\":\"Ops.Trigger.GateTrigger\"},{\"id\":\"bp0-46\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Duration\",\"value\":0.2},{\"name\":\"Value True\",\"value\":0},{\"name\":\"Value False\",\"value\":1}],\"portsOut\":[{\"name\":\"Activated\",\"links\":[{\"portIn\":\"Reset\",\"portOut\":\"Activated\",\"objIn\":\"bp0-35\",\"objOut\":\"bp0-46\"},{\"portIn\":\"Reset\",\"portOut\":\"Activated\",\"objIn\":\"bp0-25\",\"objOut\":\"bp0-46\"},{\"portIn\":\"false\",\"portOut\":\"Activated\",\"objIn\":\"bp0-50\",\"objOut\":\"bp0-46\"}]},{\"name\":\"Ended\",\"links\":[{\"portIn\":\"True\",\"portOut\":\"Ended\",\"objIn\":\"bp0-50\",\"objOut\":\"bp0-46\"}]},{\"name\":\"Result\",\"links\":[{\"portIn\":\"Pass Through\",\"portOut\":\"Result\",\"objIn\":\"bp0-45\",\"objOut\":\"bp0-46\"}]}],\"objName\":\"Ops.Boolean.MonoFlop\"},{\"id\":\"bp0-47\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":0},{\"name\":\"max\",\"value\":1},{\"name\":\"Integer\",\"value\":1},{\"name\":\"No consecutive duplicates\",\"value\":0}],\"portsOut\":[{\"name\":\"next\",\"links\":[{\"portIn\":\"Generate\",\"portOut\":\"next\",\"objIn\":\"bp0-48\",\"objOut\":\"bp0-47\"}]},{\"name\":\"result\",\"links\":[{\"portIn\":\"Default\",\"portOut\":\"result\",\"objIn\":\"bp0-32\",\"objOut\":\"bp0-47\"},{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-55\",\"objOut\":\"bp0-47\"}]}],\"objName\":\"Ops.Math.TriggerRandomNumber_v2\"},{\"id\":\"bp0-48\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":0},{\"name\":\"max\",\"value\":1},{\"name\":\"Integer\",\"value\":1},{\"name\":\"No consecutive duplicates\",\"value\":0}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Default\",\"portOut\":\"result\",\"objIn\":\"bp0-41\",\"objOut\":\"bp0-48\"},{\"portIn\":\"Value\",\"portOut\":\"result\",\"objIn\":\"bp0-56\",\"objOut\":\"bp0-48\"}]}],\"objName\":\"Ops.Math.TriggerRandomNumber_v2\"},{\"id\":\"bp0-49\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"easing index\",\"value\":23},{\"name\":\"easing\",\"value\":\"Elastic Out\"},{\"name\":\"duration\",\"value\":1},{\"name\":\"Direction index\",\"value\":0},{\"name\":\"Direction\",\"value\":\"Both\"},{\"name\":\"value false\",\"value\":0},{\"name\":\"value true\",\"value\":0.44}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-20\",\"objOut\":\"bp0-49\"}]},{\"name\":\"value\",\"links\":[{\"portIn\":\"number2\",\"portOut\":\"value\",\"objIn\":\"bp0-72\",\"objOut\":\"bp0-49\"}]},{\"name\":\"finished\",\"value\":1}],\"objName\":\"Ops.Anim.BoolAnim\"},{\"id\":\"bp0-50\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Result\",\"links\":[{\"portIn\":\"bool\",\"portOut\":\"Result\",\"objIn\":\"bp0-49\",\"objOut\":\"bp0-50\"}]}],\"objName\":\"Ops.Boolean.BoolByTrigger\"},{\"id\":\"bp0-51\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"innerOut_4ac9zc8zo\",\"title\":\"Execute\",\"links\":[{\"portIn\":\"Execute\",\"portOut\":\"innerOut_4ac9zc8zo\",\"objIn\":\"bp0-53\",\"objOut\":\"bp0-51\"},{\"portIn\":\"innerIn_kg5qtugsw\",\"portOut\":\"innerOut_4ac9zc8zo\",\"objIn\":\"bp0-52\",\"objOut\":\"bp0-51\"}]},{\"name\":\"innerOut_sfpeahgy9\",\"title\":\"result\",\"links\":[{\"portIn\":\"value\",\"portOut\":\"innerOut_sfpeahgy9\",\"objIn\":\"bp0-62\",\"objOut\":\"bp0-51\"},{\"portIn\":\"Seed\",\"portOut\":\"innerOut_sfpeahgy9\",\"objIn\":\"bp0-76\",\"objOut\":\"bp0-51\"}]},{\"name\":\"innerOut_zgdzm1396\",\"title\":\"Trigger\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"innerOut_zgdzm1396\",\"objIn\":\"bp0-57\",\"objOut\":\"bp0-51\"},{\"portIn\":\"Generate\",\"portOut\":\"innerOut_zgdzm1396\",\"objIn\":\"bp0-47\",\"objOut\":\"bp0-51\"}]},{\"name\":\"innerOut_77ynzu99p\",\"title\":\"Text\",\"links\":[{\"portIn\":\"String In\",\"portOut\":\"innerOut_77ynzu99p\",\"objIn\":\"bp0-59\",\"objOut\":\"bp0-51\"}]},{\"name\":\"innerOut_cdavz1kxu\",\"title\":\"Value\",\"links\":[{\"portIn\":\"Value\",\"portOut\":\"innerOut_cdavz1kxu\",\"objIn\":\"bp0-66\",\"objOut\":\"bp0-51\"}]}],\"objName\":\"Ops.Ui.SubPatchInput\"},{\"id\":\"bp0-52\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"innerIn_kg5qtugsw\",\"title\":\"Execute\"},{\"name\":\"innerIn_6midlo8lx\",\"title\":\"result\"},{\"name\":\"innerIn_wahl89i9c\",\"title\":\"Result\"},{\"name\":\"innerIn_we8ds0m13\",\"title\":\"Out Value\"},{\"name\":\"innerIn_epjdyyi1u\",\"title\":\"Left Click\"}],\"objName\":\"Ops.Ui.SubPatchOutput\"},{\"id\":\"bp0-53\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Trigger out\",\"links\":[{\"portIn\":\"Execute\",\"portOut\":\"Trigger out\",\"objIn\":\"bp0-44\",\"objOut\":\"bp0-53\"}]}],\"objName\":\"Ops.Trigger.GateTrigger\"},{\"id\":\"bp0-54\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Was Triggered\",\"links\":[{\"portIn\":\"Pass Through\",\"portOut\":\"Was Triggered\",\"objIn\":\"bp0-53\",\"objOut\":\"bp0-54\"}]}],\"objName\":\"Ops.Trigger.TriggerOnce\"},{\"id\":\"bp0-55\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"True\",\"links\":[{\"portIn\":\"trigger\",\"portOut\":\"True\",\"objIn\":\"bp0-32\",\"objOut\":\"bp0-55\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-56\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"True\",\"links\":[{\"portIn\":\"trigger\",\"portOut\":\"True\",\"objIn\":\"bp0-41\",\"objOut\":\"bp0-56\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-57\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"delay\",\"value\":0.2}],\"portsOut\":[{\"name\":\"next\",\"links\":[{\"portIn\":\"Exec\",\"portOut\":\"next\",\"objIn\":\"bp0-54\",\"objOut\":\"bp0-57\"},{\"portIn\":\"Trigger\",\"portOut\":\"next\",\"objIn\":\"bp0-46\",\"objOut\":\"bp0-57\"}]},{\"name\":\"Delaying\",\"links\":[{\"portIn\":\"Pass Through\",\"portOut\":\"Delaying\",\"objIn\":\"bp0-59\",\"objOut\":\"bp0-57\"}]}],\"objName\":\"Ops.Trigger.DelayedTrigger\"},{\"id\":\"bp0-58\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Width\",\"value\":1},{\"name\":\"Height\",\"value\":1},{\"name\":\"Class\",\"value\":\"words\"},{\"name\":\"Pivot x index\",\"value\":0},{\"name\":\"Pivot x\",\"value\":\"center\"},{\"name\":\"Pivot y index\",\"value\":0},{\"name\":\"Pivot y\",\"value\":\"center\"},{\"name\":\"Axis index\",\"value\":0},{\"name\":\"Axis\",\"value\":\"xy\"},{\"name\":\"Is Interactive\",\"value\":1},{\"name\":\"Render Rectangle\",\"value\":0},{\"name\":\"Show Boundings\",\"value\":0},{\"name\":\"Cursor index\",\"value\":2},{\"name\":\"Cursor\",\"value\":\"pointer\"},{\"name\":\"Render\",\"value\":1,\"title\":\"Active\"}],\"portsOut\":[{\"name\":\"Pointer Hover\",\"links\":[{\"portIn\":\"bool\",\"portOut\":\"Pointer Hover\",\"objIn\":\"bp0-88\",\"objOut\":\"bp0-58\"}]},{\"name\":\"Pointer Down\",\"value\":0},{\"name\":\"Pointer X\",\"value\":0.4368611203041382},{\"name\":\"Pointer Y\",\"value\":0.017062282356720915},{\"name\":\"Top\",\"value\":14.587612870149314},{\"name\":\"Left\",\"value\":473.0224037133157},{\"name\":\"Right\",\"value\":507.22134621441364},{\"name\":\"Bottom\",\"value\":48.78656308259815},{\"name\":\"Left Click\",\"links\":[{\"portIn\":\"exe\",\"portOut\":\"Left Click\",\"objIn\":\"bp0-65\",\"objOut\":\"bp0-58\"},{\"portIn\":\"True\",\"portOut\":\"Left Click\",\"objIn\":\"bp0-73\",\"objOut\":\"bp0-58\"},{\"portIn\":\"exe\",\"portOut\":\"Left Click\",\"objIn\":\"bp0-75\",\"objOut\":\"bp0-58\"},{\"portIn\":\"Trigger\",\"portOut\":\"Left Click\",\"objIn\":\"bp0-84\",\"objOut\":\"bp0-58\"},{\"portIn\":\"innerIn_epjdyyi1u\",\"portOut\":\"Left Click\",\"objIn\":\"bp0-52\",\"objOut\":\"bp0-58\"}]},{\"name\":\"Dom Element\",\"links\":[{\"portIn\":\"Element\",\"portOut\":\"Dom Element\",\"objIn\":\"bp0-81\",\"objOut\":\"bp0-58\"}]}],\"objName\":\"Ops.Gl.InteractiveRectangle_v2\"},{\"id\":\"bp0-59\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"When False index\",\"value\":0},{\"name\":\"When False\",\"value\":\"keep last string\"},{\"name\":\"Custom Value\",\"value\":\"\"}],\"portsOut\":[{\"name\":\"String Out\",\"links\":[{\"portIn\":\"String\",\"portOut\":\"String Out\",\"objIn\":\"bp0-84\",\"objOut\":\"bp0-59\"}]}],\"objName\":\"Ops.String.GateString\"},{\"id\":\"bp0-60\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"easing index\",\"value\":21},{\"name\":\"easing\",\"value\":\"Back In Out\"},{\"name\":\"duration\",\"value\":0.3},{\"name\":\"Direction index\",\"value\":0},{\"name\":\"Direction\",\"value\":\"Both\"},{\"name\":\"value false\",\"value\":1},{\"name\":\"value true\",\"value\":15}],\"portsOut\":[{\"name\":\"value\",\"links\":[{\"portIn\":\"Strength\",\"portOut\":\"value\",\"objIn\":\"bp0-13\",\"objOut\":\"bp0-60\"}]},{\"name\":\"finished\",\"value\":1}],\"objName\":\"Ops.Anim.BoolAnim\"},{\"id\":\"bp0-61\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"string1\",\"value\":\"word\"},{\"name\":\"New Line\",\"value\":0},{\"name\":\"Active\",\"value\":1}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"ID\",\"portOut\":\"result\",\"objIn\":\"bp0-58\",\"objOut\":\"bp0-61\"}]}],\"objName\":\"Ops.String.Concat_v2\"},{\"id\":\"bp0-62\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Number\",\"portOut\":\"result\",\"objIn\":\"bp0-63\",\"objOut\":\"bp0-62\"},{\"portIn\":\"number1\",\"portOut\":\"result\",\"objIn\":\"bp0-64\",\"objOut\":\"bp0-62\"}]}],\"objName\":\"Ops.Number.Number\"},{\"id\":\"bp0-63\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Decimal Places\",\"value\":4}],\"portsOut\":[{\"name\":\"Result\",\"links\":[{\"portIn\":\"string2\",\"portOut\":\"Result\",\"objIn\":\"bp0-61\",\"objOut\":\"bp0-63\"}]}],\"objName\":\"Ops.String.NumberToString_v2\"},{\"id\":\"bp0-64\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"number2\",\"value\":1}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"innerIn_6midlo8lx\",\"portOut\":\"result\",\"objIn\":\"bp0-52\",\"objOut\":\"bp0-64\"}]}],\"objName\":\"Ops.Math.Sum\"},{\"id\":\"bp0-65\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"delay\",\"value\":0.2}],\"portsOut\":[{\"name\":\"next\",\"links\":[{\"portIn\":\"True\",\"portOut\":\"next\",\"objIn\":\"bp0-67\",\"objOut\":\"bp0-65\"}]},{\"name\":\"Delaying\",\"value\":false}],\"objName\":\"Ops.Trigger.DelayedTrigger\"},{\"id\":\"bp0-66\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"False\",\"links\":[{\"portIn\":\"false\",\"portOut\":\"False\",\"objIn\":\"bp0-67\",\"objOut\":\"bp0-66\"},{\"portIn\":\"false\",\"portOut\":\"False\",\"objIn\":\"bp0-73\",\"objOut\":\"bp0-66\"},{\"portIn\":\"exe\",\"portOut\":\"False\",\"objIn\":\"bp0-74\",\"objOut\":\"bp0-66\"}]}],\"objName\":\"Ops.Boolean.TriggerOnChangeBoolean\"},{\"id\":\"bp0-67\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Result\",\"links\":[{\"portIn\":\"bool\",\"portOut\":\"Result\",\"objIn\":\"bp0-60\",\"objOut\":\"bp0-67\"}]}],\"objName\":\"Ops.Boolean.BoolByTrigger\"},{\"id\":\"bp0-68\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"min\",\"value\":-0.3},{\"name\":\"max\",\"value\":0.1},{\"name\":\"duration\",\"value\":1.5},{\"name\":\"pause between\",\"value\":1},{\"name\":\"easing index\",\"value\":0},{\"name\":\"easing\",\"value\":\"linear\"}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"result\",\"objIn\":\"bp0-72\",\"objOut\":\"bp0-68\"}]}],\"objName\":\"Ops.Anim.RandomAnim_v2\"},{\"id\":\"bp0-69\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"result\",\"objIn\":\"bp0-30\",\"objOut\":\"bp0-69\"}]}],\"objName\":\"Ops.Math.Subtract\"},{\"id\":\"bp0-70\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"result\",\"objIn\":\"bp0-39\",\"objOut\":\"bp0-70\"}]}],\"objName\":\"Ops.Math.Subtract\"},{\"id\":\"bp0-71\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"value\",\"value\":70}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"number2\",\"portOut\":\"result\",\"objIn\":\"bp0-42\",\"objOut\":\"bp0-71\"},{\"portIn\":\"number2\",\"portOut\":\"result\",\"objIn\":\"bp0-70\",\"objOut\":\"bp0-71\"},{\"portIn\":\"number2\",\"portOut\":\"result\",\"objIn\":\"bp0-33\",\"objOut\":\"bp0-71\"},{\"portIn\":\"number2\",\"portOut\":\"result\",\"objIn\":\"bp0-69\",\"objOut\":\"bp0-71\"}]}],\"objName\":\"Ops.Number.Number\"},{\"id\":\"bp0-72\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"scale\",\"portOut\":\"result\",\"objIn\":\"bp0-20\",\"objOut\":\"bp0-72\"}]}],\"objName\":\"Ops.Math.Sum\"},{\"id\":\"bp0-73\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Result\",\"links\":[{\"portIn\":\"Number\",\"portOut\":\"Result\",\"objIn\":\"bp0-85\",\"objOut\":\"bp0-73\"}]}],\"objName\":\"Ops.Boolean.BoolByTrigger\"},{\"id\":\"bp0-74\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"delay\",\"value\":0.8}],\"portsOut\":[{\"name\":\"next\",\"links\":[{\"portIn\":\"Set\",\"portOut\":\"next\",\"objIn\":\"bp0-85\",\"objOut\":\"bp0-74\"}]},{\"name\":\"Delaying\",\"value\":false}],\"objName\":\"Ops.Trigger.DelayedTrigger\"},{\"id\":\"bp0-75\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"delay\",\"value\":0.1}],\"portsOut\":[{\"name\":\"next\",\"links\":[{\"portIn\":\"Set\",\"portOut\":\"next\",\"objIn\":\"bp0-85\",\"objOut\":\"bp0-75\"}]},{\"name\":\"Delaying\",\"value\":false}],\"objName\":\"Ops.Trigger.DelayedTrigger\"},{\"id\":\"bp0-76\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Min\",\"value\":100},{\"name\":\"Max\",\"value\":500}],\"portsOut\":[{\"name\":\"X\",\"links\":[{\"portIn\":\"number2\",\"portOut\":\"X\",\"objIn\":\"bp0-77\",\"objOut\":\"bp0-76\"}]},{\"name\":\"Y\",\"value\":318.1327160493827},{\"name\":\"Z\",\"links\":[{\"portIn\":\"number2\",\"portOut\":\"Z\",\"objIn\":\"bp0-78\",\"objOut\":\"bp0-76\"}]},{\"name\":\"W\",\"value\":481.531207133059}],\"objName\":\"Ops.Math.RandomNumbers_v3\"},{\"id\":\"bp0-77\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"rotZ\",\"portOut\":\"result\",\"objIn\":\"bp0-20\",\"objOut\":\"bp0-77\"}]}],\"objName\":\"Ops.Math.Sum\"},{\"id\":\"bp0-78\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Scroll X\",\"portOut\":\"result\",\"objIn\":\"bp0-8\",\"objOut\":\"bp0-78\"},{\"portIn\":\"Scroll X\",\"portOut\":\"result\",\"objIn\":\"bp0-13\",\"objOut\":\"bp0-78\"},{\"portIn\":\"Scroll Z\",\"portOut\":\"result\",\"objIn\":\"bp0-8\",\"objOut\":\"bp0-78\"},{\"portIn\":\"Scroll Z\",\"portOut\":\"result\",\"objIn\":\"bp0-13\",\"objOut\":\"bp0-78\"},{\"portIn\":\"Scroll Y\",\"portOut\":\"result\",\"objIn\":\"bp0-8\",\"objOut\":\"bp0-78\"},{\"portIn\":\"Scroll Y\",\"portOut\":\"result\",\"objIn\":\"bp0-13\",\"objOut\":\"bp0-78\"}]}],\"objName\":\"Ops.Math.Sum\"},{\"id\":\"bp0-79\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"CSS Width\",\"value\":610},{\"name\":\"CSS Height\",\"value\":262},{\"name\":\"Pixel Ratio\",\"value\":0.9375},{\"name\":\"Pixel Width\",\"value\":571.875},{\"name\":\"Pixel Height\",\"value\":245.625},{\"name\":\"Aspect Ratio\",\"value\":2.3282442748091605},{\"name\":\"Landscape\",\"value\":1},{\"name\":\"Canvas Parent\",\"links\":[{\"portIn\":\"Element\",\"portOut\":\"Canvas Parent\",\"objIn\":\"bp0-80\",\"objOut\":\"bp0-79\"}]},{\"name\":\"Resized\",\"links\":[{\"portIn\":\"Update\",\"portOut\":\"Resized\",\"objIn\":\"bp0-80\",\"objOut\":\"bp0-79\"}]}],\"objName\":\"Ops.Gl.CanvasInfo_v3\"},{\"id\":\"bp0-80\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Pixel Units index\",\"value\":0},{\"name\":\"Pixel Units\",\"value\":\"CSS Pixels\"}],\"portsOut\":[{\"name\":\"X\",\"value\":0.4833984375},{\"name\":\"Y\",\"links\":[{\"portIn\":\"number1\",\"portOut\":\"Y\",\"objIn\":\"bp0-83\",\"objOut\":\"bp0-80\"}]},{\"name\":\"Width\",\"value\":609.0000610351562},{\"name\":\"Height\",\"value\":452.0000305175781}],\"objName\":\"Ops.Html.ElementClientRect\"},{\"id\":\"bp0-81\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"Translate Active\",\"value\":1},{\"name\":\"Translate X\",\"value\":0},{\"name\":\"Unit index\",\"value\":0},{\"name\":\"Unit\",\"value\":\"px\"},{\"name\":\"Scale Active\",\"value\":1},{\"name\":\"Scale\",\"value\":1},{\"name\":\"Rotate Active\",\"value\":1},{\"name\":\"Rot Z\",\"value\":0},{\"name\":\"Set Origin\",\"value\":1},{\"name\":\"Origin X index\",\"value\":1},{\"name\":\"Origin X\",\"value\":\"center\"},{\"name\":\"Origin Y index\",\"value\":1},{\"name\":\"Origin Y\",\"value\":\"center\"},{\"name\":\"Z Index Active\",\"value\":0},{\"name\":\"Z Index\",\"value\":100}],\"objName\":\"Ops.Html.CSS.ElementCssTransform_v2\"},{\"id\":\"bp0-82\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"Translate Y\",\"portOut\":\"result\",\"objIn\":\"bp0-81\",\"objOut\":\"bp0-82\"}]}],\"objName\":\"Ops.Math.Abs\"},{\"id\":\"bp0-83\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsIn\":[{\"name\":\"number2\",\"value\":2}],\"portsOut\":[{\"name\":\"result\",\"links\":[{\"portIn\":\"number\",\"portOut\":\"result\",\"objIn\":\"bp0-82\",\"objOut\":\"bp0-83\"}]}],\"objName\":\"Ops.Math.Multiply\"},{\"id\":\"bp0-84\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Result\",\"links\":[{\"portIn\":\"innerIn_wahl89i9c\",\"portOut\":\"Result\",\"objIn\":\"bp0-52\",\"objOut\":\"bp0-84\"}]}],\"objName\":\"Ops.Trigger.TriggerString\"},{\"id\":\"bp0-85\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"storage\":{},\"portsOut\":[{\"name\":\"Out Value\",\"links\":[{\"portIn\":\"innerIn_we8ds0m13\",\"portOut\":\"Out Value\",\"objIn\":\"bp0-52\",\"objOut\":\"bp0-85\"}]}],\"objName\":\"Ops.Trigger.TriggerNumber\"},{\"id\":\"bp0-86\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"portsIn\":[{\"name\":\"segments\",\"value\":93.98},{\"name\":\"radius\",\"value\":1.01},{\"name\":\"Shape index\",\"value\":2},{\"name\":\"Shape\",\"value\":\"Gear\"},{\"name\":\"Length\",\"value\":1.06},{\"name\":\"Peak Z Pos\",\"value\":0},{\"name\":\"percent\",\"value\":1},{\"name\":\"Fill\",\"value\":0},{\"name\":\"Render Mesh\",\"value\":1}],\"storage\":{\"ref\":\"bp0-86\"},\"objName\":\"Ops.Gl.Meshes.Star_v2\"},{\"id\":\"bp0-87\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"portsIn\":[{\"name\":\"r\",\"value\":0.571799326341259},{\"name\":\"g\",\"value\":0.08368714752968376},{\"name\":\"b\",\"value\":0.351839049311207},{\"name\":\"colorizeTexture\",\"value\":0},{\"name\":\"Vertex Colors\",\"value\":0},{\"name\":\"Alpha Mask Source index\",\"value\":0},{\"name\":\"Alpha Mask Source\",\"value\":\"Luminance\"},{\"name\":\"Opacity TexCoords Transform\",\"value\":0},{\"name\":\"Discard Transparent Pixels\",\"value\":1},{\"name\":\"diffuseRepeatX\",\"value\":1},{\"name\":\"diffuseRepeatY\",\"value\":1},{\"name\":\"Tex Offset X\",\"value\":0},{\"name\":\"Tex Offset Y\",\"value\":0},{\"name\":\"Crop TexCoords\",\"value\":0},{\"name\":\"billboard\",\"value\":0}],\"portsOut\":[{\"name\":\"trigger\",\"links\":[{\"portIn\":\"render\",\"portOut\":\"trigger\",\"objIn\":\"bp0-86\",\"objOut\":\"bp0-87\"},{\"portIn\":\"exe\",\"portOut\":\"trigger\",\"objIn\":\"bp0-88\",\"objOut\":\"bp0-87\"}]}],\"storage\":{\"ref\":\"bp0-87\"},\"objName\":\"Ops.Gl.Shader.BasicMaterial_v3\"},{\"id\":\"bp0-88\",\"uiAttribs\":{\"subPatch\":\"4hv76qqrn\"},\"portsIn\":[{\"name\":\"easing index\",\"value\":25},{\"name\":\"easing\",\"value\":\"Bounce Out\"},{\"name\":\"duration\",\"value\":0.25},{\"name\":\"Direction index\",\"value\":0},{\"name\":\"Direction\",\"value\":\"Both\"},{\"name\":\"value false\",\"value\":0},{\"name\":\"value true\",\"value\":1}],\"portsOut\":[{\"name\":\"value\",\"links\":[{\"portIn\":\"a\",\"portOut\":\"value\",\"objIn\":\"bp0-87\",\"objOut\":\"bp0-88\"}]},{\"name\":\"finished\",\"value\":1}],\"storage\":{\"ref\":\"bp0-88\"},\"objName\":\"Ops.Anim.BoolAnim\"}]}",};
const port_4ac9zc8zo=op.inTrigger("4ac9zc8zo");
port_4ac9zc8zo.setUiAttribs({title:"Execute",display:"button",});

const port_sfpeahgy9=op.inFloat("sfpeahgy9",1);
port_sfpeahgy9.setUiAttribs({title:"result",});

const port_zgdzm1396=op.inTrigger("zgdzm1396");
port_zgdzm1396.setUiAttribs({title:"Trigger",display:"button",});

const port_77ynzu99p=op.inString("77ynzu99p","");
port_77ynzu99p.setUiAttribs({title:"Text",});

const port_cdavz1kxu=op.inFloat("cdavz1kxu",0);
port_cdavz1kxu.setUiAttribs({title:"Value",display:"bool",});

const port_kg5qtugsw=op.outTrigger("kg5qtugsw");
port_kg5qtugsw.setUiAttribs({title:"Execute",});

const port_6midlo8lx=op.outNumber("6midlo8lx");
port_6midlo8lx.setUiAttribs({title:"result",});

const port_wahl89i9c=op.outString("wahl89i9c");
port_wahl89i9c.setUiAttribs({title:"Result",});

const port_we8ds0m13=op.outNumber("we8ds0m13");
port_we8ds0m13.setUiAttribs({title:"Out Value",});

const port_epjdyyi1u=op.outTrigger("epjdyyi1u");
port_epjdyyi1u.setUiAttribs({title:"Left Click",});

op.initInnerPorts=function(addedOps)
{
  for(let i=0;i<addedOps.length;i++)
  {
    if(addedOps[i].innerInput)
    {
const innerOut_4ac9zc8zo = addedOps[i].outTrigger("innerOut_4ac9zc8zo");
innerOut_4ac9zc8zo.setUiAttribs({title:"Execute"});
port_4ac9zc8zo.onTriggered = () => { innerOut_4ac9zc8zo.trigger(); };

const innerOut_sfpeahgy9 = addedOps[i].outNumber("innerOut_sfpeahgy9");
innerOut_sfpeahgy9.set(port_sfpeahgy9.get() );
innerOut_sfpeahgy9.setUiAttribs({title:"result"});
port_sfpeahgy9.on("change", (a,v) => { innerOut_sfpeahgy9.set(a); });

const innerOut_zgdzm1396 = addedOps[i].outTrigger("innerOut_zgdzm1396");
innerOut_zgdzm1396.setUiAttribs({title:"Trigger"});
port_zgdzm1396.onTriggered = () => { innerOut_zgdzm1396.trigger(); };

const innerOut_77ynzu99p = addedOps[i].outString("innerOut_77ynzu99p");
innerOut_77ynzu99p.set(port_77ynzu99p.get() );
innerOut_77ynzu99p.setUiAttribs({title:"Text"});
port_77ynzu99p.on("change", (a,v) => { innerOut_77ynzu99p.set(a); });

const innerOut_cdavz1kxu = addedOps[i].outNumber("innerOut_cdavz1kxu");
innerOut_cdavz1kxu.set(port_cdavz1kxu.get() );
innerOut_cdavz1kxu.setUiAttribs({title:"Value"});
port_cdavz1kxu.on("change", (a,v) => { innerOut_cdavz1kxu.set(a); });

    }
if(addedOps[i].innerOutput)
{
const innerIn_kg5qtugsw = addedOps[i].inTrigger("innerIn_kg5qtugsw");
innerIn_kg5qtugsw.setUiAttribs({title:"Execute"});
innerIn_kg5qtugsw.onTriggered = () => { port_kg5qtugsw.trigger(); };

const innerIn_6midlo8lx = addedOps[i].inFloat("innerIn_6midlo8lx");
innerIn_6midlo8lx.setUiAttribs({title:"result"});
innerIn_6midlo8lx.on("change", (a,v) => { port_6midlo8lx.set(a); });

const innerIn_wahl89i9c = addedOps[i].inString("innerIn_wahl89i9c");
innerIn_wahl89i9c.setUiAttribs({title:"Result"});
innerIn_wahl89i9c.on("change", (a,v) => { port_wahl89i9c.set(a); });

const innerIn_we8ds0m13 = addedOps[i].inFloat("innerIn_we8ds0m13");
innerIn_we8ds0m13.setUiAttribs({title:"Out Value"});
innerIn_we8ds0m13.on("change", (a,v) => { port_we8ds0m13.set(a); });

const innerIn_epjdyyi1u = addedOps[i].inTrigger("innerIn_epjdyyi1u");
innerIn_epjdyyi1u.setUiAttribs({title:"Left Click"});
innerIn_epjdyyi1u.onTriggered = () => { port_epjdyyi1u.trigger(); };

}
}
};

const patchId = "bp2sub_" + op.id;

new CABLES.SubPatchOp(op, { "subId": patchId });

initializeSubpatch();

function initializeSubpatch()
{
    if(!attachments || !attachments.subpatch_json) return;

    const p = JSON.parse(attachments.subpatch_json);

    CABLES.Patch.replaceOpIds(p,
        {
            "parentSubPatchId": patchId,
            "prefixHash": patchId,
            "oldIdAsRef": true,
            "doNotUnlinkLostLinks": true
        });

    for (let i = 0; i < p.ops.length; i++)
    {
        p.ops[i].uiAttribs.blueprintSubpatch2 = true;
    }

    op.loadDependencies(p, () =>
    {
        op.patch.deSerialize(p, { "opsCreated": op.initInnerPorts });
        if (CABLES.UI)gui.savedState.setSaved("blueprintloaded", patchId);
        op.patch.emitEvent("subpatchExpose", patchId);
        op.setStorage({ "blueprintVer": 2 });
        op.patch.emitEvent("subpatchExpose", patchId);
    });
}

}
};

CABLES.OPS["af42f9b9-4f68-413c-b6c4-a595cd7e054b"]={f:Ops.Patch.PhORckJ.WordBubble,objName:"Ops.Patch.PhORckJ.WordBubble"};




// **************************************************************
// 
// Ops.Extension.Deprecated.PointsCircle
// 
// **************************************************************

Ops.Extension.Deprecated.PointsCircle= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    outArr = op.outArray("Points", 3),
    percent = op.inValueSlider("percent", 1),
    segments = op.inValue("segments", 40),
    radius = op.inValue("radius", 1),
    outTotalPoints = op.outNumber("Total points"),
    outArrayLength = op.outNumber("Array lengths");

radius.onChange =
    percent.onChange =
    segments.onChange = calcArray;

function calcArray()
{
    const segs = Math.max(3, Math.floor(segments.get()));
    const points = [];

    let count = 0;
    for (let i = 0; i < segs * percent.get(); i++)
    {
        let degInRad = (360 / segs) * i * CGL.DEG2RAD;
        let posx = Math.cos(degInRad) * radius.get();
        let posy = Math.sin(degInRad) * radius.get();

        points.push(posx);
        points.push(posy);
        points.push(0);
    }

    outArr.setRef(points);
    outTotalPoints.set(points.length / 3);
    outArrayLength.set(points.length);
}

calcArray();

}
};

CABLES.OPS["ef54ba67-8b1d-41b0-8140-bb97061eaa97"]={f:Ops.Extension.Deprecated.PointsCircle,objName:"Ops.Extension.Deprecated.PointsCircle"};




// **************************************************************
// 
// Ops.Gl.Meshes.Circle
// 
// **************************************************************

Ops.Gl.Meshes.Circle= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    render = op.inTrigger("render"),
    radius = op.inValue("radius", 0.5),
    innerRadius = op.inValueSlider("innerRadius", 0),
    segments = op.inValueInt("segments", 40),
    percent = op.inValueSlider("percent", 1),
    steps = op.inValue("steps", 0),
    invertSteps = op.inValueBool("invertSteps", false),
    mapping = op.inSwitch("mapping", ["flat", "round"]),
    drawSpline = op.inValueBool("Spline", false),
    inDraw = op.inValueBool("Draw", true),
    trigger = op.outTrigger("trigger"),
    geomOut = op.outObject("geometry", null, "geometry");

op.setPortGroup("Size", [radius, innerRadius]);
op.setPortGroup("Display", [percent, steps, invertSteps]);

mapping.set("flat");

mapping.onChange =
    segments.onChange =
    radius.onChange =
    innerRadius.onChange =
    percent.onChange =
    steps.onChange =
    invertSteps.onChange =
    drawSpline.onChange = calcLater;

geomOut.ignoreValueSerialize = true;
const cgl = op.patch.cgl;

let geom = new CGL.Geometry("circle");
let mesh = null;
const lastSegs = -1;

let oldPrim = 0;
let shader = null;
let needsCalc = true;

render.onTriggered = renderMesh;

op.preRender = () =>
{
    renderMesh();
};

function renderMesh()
{
    if (!CGL.TextureEffect.checkOpNotInTextureEffect(op)) return;

    if (needsCalc)calc();
    shader = cgl.getShader();
    if (!shader) return;
    oldPrim = shader.glPrimitive;

    if (drawSpline.get()) shader.glPrimitive = cgl.gl.LINE_STRIP;

    if (inDraw.get())mesh.render(shader);
    trigger.trigger();

    shader.glPrimitive = oldPrim;
}

function calc()
{
    const segs = Math.max(3, Math.floor(segments.get()));

    geom.clear();

    const faces = [];
    const texCoords = [];
    const vertexNormals = [];
    const tangents = [];
    const biTangents = [];

    let i = 0, degInRad = 0;
    let oldPosX = 0, oldPosY = 0;
    let oldPosXTexCoord = 0, oldPosYTexCoord = 0;

    let oldPosXIn = 0, oldPosYIn = 0;
    let oldPosXTexCoordIn = 0, oldPosYTexCoordIn = 0;

    let posxTexCoordIn = 0, posyTexCoordIn = 0;
    let posxTexCoord = 0, posyTexCoord = 0;
    let posx = 0, posy = 0;

    const perc = Math.max(0.0, percent.get());
    const verts = [];

    if (drawSpline.get())
    {
        let lastX = 0;
        let lastY = 0;
        const tc = [];
        for (i = 0; i <= segs * perc; i++)
        {
            degInRad = (360 / segs) * i * CGL.DEG2RAD;
            posx = Math.cos(degInRad) * radius.get();
            posy = Math.sin(degInRad) * radius.get();

            posyTexCoord = 0.5;

            if (i > 0)
            {
                verts.push(lastX);
                verts.push(lastY);
                verts.push(0);
                posxTexCoord = 1.0 - (i - 1) / segs;

                tc.push(posxTexCoord, posyTexCoord);
            }
            verts.push(posx);
            verts.push(posy);
            verts.push(0);

            lastX = posx;
            lastY = posy;
        }
        geom.setPointVertices(verts);
    }
    else
    if (innerRadius.get() <= 0)
    {
        for (i = 0; i <= segs * perc; i++)
        {
            degInRad = (360 / segs) * i * CGL.DEG2RAD;
            posx = Math.cos(degInRad) * radius.get();
            posy = Math.sin(degInRad) * radius.get();

            if (mapping.get() == "flat")
            {
                posxTexCoord = (Math.cos(degInRad) + 1.0) / 2;
                posyTexCoord = 1.0 - (Math.sin(degInRad) + 1.0) / 2;
                posxTexCoordIn = 0.5;
                posyTexCoordIn = 0.5;
            }
            else if (mapping.get() == "round")
            {
                posxTexCoord = 1.0 - i / segs;
                posyTexCoord = 0;
                posxTexCoordIn = posxTexCoord;
                posyTexCoordIn = 1;
            }

            faces.push(
                [posx, posy, 0],
                [oldPosX, oldPosY, 0],
                [0, 0, 0]
            );

            texCoords.push(posxTexCoord, posyTexCoord, oldPosXTexCoord, oldPosYTexCoord, posxTexCoordIn, posyTexCoordIn);
            vertexNormals.push(0, 0, 1, 0, 0, 1, 0, 0, 1);
            tangents.push(1, 0, 0, 1, 0, 0, 1, 0, 0);
            biTangents.push(0, 1, 0, 0, 1, 0, 0, 1, 0);

            oldPosXTexCoord = posxTexCoord;
            oldPosYTexCoord = posyTexCoord;

            oldPosX = posx;
            oldPosY = posy;
        }

        geom = CGL.Geometry.buildFromFaces(faces, "circle");
        geom.vertexNormals = vertexNormals;
        geom.tangents = tangents;
        geom.biTangents = biTangents;
        geom.texCoords = texCoords;
    }
    else
    {
        let count = 0;
        const numSteps = segs * perc;
        const pos = 0;

        for (i = 0; i <= numSteps; i++)
        {
            count++;

            degInRad = (360 / segs) * i * CGL.DEG2RAD;
            posx = Math.cos(degInRad) * radius.get();
            posy = Math.sin(degInRad) * radius.get();

            const posxIn = Math.cos(degInRad) * innerRadius.get() * radius.get();
            const posyIn = Math.sin(degInRad) * innerRadius.get() * radius.get();

            if (mapping.get() == "round")
            {
                posxTexCoord = 1.0 - i / segs;
                posyTexCoord = 0;
                posxTexCoordIn = posxTexCoord;
                posyTexCoordIn = 1;
            }

            if (steps.get() === 0.0 ||
                (count % parseInt(steps.get(), 10) === 0 && !invertSteps.get()) ||
                (count % parseInt(steps.get(), 10) !== 0 && invertSteps.get()))
            {
                faces.push(
                    [posx, posy, 0],
                    [oldPosX, oldPosY, 0],
                    [posxIn, posyIn, 0]
                );

                faces.push(
                    [posxIn, posyIn, 0],
                    [oldPosX, oldPosY, 0],
                    [oldPosXIn, oldPosYIn, 0]
                );

                texCoords.push(
                    posxTexCoord, 0,
                    oldPosXTexCoord, 0,
                    posxTexCoordIn, 1,

                    posxTexCoord, 1,
                    oldPosXTexCoord, 0,
                    oldPosXTexCoordIn, 1);

                vertexNormals.push(
                    0, 0, 1, 0, 0, 1, 0, 0, 1,
                    0, 0, 1, 0, 0, 1, 0, 0, 1
                );
                tangents.push(
                    1, 0, 0, 1, 0, 0, 1, 0, 0,
                    1, 0, 0, 1, 0, 0, 1, 0, 0
                );
                biTangents.push(
                    0, 1, 0, 0, 1, 0, 0, 1, 0,
                    0, 1, 0, 0, 1, 0, 0, 1, 0
                );
            }

            oldPosXTexCoordIn = posxTexCoordIn;
            oldPosYTexCoordIn = posyTexCoordIn;

            oldPosXTexCoord = posxTexCoord;
            oldPosYTexCoord = posyTexCoord;

            oldPosX = posx;
            oldPosY = posy;

            oldPosXIn = posxIn;
            oldPosYIn = posyIn;
        }

        geom = CGL.Geometry.buildFromFaces(faces, "circle");
        geom.vertexNormals = vertexNormals;
        geom.tangents = tangents;
        geom.biTangents = biTangents;

        if (mapping.get() == "flat") geom.mapTexCoords2d();
        else geom.texCoords = texCoords;
    }

    geomOut.set(null);
    geomOut.set(geom);

    if (geom.vertices.length == 0) return;
    if (mesh) mesh.dispose();
    mesh = null;
    mesh = new CGL.Mesh(cgl, geom);
    needsCalc = false;
}

function calcLater()
{
    needsCalc = true;
}

op.onDelete = function ()
{
    if (mesh)mesh.dispose();
};

}
};

CABLES.OPS["4db917cc-2cef-43f4-83d5-38c4572fe943"]={f:Ops.Gl.Meshes.Circle,objName:"Ops.Gl.Meshes.Circle"};




// **************************************************************
// 
// Ops.Gl.Shader.BasicMaterial
// 
// **************************************************************

Ops.Gl.Shader.BasicMaterial= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"shader_frag":"{{MODULES_HEAD}}\n\nIN vec2 texCoord;\n#ifdef HAS_TEXTURES\n    IN vec2 texCoordOrig;\n    #ifdef HAS_TEXTURE_DIFFUSE\n        UNI sampler2D tex;\n    #endif\n    #ifdef HAS_TEXTURE_OPACITY\n        UNI sampler2D texOpacity;\n   #endif\n#endif\nUNI float r;\nUNI float g;\nUNI float b;\nUNI float a;\n\nvoid main()\n{\n    {{MODULE_BEGIN_FRAG}}\n    vec4 col=vec4(r,g,b,a);\n\n    #ifdef HAS_TEXTURES\n        #ifdef HAS_TEXTURE_DIFFUSE\n\n           col=texture(tex,vec2(texCoord.x,(1.0-texCoord.y)));\n\n           #ifdef COLORIZE_TEXTURE\n               col.r*=r;\n               col.g*=g;\n               col.b*=b;\n           #endif\n        #endif\n\n        col.a*=a;\n        #ifdef HAS_TEXTURE_OPACITY\n            #ifdef TRANSFORMALPHATEXCOORDS\n                col.a*=texture(texOpacity,vec2(texCoordOrig.s,1.0-texCoordOrig.t)).g;\n            #endif\n            #ifndef TRANSFORMALPHATEXCOORDS\n                col.a*=texture(texOpacity,vec2(texCoord.s,1.0-texCoord.t)).g;\n            #endif\n       #endif\n\n    #endif\n\n    {{MODULE_COLOR}}\n\n    outColor = col;\n\n\n}\n","shader_vert":"{{MODULES_HEAD}}\n\nIN vec3 vPosition;\nIN vec3 attrVertNormal;\nIN vec2 attrTexCoord;\n\nOUT vec3 norm;\nOUT vec2 texCoord;\nOUT vec2 texCoordOrig;\n\nUNI mat4 projMatrix;\nUNI mat4 modelMatrix;\nUNI mat4 viewMatrix;\n\n#ifdef HAS_TEXTURES\n    #ifdef TEXTURE_REPEAT\n        UNI float diffuseRepeatX;\n        UNI float diffuseRepeatY;\n        UNI float texOffsetX;\n        UNI float texOffsetY;\n    #endif\n#endif\n\n\nvoid main()\n{\n    mat4 mMatrix=modelMatrix;\n    mat4 mvMatrix;\n\n    texCoordOrig=attrTexCoord;\n    texCoord=attrTexCoord;\n    #ifdef HAS_TEXTURES\n        #ifdef TEXTURE_REPEAT\n            texCoord.x=texCoord.x*diffuseRepeatX+texOffsetX;\n            texCoord.y=texCoord.y*diffuseRepeatY+texOffsetY;\n        #endif\n    #endif\n\n    vec4 pos = vec4( vPosition, 1. );\n\n\n    #ifdef BILLBOARD\n       vec3 position=vPosition;\n       mvMatrix=viewMatrix*modelMatrix;\n\n       gl_Position = projMatrix * mvMatrix * vec4((\n           position.x * vec3(\n               mvMatrix[0][0],\n               mvMatrix[1][0],\n               mvMatrix[2][0] ) +\n           position.y * vec3(\n               mvMatrix[0][1],\n               mvMatrix[1][1],\n               mvMatrix[2][1]) ), 1.0);\n    #endif\n\n    {{MODULE_VERTEX_POSITION}}\n\n    #ifndef BILLBOARD\n        mvMatrix=viewMatrix * mMatrix;\n    #endif\n\n\n    #ifndef BILLBOARD\n        // gl_Position = projMatrix * viewMatrix * modelMatrix * pos;\n        gl_Position = projMatrix * mvMatrix * pos;\n    #endif\n}\n",};
const render = op.inTrigger("render"),
    trigger = op.outTrigger("trigger"),
    shaderOut = op.outObject("shader");

shaderOut.ignoreValueSerialize = true;
const cgl = op.patch.cgl;

let shader = new CGL.Shader(cgl, "BasicMaterial");
shader.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG"]);
shader.bindTextures = bindTextures;
shader.setSource(attachments.shader_vert, attachments.shader_frag);
shaderOut.setRef(shader);

render.onTriggered = doRender;

let textureOpacity = null;
let textureOpacityUniform = null;

function bindTextures()
{
    if (diffuseTexture.get()) cgl.setTexture(0, diffuseTexture.get().tex);
    if (textureOpacity.get()) cgl.setTexture(1, textureOpacity.get().tex);
}

op.preRender = function ()
{
    shader.bind();
    doRender();
};

function doRender()
{
    if (!shader) return;

    cgl.pushShader(shader);
    shader.bindTextures();

    trigger.trigger();

    cgl.popShader();
}

{
    // rgba colors
    const r = op.inValueSlider("r", Math.random()),
        g = op.inValueSlider("g", Math.random()),
        b = op.inValueSlider("b", Math.random()),
        a = op.inValueSlider("a", 1.0);
    r.setUiAttribs({ "colorPick": true });

    a.uniform = new CGL.Uniform(shader, "f", "a", a);
    b.uniform = new CGL.Uniform(shader, "f", "b", b);
    r.uniform = new CGL.Uniform(shader, "f", "r", r);
    g.uniform = new CGL.Uniform(shader, "f", "g", g);

    op.setPortGroup("Color", [r, g, b, a]);

}

{
    // diffuse outTexture

    var diffuseTexture = op.inTexture("texture");
    let diffuseTextureUniform = null;
    shader.bindTextures = bindTextures;

    diffuseTexture.onChange = function ()
    {
        if (diffuseTexture.get())
        {
            // if(diffuseTextureUniform!==null)return;
            // shader.addveUniform('texDiffuse');
            if (!shader.hasDefine("HAS_TEXTURE_DIFFUSE"))shader.define("HAS_TEXTURE_DIFFUSE");
            if (!diffuseTextureUniform)diffuseTextureUniform = new CGL.Uniform(shader, "t", "texDiffuse", 0);
            updateTexRepeat();
        }
        else
        {
            shader.removeUniform("texDiffuse");
            shader.removeDefine("HAS_TEXTURE_DIFFUSE");
            diffuseTextureUniform = null;
        }
    };
}

{
    // opacity texture
    textureOpacity = op.inTexture("textureOpacity");

    textureOpacity.onChange = function ()
    {
        if (textureOpacity.get())
        {
            if (textureOpacityUniform !== null) return;
            shader.removeUniform("texOpacity");
            shader.define("HAS_TEXTURE_OPACITY");
            if (!textureOpacityUniform)textureOpacityUniform = new CGL.Uniform(shader, "t", "texOpacity", 1);
        }
        else
        {
            shader.removeUniform("texOpacity");
            shader.removeDefine("HAS_TEXTURE_OPACITY");
            textureOpacityUniform = null;
        }
    };

}

op.colorizeTexture = op.inValueBool("colorizeTexture");
op.colorizeTexture.set(false);
op.colorizeTexture.onChange = function ()
{
    if (op.colorizeTexture.get()) shader.define("COLORIZE_TEXTURE");
    else shader.removeDefine("COLORIZE_TEXTURE");
};

op.doBillboard = op.inValueBool("billboard");
op.doBillboard.set(false);

op.doBillboard.onChange = function ()
{
    if (op.doBillboard.get()) shader.define("BILLBOARD");
    else shader.removeDefine("BILLBOARD");
};

let texCoordAlpha = op.inValueBool("Opacity TexCoords Transform", false);

texCoordAlpha.onChange = function ()
{
    if (texCoordAlpha.get()) shader.define("TRANSFORMALPHATEXCOORDS");
    else shader.removeDefine("TRANSFORMALPHATEXCOORDS");

};

let preMultipliedAlpha = op.inValueBool("preMultiplied alpha");

function updateTexRepeat()
{
    if (!diffuseRepeatXUniform)
    {
        diffuseRepeatXUniform = new CGL.Uniform(shader, "f", "diffuseRepeatX", diffuseRepeatX);
        diffuseRepeatYUniform = new CGL.Uniform(shader, "f", "diffuseRepeatY", diffuseRepeatY);
        diffuseOffsetXUniform = new CGL.Uniform(shader, "f", "texOffsetX", diffuseOffsetX);
        diffuseOffsetYUniform = new CGL.Uniform(shader, "f", "texOffsetY", diffuseOffsetY);
    }

    diffuseRepeatXUniform.setValue(diffuseRepeatX.get());
    diffuseRepeatYUniform.setValue(diffuseRepeatY.get());
    diffuseOffsetXUniform.setValue(diffuseOffsetX.get());
    diffuseOffsetYUniform.setValue(diffuseOffsetY.get());
}

{
    // texture coords

    var diffuseRepeatX = op.inValueFloat("diffuseRepeatX", 1);
    var diffuseRepeatY = op.inValueFloat("diffuseRepeatY", 1);
    var diffuseOffsetX = op.inValueFloat("Tex Offset X");
    var diffuseOffsetY = op.inValueFloat("Tex Offset Y");

    op.setPortGroup("Transform Texture", [diffuseRepeatX, diffuseRepeatY, diffuseOffsetX, diffuseOffsetY]);

    diffuseRepeatX.onChange = updateTexRepeat;
    diffuseRepeatY.onChange = updateTexRepeat;
    diffuseOffsetY.onChange = updateTexRepeat;
    diffuseOffsetX.onChange = updateTexRepeat;

    var diffuseRepeatXUniform = null;
    var diffuseRepeatYUniform = null;
    var diffuseOffsetXUniform = null;
    var diffuseOffsetYUniform = null;

    shader.define("TEXTURE_REPEAT");

    diffuseOffsetX.set(0);
    diffuseOffsetY.set(0);
    diffuseRepeatX.set(1);
    diffuseRepeatY.set(1);
}

updateTexRepeat();

}
};

CABLES.OPS["85ae5cfa-5eca-4dd8-8b30-850ac34f7cd5"]={f:Ops.Gl.Shader.BasicMaterial,objName:"Ops.Gl.Shader.BasicMaterial"};




// **************************************************************
// 
// Ops.Gl.Meshes.SimpleSpline
// 
// **************************************************************

Ops.Gl.Meshes.SimpleSpline= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    render = op.inTrigger("Render"),
    inPoints = op.inArray("Points"),
    numPoints = op.inValueInt("Num Points"),
    strip = op.inBool("Line Strip", true),
    outGeom = op.outObject("Geometry"),
    // a=op.inSwitch("Mode",["Line Strip","Line Loop","Lines"]), // next version!
    texCoords = op.inSwitch("TexCoords", ["0", "0-1", "Random", "Fill"], "0"),
    inTexCoords = op.inArray("TexCoords Array"),
    inVertCols = op.inArray("Vertex Colors"),
    next = op.outTrigger("Next");

const cgl = op.patch.cgl;
const geom = new CGL.Geometry("simplespline");
outGeom.set(geom);

geom.vertices = [0, 0, 0, 0, 0, 0, 0, 0, 0];
const mesh = new CGL.Mesh(cgl, geom);
let buff = new Float32Array();
let bufTexCoord = new Float32Array();
let bufNorms = new Float32Array();
let needsRebuild = true;
let attr;
let currentTexCoords = "";

inVertCols.onChange =
inTexCoords.onChange =
texCoords.onChange =
    numPoints.onChange =
    inPoints.onChange =
    function () { needsRebuild = true; };

op.toWorkPortsNeedToBeLinked(inPoints);

function rebuild()
{
    const points = inPoints.get();

    if (!points || points.length === 0) return;

    const newLength = points.length;

    if (!(points instanceof Float32Array))
    {
        if (newLength != buff.length)
        {
            buff = new Float32Array(newLength);
            bufNorms = new Float32Array(newLength);
            mesh.setAttribute(CGL.SHADERVAR_VERTEX_NORMAL, bufNorms, 3);

            buff.set(points);
        }
        else
        {
            buff.set(points);
        }
    }
    else
    {
        buff = points;
    }

    attr = mesh.setAttribute(CGL.SHADERVAR_VERTEX_POSITION, buff, 3);

    op.setUiError("wrongvcnum", null);

    if (inVertCols.get())
    {
        if (inVertCols.get().length / 4 != buff.length / 3) op.setUiError("wrongvcnum", "vertex color array length is wrong. should be " + buff.length / 3 * 4);
        const attrVc = mesh.setAttribute(CGL.SHADERVAR_VERTEX_COLOR, inVertCols.get(), 4);
    }

    const numTc = (newLength / 3) * 2;

    op.setUiError("wrongtcnum", null);

    if (inTexCoords.get())
    {
        const intc = inTexCoords.get();
        if (intc.length / 2 != buff.length / 3) op.setUiError("wrongtcnum", "texcoord array length is wrong. should be " + buff.length / 3 * 2);

        const attrTc = mesh.setAttribute(CGL.SHADERVAR_VERTEX_TEXCOORD, intc, 2);
    }
    else
    if (currentTexCoords != texCoords.get() || mesh.getAttribute(CGL.SHADERVAR_VERTEX_TEXCOORD).numItems != numTc / 2)
    {
        currentTexCoords = texCoords.get();

        if (bufTexCoord.length != numTc) bufTexCoord = new Float32Array(numTc);

        if (texCoords.get() == "0-1")
        {
            for (let i = 0; i < numTc; i += 2)
            {
                bufTexCoord[i] = i / numTc;
                bufTexCoord[i + 1] = 0.5;
            }
        }
        else if (texCoords.get() == "Fill")
        {
            const sizel = Math.sqrt(numTc / 2);

            let idx = 0;
            for (let j = 0; j < sizel; j++)
            {
                for (let i = 0; i < sizel; i++)
                {
                    idx++;
                    bufTexCoord[idx * 2 + 0] = i / sizel;
                    bufTexCoord[idx * 2 + 1] = j / sizel;
                }
            }
        }
        else if (texCoords.get() == "Random")
        {
            for (let i = 0; i < numTc; i += 2)
            {
                bufTexCoord[i] = Math.random();
                bufTexCoord[i + 1] = Math.random();
            }
        }
        else
        {
            for (let i = 0; i < numTc; i += 2)
            {
                bufTexCoord[i] = 0;
                bufTexCoord[i + 1] = 0;
            }
        }
        const attrTc = mesh.setAttribute(CGL.SHADERVAR_VERTEX_TEXCOORD, bufTexCoord, 2);
    }

    needsRebuild = false;
}

render.onTriggered = function ()
{
    if (!inPoints.get()) return;

    if (needsRebuild)rebuild();
    const shader = cgl.getShader();
    if (!shader) return;

    const oldPrim = shader.glPrimitive;
    if (strip.get()) shader.glPrimitive = cgl.gl.LINE_STRIP; // LINE_LOOP
    else shader.glPrimitive = cgl.gl.LINES;

    if (attr)
        if (numPoints.get() <= 0)attr.numItems = buff.length / 3;
        else attr.numItems = Math.min(numPoints.get(), buff.length / 3);

    if (mesh && buff.length !== 0) mesh.render(shader);

    shader.glPrimitive = oldPrim;

    next.trigger();
};

}
};

CABLES.OPS["af3fd0e8-ef3d-4124-a6ee-3482e9a85b45"]={f:Ops.Gl.Meshes.SimpleSpline,objName:"Ops.Gl.Meshes.SimpleSpline"};




// **************************************************************
// 
// Ops.Trigger.Repeat
// 
// **************************************************************

Ops.Trigger.Repeat= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe=op.inTrigger("exe"),
    num=op.inValueInt("num",5),
    trigger=op.outTrigger("trigger"),
    idx=op.addOutPort(new CABLES.Port(op,"index"));

exe.onTriggered=function()
{
    for(var i=Math.round(num.get())-1;i>-1;i--)
    {
        idx.set(i);
        trigger.trigger();
    }
};


}
};

CABLES.OPS["0f4d6489-ea7a-436b-b1b3-25a739e150c6"]={f:Ops.Trigger.Repeat,objName:"Ops.Trigger.Repeat"};




// **************************************************************
// 
// Ops.Gl.Matrix.Transform
// 
// **************************************************************

Ops.Gl.Matrix.Transform= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    render = op.inTrigger("render"),
    posX = op.inValue("posX", 0),
    posY = op.inValue("posY", 0),
    posZ = op.inValue("posZ", 0),
    scale = op.inValue("scale", 1),
    rotX = op.inValue("rotX", 0),
    rotY = op.inValue("rotY", 0),
    rotZ = op.inValue("rotZ", 0),
    trigger = op.outTrigger("trigger");

op.setPortGroup("Rotation", [rotX, rotY, rotZ]);
op.setPortGroup("Position", [posX, posY, posZ]);
op.setPortGroup("Scale", [scale]);
op.setUiAxisPorts(posX, posY, posZ);

op.toWorkPortsNeedToBeLinked(render, trigger);

const vPos = vec3.create();
const vScale = vec3.create();
const transMatrix = mat4.create();
mat4.identity(transMatrix);

let
    doScale = false,
    doTranslate = false,
    translationChanged = true,
    scaleChanged = true,
    rotChanged = true;

rotX.onChange = rotY.onChange = rotZ.onChange = setRotChanged;
posX.onChange = posY.onChange = posZ.onChange = setTranslateChanged;
scale.onChange = setScaleChanged;

render.onTriggered = function ()
{
    // if(!CGL.TextureEffect.checkOpNotInTextureEffect(op)) return;

    let updateMatrix = false;
    if (translationChanged)
    {
        updateTranslation();
        updateMatrix = true;
    }
    if (scaleChanged)
    {
        updateScale();
        updateMatrix = true;
    }
    if (rotChanged) updateMatrix = true;

    if (updateMatrix) doUpdateMatrix();

    const cg = op.patch.cg || op.patch.cgl;
    cg.pushModelMatrix();
    mat4.multiply(cg.mMatrix, cg.mMatrix, transMatrix);

    trigger.trigger();
    cg.popModelMatrix();

    if (CABLES.UI)
    {
        if (!posX.isLinked() && !posY.isLinked() && !posZ.isLinked())
        {
            gui.setTransform(op.id, posX.get(), posY.get(), posZ.get());

            if (op.isCurrentUiOp())
                gui.setTransformGizmo(
                    {
                        "posX": posX,
                        "posY": posY,
                        "posZ": posZ,
                    });
        }
    }
};

// op.transform3d = function ()
// {
//     return { "pos": [posX, posY, posZ] };
// };

function doUpdateMatrix()
{
    mat4.identity(transMatrix);
    if (doTranslate)mat4.translate(transMatrix, transMatrix, vPos);

    if (rotX.get() !== 0)mat4.rotateX(transMatrix, transMatrix, rotX.get() * CGL.DEG2RAD);
    if (rotY.get() !== 0)mat4.rotateY(transMatrix, transMatrix, rotY.get() * CGL.DEG2RAD);
    if (rotZ.get() !== 0)mat4.rotateZ(transMatrix, transMatrix, rotZ.get() * CGL.DEG2RAD);

    if (doScale)mat4.scale(transMatrix, transMatrix, vScale);
    rotChanged = false;
}

function updateTranslation()
{
    doTranslate = false;
    if (posX.get() !== 0.0 || posY.get() !== 0.0 || posZ.get() !== 0.0) doTranslate = true;
    vec3.set(vPos, posX.get(), posY.get(), posZ.get());
    translationChanged = false;
}

function updateScale()
{
    // doScale=false;
    // if(scale.get()!==0.0)
    doScale = true;
    vec3.set(vScale, scale.get(), scale.get(), scale.get());
    scaleChanged = false;
}

function setTranslateChanged()
{
    translationChanged = true;
}

function setScaleChanged()
{
    scaleChanged = true;
}

function setRotChanged()
{
    rotChanged = true;
}

doUpdateMatrix();

}
};

CABLES.OPS["650baeb1-db2d-4781-9af6-ab4e9d4277be"]={f:Ops.Gl.Matrix.Transform,objName:"Ops.Gl.Matrix.Transform"};




// **************************************************************
// 
// Ops.Math.Divide
// 
// **************************************************************

Ops.Math.Divide= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    number1 = op.inValueFloat("number1", 1),
    number2 = op.inValueFloat("number2", 2),
    result = op.outNumber("result");

op.setUiAttribs({ "mathTitle": true });

number1.onChange = number2.onChange = exec;
exec();

function exec()
{
    result.set(number1.get() / number2.get());
}

}
};

CABLES.OPS["86fcfd8c-038d-4b91-9820-a08114f6b7eb"]={f:Ops.Math.Divide,objName:"Ops.Math.Divide"};




// **************************************************************
// 
// Ops.Gl.ShaderEffects.PerlinAreaDeform_v2
// 
// **************************************************************

Ops.Gl.ShaderEffects.PerlinAreaDeform_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"perlindeform_vert":"\nUNI bool MOD_smooth;\nUNI float MOD_x,MOD_y,MOD_z;\nUNI float MOD_strength;\nUNI float MOD_size;\nUNI float MOD_scale;\nUNI float MOD_scrollx;\nUNI float MOD_scrolly;\nUNI float MOD_scrollz;\n\n\n\nfloat Interpolation_C2( float x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }   //  6x^5-15x^4+10x^3\t( Quintic Curve.  As used by Perlin in Improved Noise.  http://mrl.nyu.edu/~perlin/paper445.pdf )\nvec2 Interpolation_C2( vec2 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\nvec3 Interpolation_C2( vec3 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\nvec4 Interpolation_C2( vec4 x ) { return x * x * x * (x * (x * 6.0 - 15.0) + 10.0); }\nvec4 Interpolation_C2_InterpAndDeriv( vec2 x ) { return x.xyxy * x.xyxy * ( x.xyxy * ( x.xyxy * ( x.xyxy * vec2( 6.0, 0.0 ).xxyy + vec2( -15.0, 30.0 ).xxyy ) + vec2( 10.0, -60.0 ).xxyy ) + vec2( 0.0, 30.0 ).xxyy ); }\nvec3 Interpolation_C2_Deriv( vec3 x ) { return x * x * (x * (x * 30.0 - 60.0) + 30.0); }\n\n\nvoid FAST32_hash_3D( \tvec3 gridcell,\n                        out vec4 lowz_hash_0,\n                        out vec4 lowz_hash_1,\n                        out vec4 lowz_hash_2,\n                        out vec4 highz_hash_0,\n                        out vec4 highz_hash_1,\n                        out vec4 highz_hash_2\t)\t\t//\tgenerates 3 random numbers for each of the 8 cell corners\n{\n    //    gridcell is assumed to be an integer coordinate\n\n    //\tTODO: \tthese constants need tweaked to find the best possible noise.\n    //\t\t\tprobably requires some kind of brute force computational searching or something....\n    const vec2 OFFSET = vec2( 50.0, 161.0 );\n    const float DOMAIN = 69.0;\n    const vec3 SOMELARGEFLOATS = vec3( 635.298681, 682.357502, 668.926525 );\n    const vec3 ZINC = vec3( 48.500388, 65.294118, 63.934599 );\n\n    //\ttruncate the domain\n    gridcell.xyz = gridcell.xyz - floor(gridcell.xyz * ( 1.0 / DOMAIN )) * DOMAIN;\n    vec3 gridcell_inc1 = step( gridcell, vec3( DOMAIN - 1.5 ) ) * ( gridcell + 1.0 );\n\n    //\tcalculate the noise\n    vec4 P = vec4( gridcell.xy, gridcell_inc1.xy ) + OFFSET.xyxy;\n    P *= P;\n    P = P.xzxz * P.yyww;\n    vec3 lowz_mod = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + gridcell.zzz * ZINC.xyz ) );\n    vec3 highz_mod = vec3( 1.0 / ( SOMELARGEFLOATS.xyz + gridcell_inc1.zzz * ZINC.xyz ) );\n    lowz_hash_0 = fract( P * lowz_mod.xxxx );\n    highz_hash_0 = fract( P * highz_mod.xxxx );\n    lowz_hash_1 = fract( P * lowz_mod.yyyy );\n    highz_hash_1 = fract( P * highz_mod.yyyy );\n    lowz_hash_2 = fract( P * lowz_mod.zzzz );\n    highz_hash_2 = fract( P * highz_mod.zzzz );\n}\n\n//\n//\tPerlin Noise 3D  ( gradient noise )\n//\tReturn value range of -1.0->1.0\n//\thttp://briansharpe.files.wordpress.com/2011/11/perlinsample.jpg\n//\nfloat Perlin3D( vec3 P )\n{\n    //\testablish our grid cell and unit position\n    vec3 Pi = floor(P);\n    vec3 Pf = P - Pi;\n    vec3 Pf_min1 = Pf - 1.0;\n\n#if 1\n    //\n    //\tclassic noise.\n    //\trequires 3 random values per point.  with an efficent hash function will run faster than improved noise\n    //\n\n    //\tcalculate the hash.\n    //\t( various hashing methods listed in order of speed )\n    vec4 hashx0, hashy0, hashz0, hashx1, hashy1, hashz1;\n    FAST32_hash_3D( Pi, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1 );\n    //SGPP_hash_3D( Pi, hashx0, hashy0, hashz0, hashx1, hashy1, hashz1 );\n\n    //\tcalculate the gradients\n    vec4 grad_x0 = hashx0 - 0.49999;\n    vec4 grad_y0 = hashy0 - 0.49999;\n    vec4 grad_z0 = hashz0 - 0.49999;\n    vec4 grad_x1 = hashx1 - 0.49999;\n    vec4 grad_y1 = hashy1 - 0.49999;\n    vec4 grad_z1 = hashz1 - 0.49999;\n    vec4 grad_results_0 = inversesqrt( grad_x0 * grad_x0 + grad_y0 * grad_y0 + grad_z0 * grad_z0 ) * ( vec2( Pf.x, Pf_min1.x ).xyxy * grad_x0 + vec2( Pf.y, Pf_min1.y ).xxyy * grad_y0 + Pf.zzzz * grad_z0 );\n    vec4 grad_results_1 = inversesqrt( grad_x1 * grad_x1 + grad_y1 * grad_y1 + grad_z1 * grad_z1 ) * ( vec2( Pf.x, Pf_min1.x ).xyxy * grad_x1 + vec2( Pf.y, Pf_min1.y ).xxyy * grad_y1 + Pf_min1.zzzz * grad_z1 );\n\n#if 1\n    //\tClassic Perlin Interpolation\n    vec3 blend = Interpolation_C2( Pf );\n    vec4 res0 = mix( grad_results_0, grad_results_1, blend.z );\n    vec4 blend2 = vec4( blend.xy, vec2( 1.0 - blend.xy ) );\n    float final = dot( res0, blend2.zxzx * blend2.wwyy );\n    final *= 1.1547005383792515290182975610039;\t\t//\t(optionally) scale things to a strict -1.0->1.0 range    *= 1.0/sqrt(0.75)\n    return final;\n#else\n    //\tClassic Perlin Surflet\n    //\thttp://briansharpe.wordpress.com/2012/03/09/modifications-to-classic-perlin-noise/\n    Pf *= Pf;\n    Pf_min1 *= Pf_min1;\n    vec4 vecs_len_sq = vec4( Pf.x, Pf_min1.x, Pf.x, Pf_min1.x ) + vec4( Pf.yy, Pf_min1.yy );\n    float final = dot( Falloff_Xsq_C2( min( vec4( 1.0 ), vecs_len_sq + Pf.zzzz ) ), grad_results_0 ) + dot( Falloff_Xsq_C2( min( vec4( 1.0 ), vecs_len_sq + Pf_min1.zzzz ) ), grad_results_1 );\n    final *= 2.3703703703703703703703703703704;\t\t//\t(optionally) scale things to a strict -1.0->1.0 range    *= 1.0/cube(0.75)\n    return final;\n#endif\n\n#else\n    //\n    //\timproved noise.\n    //\trequires 1 random value per point.  Will run faster than classic noise if a slow hashing function is used\n    //\n\n    //\tcalculate the hash.\n    //\t( various hashing methods listed in order of speed )\n    vec4 hash_lowz, hash_highz;\n    FAST32_hash_3D( Pi, hash_lowz, hash_highz );\n    //BBS_hash_3D( Pi, hash_lowz, hash_highz );\n    //SGPP_hash_3D( Pi, hash_lowz, hash_highz );\n\n    //\n    //\t\"improved\" noise using 8 corner gradients.  Faster than the 12 mid-edge point method.\n    //\tKen mentions using diagonals like this can cause \"clumping\", but we'll live with that.\n    //\t[1,1,1]  [-1,1,1]  [1,-1,1]  [-1,-1,1]\n    //\t[1,1,-1] [-1,1,-1] [1,-1,-1] [-1,-1,-1]\n    //\n    hash_lowz -= 0.5;\n    vec4 grad_results_0_0 = vec2( Pf.x, Pf_min1.x ).xyxy * sign( hash_lowz );\n    hash_lowz = abs( hash_lowz ) - 0.25;\n    vec4 grad_results_0_1 = vec2( Pf.y, Pf_min1.y ).xxyy * sign( hash_lowz );\n    vec4 grad_results_0_2 = Pf.zzzz * sign( abs( hash_lowz ) - 0.125 );\n    vec4 grad_results_0 = grad_results_0_0 + grad_results_0_1 + grad_results_0_2;\n\n    hash_highz -= 0.5;\n    vec4 grad_results_1_0 = vec2( Pf.x, Pf_min1.x ).xyxy * sign( hash_highz );\n    hash_highz = abs( hash_highz ) - 0.25;\n    vec4 grad_results_1_1 = vec2( Pf.y, Pf_min1.y ).xxyy * sign( hash_highz );\n    vec4 grad_results_1_2 = Pf_min1.zzzz * sign( abs( hash_highz ) - 0.125 );\n    vec4 grad_results_1 = grad_results_1_0 + grad_results_1_1 + grad_results_1_2;\n\n    //\tblend the gradients and return\n    vec3 blend = Interpolation_C2( Pf );\n    vec4 res0 = mix( grad_results_0, grad_results_1, blend.z );\n    vec4 blend2 = vec4( blend.xy, vec2( 1.0 - blend.xy ) );\n    return dot( res0, blend2.zxzx * blend2.wwyy ) * (2.0 / 3.0);\t//\t(optionally) mult by (2.0/3.0) to scale to a strict -1.0->1.0 range\n#endif\n}\n\nvec3 MOD_deform(vec3 pos)\n{\n    // vec3 MOD_pos=vec3();\n    vec3 modelPos=pos;\n    vec3 forcePos=vec3(MOD_x,MOD_y,MOD_z);\n\n\n    vec3 vecToOrigin=modelPos-forcePos;\n    float dist=abs(length(vecToOrigin));\n    float distAlpha = (MOD_size - dist) / MOD_size;\n\n    if(MOD_smooth) distAlpha=smoothstep(0.0,MOD_size,distAlpha);\n\n\n    vec3 ppos=vec3(pos*MOD_scale);\n    ppos.x+=MOD_scrollx;\n    ppos.y+=MOD_scrolly;\n    ppos.z+=MOD_scrollz;\n\n    float p=Perlin3D(ppos)*MOD_strength*distAlpha;\n\n    vec3 pnorm=normalize(pos.xyz);\n\n    #ifdef MOD_METH_ADD_XYZ\n        pos.x+=p*pnorm.x;\n        pos.y+=p*pnorm.y;\n        pos.z+=p*pnorm.z;\n    #endif\n\n    #ifdef MOD_METH_ADD_Z\n        pos.z+=p;\n    #endif\n\n    return pos;\n}\n\n\nvec3 MOD_calcNormal(vec3 pos)\n{\n    float theta = .001;\n    vec3 vecTangent = normalize(cross(pos, vec3(1.0, 0.0, 0.0)) + cross(pos, vec3(0.0, 1.0, 0.0)));\n    vec3 vecBitangent = normalize(cross(vecTangent, pos));\n    vec3 ptTangentSample = MOD_deform(normalize(pos + theta * normalize(vecTangent)));\n    vec3 ptBitangentSample = MOD_deform(normalize(pos + theta * normalize(vecBitangent)));\n\n    return normalize(cross(ptTangentSample - pos, ptBitangentSample - pos));\n}\n","perlindeform_body_vert":"\n#ifndef MOD_WORLDSPACE\n   pos.xyz=MOD_deform(pos.xyz);\n   norm=MOD_calcNormal(pos.xyz);\n#endif\n\n#ifdef MOD_WORLDSPACE\n   pos.xyz=MOD_deform( (mMatrix*pos).xyz );\n   norm=MOD_calcNormal( (mMatrix*pos).xyz);\n#endif\n",};

let cgl = op.patch.cgl;

op.render = op.addInPort(new CABLES.Port(this, "render", CABLES.OP_PORT_TYPE_FUNCTION));
op.trigger = op.addOutPort(new CABLES.Port(this, "trigger", CABLES.OP_PORT_TYPE_FUNCTION));

let inScale = op.inValue("Scale", 1);
let inSize = op.inValue("Size", 1);
let inStrength = op.inValue("Strength", 1);
let inSmooth = op.inValueBool("Smooth", true);

let output = op.inValueSelect("Output", ["Add XYZ", "Add Z"], "Add XYZ");

let x = op.inValue("x");
let y = op.inValue("y");
let z = op.inValue("z");

let scrollx = op.inValue("Scroll X");
let scrolly = op.inValue("Scroll Y");
let scrollz = op.inValue("Scroll Z");


let shader = null;

let inWorldSpace = op.inValueBool("WorldSpace");

let moduleVert = null;

function removeModule()
{
    if (shader && moduleVert) shader.removeModule(moduleVert);
    shader = null;
}


output.onChange = updateOutput;
op.render.onLinkChanged = removeModule;


inWorldSpace.onChange = updateWorldspace;

function updateOutput()
{
    if (!shader) return;
    if (output.get() == "Add XYZ") shader.define(moduleVert.prefix + "METH_ADD_XYZ");
    else shader.removeDefine(moduleVert.prefix + "METH_ADD_XYZ");

    if (output.get() == "Add Z") shader.define(moduleVert.prefix + "METH_ADD_Z");
    else shader.removeDefine(moduleVert.prefix + "METH_ADD_Z");
}

function updateWorldspace()
{
    if (!shader) return;
    shader.toggleDefine(moduleVert.prefix + "WORLDSPACE", inWorldSpace.get());
}

function getScaling(mat)
{
    let m31 = mat[8];
    let m32 = mat[9];
    let m33 = mat[10];
    return Math.hypot(m31, m32, m33);
}

op.render.onTriggered = function ()
{
    if (!cgl.getShader())
    {
        op.trigger.trigger();
        return;
    }


    if (CABLES.UI)
    {
        cgl.pushModelMatrix();
        mat4.identity(cgl.mMatrix);

        if (cgl.shouldDrawHelpers(op))
        {
            cgl.pushModelMatrix();
            mat4.translate(cgl.mMatrix, cgl.mMatrix, [x.get(), y.get(), z.get()]);
            CABLES.GL_MARKER.drawSphere(op, inSize.get());
            cgl.popModelMatrix();
        }

        if (op.isCurrentUiOp())
            gui.setTransformGizmo(
                {
                    "posX": x,
                    "posY": y,
                    "posZ": z
                });


        cgl.popModelMatrix();
    }


    if (cgl.getShader() != shader)
    {
        if (shader) removeModule();
        shader = cgl.getShader();

        moduleVert = shader.addModule(
            {
                "title": op.objName,
                "name": "MODULE_VERTEX_POSITION",
                "srcHeadVert": attachments.perlindeform_vert,
                "srcBodyVert": attachments.perlindeform_body_vert

            });

        inSize.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "size", inSize);
        inStrength.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "strength", inStrength);
        inSmooth.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "smooth", inSmooth);
        inScale.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "scale", inScale);

        scrollx.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "scrollx", scrollx);
        scrolly.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "scrolly", scrolly);
        scrollz.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "scrollz", scrollz);

        x.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "x", x);
        y.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "y", y);
        z.uniform = new CGL.Uniform(shader, "f", moduleVert.prefix + "z", z);

        updateOutput();
        updateWorldspace();
    }


    if (!shader) return;

    op.trigger.trigger();
};

}
};

CABLES.OPS["005fe510-e596-4985-bf17-e0c0950cea8a"]={f:Ops.Gl.ShaderEffects.PerlinAreaDeform_v2,objName:"Ops.Gl.ShaderEffects.PerlinAreaDeform_v2"};




// **************************************************************
// 
// Ops.Anim.RandomAnim
// 
// **************************************************************

Ops.Anim.RandomAnim= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger("exe"),

    min = op.inValue("min", 0),
    max = op.inValue("max", 1),
    seed = op.inValue("random seed", 0),

    duration = op.inValue("duration", 0.5),
    pause = op.inValue("pause between", 0),
    next = op.outTrigger("Next"),
    result = op.outNumber("result"),
    looped = op.outTrigger("Looped");

const anim = new CABLES.Anim();
anim.createPort(op, "easing", reinit);

op.setPortGroup("Timing", [duration, pause]);
op.setPortGroup("Value", [min, max, seed]);

op.toWorkPortsNeedToBeLinked(exe);

let counter = 0;

min.onChange =
    max.onChange =
    pause.onChange =
    seed.onChange =
    duration.onChange = reinitLater;

let needsReinit = true;

function reinitLater()
{
    needsReinit = true;
}

function getRandom()
{
    const minVal = (min.get());
    return Math.seededRandom() * (max.get() - minVal) + minVal;
}

function reinit()
{
    Math.randomSeed = seed.get() + counter * 100;
    init(getRandom());
    needsReinit = false;
}

function init(v)
{
    anim.clear();

    anim.setValue(CABLES.now() / 1000.0, v);
    if (pause.get() !== 0.0) anim.setValue(CABLES.now() / 1000.0 + pause.get(), v);

    anim.setValue(duration.get() + CABLES.now() / 1000.0 + pause.get(), getRandom());
}

exe.onTriggered = updateExe;

function updateExe()
{
    if (needsReinit)reinit();

    const t = CABLES.now() / 1000.0;
    const v = anim.getValue(t);

    if (anim.hasEnded(t))
    {
        counter++;
        anim.clear();
        init(v);
        looped.trigger();
    }
    result.set(v);
    next.trigger();
}

}
};

CABLES.OPS["2d2e5f0e-b69f-4789-9a48-1ee6ade5049a"]={f:Ops.Anim.RandomAnim,objName:"Ops.Anim.RandomAnim"};




// **************************************************************
// 
// Ops.Anim.SineAnim
// 
// **************************************************************

Ops.Anim.SineAnim= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger("exe"),
    mode = op.inSwitch("Mode", ["Sine", "Cosine"], "Sine"),
    phase = op.inValueFloat("phase", 0),
    mul = op.inValueFloat("frequency", 1),
    amplitude = op.inValueFloat("amplitude", 1),
    trigOut = op.outTrigger("Trigger out"),
    result = op.outNumber("result");

let selectIndex = 0;
const SINE = 0;
const COSINE = 1;

op.toWorkPortsNeedToBeLinked(exe);

exe.onTriggered = exec;
mode.onChange = onModeChange;

exec();
onModeChange();

function onModeChange()
{
    let modeSelectValue = mode.get();

    if (modeSelectValue === "Sine") selectIndex = SINE;
    else if (modeSelectValue === "Cosine") selectIndex = COSINE;

    exec();
}

function exec()
{
    if (selectIndex == SINE) result.set(amplitude.get() * Math.sin((op.patch.freeTimer.get() * mul.get()) + phase.get()));
    else result.set(amplitude.get() * Math.cos((op.patch.freeTimer.get() * mul.get()) + phase.get()));
    trigOut.trigger();
}

}
};

CABLES.OPS["736d3d0e-c920-449e-ade0-f5ca6018fb5c"]={f:Ops.Anim.SineAnim,objName:"Ops.Anim.SineAnim"};




// **************************************************************
// 
// Ops.Math.MapRange
// 
// **************************************************************

Ops.Math.MapRange= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    v = op.inValueFloat("value", 0),
    old_min = op.inValueFloat("old min", 0),
    old_max = op.inValueFloat("old max", 1),
    new_min = op.inValueFloat("new min", 0),
    new_max = op.inValueFloat("new max", 1),
    easing = op.inValueSelect("Easing", ["Linear", "Smoothstep", "Smootherstep"], "Linear"),
    inClamp = op.inBool("Clamp", true),
    result = op.outNumber("result", 0);

op.setPortGroup("Input Range", [old_min, old_max]);
op.setPortGroup("Output Range", [new_min, new_max]);

let doClamp = true;
let ease = 0;
let r = 0;

v.onChange =
    old_min.onChange =
    old_max.onChange =
    new_min.onChange =
    new_max.onChange = exec;

exec();

inClamp.onChange =
() =>
{
    doClamp = inClamp.get();
    exec();
};

easing.onChange = function ()
{
    if (easing.get() == "Smoothstep") ease = 1;
    else if (easing.get() == "Smootherstep") ease = 2;
    else ease = 0;
};

function exec()
{
    const nMin = new_min.get();
    const nMax = new_max.get();
    const oMin = old_min.get();
    const oMax = old_max.get();
    let x = v.get();

    if (doClamp)
    {
        if (x >= Math.max(oMax, oMin))
        {
            result.set(nMax);
            return;
        }
        else
        if (x <= Math.min(oMax, oMin))
        {
            result.set(nMin);
            return;
        }
    }

    let reverseInput = false;
    const oldMin = Math.min(oMin, oMax);
    const oldMax = Math.max(oMin, oMax);
    if (oldMin != oMin) reverseInput = true;

    let reverseOutput = false;
    const newMin = Math.min(nMin, nMax);
    const newMax = Math.max(nMin, nMax);
    if (newMin != nMin) reverseOutput = true;

    let portion = 0;

    if (reverseInput) portion = (oldMax - x) * (newMax - newMin) / (oldMax - oldMin);
    else portion = (x - oldMin) * (newMax - newMin) / (oldMax - oldMin);

    if (reverseOutput) r = newMax - portion;
    else r = portion + newMin;

    if (ease === 0)
    {
        result.set(r);
    }
    else
    if (ease == 1)
    {
        x = Math.max(0, Math.min(1, (r - nMin) / (nMax - nMin)));
        result.set(nMin + x * x * (3 - 2 * x) * (nMax - nMin)); // smoothstep
    }
    else
    if (ease == 2)
    {
        x = Math.max(0, Math.min(1, (r - nMin) / (nMax - nMin)));
        result.set(nMin + x * x * x * (x * (x * 6 - 15) + 10) * (nMax - nMin)); // smootherstep
    }
}

}
};

CABLES.OPS["2617b407-60a0-4ff6-b4a7-18136cfa7817"]={f:Ops.Math.MapRange,objName:"Ops.Math.MapRange"};




// **************************************************************
// 
// Ops.Anim.Timer_v2
// 
// **************************************************************

Ops.Anim.Timer_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inSpeed = op.inValue("Speed", 1),
    playPause = op.inValueBool("Play", true),
    reset = op.inTriggerButton("Reset"),
    inSyncTimeline = op.inValueBool("Sync to timeline", false),
    outTime = op.outNumber("Time");

op.setPortGroup("Controls", [playPause, reset, inSpeed]);

const timer = new CABLES.Timer();
let lastTime = null;
let time = 0;
let syncTimeline = false;

playPause.onChange = setState;
setState();

function setState()
{
    if (playPause.get())
    {
        timer.play();
        op.patch.addOnAnimFrame(op);
    }
    else
    {
        timer.pause();
        op.patch.removeOnAnimFrame(op);
    }
}

reset.onTriggered = doReset;

function doReset()
{
    time = 0;
    lastTime = null;
    timer.setTime(0);
    outTime.set(0);
}

inSyncTimeline.onChange = function ()
{
    syncTimeline = inSyncTimeline.get();
    playPause.setUiAttribs({ "greyout": syncTimeline });
    reset.setUiAttribs({ "greyout": syncTimeline });
};

op.onAnimFrame = function (tt, frameNum, deltaMs)
{
    if (timer.isPlaying())
    {
        if (CABLES.overwriteTime !== undefined)
        {
            outTime.set(CABLES.overwriteTime * inSpeed.get());
        }
        else

        if (syncTimeline)
        {
            outTime.set(tt * inSpeed.get());
        }
        else
        {
            timer.update();

            const timerVal = timer.get();

            if (lastTime === null)
            {
                lastTime = timerVal;
                return;
            }

            const t = Math.abs(timerVal - lastTime);
            lastTime = timerVal;

            time += t * inSpeed.get();
            if (time != time)time = 0;
            outTime.set(time);
        }
    }
};

}
};

CABLES.OPS["aac7f721-208f-411a-adb3-79adae2e471a"]={f:Ops.Anim.Timer_v2,objName:"Ops.Anim.Timer_v2"};




// **************************************************************
// 
// Ops.Anim.RandomAnim_v2
// 
// **************************************************************

Ops.Anim.RandomAnim_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger("exe"),
    min = op.inValue("min", 0),
    max = op.inValue("max", 1),
    duration = op.inValue("duration", 0.5),
    pause = op.inValue("pause between", 0),
    next = op.outTrigger("Next"),
    result = op.outNumber("result"),
    looped = op.outTrigger("Looped");

const anim = new CABLES.Anim();
anim.createPort(op, "easing", reinit);

op.setPortGroup("Timing", [duration, pause]);
op.setPortGroup("Value", [min, max]);

op.toWorkPortsNeedToBeLinked(exe);

min.onChange =
    max.onChange =
    pause.onChange =
    duration.onChange = reinitLater;

let needsReinit = true;

function reinitLater()
{
    needsReinit = true;
}

function getRandom()
{
    const minVal = (min.get());
    return Math.random() * (max.get() - minVal) + minVal;
}

function reinit()
{
    init(getRandom());
    needsReinit = false;
}

function init(v)
{
    anim.clear();

    anim.setValue(CABLES.now() / 1000.0, v);
    // if (pause.get() !== 0.0)
    anim.setValue(CABLES.now() / 1000.0 + pause.get(), v);

    anim.setValue(duration.get() + CABLES.now() / 1000.0 + pause.get(), getRandom());
}

exe.onTriggered = updateExe;

function updateExe()
{
    if (needsReinit)reinit();

    const t = CABLES.now() / 1000.0;
    const v = anim.getValue(t);

    if (anim.hasEnded(t))
    {
        anim.clear();
        init(v);
        looped.trigger();
    }
    result.set(v);
    next.trigger();
}

}
};

CABLES.OPS["05581579-1cdc-4eaf-8557-9726c6f9a843"]={f:Ops.Anim.RandomAnim_v2,objName:"Ops.Anim.RandomAnim_v2"};




// **************************************************************
// 
// Ops.Trigger.SequenceMultiPort
// 
// **************************************************************

Ops.Trigger.SequenceMultiPort= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inTrigs = op.inMultiPort("Input", CABLES.OP_PORT_TYPE_FUNCTION),
    outTrigs = op.outMultiPort("Output", CABLES.OP_PORT_TYPE_FUNCTION);

// op.setUiAttrib({ "resizable": true, "resizableY": false, "stretchPorts": true });

inTrigs.onTriggered = (index) =>
{
    const ports = outTrigs.get();

    for (let i = 0; i < ports.length; i++)
    {
        ports[i].trigger();
    }
};

}
};

CABLES.OPS["be066ff6-85e2-408a-9570-59fb7abff7b2"]={f:Ops.Trigger.SequenceMultiPort,objName:"Ops.Trigger.SequenceMultiPort"};




// **************************************************************
// 
// Ops.Gl.CanvasInfo_v3
// 
// **************************************************************

Ops.Gl.CanvasInfo_v3= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    width = op.outNumber("CSS Width"),
    height = op.outNumber("CSS Height"),
    pixelRatio = op.outNumber("Pixel Ratio"),
    widthPixel = op.outNumber("Pixel Width"),
    heightPixel = op.outNumber("Pixel Height"),
    aspect = op.outNumber("Aspect Ratio"),
    landscape = op.outBool("Landscape"),
    outCanvasEle = op.outObject("Canvas", "element"),
    outCanvasParentEle = op.outObject("Canvas Parent", "element"),
    outResize = op.outTrigger("Resized");

let cgl = op.patch.cgl;
outCanvasEle.set(op.patch.cgl.canvas);
outCanvasParentEle.set(op.patch.cgl.canvas.parentElement);

cgl.on("resize", () =>
{
    outResize.trigger();
    update();
});

update();

function update()
{
    let div = 1;

    if (cgl.canvasHeight == 0)setTimeout(update, 100);

    height.set(cgl.canvasHeight / op.patch.cgl.pixelDensity);
    width.set(cgl.canvasWidth / op.patch.cgl.pixelDensity);

    widthPixel.set(cgl.canvasWidth);
    heightPixel.set(cgl.canvasHeight);

    pixelRatio.set(op.patch.cgl.pixelDensity); // window.devicePixelRatio

    aspect.set(cgl.canvasWidth / cgl.canvasHeight);
    landscape.set(cgl.canvasWidth > cgl.canvasHeight ? 1 : 0);
}

}
};

CABLES.OPS["be186ff9-427e-409f-b6a4-f8d957bf7bc7"]={f:Ops.Gl.CanvasInfo_v3,objName:"Ops.Gl.CanvasInfo_v3"};




// **************************************************************
// 
// Ops.Gl.Matrix.ScreenCoordinates_v2
// 
// **************************************************************

Ops.Gl.Matrix.ScreenCoordinates_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exec = op.inTrigger("Execute"),
    inUnit = op.inSwitch("Pixel Unit", ["Display", "CSS"], "Display"),
    trigger = op.outTrigger("Trigger"),
    x = op.outNumber("X"),
    y = op.outNumber("Y"),
    visi = op.outNumber("Visible");

const cgl = op.patch.cgl;
const trans = vec3.create();
const m = mat4.create();
const pos = vec3.create();
const identVec = vec3.create();
let div = -1;
inUnit.onChange = updateUnit;
updateUnit();

cgl.on("resize", updateUnit);

function updateUnit()
{
    if (inUnit.get() == "CSS")div = cgl.pixelDensity;
    else div = 1;
}

exec.onTriggered = function ()
{
    if (div == -1)updateUnit();
    mat4.multiply(m, cgl.vMatrix, cgl.mMatrix);

    vec3.transformMat4(pos, identVec, m);
    vec3.transformMat4(trans, pos, cgl.pMatrix);

    const vp = cgl.getViewPort();
    const xp = (trans[0] * vp[2] / 2) + vp[2] / 2;
    const yp = (trans[1] * vp[3] / 2) + vp[3] / 2;

    visi.set(pos[2] < 0.0 && xp > 0 && xp < vp[2] && yp > 0 && yp < vp[3]);

    x.set(xp / div);
    y.set(vp[3] / div - yp / div);

    trigger.trigger();
};

}
};

CABLES.OPS["adbf5273-3275-490d-9002-e735b81cbb9a"]={f:Ops.Gl.Matrix.ScreenCoordinates_v2,objName:"Ops.Gl.Matrix.ScreenCoordinates_v2"};




// **************************************************************
// 
// Ops.Math.Incrementor
// 
// **************************************************************

Ops.Math.Incrementor= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    increment = op.inTriggerButton("Increment"),
    decrement = op.inTriggerButton("Decrement"),
    inLimit = op.inBool("Limit", false),
    inLength = op.inValueInt("Length"),
    inMode = op.inSwitch("Mode", ["Rewind", "Stop at Max"], "Rewind"),
    inDefault = op.inValueInt("Default", 0),
    reset = op.inTriggerButton("Reset"),
    outChanged = op.outTrigger("Changed"),
    value = op.outNumber("Value"),
    outRestarted = op.outTrigger("Restarted");

const MODE_REWIND = 0;
const MODE_STOP = 1;
value.ignoreValueSerialize = true;
inLength.set(10);
let val = 0;
let mode = MODE_REWIND;
value.set(0);

inLength.onTriggered = reset;
inDefault.onChange = doReset;
reset.onTriggered = doReset;
inLimit.onChange = updateUi;

updateUi();

inMode.onChange = () =>
{
    if (inMode.get() == "Rewind")
    {
        mode = MODE_REWIND;
    }
    if (inMode.get() == "Stop at Max")
    {
        mode = MODE_STOP;
    }
};

function updateUi()
{
    inLength.setUiAttribs({ "greyout": !inLimit.get() });
    inMode.setUiAttribs({ "greyout": !inLimit.get() });
}

function doReset()
{
    value.set(null);
    val = inDefault.get();
    value.set(val);
    outRestarted.trigger();
}

decrement.onTriggered = function ()
{
    val--;
    if (inLimit.get())
    {
        if (mode == MODE_REWIND && val < 0)val = inLength.get() - 1;
        if (mode == MODE_STOP && val < 0)val = 0;
    }
    value.set(val);

    outChanged.trigger();
};

increment.onTriggered = function ()
{
    val++;
    if (inLimit.get())
    {
        if (mode == MODE_REWIND && val >= inLength.get())
        {
            val = 0;
            outRestarted.trigger();
        }
        if (mode == MODE_STOP && val >= inLength.get())val = inLength.get() - 1;
    }

    value.set(val);

    outChanged.trigger();
};

}
};

CABLES.OPS["45cc0011-ada8-4423-8f5b-39a3810b8389"]={f:Ops.Math.Incrementor,objName:"Ops.Math.Incrementor"};




// **************************************************************
// 
// Ops.Math.Multiply
// 
// **************************************************************

Ops.Math.Multiply= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    number1 = op.inValueFloat("number1", 1),
    number2 = op.inValueFloat("number2", 1),
    result = op.outNumber("result");

op.setUiAttribs({ "mathTitle": true });

number1.onChange = number2.onChange = update;
update();

function update()
{
    const n1 = number1.get();
    const n2 = number2.get();

    result.set(n1 * n2);
}

}
};

CABLES.OPS["1bbdae06-fbb2-489b-9bcc-36c9d65bd441"]={f:Ops.Math.Multiply,objName:"Ops.Math.Multiply"};




// **************************************************************
// 
// Ops.Anim.AnimNumber
// 
// **************************************************************

Ops.Anim.AnimNumber= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger("exe"),
    inValue = op.inValue("Value"),
    duration = op.inValueFloat("duration"),
    next = op.outTrigger("Next"),
    result = op.outNumber("result"),
    finished = op.outTrigger("Finished");

let lastTime = 0;
let startTime = 0;
let offset = 0;
let firsttime = true;
duration.set(0.5);

const anim = new CABLES.Anim();
anim.createPort(op, "easing", init);
anim.loop = false;

duration.onChange =
    inValue.onChange = init;

function init()
{
    startTime = performance.now();
    anim.clear(CABLES.now() / 1000.0);

    if (firsttime) anim.setValue(CABLES.now() / 1000.0, inValue.get());

    anim.setValue(duration.get() + CABLES.now() / 1000.0, inValue.get(), triggerFinished);

    firsttime = false;
}

function triggerFinished()
{
    finished.trigger();
}

exe.onTriggered = function ()
{
    let t = CABLES.now() / 1000;

    if (performance.now() - lastTime > 300)
    {
        firsttime = true;
        init();
    }

    lastTime = performance.now();

    let v = anim.getValue(t);

    result.set(v);
    next.trigger();
};

}
};

CABLES.OPS["e5b0b016-9663-4c9d-9365-f54ae3c5fbb6"]={f:Ops.Anim.AnimNumber,objName:"Ops.Anim.AnimNumber"};




// **************************************************************
// 
// Ops.Trigger.NthTrigger_v2
// 
// **************************************************************

Ops.Trigger.NthTrigger_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
let DEFAULT_NTH = 5;

// inputs
let exePort = op.inTriggerButton("Execute");
let nthPort = op.inValue("Nth", DEFAULT_NTH);

// outputs
let triggerPort = op.outTrigger("Next");

let count = 0;
let nth = DEFAULT_NTH;

exePort.onTriggered = onExeTriggered;
nthPort.onChange = valueChanged;

function onExeTriggered()
{
    count++;
    if (count % nth === 0)
    {
        count = 0;
        triggerPort.trigger();
    }
}

function valueChanged()
{
    nth = nthPort.get();
    count = 0;
}

}
};

CABLES.OPS["ea43c184-5842-4aa1-b298-5db4515cbed0"]={f:Ops.Trigger.NthTrigger_v2,objName:"Ops.Trigger.NthTrigger_v2"};




// **************************************************************
// 
// Ops.Trigger.RouteTriggerMultiPort
// 
// **************************************************************

Ops.Trigger.RouteTriggerMultiPort= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exePort = op.inTriggerButton("Execute"),
    switchPort = op.inValueInt("Switch Value"),
    numTrigs = op.outNumber("Total Connections"),
    outArrNames = op.outArray("Connected Op Names"),
    outTrigs = op.outMultiPort("Trigger", CABLES.OP_PORT_TYPE_FUNCTION);

exePort.onTriggered = update;

function update()
{
    const trigs = outTrigs.get();
    numTrigs.set(trigs.length);

    const index = Math.floor(switchPort.get());
    if (index >= 0 && index < trigs.length)
    {
        trigs[index].trigger();
    }
}

outTrigs.on("onLinkChanged", () =>
{
    const arr = [];
    const trigs = outTrigs.get();
    for (let i = 0; i < trigs.length; i++)
    {
        if (trigs[i].isLinked())
        {
            const p = trigs[i].links[0].getOtherPort(trigs[i]);
            arr.push(p.op.opId);
        }
        // else
        // {
        // arr.push("none");
        // }
    }
    outArrNames.setRef(arr);
});

}
};

CABLES.OPS["e9cfc6a0-c764-435c-aa98-c6e8f30729d6"]={f:Ops.Trigger.RouteTriggerMultiPort,objName:"Ops.Trigger.RouteTriggerMultiPort"};




// **************************************************************
// 
// Ops.Math.Compare.LessThan
// 
// **************************************************************

Ops.Math.Compare.LessThan= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const number1 = op.inValue("number1");
const number2 = op.inValue("number2");
const result = op.outBoolNum("result");

op.setUiAttribs({ "mathTitle": true });

number1.onChange = exec;
number2.onChange = exec;
exec();

function exec()
{
    result.set(number1.get() < number2.get());
}

}
};

CABLES.OPS["04fd113f-ade1-43fb-99fa-f8825f8814c0"]={f:Ops.Math.Compare.LessThan,objName:"Ops.Math.Compare.LessThan"};




// **************************************************************
// 
// Ops.Boolean.TriggerOnChangeBoolean
// 
// **************************************************************

Ops.Boolean.TriggerOnChangeBoolean= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inBool = op.inValueBool("Value"),
    outTrue = op.outTrigger("True"),
    outFalse = op.outTrigger("False");

inBool.onChange = function ()
{
    if (inBool.get()) outTrue.trigger();
    else outFalse.trigger();
};

}
};

CABLES.OPS["dba19c07-e3c4-4971-a991-c9e6212ca1c8"]={f:Ops.Boolean.TriggerOnChangeBoolean,objName:"Ops.Boolean.TriggerOnChangeBoolean"};




// **************************************************************
// 
// Ops.Boolean.ToggleBool_v2
// 
// **************************************************************

Ops.Boolean.ToggleBool_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    trigger = op.inTriggerButton("trigger"),
    reset = op.inTriggerButton("reset"),
    inDefault = op.inBool("Default", false),
    next = op.outTrigger("Next"),
    outBool = op.outBoolNum("result");

let theBool = false;

op.onLoadedValueSet = () =>
{
    theBool = inDefault.get();
    outBool.set(inDefault.get());
    next.trigger();
};

trigger.onTriggered = function ()
{
    theBool = !theBool;
    outBool.set(theBool);
    next.trigger();
};

reset.onTriggered = function ()
{
    theBool = inDefault.get();
    outBool.set(theBool);
    next.trigger();
};

}
};

CABLES.OPS["4313d9bb-96b6-43bc-9190-6068cfb2593c"]={f:Ops.Boolean.ToggleBool_v2,objName:"Ops.Boolean.ToggleBool_v2"};




// **************************************************************
// 
// Ops.Trigger.TriggerExtender
// 
// **************************************************************

Ops.Trigger.TriggerExtender= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inTriggerPort = op.inTriggerButton("Execute"),
    outTriggerPort = op.outTrigger("Next");

inTriggerPort.onTriggered = function ()
{
    outTriggerPort.trigger();
};

}
};

CABLES.OPS["7ef594f3-4907-47b0-a2d3-9854eda1679d"]={f:Ops.Trigger.TriggerExtender,objName:"Ops.Trigger.TriggerExtender"};




// **************************************************************
// 
// Ops.Trigger.GateTrigger
// 
// **************************************************************

Ops.Trigger.GateTrigger= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger('Execute'),
    passThrough = op.inValueBool('Pass Through',true),
    triggerOut = op.outTrigger('Trigger out');

exe.onTriggered = function()
{
    if(passThrough.get())
        triggerOut.trigger();
}

}
};

CABLES.OPS["65e8b8a2-ba13-485f-883a-2bcf377989da"]={f:Ops.Trigger.GateTrigger,objName:"Ops.Trigger.GateTrigger"};




// **************************************************************
// 
// Ops.Boolean.MonoFlop
// 
// **************************************************************

Ops.Boolean.MonoFlop= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    trigger = op.inTriggerButton("Trigger"),
    duration = op.inValue("Duration", 1),
    valueTrue = op.inValue("Value True", 1),
    valueFalse = op.inValue("Value False", 0),
    resetButton = op.inTriggerButton("Reset"),
    outAct = op.outTrigger("Activated"),
    outEnded = op.outTrigger("Ended"),
    result = op.outBoolNum("Result", false);

let lastTimeout = -1;

resetButton.onTriggered = function ()
{
    result.set(valueFalse.get());

    clearTimeout(lastTimeout);
};

trigger.onTriggered = function ()
{
    if (result.get() == valueFalse.get())outAct.trigger();
    result.set(valueTrue.get());

    clearTimeout(lastTimeout);
    lastTimeout = setTimeout(function ()
    {
        result.set(valueFalse.get());
        outEnded.trigger();
    }, duration.get() * 1000);
};

}
};

CABLES.OPS["3a4b0a78-4172-41c7-8248-95cb0856ecc8"]={f:Ops.Boolean.MonoFlop,objName:"Ops.Boolean.MonoFlop"};




// **************************************************************
// 
// Ops.Math.TriggerRandomNumber_v2
// 
// **************************************************************

Ops.Math.TriggerRandomNumber_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTriggerButton("Generate"),
    min = op.inValue("min", 0),
    max = op.inValue("max", 1),
    outTrig = op.outTrigger("next"),
    result = op.outNumber("result"),
    inInteger = op.inValueBool("Integer", false),
    noDupe = op.inValueBool("No consecutive duplicates", false);

op.setPortGroup("Value Range", [min, max]);

exe.onTriggered =
    max.onChange =
    min.onChange =
    inInteger.onChange = genRandom;

genRandom();

function genRandom()
{
    let r = (Math.random() * (max.get() - min.get())) + min.get();

    if (inInteger.get())r = randInt();

    if (min.get() != max.get() && max.get() > min.get())
        while (noDupe.get() && r == result.get()) r = randInt();

    result.set(r);
    outTrig.trigger();
}

function randInt()
{
    return Math.floor((Math.random() * ((max.get() - min.get() + 1))) + min.get());
}

}
};

CABLES.OPS["26f446cc-9107-4164-8209-5254487fa132"]={f:Ops.Math.TriggerRandomNumber_v2,objName:"Ops.Math.TriggerRandomNumber_v2"};




// **************************************************************
// 
// Ops.Anim.BoolAnim
// 
// **************************************************************

Ops.Anim.BoolAnim= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const anim = new CABLES.Anim();

const
    exe = op.inTrigger("exe"),
    bool = op.inValueBool("bool"),
    pease = anim.createPort(op, "easing"),
    duration = op.inValue("duration", 0.25),
    dir = op.inValueSelect("Direction", ["Both", "Only True", "Only False"], "Both"),
    valueFalse = op.inValue("value false", 0),
    valueTrue = op.inValue("value true", 1),
    next = op.outTrigger("trigger"),
    value = op.outNumber("value"),
    finished = op.outBoolNum("finished"),
    finishedTrigger = op.outTrigger("Finished Trigger");

const startTime = CABLES.now();
op.toWorkPortsNeedToBeLinked(exe);
op.setPortGroup("Animation", [duration, pease]);
op.setPortGroup("Values", [valueFalse, valueTrue]);

dir.onChange = bool.onChange = valueFalse.onChange = valueTrue.onChange = duration.onChange = setAnim;
setAnim();

function setAnim()
{
    if (dir.get() == "Animate Both")dir.set("Both");
    finished.set(false);
    const now = (CABLES.now() - startTime) / 1000;
    const oldValue = anim.getValue(now);
    anim.clear();

    anim.setValue(now, oldValue);

    if (!bool.get())
    {
        if (dir.get() != "Only True") anim.setValue(now + duration.get(), valueFalse.get());
        else anim.setValue(now, valueFalse.get());
    }
    else
    {
        if (dir.get() != "Only False") anim.setValue(now + duration.get(), valueTrue.get());
        else anim.setValue(now, valueTrue.get());
    }
}

exe.onTriggered = function ()
{
    const t = (CABLES.now() - startTime) / 1000;
    value.set(anim.getValue(t));

    if (anim.hasEnded(t))
    {
        if (!finished.get()) finishedTrigger.trigger();
        finished.set(true);
    }

    next.trigger();
};

}
};

CABLES.OPS["06ad9d35-ccf5-4d31-889c-e23fa062588a"]={f:Ops.Anim.BoolAnim,objName:"Ops.Anim.BoolAnim"};




// **************************************************************
// 
// Ops.Boolean.BoolByTrigger
// 
// **************************************************************

Ops.Boolean.BoolByTrigger= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inTriggerTrue = op.inTriggerButton("True"),
    inTriggerFalse = op.inTriggerButton("false"),
    outResult = op.outBoolNum("Result");

inTriggerTrue.onTriggered = function ()
{
    outResult.set(true);
};

inTriggerFalse.onTriggered = function ()
{
    outResult.set(false);
};

}
};

CABLES.OPS["31f65abe-9d6c-4ba6-a291-ef2de41d2087"]={f:Ops.Boolean.BoolByTrigger,objName:"Ops.Boolean.BoolByTrigger"};




// **************************************************************
// 
// Ops.Ui.SubPatchInput
// 
// **************************************************************

Ops.Ui.SubPatchInput= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
op.innerInput = true;

const goto = op.inTriggerButton("Goto SubPatchOp");
goto.setUiAttribs({ "hidePort": true });
goto.onTriggered = () =>
{
    const parent = op.patch.getSubPatchOuterOp(op.uiAttribs.subPatch);
    gui.patchView.centerSelectOp(parent.id);
};

}
};

CABLES.OPS["c4e4e933-136e-479e-8de8-0b35b75d9217"]={f:Ops.Ui.SubPatchInput,objName:"Ops.Ui.SubPatchInput"};




// **************************************************************
// 
// Ops.Ui.SubPatchOutput
// 
// **************************************************************

Ops.Ui.SubPatchOutput= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
op.innerOutput = true;

}
};

CABLES.OPS["02d45073-7936-4830-81ad-59a162febf1f"]={f:Ops.Ui.SubPatchOutput,objName:"Ops.Ui.SubPatchOutput"};




// **************************************************************
// 
// Ops.Trigger.TriggerOnce
// 
// **************************************************************

Ops.Trigger.TriggerOnce= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTriggerButton("Exec"),
    reset = op.inTriggerButton("Reset"),
    next = op.outTrigger("Next"),
    outTriggered = op.outBoolNum("Was Triggered");

let triggered = false;

op.toWorkPortsNeedToBeLinked(exe);

reset.onTriggered = function ()
{
    triggered = false;
    outTriggered.set(triggered);
};

exe.onTriggered = function ()
{
    if (triggered) return;

    triggered = true;
    next.trigger();
    outTriggered.set(triggered);
};

}
};

CABLES.OPS["cf3544e4-e392-432b-89fd-fcfb5c974388"]={f:Ops.Trigger.TriggerOnce,objName:"Ops.Trigger.TriggerOnce"};




// **************************************************************
// 
// Ops.Trigger.DelayedTrigger
// 
// **************************************************************

Ops.Trigger.DelayedTrigger= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger("exe"),
    delay = op.inValueFloat("delay", 1),
    cancel = op.inTriggerButton("Cancel"),
    next = op.outTrigger("next"),
    outDelaying = op.outBool("Delaying");

let lastTimeout = null;

cancel.onTriggered = function ()
{
    if (lastTimeout)clearTimeout(lastTimeout);
    lastTimeout = null;
};

exe.onTriggered = function ()
{
    outDelaying.set(true);
    if (lastTimeout)clearTimeout(lastTimeout);

    lastTimeout = setTimeout(
        function ()
        {
            outDelaying.set(false);
            lastTimeout = null;
            next.trigger();
        },
        delay.get() * 1000);
};

}
};

CABLES.OPS["f4ff66b0-8500-46f7-9117-832aea0c2750"]={f:Ops.Trigger.DelayedTrigger,objName:"Ops.Trigger.DelayedTrigger"};




// **************************************************************
// 
// Ops.Gl.InteractiveRectangle_v2
// 
// **************************************************************

Ops.Gl.InteractiveRectangle_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    render = op.inTrigger("Trigger in"),
    trigger = op.outTrigger("Trigger out"),
    width = op.inValue("Width", 1),
    height = op.inValue("Height", 1),
    inId = op.inString("ID"),
    classPort = op.inString("Class"),
    pivotX = op.inValueSelect("Pivot x", ["center", "left", "right"]),
    pivotY = op.inValueSelect("Pivot y", ["center", "top", "bottom"]),
    axis = op.inValueSelect("Axis", ["xy", "xz"]),
    isInteractive = op.inValueBool("Is Interactive", true),
    renderRect = op.inValueBool("Render Rectangle", true),
    divVisible = op.inValueBool("Show Boundings", true),
    cursorPort = op.inValueSelect("Cursor", ["auto", "crosshair", "pointer", "Hand", "move", "n-resize", "ne-resize", "e-resize", "se-resize", "s-resize", "sw-resize", "w-resize", "nw-resize", "text", "wait", "help", "none"], "pointer"),
    active = op.inValueBool("Render", true);

const geomOut = op.outObject("geometry");
geomOut.ignoreValueSerialize = true;

const
    mouseOver = op.outBoolNum("Pointer Hover", false),
    mouseDown = op.outBoolNum("Pointer Down", false),
    outX = op.outNumber("Pointer X"),
    outY = op.outNumber("Pointer Y"),
    outTop = op.outNumber("Top"),
    outLeft = op.outNumber("Left"),
    outRight = op.outNumber("Right"),
    outBottom = op.outNumber("Bottom"),
    mouseClick = op.outTrigger("Left Click");

const elementPort = op.outObject("Dom Element");

active.setUiAttribs({ "title": "Active" });

const cgl = op.patch.cgl;
axis.set("xy");
pivotX.set("center");
pivotY.set("center");

const geom = new CGL.Geometry(op.name);
let mesh = null;
let div = null;
const m = mat4.create();
const trans = mat4.create();
const pos = vec3.create();
const divAlign = vec3.create();
const divAlignSize = vec3.create();

axis.onChange = rebuild;
pivotX.onChange = rebuild;
pivotY.onChange = rebuild;
width.onChange = rebuild;
height.onChange = rebuild;
cursorPort.onChange = updateCursor;
rebuild();

const modelMatrix = mat4.create();
const identViewMatrix = mat4.create();
const zeroVec3 = vec3.create();

active.onChange = updateActiveRender;
isInteractive.onChange = updateIsInteractive;

render.onTriggered = function ()
{
    if (!div)
    {
        setUpDiv();
        addListeners();
        updateDivVisibility();
        updateIsInteractive();
    }
    updateDivSize();

    if (active.get() && renderRect.get() && mesh) mesh.render(cgl.getShader());

    trigger.trigger();
};

function rebuild()
{
    let w = width.get();
    let h = height.get();
    let x = 0;
    let y = 0;

    if (typeof w == "string")w = parseFloat(w);
    if (typeof h == "string")h = parseFloat(h);

    if (pivotX.get() == "center")
    {
        x = 0;
        divAlign[0] = -w / 2;
    }
    if (pivotX.get() == "right")
    {
        x = -w / 2;
    }
    if (pivotX.get() == "left")
    {
        x = w / 2;
    }

    if (pivotY.get() == "center")
    {
        y = 0;
        divAlign[1] = -h / 2;
    }
    if (pivotY.get() == "top") y = -h / 2;
    if (pivotY.get() == "bottom") y = +h / 2;

    const verts = [];
    const tc = [];
    const norms = [];
    const indices = [];

    const numRows = 1;
    const numColumns = 1;

    const stepColumn = w / numColumns;
    const stepRow = h / numRows;

    let c, r;

    for (r = 0; r <= numRows; r++)
    {
        for (c = 0; c <= numColumns; c++)
        {
            verts.push(c * stepColumn - width.get() / 2 + x);
            if (axis.get() == "xz") verts.push(0.0);
            verts.push(r * stepRow - height.get() / 2 + y);
            if (axis.get() == "xy") verts.push(0.0);

            tc.push(c / numColumns);
            tc.push(1.0 - r / numRows);

            if (axis.get() == "xz")
            {
                norms.push(0);
                norms.push(1);
                norms.push(0);
            }

            if (axis.get() == "xy")
            {
                norms.push(0);
                norms.push(0);
                norms.push(-1);
            }
        }
    }

    for (c = 0; c < numColumns; c++)
    {
        for (r = 0; r < numRows; r++)
        {
            const ind = c + (numColumns + 1) * r;
            const v1 = ind;
            const v2 = ind + 1;
            const v3 = ind + numColumns + 1;
            const v4 = ind + 1 + numColumns + 1;

            indices.push(v1);
            indices.push(v3);
            indices.push(v2);

            indices.push(v2);
            indices.push(v3);
            indices.push(v4);
        }
    }

    geom.clear();
    geom.vertices = verts;
    geom.texCoords = tc;
    geom.verticesIndices = indices;
    geom.vertexNormals = norms;

    if (!mesh) mesh = new CGL.Mesh(cgl, geom);
    else mesh.setGeom(geom);

    geomOut.set(null);
    geomOut.set(geom);
}

let divX = 0;
let divY = 0;
let divWidth = 0;
let divHeight = 0;

const mMatrix = mat4.create();
divVisible.onChange = updateDivVisibility;
inId.onChange = updateId;
classPort.onChange = updateClassNames;

function updateDivVisibility()
{
    if (div)
    {
        if (divVisible.get()) div.style.border = "1px solid red";
        else div.style.border = "none";
    }
}

function updateCursor()
{
    if (div)
    {
        div.style.cursor = cursorPort.get();
    }
}

function updateId()
{
    if (div)
    {
        div.setAttribute("id", inId.get());
    }
}

function updateDivSize()
{
    // var vp=cgl.getViewPort();

    mat4.multiply(mMatrix, cgl.vMatrix, cgl.mMatrix);
    vec3.transformMat4(pos, divAlign, mMatrix);
    vec3.transformMat4(trans, pos, cgl.pMatrix);

    const top = cgl.canvas.styleMarginTop || 0;
    const left = cgl.canvas.styleMarginLeft || 0;

    const x1 = (trans[0] * cgl.canvasWidth / 2) + cgl.canvasWidth / 2 + left;
    const y1 = (trans[1] * cgl.canvasHeight / 2) + cgl.canvasHeight / 2 + top;

    divAlignSize[0] = divAlign[0] + width.get();
    divAlignSize[1] = divAlign[1];

    vec3.transformMat4(pos, divAlignSize, mMatrix);
    vec3.transformMat4(trans, pos, cgl.pMatrix);

    const x2 = ((trans[0] * cgl.canvasWidth / 2) + cgl.canvasWidth / 2) + left;
    const y2 = ((trans[1] * cgl.canvasHeight / 2) + cgl.canvasHeight / 2 + top);

    divAlignSize[0] = divAlign[0];
    divAlignSize[1] = divAlign[1] + height.get();

    vec3.transformMat4(pos, divAlignSize, mMatrix);
    vec3.transformMat4(trans, pos, cgl.pMatrix);

    const x3 = ((trans[0] * cgl.canvasWidth / 2) + cgl.canvasWidth / 2) + left;
    const y3 = ((trans[1] * cgl.canvasHeight / 2) + cgl.canvasHeight / 2 + top);

    divAlignSize[0] = divAlign[0] + width.get();
    divAlignSize[1] = divAlign[1] + height.get();

    vec3.transformMat4(pos, divAlignSize, mMatrix);
    vec3.transformMat4(trans, pos, cgl.pMatrix);

    const x4 = ((trans[0] * cgl.canvasWidth / 2) + cgl.canvasWidth / 2) + left;
    const y4 = ((trans[1] * cgl.canvasHeight / 2) + cgl.canvasHeight / 2 + top);

    divX = Math.min(x1, x2, x3, x4);
    divY = Math.min(cgl.canvasHeight - y1, cgl.canvasHeight - y2, cgl.canvasHeight - y3, cgl.canvasHeight - y4);

    const xb = Math.max(x1, x2, x3, x4);
    const yb = Math.max(cgl.canvasHeight - y1, cgl.canvasHeight - y2, cgl.canvasHeight - y3, cgl.canvasHeight - y4);

    outTop.set(divY);
    outLeft.set(divX);
    outRight.set(xb);
    outBottom.set(yb);

    divWidth = Math.abs(xb - divX);
    divHeight = Math.abs(yb - divY);

    divX /= op.patch.cgl.pixelDensity;
    divY /= op.patch.cgl.pixelDensity;
    divWidth /= op.patch.cgl.pixelDensity;
    divHeight /= op.patch.cgl.pixelDensity;

    // div.style.left=divX+'px';
    // div.style.top=divY+'px';
    // div.style.width=divWidth+'px';
    // div.style.height=divHeight+'px';

    const divXpx = divX + "px";
    const divYpx = divY + "px";
    const divWidthPx = divWidth + "px";
    const divHeightPx = divHeight + "px";
    if (divXpx != div.style.left) div.style.left = divXpx;
    if (divYpx != div.style.top) div.style.top = divYpx;
    if (div.style.width != divWidthPx) div.style.width = divWidthPx;
    if (div.style.height != divHeightPx) div.style.height = divHeightPx;
}

function updateClassNames()
{
    if (div)
    {
        div.className = classPort.get();
    }
}

op.onDelete = function ()
{
    if (div)div.remove();
};

function setUpDiv()
{
    if (!div)
    {
        div = document.createElement("div");
        div.dataset.op = op.id;
        div.oncontextmenu = function (e)
        {
            e.preventDefault();
        };

        div.style.padding = "0px";
        div.style.position = "absolute";
        div.style["box-sizing"] = "border-box";
        div.style.border = "1px solid red";
        // div.style['border-left']="1px solid blue";
        // div.style['border-top']="1px solid green";
        div.style["z-index"] = "500";

        div.style["-webkit-user-select"] = "none";
        div.style["user-select"] = "none";
        div.style["-webkit-tap-highlight-color"] = "rgba(0,0,0,0)";
        div.style["-webkit-touch-callout"] = "none";

        const canvas = op.patch.cgl.canvas.parentElement;
        canvas.appendChild(div);
        updateCursor();
        updateIsInteractive();
        updateId();
        updateClassNames();
    }
    updateDivSize();
    elementPort.set(div);
}

let listenerElement = null;

function onMouseMove(e)
{
    const offsetX = -width.get() / 2;
    const offsetY = -height.get() / 2;

    outX.set(Math.max(0.0, Math.min(1.0, e.offsetX / divWidth)));
    outY.set(Math.max(0.0, Math.min(1.0, 1.0 - e.offsetY / divHeight)));
}

function onMouseLeave(e)
{
    mouseDown.set(false);
    mouseOver.set(false);
}

function onMouseEnter(e)
{
    mouseOver.set(true);
}

function onMouseDown(e)
{
    mouseDown.set(true);
}

function onMouseUp(e)
{
    mouseDown.set(false);
}

function onmouseclick(e)
{
    mouseClick.trigger();
}

function onTouchMove(e)
{
    const targetEle = document.elementFromPoint(e.targetTouches[0].pageX, e.targetTouches[0].pageY);

    if (targetEle == div)
    {
        mouseOver.set(true);
        if (e.touches && e.touches.length > 0)
        {
            const rect = div.getBoundingClientRect(); // e.target
            const x = e.targetTouches[0].pageX - rect.left;
            const y = e.targetTouches[0].pageY - rect.top;

            const touch = e.touches[0];

            outX.set(Math.max(0.0, Math.min(1.0, x / divWidth)));
            outY.set(Math.max(0.0, Math.min(1.0, 1.0 - y / divHeight)));

            onMouseMove(touch);
        }
    }
    else
    {
        mouseOver.set(false);
    }
}

function updateActiveRender()
{
    if (active.get())
    {
        addListeners();
        if (div) div.style.display = "block";
    }
    else
    {
        removeListeners();
        if (div) div.style.display = "none";
    }
}

function updateIsInteractive()
{
    if (isInteractive.get())
    {
        addListeners();
        if (div)div.style["pointer-events"] = "initial";
    }
    else
    {
        removeListeners();
        mouseDown.set(false);
        mouseOver.set(false);
        if (div)div.style["pointer-events"] = "none";
    }
}

function removeListeners()
{
    if (listenerElement)
    {
        document.removeEventListener("touchmove", onTouchMove);
        listenerElement.removeEventListener("touchend", onMouseUp);
        listenerElement.removeEventListener("touchstart", onMouseDown);

        listenerElement.removeEventListener("click", onmouseclick);
        listenerElement.removeEventListener("mousemove", onMouseMove);
        listenerElement.removeEventListener("mouseleave", onMouseLeave);
        listenerElement.removeEventListener("mousedown", onMouseDown);
        listenerElement.removeEventListener("mouseup", onMouseUp);
        listenerElement.removeEventListener("mouseenter", onMouseEnter);
        // listenerElement.removeEventListener('contextmenu', onClickRight);
        listenerElement = null;
    }
}

function addListeners()
{
    if (listenerElement)removeListeners();

    listenerElement = div;

    if (listenerElement)
    {
        document.addEventListener("touchmove", onTouchMove);
        listenerElement.addEventListener("touchend", onMouseUp);
        listenerElement.addEventListener("touchstart", onMouseDown);

        listenerElement.addEventListener("click", onmouseclick);
        listenerElement.addEventListener("mousemove", onMouseMove);
        listenerElement.addEventListener("mouseleave", onMouseLeave);
        listenerElement.addEventListener("mousedown", onMouseDown);
        listenerElement.addEventListener("mouseup", onMouseUp);
        listenerElement.addEventListener("mouseenter", onMouseEnter);
        // listenerElement.addEventListener('contextmenu', onClickRight);
    }
}

}
};

CABLES.OPS["334728ca-60a2-4a42-a059-d9b5f3fe4d32"]={f:Ops.Gl.InteractiveRectangle_v2,objName:"Ops.Gl.InteractiveRectangle_v2"};




// **************************************************************
// 
// Ops.String.GateString
// 
// **************************************************************

Ops.String.GateString= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    valueInPort = op.inString("String In", "hello"),
    passThroughPort = op.inValueBool("Pass Through", false),
    inIfNot = op.inSwitch("When False", ["keep last string", "custom"], "keep last string"),
    inCustomNot = op.inString("Custom Value"),
    valueOutPort = op.outString("String Out", "");

valueInPort.onChange =
    passThroughPort.onChange = update;

inIfNot.onChange = updateUi;

function updateUi()
{
    inCustomNot.setUiAttribs({ "greyout": inIfNot.get() != "custom" });
    update();
}

function update()
{
    if (passThroughPort.get())
    {
        valueOutPort.set("");
        valueOutPort.set(valueInPort.get());
    }
    else
    {
        if (inIfNot.get() == "custom") valueOutPort.set(inCustomNot.get());
    }
}

}
};

CABLES.OPS["0ce14933-2d91-4381-9d82-2304aae22c0e"]={f:Ops.String.GateString,objName:"Ops.String.GateString"};




// **************************************************************
// 
// Ops.String.Concat_v2
// 
// **************************************************************

Ops.String.Concat_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    string1 = op.inString("string1", "ABC"),
    string2 = op.inString("string2", "XYZ"),
    newLine = op.inValueBool("New Line", false),
    active = op.inBool("Active", true),
    result = op.outString("result");

newLine.onChange =
    string2.onChange =
    string1.onChange =
    active.onChange = exec;

op.toWorkPortsNeedsString(string1, string2);
exec();

function exec()
{
    if (!active.get())
    {
        return result.set(string1.get());
    }
    let s1 = string1.get();
    let s2 = string2.get();
    if (!s1 && !s2)
    {
        result.set("");
        return;
    }
    if (!s1)s1 = "";
    if (!s2)s2 = "";

    let nl = "";
    if (s1 && s2 && newLine.get())nl = "\n";
    result.set(String(s1) + nl + String(s2));
}

}
};

CABLES.OPS["a52722aa-0ca9-402c-a844-b7e98a6c6e60"]={f:Ops.String.Concat_v2,objName:"Ops.String.Concat_v2"};




// **************************************************************
// 
// Ops.Number.Number
// 
// **************************************************************

Ops.Number.Number= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    v = op.inValueFloat("value"),
    result = op.outNumber("result");

v.onChange = exec;

let isLinked = false;
v.onLinkChanged = () =>
{
    if (!isLinked && v.isLinked())op.setUiAttribs({ "extendTitle": null });
    isLinked = v.isLinked();
};

function exec()
{
    if (CABLES.UI && !isLinked) op.setUiAttribs({ "extendTitle": v.get() });

    result.set(Number(v.get()));
}

}
};

CABLES.OPS["8fb2bb5d-665a-4d0a-8079-12710ae453be"]={f:Ops.Number.Number,objName:"Ops.Number.Number"};




// **************************************************************
// 
// Ops.String.NumberToString_v2
// 
// **************************************************************

Ops.String.NumberToString_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    val = op.inValue("Number"),
    decPlaces = op.inInt("Decimal Places", 4),
    result = op.outString("Result");

let doDec = false;
let decm = 1;
decPlaces.onChange = updateDecm;
val.onChange = update;
updateDecm();
update();

function updateDecm()
{
    doDec = decPlaces.get() < 100;
    decm = Math.pow(10, decPlaces.get());
    update();
}

function update()
{
    if (doDec)
        result.set(String(Math.round(val.get() * decm) / decm));
    else
        result.set(String(val.get() || 0));
}

}
};

CABLES.OPS["5c6d375a-82db-4366-8013-93f56b4061a9"]={f:Ops.String.NumberToString_v2,objName:"Ops.String.NumberToString_v2"};




// **************************************************************
// 
// Ops.Math.Sum
// 
// **************************************************************

Ops.Math.Sum= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    number1 = op.inValueFloat("number1", 0),
    number2 = op.inValueFloat("number2", 0),
    result = op.outNumber("result");

op.setUiAttribs({ "mathTitle": true });

number1.onChange =
number2.onChange = exec;
exec();

function exec()
{
    const v = number1.get() + number2.get();
    if (!isNaN(v))
        result.set(v);
}

}
};

CABLES.OPS["c8fb181e-0b03-4b41-9e55-06b6267bc634"]={f:Ops.Math.Sum,objName:"Ops.Math.Sum"};




// **************************************************************
// 
// Ops.Math.Subtract
// 
// **************************************************************

Ops.Math.Subtract= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    number1 = op.inValue("number1", 1),
    number2 = op.inValue("number2", 1),
    result = op.outNumber("result");

op.setUiAttribs({ "mathTitle": true });

number1.onChange =
    number2.onChange = exec;
exec();

function exec()
{
    let v = number1.get() - number2.get();
    if (!isNaN(v)) result.set(v);
}

}
};

CABLES.OPS["a4ffe852-d200-4b96-9347-68feb01122ca"]={f:Ops.Math.Subtract,objName:"Ops.Math.Subtract"};




// **************************************************************
// 
// Ops.Math.RandomNumbers_v3
// 
// **************************************************************

Ops.Math.RandomNumbers_v3= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inSeed = op.inValueFloat("Seed", 1),
    min = op.inValueFloat("Min", 0),
    max = op.inValueFloat("Max", 1),
    outX = op.outNumber("X"),
    outY = op.outNumber("Y"),
    outZ = op.outNumber("Z"),
    outW = op.outNumber("W");

inSeed.onChange =
    min.onChange =
    max.onChange = update;
update();

function update()
{
    const inMin = min.get();
    const inMax = max.get();
    Math.randomSeed = Math.abs(inSeed.get() || 0) * 571.1 + 1.0;
    outX.set(Math.seededRandom() * (inMax - inMin) + inMin);
    outY.set(Math.seededRandom() * (inMax - inMin) + inMin);
    outZ.set(Math.seededRandom() * (inMax - inMin) + inMin);
    outW.set(Math.seededRandom() * (inMax - inMin) + inMin);
}

}
};

CABLES.OPS["d2b970e1-9406-4459-995c-5a594acd88e3"]={f:Ops.Math.RandomNumbers_v3,objName:"Ops.Math.RandomNumbers_v3"};




// **************************************************************
// 
// Ops.Html.ElementClientRect
// 
// **************************************************************

Ops.Html.ElementClientRect= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inUpd = op.inTriggerButton("Update"),
    inEle = op.inObject("Element", null, "element"),
    inUnits = op.inSwitch("Pixel Units", ["CSS Pixels", "Display Pixels"], "CSS Pixels"),
    outX = op.outNumber("X"),
    outY = op.outNumber("Y"),
    outWidth = op.outNumber("Width"),
    outHeight = op.outNumber("Height");

inEle.onChange =
inUpd.onTriggered = () =>
{
    let ele = inEle.get();
    if (!ele)
    {
        outX.set(0);
        outY.set(0);
        outWidth.set(0);
        outHeight.set(0);
        return;
    }
    const r = ele.getBoundingClientRect();
    const rCanv = op.patch.cgl.canvas.getBoundingClientRect();

    let mul = 1.0;

    if (inUnits.get() == "Display Pixels")
    {
        mul = op.patch.cgl.pixelDensity;
    }

    outX.set(r.left * mul - rCanv.left * mul);
    outY.set(r.top * mul - rCanv.top * mul);
    outWidth.set(r.width * mul);
    outHeight.set(r.height * mul);
};

}
};

CABLES.OPS["7a046f98-2adc-4f8e-ad47-c600e3ef5bca"]={f:Ops.Html.ElementClientRect,objName:"Ops.Html.ElementClientRect"};




// **************************************************************
// 
// Ops.Html.CSS.ElementCssTransform_v2
// 
// **************************************************************

Ops.Html.CSS.ElementCssTransform_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
// todo: remove % unit, does not make sense, try container queries ?

const
    inEle = op.inObject("Element", null, "element"),
    inDoTranslate = op.inBool("Translate Active", true),
    inTransX = op.inFloat("Translate X", 0),
    inTransY = op.inFloat("Translate Y", 0),
    inTransUnit = op.inSwitch("Unit", ["px", "%"], "px"),

    inDoScale = op.inBool("Scale Active", true),
    inScale = op.inFloat("Scale", 1),

    inDoRot = op.inBool("Rotate Active", true),
    inRot = op.inFloat("Rot Z", 0),

    inDoOrigin = op.inBool("Set Origin", true),
    inOriginX = op.inSwitch("Origin X", ["left", "center", "right"], "center"),
    inOriginY = op.inSwitch("Origin Y", ["top", "center", "bottom"], "center"),

    inDoZ = op.inBool("Z Index Active", false),
    inZ = op.inFloat("Z Index", 100),

    outEle = op.outObject("Passthrough", null, "element");

op.setPortGroup("Element", [inEle]);
op.setPortGroup("Translation", [inDoTranslate, inTransY, inTransX, inTransUnit]);
op.setPortGroup("Scaling", [inScale, inDoScale]);
op.setPortGroup("Rotation", [inDoRot, inRot]);
op.setPortGroup("Origin", [inDoOrigin, inOriginX, inOriginY]);

inTransUnit.onChange =
    inOriginX.onChange =
    inOriginY.onChange =
    inTransX.onChange =
    inTransY.onChange =
    inScale.onChange =
    inZ.onChange =
    inRot.onChange = update;

let ele = null;
let timeoutUpd = null;

inDoTranslate.onChange =
    inDoOrigin.onChange =
    inDoScale.onChange =
    inDoZ.onChange =
    inDoRot.onChange = updateUi;

inEle.onChange = inEle.onLinkChanged = function ()
{
    if (ele && ele.style)
    {
        ele.style.transform = "initial";

        if (CABLES.UI && inEle.get() && ele != inEle.get())
        {
            if (window.getComputedStyle(ele).position !== "absolute") op.setUiError("oppos", "Element position should be absolute");
        }
    }
    if (CABLES.UI) op.setUiError("oppos", null);

    update();
    outEle.setRef(inEle.get());
};

function updateUi()
{
    inTransX.setUiAttribs({ "greyout": !inDoTranslate.get() });
    inTransY.setUiAttribs({ "greyout": !inDoTranslate.get() });
    inScale.setUiAttribs({ "greyout": !inDoScale.get() });
    inRot.setUiAttribs({ "greyout": !inDoRot.get() });
    inZ.setUiAttribs({ "greyout": !inDoZ.get() });
    inOriginY.setUiAttribs({ "greyout": !inDoOrigin.get() });
    inOriginX.setUiAttribs({ "greyout": !inDoOrigin.get() });

    update();
}

function update()
{
    ele = inEle.get();
    if (ele && ele.style)
    {
        let str = "";

        if (inDoTranslate.get())
            str += "translate(" + inTransX.get() + inTransUnit.get() + " , " + inTransY.get() + inTransUnit.get() + ") ";

        if (inDoScale.get())
            if (inScale.get() != 1.0)
                str += "scale(" + inScale.get() + ") ";

        if (inDoRot.get())
            if (inRot.get() != 0.0)
                str += "rotateZ(" + inRot.get() + "deg) ";

        if (inDoZ.get())
            ele.style["z-index"] = inZ.get();

        try
        {
            ele.style.transform = str;

            if (inDoOrigin.get())
                ele.style["transform-origin"] = inOriginY.get() + " " + inOriginX.get();
            else
                ele.style["transform-origin"] = "initial";
        }
        catch (e)
        {
            op.logError(e);
        }

        outEle.setRef(ele);
    }
    else
    {
        clearTimeout(timeoutUpd);
        timeoutUpd = setTimeout(update, 150);
    }
}

}
};

CABLES.OPS["11381bfe-38b0-4051-aef9-69d83c292f0d"]={f:Ops.Html.CSS.ElementCssTransform_v2,objName:"Ops.Html.CSS.ElementCssTransform_v2"};




// **************************************************************
// 
// Ops.Math.Abs
// 
// **************************************************************

Ops.Math.Abs= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    number = op.inValue("number"),
    result = op.outNumber("result");

number.onChange = function ()
{
    result.set(Math.abs(number.get()));
};

}
};

CABLES.OPS["6b5af21d-065f-44d2-9442-8b7a254753f6"]={f:Ops.Math.Abs,objName:"Ops.Math.Abs"};




// **************************************************************
// 
// Ops.Trigger.TriggerString
// 
// **************************************************************

Ops.Trigger.TriggerString= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exec = op.inTriggerButton("Trigger"),
    inString = op.inString("String", ""),
    next = op.outTrigger("Next"),
    outString = op.outString("Result");

outString.changeAlways = true;
exec.onTriggered = function ()
{
    outString.set(inString.get());
    next.trigger();
};

}
};

CABLES.OPS["217482b8-2ee6-4609-b7ad-4550e6aaa371"]={f:Ops.Trigger.TriggerString,objName:"Ops.Trigger.TriggerString"};




// **************************************************************
// 
// Ops.Trigger.TriggerNumber
// 
// **************************************************************

Ops.Trigger.TriggerNumber= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    setValuePort = op.inTriggerButton("Set"),
    valuePort = op.inValueFloat("Number"),
    outNext = op.outTrigger("Next"),
    outValuePort = op.outNumber("Out Value");

outValuePort.changeAlways = true;

setValuePort.onTriggered = function ()
{
    outValuePort.set(valuePort.get());
    outNext.trigger();
};

}
};

CABLES.OPS["9989b1c0-1073-4d5f-bfa0-36dd98b66e27"]={f:Ops.Trigger.TriggerNumber,objName:"Ops.Trigger.TriggerNumber"};




// **************************************************************
// 
// Ops.Gl.Meshes.Star_v2
// 
// **************************************************************

Ops.Gl.Meshes.Star_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    render = op.inTrigger("render"),
    segments = op.inValue("segments", 40),
    radius = op.inValue("radius", 1),
    shape = op.inValueSelect("Shape", ["Star", "Saw", "Gear"], "Star"),
    outerRadius = op.inValue("Length", 1.5),
    zDiff = op.inFloat("Peak Z Pos", 0),
    percent = op.inValueSlider("percent", 1),
    fill = op.inValueBool("Fill"),
    renderMesh = op.inValueBool("Render Mesh", true),
    trigger = op.outTrigger("trigger"),
    geomOut = op.addOutPort(new CABLES.Port(op, "geometry", CABLES.OP_PORT_TYPE_OBJECT));

op.toWorkPortsNeedToBeLinked(render);
geomOut.ignoreValueSerialize = true;
const cgl = op.patch.cgl;
let oldPrim = 0;
let geom = new CGL.Geometry("circle");
let mesh = null;
let lastSegs = -1;

zDiff.onChange =
    segments.onChange =
    radius.onChange =
    percent.onChange =
    shape.onChange =
    fill.onChange =
    outerRadius.onChange = () => { mesh = null; };

render.onTriggered = function ()
{
    if (!mesh)calc();
    if (renderMesh.get() && mesh) mesh.render();
    trigger.trigger();
};

function calc()
{
    let segs = Math.max(3, Math.floor(segments.get()));

    geom.clear();

    let
        faces = [],
        normals = [],
        tangents = [],
        biTangents = [];
    let i = 0, degInRad = 0;
    let oldPosX = 0, oldPosY = 0;
    let oldPosXTexCoord = 0, oldPosYTexCoord = 0;

    let oldPosXIn = 0, oldPosYIn = 0;
    let oldPosXTexCoordIn = 0, oldPosYTexCoordIn = 0;

    let posxTexCoordIn = 0, posyTexCoordIn = 0;
    let posxTexCoord = 0, posyTexCoord = 0;
    let posx = 0, posy = 0;

    let verts = [];
    let outX = 0, outY = 0;

    let imode = 0;
    if (shape.get() == "Saw")imode = 1;
    if (shape.get() == "Gear")imode = 2;

    let cycleGear = true;

    for (i = 0; i <= segs * percent.get(); i++)
    {
        degInRad = (360 / segs) * i * CGL.DEG2RAD;
        posx = Math.cos(degInRad) * radius.get();
        posy = Math.sin(degInRad) * radius.get();

        // saw mode
        cycleGear = !cycleGear;

        switch (imode)
        {
        case 0:
            outX = ((posx + oldPosX) * 0.5) * outerRadius.get();
            outY = ((posy + oldPosY) * 0.5) * outerRadius.get();
            break;

        case 1:
            outX = (posx) * outerRadius.get();
            outY = (posy) * outerRadius.get();
            break;

        case 2:
            if (cycleGear)
            {
                outX = (posx) * outerRadius.get();
                outY = (posy) * outerRadius.get();

                degInRad = (360 / segs) * (i - 1) * CGL.DEG2RAD;
                let ooutX = Math.cos(degInRad) * radius.get();
                let ooutY = Math.sin(degInRad) * radius.get();

                ooutX *= outerRadius.get();
                ooutY *= outerRadius.get();

                faces.push(
                    [ooutX, ooutY, 0],
                    [outX, outY, 0],
                    [oldPosX, oldPosY, 0]
                );
                normals.push(0, 0, 1, 0, 0, 1, 0, 0, 1);
                tangents.push(1, 0, 0, 1, 0, 0, 1, 0, 0);
                biTangents.push(0, 1, 0, 0, 1, 0, 0, 1, 0);
            }

            break;
        }

        if (fill.get())
        {
            faces.push(
                [0, 0, 0],
                [oldPosX, oldPosY, 0],
                [posx, posy, 0]
            );
            normals.push(0, 0, 1, 0, 0, 1, 0, 0, 1);
            tangents.push(1, 0, 0, 1, 0, 0, 1, 0, 0);
            biTangents.push(0, 1, 0, 0, 1, 0, 0, 1, 0);
        }

        if (imode != 2 || cycleGear)
        {
            faces.push(
                [posx, posy, 0],
                [oldPosX, oldPosY, 0],
                [outX, outY, zDiff.get()]
            );
            normals.push(0, 0, 1, 0, 0, 1, 0, 0, 1);
            tangents.push(1, 0, 0, 1, 0, 0, 1, 0, 0);
            biTangents.push(0, 1, 0, 0, 1, 0, 0, 1, 0);
        }

        oldPosX = posx;
        oldPosY = posy;
    }

    geom = CGL.Geometry.buildFromFaces(faces);
    geom.vertexNormals = normals;
    geom.tangents = tangents;
    geom.biTangents = biTangents;
    geom.mapTexCoords2d();

    geomOut.set(null);
    geomOut.set(geom);

    if (geom.vertices.length == 0) return;
    if (!mesh)mesh = op.patch.cg.createMesh(geom, { "opId": op.id });
    mesh.setGeom(geom);
}

}
};

CABLES.OPS["67833a2d-4c11-4492-9a33-1b2d707ff58c"]={f:Ops.Gl.Meshes.Star_v2,objName:"Ops.Gl.Meshes.Star_v2"};




// **************************************************************
// 
// Ops.Gl.Shader.BasicMaterial_v3
// 
// **************************************************************

Ops.Gl.Shader.BasicMaterial_v3= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"basicmaterial_frag":"{{MODULES_HEAD}}\n\nIN vec2 texCoord;\n\n#ifdef VERTEX_COLORS\nIN vec4 vertCol;\n#endif\n\n#ifdef HAS_TEXTURES\n    IN vec2 texCoordOrig;\n    #ifdef HAS_TEXTURE_DIFFUSE\n        UNI sampler2D tex;\n    #endif\n    #ifdef HAS_TEXTURE_OPACITY\n        UNI sampler2D texOpacity;\n   #endif\n#endif\n\n\n\nvoid main()\n{\n    {{MODULE_BEGIN_FRAG}}\n    vec4 col=color;\n\n\n    #ifdef HAS_TEXTURES\n        vec2 uv=texCoord;\n\n        #ifdef CROP_TEXCOORDS\n            if(uv.x<0.0 || uv.x>1.0 || uv.y<0.0 || uv.y>1.0) discard;\n        #endif\n\n        #ifdef HAS_TEXTURE_DIFFUSE\n            col=texture(tex,uv);\n\n            #ifdef COLORIZE_TEXTURE\n                col.r*=color.r;\n                col.g*=color.g;\n                col.b*=color.b;\n            #endif\n        #endif\n        col.a*=color.a;\n        #ifdef HAS_TEXTURE_OPACITY\n            #ifdef TRANSFORMALPHATEXCOORDS\n                uv=texCoordOrig;\n            #endif\n            #ifdef ALPHA_MASK_IR\n                col.a*=1.0-texture(texOpacity,uv).r;\n            #endif\n            #ifdef ALPHA_MASK_IALPHA\n                col.a*=1.0-texture(texOpacity,uv).a;\n            #endif\n            #ifdef ALPHA_MASK_ALPHA\n                col.a*=texture(texOpacity,uv).a;\n            #endif\n            #ifdef ALPHA_MASK_LUMI\n                col.a*=dot(vec3(0.2126,0.7152,0.0722), texture(texOpacity,uv).rgb);\n            #endif\n            #ifdef ALPHA_MASK_R\n                col.a*=texture(texOpacity,uv).r;\n            #endif\n            #ifdef ALPHA_MASK_G\n                col.a*=texture(texOpacity,uv).g;\n            #endif\n            #ifdef ALPHA_MASK_B\n                col.a*=texture(texOpacity,uv).b;\n            #endif\n            // #endif\n        #endif\n    #endif\n\n    {{MODULE_COLOR}}\n\n    #ifdef DISCARDTRANS\n        if(col.a<0.2) discard;\n    #endif\n\n    #ifdef VERTEX_COLORS\n        col*=vertCol;\n    #endif\n\n    outColor = col;\n}\n","basicmaterial_vert":"\n{{MODULES_HEAD}}\n\nOUT vec2 texCoord;\nOUT vec2 texCoordOrig;\n\nUNI mat4 projMatrix;\nUNI mat4 modelMatrix;\nUNI mat4 viewMatrix;\n\n#ifdef HAS_TEXTURES\n    UNI float diffuseRepeatX;\n    UNI float diffuseRepeatY;\n    UNI float texOffsetX;\n    UNI float texOffsetY;\n#endif\n\n#ifdef VERTEX_COLORS\n    in vec4 attrVertColor;\n    out vec4 vertCol;\n\n#endif\n\n\nvoid main()\n{\n    mat4 mMatrix=modelMatrix;\n    mat4 modelViewMatrix;\n\n    norm=attrVertNormal;\n    texCoordOrig=attrTexCoord;\n    texCoord=attrTexCoord;\n    #ifdef HAS_TEXTURES\n        texCoord.x=texCoord.x*diffuseRepeatX+texOffsetX;\n        texCoord.y=(1.0-texCoord.y)*diffuseRepeatY+texOffsetY;\n    #endif\n\n    #ifdef VERTEX_COLORS\n        vertCol=attrVertColor;\n    #endif\n\n    vec4 pos = vec4(vPosition, 1.0);\n\n    #ifdef BILLBOARD\n       vec3 position=vPosition;\n       modelViewMatrix=viewMatrix*modelMatrix;\n\n       gl_Position = projMatrix * modelViewMatrix * vec4((\n           position.x * vec3(\n               modelViewMatrix[0][0],\n               modelViewMatrix[1][0],\n               modelViewMatrix[2][0] ) +\n           position.y * vec3(\n               modelViewMatrix[0][1],\n               modelViewMatrix[1][1],\n               modelViewMatrix[2][1]) ), 1.0);\n    #endif\n\n    {{MODULE_VERTEX_POSITION}}\n\n    #ifndef BILLBOARD\n        modelViewMatrix=viewMatrix * mMatrix;\n\n        {{MODULE_VERTEX_MODELVIEW}}\n\n    #endif\n\n    // mat4 modelViewMatrix=viewMatrix*mMatrix;\n\n    #ifndef BILLBOARD\n        // gl_Position = projMatrix * viewMatrix * modelMatrix * pos;\n        gl_Position = projMatrix * modelViewMatrix * pos;\n    #endif\n}\n",};
const render = op.inTrigger("render");
const trigger = op.outTrigger("trigger");
const shaderOut = op.outObject("shader", null, "shader");

shaderOut.ignoreValueSerialize = true;

op.toWorkPortsNeedToBeLinked(render);
op.toWorkShouldNotBeChild("Ops.Gl.TextureEffects.ImageCompose", CABLES.OP_PORT_TYPE_FUNCTION);

const cgl = op.patch.cgl;

const shader = new CGL.Shader(cgl, "basicmaterial", this);
shader.addAttribute({ "type": "vec3", "name": "vPosition" });
shader.addAttribute({ "type": "vec2", "name": "attrTexCoord" });
shader.addAttribute({ "type": "vec3", "name": "attrVertNormal", "nameFrag": "norm" });
shader.addAttribute({ "type": "float", "name": "attrVertIndex" });

shader.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG", "MODULE_VERTEX_MODELVIEW"]);

shader.setSource(attachments.basicmaterial_vert, attachments.basicmaterial_frag);

shaderOut.setRef(shader);

render.onTriggered = doRender;

// rgba colors
const r = op.inValueSlider("r", Math.random());
const g = op.inValueSlider("g", Math.random());
const b = op.inValueSlider("b", Math.random());
const a = op.inValueSlider("a", 1);
r.setUiAttribs({ "colorPick": true });

// const uniColor=new CGL.Uniform(shader,'4f','color',r,g,b,a);
const colUni = shader.addUniformFrag("4f", "color", r, g, b, a);

shader.uniformColorDiffuse = colUni;

// diffuse outTexture

const diffuseTexture = op.inTexture("texture");
let diffuseTextureUniform = null;
diffuseTexture.onChange = updateDiffuseTexture;

const colorizeTexture = op.inValueBool("colorizeTexture", false);
const vertexColors = op.inValueBool("Vertex Colors", false);

// opacity texture
const textureOpacity = op.inTexture("textureOpacity");
let textureOpacityUniform = null;

const alphaMaskSource = op.inSwitch("Alpha Mask Source", ["Luminance", "R", "G", "B", "A", "1-A", "1-R"], "Luminance");
alphaMaskSource.setUiAttribs({ "greyout": true });
textureOpacity.onChange = updateOpacity;

const texCoordAlpha = op.inValueBool("Opacity TexCoords Transform", false);
const discardTransPxl = op.inValueBool("Discard Transparent Pixels");

// texture coords
const
    diffuseRepeatX = op.inValue("diffuseRepeatX", 1),
    diffuseRepeatY = op.inValue("diffuseRepeatY", 1),
    diffuseOffsetX = op.inValue("Tex Offset X", 0),
    diffuseOffsetY = op.inValue("Tex Offset Y", 0),
    cropRepeat = op.inBool("Crop TexCoords", false);

shader.addUniformFrag("f", "diffuseRepeatX", diffuseRepeatX);
shader.addUniformFrag("f", "diffuseRepeatY", diffuseRepeatY);
shader.addUniformFrag("f", "texOffsetX", diffuseOffsetX);
shader.addUniformFrag("f", "texOffsetY", diffuseOffsetY);

const doBillboard = op.inValueBool("billboard", false);

alphaMaskSource.onChange =
    doBillboard.onChange =
    discardTransPxl.onChange =
    texCoordAlpha.onChange =
    cropRepeat.onChange =
    vertexColors.onChange =
    colorizeTexture.onChange = updateDefines;

op.setPortGroup("Color", [r, g, b, a]);
op.setPortGroup("Color Texture", [diffuseTexture, vertexColors, colorizeTexture]);
op.setPortGroup("Opacity", [textureOpacity, alphaMaskSource, discardTransPxl, texCoordAlpha]);
op.setPortGroup("Texture Transform", [diffuseRepeatX, diffuseRepeatY, diffuseOffsetX, diffuseOffsetY, cropRepeat]);

updateOpacity();
updateDiffuseTexture();

op.preRender = function ()
{
    shader.bind();
    doRender();
    if (!shader) return;
};

function doRender()
{
    op.checkGraphicsApi();
    cgl.pushShader(shader);
    shader.popTextures();

    if (diffuseTextureUniform && diffuseTexture.get()) shader.pushTexture(diffuseTextureUniform, diffuseTexture.get());
    if (textureOpacityUniform && textureOpacity.get()) shader.pushTexture(textureOpacityUniform, textureOpacity.get());

    trigger.trigger();

    cgl.popShader();
}

function updateOpacity()
{
    if (textureOpacity.get())
    {
        if (textureOpacityUniform !== null) return;
        shader.removeUniform("texOpacity");
        shader.define("HAS_TEXTURE_OPACITY");
        if (!textureOpacityUniform)textureOpacityUniform = new CGL.Uniform(shader, "t", "texOpacity");
    }
    else
    {
        shader.removeUniform("texOpacity");
        shader.removeDefine("HAS_TEXTURE_OPACITY");
        textureOpacityUniform = null;
    }

    updateDefines();
}

function updateDiffuseTexture()
{
    if (diffuseTexture.get())
    {
        if (!shader.hasDefine("HAS_TEXTURE_DIFFUSE"))shader.define("HAS_TEXTURE_DIFFUSE");
        if (!diffuseTextureUniform)diffuseTextureUniform = new CGL.Uniform(shader, "t", "texDiffuse");
    }
    else
    {
        shader.removeUniform("texDiffuse");
        shader.removeDefine("HAS_TEXTURE_DIFFUSE");
        diffuseTextureUniform = null;
    }
    updateUi();
}

function updateUi()
{
    const hasTexture = diffuseTexture.isLinked() || textureOpacity.isLinked();
    diffuseRepeatX.setUiAttribs({ "greyout": !hasTexture });
    diffuseRepeatY.setUiAttribs({ "greyout": !hasTexture });
    diffuseOffsetX.setUiAttribs({ "greyout": !hasTexture });
    diffuseOffsetY.setUiAttribs({ "greyout": !hasTexture });
    colorizeTexture.setUiAttribs({ "greyout": !hasTexture });

    alphaMaskSource.setUiAttribs({ "greyout": !textureOpacity.get() });
    texCoordAlpha.setUiAttribs({ "greyout": !textureOpacity.get() });

    let notUsingColor = true;
    notUsingColor = diffuseTexture.get() && !colorizeTexture.get();
    r.setUiAttribs({ "greyout": notUsingColor });
    g.setUiAttribs({ "greyout": notUsingColor });
    b.setUiAttribs({ "greyout": notUsingColor });
}

function updateDefines()
{
    shader.toggleDefine("VERTEX_COLORS", vertexColors.get());
    shader.toggleDefine("CROP_TEXCOORDS", cropRepeat.get());
    shader.toggleDefine("COLORIZE_TEXTURE", colorizeTexture.get());
    shader.toggleDefine("TRANSFORMALPHATEXCOORDS", texCoordAlpha.get());
    shader.toggleDefine("DISCARDTRANS", discardTransPxl.get());
    shader.toggleDefine("BILLBOARD", doBillboard.get());

    shader.toggleDefine("ALPHA_MASK_ALPHA", alphaMaskSource.get() == "A");
    shader.toggleDefine("ALPHA_MASK_IALPHA", alphaMaskSource.get() == "1-A");
    shader.toggleDefine("ALPHA_MASK_IR", alphaMaskSource.get() == "1-R");
    shader.toggleDefine("ALPHA_MASK_LUMI", alphaMaskSource.get() == "Luminance");
    shader.toggleDefine("ALPHA_MASK_R", alphaMaskSource.get() == "R");
    shader.toggleDefine("ALPHA_MASK_G", alphaMaskSource.get() == "G");
    shader.toggleDefine("ALPHA_MASK_B", alphaMaskSource.get() == "B");
    updateUi();
}

}
};

CABLES.OPS["ec55d252-3843-41b1-b731-0482dbd9e72b"]={f:Ops.Gl.Shader.BasicMaterial_v3,objName:"Ops.Gl.Shader.BasicMaterial_v3"};




// **************************************************************
// 
// Ops.Gl.MainLoop_v2
// 
// **************************************************************

Ops.Gl.MainLoop_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    hdpi = op.inFloat("Max Pixel Density (DPR)", 2),
    fpsLimit = op.inValue("FPS Limit", 0),
    reduceFocusFPS = op.inValueBool("Reduce FPS unfocussed", false),
    clear = op.inValueBool("Transparent", false),
    active = op.inValueBool("Active", 1),
    trigger = op.outTrigger("trigger"),
    width = op.outNumber("width"),
    height = op.outNumber("height"),
    outPixel = op.outNumber("Pixel Density");

op.onAnimFrame = render;
hdpi.onChange = updateHdpi;

const cgl = op.patch.cg = op.patch.cgl;
let rframes = 0;
let rframeStart = 0;
let timeOutTest = null;
let addedListener = false;
if (!op.patch.cgl) op.uiAttr({ "error": "No webgl cgl context" });

const identTranslate = vec3.create();
vec3.set(identTranslate, 0, 0, 0);
const identTranslateView = vec3.create();
vec3.set(identTranslateView, 0, 0, -2);

let fsElement = null;
let winhasFocus = true;
let winVisible = true;

window.addEventListener("blur", () => { winhasFocus = false; });
window.addEventListener("focus", () => { winhasFocus = true; });
document.addEventListener("visibilitychange", () => { winVisible = !document.hidden; });

testMultiMainloop();

op.patch.tempData.mainloopOp = this;

function updateHdpi()
{
    setPixelDensity();

    if (CABLES.UI)
    {
        if (hdpi.get() < 1)
            op.patch.cgl.canvas.style.imageRendering = "pixelated";
    }

    op.patch.cgl.updateSize();
    if (CABLES.UI) gui.setLayout();
}

active.onChange = function ()
{
    op.patch.removeOnAnimFrame(op);

    if (active.get())
    {
        op.setUiAttrib({ "extendTitle": "" });
        op.onAnimFrame = render;
        op.patch.addOnAnimFrame(op);
        op.log("adding again!");
    }
    else
    {
        op.setUiAttrib({ "extendTitle": "Inactive" });
    }
};

function getFpsLimit()
{
    if (reduceFocusFPS.get())
    {
        if (!winVisible) return 10;
        if (!winhasFocus) return 30;
    }

    return fpsLimit.get();
}

op.onDelete = function ()
{
    cgl.gl.clearColor(0, 0, 0.0, 0);
    cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);
};

function setPixelDensity()
{
    if (hdpi.get() != 0) op.patch.cgl.pixelDensity = Math.min(hdpi.get(), window.devicePixelRatio);
    else op.patch.cgl.pixelDensity = window.devicePixelRatio;
}

function render(time)
{
    if (!active.get()) return;
    if (cgl.aborted || cgl.canvas.clientWidth === 0 || cgl.canvas.clientHeight === 0) return;

    op.patch.cg = cgl;

    setPixelDensity();

    // if (hdpi.get())op.patch.cgl.pixelDensity = window.devicePixelRatio;

    const startTime = performance.now();

    op.patch.config.fpsLimit = getFpsLimit();

    if (cgl.canvasWidth == -1)
    {
        cgl.setCanvas(op.patch.config.glCanvasId);
        return;
    }

    if (cgl.canvasWidth != width.get() || cgl.canvasHeight != height.get())
    {
        width.set(cgl.canvasWidth / 1);
        height.set(cgl.canvasHeight / 1);
    }

    if (CABLES.now() - rframeStart > 1000)
    {
        CGL.fpsReport = CGL.fpsReport || [];
        if (op.patch.loading.getProgress() >= 1.0 && rframeStart !== 0)CGL.fpsReport.push(rframes);
        rframes = 0;
        rframeStart = CABLES.now();
    }
    CGL.MESH.lastShader = null;
    CGL.MESH.lastMesh = null;

    cgl.renderStart(cgl, identTranslate, identTranslateView);

    if (!clear.get()) cgl.gl.clearColor(0, 0, 0, 1);
    else cgl.gl.clearColor(0, 0, 0, 0);

    cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);

    trigger.trigger();

    if (CGL.MESH.lastMesh)CGL.MESH.lastMesh.unBind();

    if (CGL.Texture.previewTexture)
    {
        if (!CGL.Texture.texturePreviewer) CGL.Texture.texturePreviewer = new CGL.Texture.texturePreview(cgl);
        CGL.Texture.texturePreviewer.render(CGL.Texture.previewTexture);
    }
    cgl.renderEnd(cgl);

    op.patch.cg = null;

    if (!clear.get())
    {
        cgl.gl.clearColor(1, 1, 1, 1);
        cgl.gl.colorMask(false, false, false, true);
        cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT);
        cgl.gl.colorMask(true, true, true, true);
    }

    if (!cgl.tempData.phong)cgl.tempData.phong = {};
    rframes++;

    outPixel.set(op.patch.cgl.pixelDensity);
    op.patch.cgl.profileData.profileMainloopMs = performance.now() - startTime;
}

function testMultiMainloop()
{
    clearTimeout(timeOutTest);
    timeOutTest = setTimeout(
        () =>
        {
            if (op.patch.getOpsByObjName(op.name).length > 1)
            {
                op.setUiError("multimainloop", "there should only be one mainloop op!");
                if (!addedListener)addedListener = op.patch.addEventListener("onOpDelete", testMultiMainloop);
            }
            else op.setUiError("multimainloop", null, 1);
        }, 500);
}

}
};

CABLES.OPS["f1029550-d877-42da-9b1e-63a5163a0350"]={f:Ops.Gl.MainLoop_v2,objName:"Ops.Gl.MainLoop_v2"};




// **************************************************************
// 
// Ops.Html.Elements.InputElement
// 
// **************************************************************

Ops.Html.Elements.InputElement= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inElType = op.inSwitch("Element", ["Input", "Textarea"], "Input"),
    inType = op.inSwitch("Type", ["Text", "Number", "Password", "Date"], "Text"),
    inText = op.inString("Default Value", ""),
    inPlaceHolder = op.inString("Placeholder", "Type here..."),
    inId = op.inString("Id"),
    inClass = op.inString("Class"),
    inStyle = op.inStringEditor("Style", "color:#ccc;\nbackground-color:#222;\nborder:none;\npadding:4px;\n", "inline-css"),

    inAutoComplete = op.inBool("Autocomplete", false),
    inMaxLength = op.inInt("Max Length", 0),

    inInteractive = op.inValueBool("Interactive", false),
    inVisible = op.inValueBool("Visible", true),

    inFocus = op.inTriggerButton("Focus"),
    inBlur = op.inTriggerButton("Blur"),
    inClear = op.inTriggerButton("Clear"),
    inSelect = op.inTriggerButton("Select"),

    outElement = op.outObject("DOM Element", null, "element"),
    outString = op.outString("Value"),
    outHover = op.outBoolNum("Hover");

let listenerElement = null;
let prevDisplay = "block";
let div = null;

const canvas = op.patch.cgl.canvas.parentElement;

createElement();

inSelect.onTriggered = () =>
{
    div.select();
};

inClear.onTriggered = () =>
{
    div.value = "";
};

inFocus.onTriggered = () =>
{
    div.focus();
};

inBlur.onTriggered = () =>
{
    div.blur();
};

inElType.onChange = () =>
{
    createElement();
    updateStyle();
};

inMaxLength.onChange =
    inType.onChange =
    inAutoComplete.onChange =
    inClass.onChange = updateClass;

inPlaceHolder.onChange = inText.onChange = updateText;

inStyle.onChange = updateStyle;
inInteractive.onChange = updateInteractive;
inVisible.onChange = updateVisibility;

updateText();
updateStyle();
warning();
updateInteractive();

op.onDelete = removeElement;

outElement.onLinkChanged = updateStyle;

function createElement()
{
    removeElement();
    div = document.createElement(inElType.get().toLowerCase());

    div.addEventListener("input", () =>
    {
        outString.set(div.value);
    });

    div.dataset.op = op.id;
    div.classList.add("cablesEle");

    if (inId.get()) div.id = inId.get();

    canvas.appendChild(div);
    outElement.set(div);
}

function removeElement()
{
    if (div) removeClasses();
    if (div && div.parentNode) div.parentNode.removeChild(div);
    div = null;
}

function setCSSVisible(visible)
{
    if (!visible)
    {
        div.style.visibility = "hidden";
        prevDisplay = div.style.display || "block";
        div.style.display = "none";
    }
    else
    {
        if (prevDisplay == "none") prevDisplay = "block";
        div.style.visibility = "visible";
        div.style.display = prevDisplay;
    }
}

function updateVisibility()
{
    setCSSVisible(inVisible.get());
}

function updateText()
{
    let str = inText.get();

    div.setAttribute("placeholder", inPlaceHolder.get());
    div.value = str;

    outString.set(str);

    outElement.setRef(div);
}

function updateStyle()
{
    if (!div) return;

    div.setAttribute("style", inStyle.get());
    updateVisibility();
    outElement.set(null);
    outElement.set(div);

    if (!div.parentElement)
    {
        canvas.appendChild(div);
    }

    warning();
}

let oldClassesStr = "";

function removeClasses()
{
    if (!div) return;

    const classes = (inClass.get() || "").split(" ");
    for (let i = 0; i < classes.length; i++)
    {
        if (classes[i]) div.classList.remove(classes[i]);
    }
    oldClassesStr = "";
}

function updateClass()
{
    div.setAttribute("tabindex", 0);
    div.setAttribute("maxlength", inMaxLength.get() || null);
    div.setAttribute("type", inType.get().toLowerCase());

    if (inAutoComplete.get()) div.setAttribute("autocomplete", "on");
    else div.setAttribute("autocomplete", "off");

    const classes = (inClass.get() || "").split(" ");
    const oldClasses = (oldClassesStr || "").split(" ");

    let found = false;

    for (let i = 0; i < oldClasses.length; i++)
    {
        if (
            oldClasses[i] &&
            classes.indexOf(oldClasses[i].trim()) == -1)
        {
            found = true;
            div.classList.remove(oldClasses[i]);
        }
    }

    for (let i = 0; i < classes.length; i++)
    {
        if (classes[i])
        {
            div.classList.add(classes[i].trim());
        }
    }

    oldClassesStr = inClass.get();
    warning();
}

function onMouseEnter(e)
{
    outHover.set(true);
}

function onMouseLeave(e)
{
    outHover.set(false);
}

function updateInteractive()
{
    removeListeners();
    if (inInteractive.get()) addListeners();
}

inId.onChange = function ()
{
    div.id = inId.get();
};

function removeListeners()
{
    if (listenerElement)
    {
        listenerElement.removeEventListener("pointerleave", onMouseLeave);
        listenerElement.removeEventListener("pointerenter", onMouseEnter);
        listenerElement = null;
    }
}

function addListeners()
{
    if (listenerElement)removeListeners();

    listenerElement = div;

    if (listenerElement)
    {
        listenerElement.addEventListener("pointerleave", onMouseLeave);
        listenerElement.addEventListener("pointerenter", onMouseEnter);
    }
}

op.addEventListener("onEnabledChange", function (enabled)
{
    removeElement();
    if (enabled)
    {
        createElement();
        updateStyle();
        updateClass();
        updateText();
        updateInteractive();
    }
});

function warning()
{
    if (inClass.get() && inStyle.get())
    {
        op.setUiError("error", "Element uses external and inline CSS", 1);
    }
    else
    {
        op.setUiError("error", null);
    }
}

}
};

CABLES.OPS["b7e1635c-b5c0-43e1-be03-2f137e6e61ea"]={f:Ops.Html.Elements.InputElement,objName:"Ops.Html.Elements.InputElement"};




// **************************************************************
// 
// Ops.Devices.Keyboard.KeyPressLearn
// 
// **************************************************************

Ops.Devices.Keyboard.KeyPressLearn= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const learnedKeyCode = op.inValueInt("key code");
const canvasOnly = op.inValueBool("canvas only", true);
const modKey = op.inValueSelect("Mod Key", ["none", "alt"], "none");
const inEnable = op.inValueBool("Enabled", true);
const preventDefault = op.inValueBool("Prevent Default");
const learn = op.inTriggerButton("learn");
const onPress = op.outTrigger("on press");
const onRelease = op.outTrigger("on release");
const outPressed = op.outBoolNum("Pressed", false);
const outKey = op.outString("Key");

const cgl = op.patch.cgl;
let learning = false;

modKey.onChange = learnedKeyCode.onChange = updateKeyName;

function onKeyDown(e)
{
    if (learning)
    {
        learnedKeyCode.set(e.keyCode);
        if (CABLES.UI)
        {
            op.refreshParams();
        }
        // op.log("Learned key code: " + learnedKeyCode.get());
        learning = false;
        removeListeners();
        addListener();

        if (CABLES.UI)gui.emitEvent("portValueEdited", op, learnedKeyCode, learnedKeyCode.get());
    }
    else
    {
        if (e.keyCode == learnedKeyCode.get())
        {
            if (modKey.get() == "alt")
            {
                if (e.altKey === true)
                {
                    onPress.trigger();
                    outPressed.set(true);
                    if (preventDefault.get())e.preventDefault();
                }
            }
            else
            {
                onPress.trigger();
                outPressed.set(true);
                if (preventDefault.get())e.preventDefault();
            }
        }
    }
}

function onKeyUp(e)
{
    if (e.keyCode == learnedKeyCode.get())
    {
        let doTrigger = true;
        if (modKey.get() == "alt" && e.altKey != true) doTrigger = false;

        if (doTrigger)
        {
            onRelease.trigger();
            outPressed.set(false);
        }
    }
}

op.onDelete = function ()
{
    cgl.canvas.removeEventListener("keyup", onKeyUp, false);
    cgl.canvas.removeEventListener("keydown", onKeyDown, false);
    document.removeEventListener("keyup", onKeyUp, false);
    document.removeEventListener("keydown", onKeyDown, false);
};

learn.onTriggered = function ()
{
    // op.log("Listening for key...");
    learning = true;
    addDocumentListener();

    setTimeout(function ()
    {
        learning = false;
        removeListeners();
        addListener();
    }, 3000);
};

function addListener()
{
    if (canvasOnly.get()) addCanvasListener();
    else addDocumentListener();
}

function removeListeners()
{
    document.removeEventListener("keydown", onKeyDown, false);
    document.removeEventListener("keyup", onKeyUp, false);
    cgl.canvas.removeEventListener("keydown", onKeyDown, false);
    cgl.canvas.removeEventListener("keyup", onKeyUp, false);
    outPressed.set(false);
}

function addCanvasListener()
{
    if (!CABLES.isNumeric(cgl.canvas.getAttribute("tabindex"))) cgl.canvas.setAttribute("tabindex", 1);

    cgl.canvas.addEventListener("keydown", onKeyDown, false);
    cgl.canvas.addEventListener("keyup", onKeyUp, false);
}

function addDocumentListener()
{
    document.addEventListener("keydown", onKeyDown, false);
    document.addEventListener("keyup", onKeyUp, false);
}

inEnable.onChange = function ()
{
    if (!inEnable.get())
    {
        removeListeners();
    }
    else
    {
        addListener();
    }
};

canvasOnly.onChange = function ()
{
    removeListeners();
    addListener();
};

function updateKeyName()
{
    let keyName = keyCodeToName(learnedKeyCode.get());
    const modKeyName = modKey.get();
    if (modKeyName && modKeyName !== "none")
    {
        keyName = modKeyName.charAt(0).toUpperCase() + modKeyName.slice(1) + "-" + keyName;
    }
    op.setUiAttribs({ "extendTitle": keyName });
    outKey.set(keyName);
}

// todo remove in next version
function keyCodeToName(keyCode)
{
    if (!keyCode && keyCode !== 0) return "Unidentified";
    const keys = {
        "8": "Backspace",
        "9": "Tab",
        "12": "Clear",
        "13": "Enter",
        "16": "Shift",
        "17": "Control",
        "18": "Alt",
        "19": "Pause",
        "20": "CapsLock",
        "27": "Escape",
        "32": "Space",
        "33": "PageUp",
        "34": "PageDown",
        "35": "End",
        "36": "Home",
        "37": "ArrowLeft",
        "38": "ArrowUp",
        "39": "ArrowRight",
        "40": "ArrowDown",
        "45": "Insert",
        "46": "Delete",
        "112": "F1",
        "113": "F2",
        "114": "F3",
        "115": "F4",
        "116": "F5",
        "117": "F6",
        "118": "F7",
        "119": "F8",
        "120": "F9",
        "121": "F10",
        "122": "F11",
        "123": "F12",
        "144": "NumLock",
        "145": "ScrollLock",
        "224": "Meta"
    };
    if (keys[keyCode])
    {
        return keys[keyCode];
    }
    else
    {
        return String.fromCharCode(keyCode);
    }
}

addCanvasListener();

}
};

CABLES.OPS["f069c0db-4051-4eae-989e-6ef7953787fd"]={f:Ops.Devices.Keyboard.KeyPressLearn,objName:"Ops.Devices.Keyboard.KeyPressLearn"};




// **************************************************************
// 
// Ops.Gl.ForceCanvasSize
// 
// **************************************************************

Ops.Gl.ForceCanvasSize= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inTrigger = op.inTrigger("Trigger"),
    inActive = op.inBool("Active", true),
    inWhat = op.inSwitch("Force", ["Resolution", "Aspect Ratio"], "Resolution"),
    inCenter = op.inBool("Center In Parent", true),
    inScaleFit = op.inBool("Scale to fit Parent", true),
    inWidth = op.inInt("Set Width", 300),
    inHeight = op.inInt("Set Height", 200),
    inPresets = op.inDropDown("Aspect Ratio", ["Custom", "21:9", "2:1", "16:9", "16:10", "4:3", "1:1", "9:16", "1:2", "iPhoneXr Vert"], "16:9"),
    inRatio = op.inFloat("Ratio", 0),
    inStretch = op.inDropDown("Fill Parent", ["Auto", "Width", "Height", "Both"], "Auto"),
    next = op.outTrigger("Next"),
    outWidth = op.outNumber("Width"),
    outHeight = op.outNumber("Height"),
    outMarginLeft = op.outNumber("Margin Left"),
    outMarginTop = op.outNumber("Margin Top");

op.setPortGroup("Size", [inWidth, inHeight]);
op.setPortGroup("Proportions", [inRatio, inStretch, inPresets]);

let align = 0;
const ALIGN_NONE = 0;
const ALIGN_WIDTH = 1;
const ALIGN_HEIGHT = 2;
const ALIGN_BOTH = 3;
const ALIGN_AUTO = 4;

inStretch.onChange = updateUi;
inWhat.onChange = updateMethod;
inCenter.onChange =
    inTrigger.onLinkChanged = removeStyles;

inPresets.onChange = updateRatioPreset;

const cgl = op.patch.cgl;

// if (window.getComputedStyle(cgl.canvas).position === "absolute")
// {
//     cgl.canvas.style.position = "initial";
//     op.warn("[cables forceCanvasSize] - canvas was positioned absolute, not compatible with Ops.Gl.ForceCanvasSize");
// }

updateUi();

function updateMethod()
{
    if (inWhat.get() == "Aspect Ratio")
    {
        inRatio.set(100);
        updateRatioPreset();
    }
    updateUi();
}

function updateRatioPreset()
{
    const pr = inPresets.get();
    if (pr == "Custom") return;
    else if (pr == "16:9")inRatio.set(16 / 9);
    else if (pr == "4:3")inRatio.set(4 / 3);
    else if (pr == "16:10")inRatio.set(16 / 10);
    else if (pr == "21:9")inRatio.set(21 / 9);
    else if (pr == "2:1")inRatio.set(2);
    else if (pr == "1:1")inRatio.set(1);
    else if (pr == "9:16")inRatio.set(9 / 16);
    else if (pr == "1:2")inRatio.set(0.5);
    else if (pr == "iPhoneXr Vert")inRatio.set(9 / 19.5);
}

op.on("delete", () =>
{
    removeStyles();
});

inRatio.onChange = () =>
{
    removeStyles();
};

inActive.onChange = function ()
{
    if (!inActive.get())removeStyles();
};

function updateUi()
{
    const forceRes = inWhat.get() == "Resolution";
    inWidth.setUiAttribs({ "greyout": !forceRes });
    inHeight.setUiAttribs({ "greyout": !forceRes });

    inPresets.setUiAttribs({ "greyout": forceRes });
    inStretch.setUiAttribs({ "greyout": forceRes });
    inRatio.setUiAttribs({ "greyout": forceRes });

    align = 0;

    if (!forceRes)
    {
        const strAlign = inStretch.get();
        if (strAlign == "Width")align = ALIGN_WIDTH;
        else if (strAlign == "Height")align = ALIGN_HEIGHT;
        else if (strAlign == "Both")align = ALIGN_BOTH;
        else if (strAlign == "Auto")align = ALIGN_AUTO;
    }
}

function removeStyles()
{
    cgl.canvas.style["margin-top"] = "";
    cgl.canvas.style["margin-left"] = "";
    cgl.canvas.styleMarginLeft = 0;
    cgl.canvas.styleMarginTop = 0;

    outMarginLeft.set(0);
    outMarginTop.set(0);

    const rect = cgl.canvas.parentNode.getBoundingClientRect();

    cgl.setSize(rect.width, rect.height);

    cgl.canvas.style.transform = "scale(1)";

    cgl.canvas.style.position = "absolute";

    cgl.updateSize();
}

inTrigger.onTriggered = function ()
{
    if (!inActive.get()) return next.trigger();

    let w = inWidth.get();
    let h = inHeight.get();

    let clientRect = cgl.canvas.parentNode.getBoundingClientRect();

    // console.log("clientrect",clientRect);

    if (clientRect.height == 0)
    {
        cgl.canvas.parentNode.style.height = "100%";
        clientRect = cgl.canvas.parentNode.getBoundingClientRect();
    }
    if (clientRect.width == 0)
    {
        cgl.canvas.parentNode.style.width = "100%";
        clientRect = cgl.canvas.parentNode.getBoundingClientRect();
    }

    if (align == ALIGN_WIDTH)
    {
        w = clientRect.width;
        h = w * 1 / inRatio.get();
    }
    else if (align == ALIGN_HEIGHT)
    {
        h = clientRect.height;
        w = h * inRatio.get();
    }
    else if (align == ALIGN_AUTO)
    {
        const rect = clientRect;

        h = rect.height;
        w = h * inRatio.get();

        if (w > rect.width)
        {
            w = rect.width;
            h = w * 1 / inRatio.get();
        }
    }
    else if (align == ALIGN_BOTH)
    {
        const rect = clientRect;
        h = rect.height;
        w = h * inRatio.get();

        if (w < rect.width)
        {
            w = rect.width;
            h = w * 1 / inRatio.get();
        }
    }

    w = Math.ceil(w);
    h = Math.ceil(h);

    if (inCenter.get())
    {
        const rect = clientRect;

        const t = (rect.height - h) / 2;
        const l = (rect.width - w) / 2;

        outMarginLeft.set(l);
        outMarginTop.set(t);

        cgl.canvas.style["margin-top"] = t + "px";
        cgl.canvas.style["margin-left"] = l + "px";
        cgl.canvas.styleMarginTop = t;
        cgl.canvas.styleMarginLeft = l;
    }
    else
    {
        cgl.canvas.style["margin-top"] = "0";
        cgl.canvas.style["margin-left"] = "0";
        cgl.canvas.styleMarginTop = 0;
        cgl.canvas.styleMarginLeft = 0;

        outMarginLeft.set(0);
        outMarginTop.set(0);
    }

    if (inScaleFit.get())
    {
        const rect = clientRect;
        const scX = rect.width / inWidth.get();
        const scY = rect.height / inHeight.get();
        cgl.canvas.style.transform = "scale(" + Math.min(scX, scY) + ")";
    }
    else
    {
        cgl.canvas.style.transform = "scale(1)";
    }

    if (cgl.canvasWidth != w || cgl.canvasHeight != h)
    {
        outWidth.set(w);
        outHeight.set(h);
        cgl.setSize(w, h);
    }
    // else
    next.trigger();
};

}
};

CABLES.OPS["a8b3380e-cd4a-4000-9ee9-1c65a11027dd"]={f:Ops.Gl.ForceCanvasSize,objName:"Ops.Gl.ForceCanvasSize"};




// **************************************************************
// 
// Ops.Html.AppendChild_v2
// 
// **************************************************************

Ops.Html.AppendChild_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    parentPort = op.inObject("Parent", null, "element"),
    childPort = op.inObject("Child", null, "element"),
    parentOutPort = op.outObject("Parent Out", null, "element"),
    childOutPort = op.outObject("Child Out", null, "element");

const CANVAS_ELEMENT = op.patch.cgl.canvas.parentElement;
let lastParent = null;
let lastChild = null;

op.toWorkPortsNeedToBeLinked(parentPort);

parentPort.onChange =
    childPort.onChange = update;

function update()
{
    let parent = parentPort.get();
    let child = childPort.get();
    op.setUiError("err", null);

    try
    {
        if (parent !== lastParent)
        {
            if (parent)
            {
                handleParentConnect(parent, child);
            }
            else
            {
                handleParentDisconnect(parent, child);
            }
            lastParent = parent;
        }
        if (child !== lastChild)
        {
            if (child)
            {
                handleChildConnect(parent, child);
            }
            else
            {
                handleChildDisconnect(parent, child);
            }
            lastChild = child;
        }
        parentOutPort.setRef(parent);
        childOutPort.setRef(child);
    }
    catch (e)
    {
        op.setUiError("err", e.message);
    }
}

function handleParentConnect(parent, child)
{
    if (child)
    {
        parent.appendChild(child);
    }
}

function handleParentDisconnect(parent, child)
{
    if (child)
    {
        CANVAS_ELEMENT.appendChild(child); // if there is no parent, append to patch
    }
}

function handleChildConnect(parent, child)
{
    if (parent)
    {
        parent.appendChild(child);
    }
}

function handleChildDisconnect(parent, child)
{
    if (lastChild)
    {
        CANVAS_ELEMENT.appendChild(lastChild);
    }
}

}
};

CABLES.OPS["e15cfbc7-d2fa-4348-8964-66d02aec77aa"]={f:Ops.Html.AppendChild_v2,objName:"Ops.Html.AppendChild_v2"};




// **************************************************************
// 
// Ops.String.RouteString
// 
// **************************************************************

Ops.String.RouteString= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    NUM_PORTS = 10,
    indexPort = op.inInt("Index"),
    valuePort = op.inString("String in", "cables"),
    defaultStringPort = op.inString("Default string", ""),
    onlyOnePort = op.inBool("Set inactive to default", false),

    valuePorts = createOutPorts();

let lastIdx = null;
indexPort.onChange = valuePort.onChange = defaultStringPort.onChange = update;
onlyOnePort.onChange = onlyOnePortChange;

setDefaultValues();
update();

function createOutPorts()
{
    let arr = [];
    for (let i = 0; i < NUM_PORTS; i++)
    {
        let port = op.outString("Index " + i + " string");
        arr.push(port);
    }
    return arr;
}

function setDefaultValues()
{
    let defaultValue = defaultStringPort.get();

    if (!defaultStringPort.get()) defaultValue = "";

    valuePorts.forEach((port) => { return port.set(defaultValue); });
}

function update()
{
    setDefaultValues();
    let index = indexPort.get();
    let value = valuePort.get();
    index = Math.round(index);
    index = clamp(index, 0, NUM_PORTS - 1);

    if (onlyOnePort.get() && lastIdx !== null && lastIdx != index)
        valuePorts[lastIdx].set(defaultStringPort.get());

    valuePorts[index].set(value);
    lastIdx = index;
}

function clamp(value, min, max)
{
    return Math.min(Math.max(value, min), max);
}

function onlyOnePortChange()
{
    if (onlyOnePort.get())
    {
        setDefaultValues();
        update();
    }
}

}
};

CABLES.OPS["9998ff83-335b-40cd-aa0e-4cae558cb551"]={f:Ops.String.RouteString,objName:"Ops.String.RouteString"};




// **************************************************************
// 
// Ops.Trigger.TriggerCounter
// 
// **************************************************************

Ops.Trigger.TriggerCounter= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTriggerButton("exe"),
    reset = op.inTriggerButton("reset"),
    trigger = op.outTrigger("trigger"),
    num = op.outNumber("timesTriggered");

op.toWorkPortsNeedToBeLinked(exe);

op.setUiAttrib({ "extendTitle": 0 });
let n = 0;

reset.onTriggered =
op.onLoaded =
    doReset;

exe.onTriggered = function ()
{
    n++;
    num.set(n);
    op.setUiAttrib({ "extendTitle": n });
    trigger.trigger();
};

function doReset()
{
    n = 0;
    op.setUiAttrib({ "extendTitle": n });
    num.set(n);
}

}
};

CABLES.OPS["e640619f-235c-4543-bbf8-b358e0283180"]={f:Ops.Trigger.TriggerCounter,objName:"Ops.Trigger.TriggerCounter"};




// **************************************************************
// 
// Ops.Gl.ClearColor
// 
// **************************************************************

Ops.Gl.ClearColor= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    render = op.inTrigger("render"),
    trigger = op.outTrigger("trigger"),
    r = op.inFloatSlider("r", 0.1),
    g = op.inFloatSlider("g", 0.1),
    b = op.inFloatSlider("b", 0.1),
    a = op.inFloatSlider("a", 1);

r.setUiAttribs({ "colorPick": true });

const cgl = op.patch.cgl;

render.onTriggered = function ()
{
    cgl.gl.clearColor(r.get(), g.get(), b.get(), a.get());
    cgl.gl.clear(cgl.gl.COLOR_BUFFER_BIT | cgl.gl.DEPTH_BUFFER_BIT);
    trigger.trigger();
};

}
};

CABLES.OPS["19b441eb-9f63-4f35-ba08-b87841517c4d"]={f:Ops.Gl.ClearColor,objName:"Ops.Gl.ClearColor"};




// **************************************************************
// 
// Ops.Gl.Shader.PointMaterial_v4
// 
// **************************************************************

Ops.Gl.Shader.PointMaterial_v4= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"pointmat_frag":"\n{{MODULES_HEAD}}\n\nUNI vec4 color;\nUNI float atlasNumX;\n\n// IN vec2 pointCoord;\nIN float ps;\n\n#ifdef USE_ATLAS\nIN float randAtlas;\n#endif\n\n#ifdef HAS_TEXTURE_DIFFUSE\n    UNI sampler2D diffTex;\n#endif\n#ifdef HAS_TEXTURE_MASK\n    UNI sampler2D texMask;\n#endif\n#ifdef HAS_TEXTURE_COLORIZE\n    IN vec4 colorize;\n#endif\n#ifdef HAS_TEXTURE_OPACITY\n    IN float opacity;\n#endif\n#ifdef HAS_TEXTURE_ATLASLOOKUP\n    UNI sampler2D texAtlasLookup;\n#endif\n\n#ifdef VERTEX_COLORS\n    IN vec4 vertexColor;\n#endif\n\n\nvoid main()\n{\n    #ifdef FLIP_TEX\n        vec2 pointCoord=vec2(gl_PointCoord.x,(1.0-gl_PointCoord.y));\n    #endif\n    #ifndef FLIP_TEX\n        vec2 pointCoord=gl_PointCoord;\n    #endif\n\n    #ifdef RAND_ATLAS\n        #ifndef HAS_TEXTURE_ATLASLOOKUP\n            pointCoord.x=pointCoord.x/atlasNumX+randAtlas*(1.0/atlasNumX);\n        #endif\n    #endif\n\n\n\n        #ifdef HAS_TEXTURE_ATLASLOOKUP\n\n            float atlasIdx=texture(texAtlasLookup,pointCoord).r;\n\n            #ifdef ATLAS_XFADE\n                vec2 pointCoord2=vec2(pointCoord);\n                pointCoord2.x=pointCoord.x/atlasNumX+ceil(atlasIdx)*(1.0/atlasNumX);\n            #endif\n\n            pointCoord.x=pointCoord.x/atlasNumX+floor(atlasIdx)*(1.0/atlasNumX);\n\n        #endif\n\n    // #endif\n\n    {{MODULE_BEGIN_FRAG}}\n\n    if(ps<1.0)discard;\n\n    vec4 col=color;\n\n    #ifdef HAS_TEXTURE_MASK\n        float mask;\n        #ifdef TEXTURE_MASK_R\n            mask=texture(texMask,pointCoord).r;\n        #endif\n        #ifdef TEXTURE_MASK_A\n            mask=texture(texMask,pointCoord).a;\n        #endif\n        #ifdef TEXTURE_MASK_LUMI\n        \tvec3 lumcoeff = vec3(0.299,0.587,0.114);\n        \tmask = dot(texture(texMask,pointCoord).rgb, lumcoeff);\n        #endif\n\n    #endif\n\n    #ifdef HAS_TEXTURE_DIFFUSE\n\n\n        col=texture(diffTex,pointCoord);\n\n        #ifdef HAS_TEXTURE_ATLASLOOKUP\n        #ifdef ATLAS_XFADE\n            vec4 col2=texture(diffTex,pointCoord2);\n            col=mix(col,col2,fract(atlasIdx));\n        #endif\n        #endif\n\n        #ifdef COLORIZE_TEXTURE\n          col.rgb*=color.rgb;\n        #endif\n\n\n    #endif\n    col.a*=color.a;\n\n\n    #ifdef MAKE_ROUND\n\n        #ifndef MAKE_ROUNDAA\n            if ((gl_PointCoord.x-0.5)*(gl_PointCoord.x-0.5) + (gl_PointCoord.y-0.5)*(gl_PointCoord.y-0.5) > 0.25) discard; //col.a=0.0;\n        #endif\n\n        #ifdef MAKE_ROUNDAA\n            float circ=(gl_PointCoord.x-0.5)*(gl_PointCoord.x-0.5) + (gl_PointCoord.y-0.5)*(gl_PointCoord.y-0.5);\n\n            float a=smoothstep(0.25,0.25-fwidth(gl_PointCoord.x),circ);\n            if(a==0.0)discard;\n            col.a=a*color.a;\n        #endif\n    #endif\n\n    #ifdef HAS_TEXTURE_COLORIZE\n        col*=colorize;\n    #endif\n\n    #ifdef TEXTURE_COLORIZE_MUL\n        col*=color;\n    #endif\n\n    #ifdef HAS_TEXTURE_MASK\n        col.a*=mask;\n    #endif\n\n    #ifdef HAS_TEXTURE_OPACITY\n        col.a*=opacity;\n    #endif\n\n    #ifdef VERTEX_COLORS\n        col.rgb = vertexColor.rgb;\n        col.a *= vertexColor.a;\n    #endif\n\n    if (col.a <= 0.0) discard;\n\n    #ifdef HAS_TEXTURE_COLORIZE\n        col*=colorize;\n    #endif\n\n    {{MODULE_COLOR}}\n\n    outColor = col;\n}\n","pointmat_vert":"{{MODULES_HEAD}}\nIN vec3 vPosition;\nIN vec2 attrTexCoord;\nIN vec3 attrVertNormal;\nIN vec3 attrTangent;\nIN vec3 attrBiTangent;\nIN float attrPointSize;\n\n#ifdef VERTEX_COLORS\n    IN vec4 attrVertColor;\n    OUT vec4 vertexColor;\n#endif\n\nOUT vec3 norm;\nOUT float ps;\n\nOUT vec2 texCoord;\n\n\n#ifdef HAS_TEXTURES\n#endif\n\n#ifdef HAS_TEXTURE_COLORIZE\n   UNI sampler2D texColorize;\n   OUT vec4 colorize;\n#endif\n#ifdef HAS_TEXTURE_OPACITY\n    UNI sampler2D texOpacity;\n    OUT float opacity;\n#endif\n\n#ifdef HAS_TEXTURE_POINTSIZE\n   UNI sampler2D texPointSize;\n   UNI float texPointSizeMul;\n#endif\n\nUNI mat4 projMatrix;\nUNI mat4 modelMatrix;\nUNI mat4 viewMatrix;\n\nUNI float pointSize;\nUNI vec3 camPos;\n\nUNI float canvasWidth;\nUNI float canvasHeight;\nUNI float camDistMul;\nUNI float randomSize;\n\nIN float attrVertIndex;\n\nUNI float atlasNumX;\n\n#ifdef RAND_ATLAS\n    OUT float randAtlas;\n#endif\n\nfloat rand(float n){return fract(sin(n) * 5711.5711123);}\n\n#define POINTMATERIAL\n\nvoid main()\n{\n    norm=attrVertNormal;\n    #ifdef PIXELSIZE\n        float psMul=1.0;\n    #endif\n\n    #ifndef PIXELSIZE\n        float psMul=sqrt(canvasWidth/canvasHeight)+0.00000000001;\n    #endif\n\n    #ifdef RAND_ATLAS\n        randAtlas=floor(atlasNumX*rand(attrVertIndex));\n    #endif\n\n    // float sizeMultiply=1.0;\n\n    vec3 tangent=attrTangent;\n    vec3 bitangent=attrBiTangent;\n\n\n    #ifdef VERTEX_COLORS\n        vertexColor=attrVertColor;\n    #endif\n\n    // #ifdef HAS_TEXTURES\n        texCoord=attrTexCoord;\n    // #endif\n\n    #ifdef HAS_TEXTURE_OPACITY\n        // opacity=texture(texOpacity,vec2(rand(attrVertIndex+texCoord.x*texCoord.y+texCoord.y+texCoord.x),rand(texCoord.y*texCoord.x-texCoord.x-texCoord.y-attrVertIndex))).r;\n        opacity=texture(texOpacity,texCoord).r;\n    #endif\n\n\n    #ifdef HAS_TEXTURE_COLORIZE\n        #ifdef RANDOM_COLORIZE\n            colorize=texture(texColorize,vec2(rand(attrVertIndex+texCoord.x*texCoord.y+texCoord.y+texCoord.x),rand(texCoord.y*texCoord.x-texCoord.x-texCoord.y-attrVertIndex)));\n        #endif\n        #ifndef RANDOM_COLORIZE\n            colorize=texture(texColorize,texCoord);\n        #endif\n    #endif\n\n\n\n\n\n    mat4 mMatrix=modelMatrix;\n    vec4 pos = vec4( vPosition, 1. );\n\n    gl_PointSize=0.0;\n\n    {{MODULE_VERTEX_POSITION}}\n\n    vec4 model=mMatrix * pos;\n\n    psMul+=rand(texCoord.x*texCoord.y+texCoord.y*3.0+texCoord.x*2.0+attrVertIndex)*randomSize;\n    // psMul*=sizeMultiply;\n\n    float addPointSize=0.0;\n    #ifdef HAS_TEXTURE_POINTSIZE\n\n        #ifdef POINTSIZE_CHAN_R\n            addPointSize=texture(texPointSize,texCoord).r;\n        #endif\n        #ifdef POINTSIZE_CHAN_G\n            addPointSize=texture(texPointSize,texCoord).g;\n        #endif\n        #ifdef POINTSIZE_CHAN_B\n            addPointSize=texture(texPointSize,texCoord).b;\n        #endif\n\n\n        #ifdef DOTSIZEREMAPABS\n            // addPointSize=(( (texture(texPointSize,texCoord).r) * texPointSizeMul)-0.5)*2.0;\n\n            addPointSize=1.0-(distance(addPointSize,0.5)*2.0);\n            // addPointSize=abs(1.0-(distance(addPointSize,0.5)*2.0));\n            addPointSize=addPointSize*addPointSize*addPointSize*2.0;\n\n            // addPointSize=(( (texture(texPointSize,texCoord).r) * texPointSizeMul)-0.5)*2.0;\n        #endif\n\n        addPointSize*=texPointSizeMul;\n\n    #endif\n\n    ps=0.0;\n    #ifndef SCALE_BY_DISTANCE\n        ps = (pointSize+addPointSize+attrPointSize) * psMul;\n    #endif\n    #ifdef SCALE_BY_DISTANCE\n        float cameraDist = distance(model.xyz, camPos);\n        ps = ( (pointSize+addPointSize+attrPointSize) / cameraDist) * psMul;\n    #endif\n\n    gl_PointSize += ps;\n\n\n    gl_Position = projMatrix * viewMatrix * model;\n}\n",};
const cgl = op.patch.cgl;

const
    render = op.inTrigger("render"),
    pointSize = op.inValueFloat("PointSize", 3),
    inPixelSize = op.inBool("Size in Pixels", false),
    randomSize = op.inValue("Random Size", 0),
    makeRound = op.inValueBool("Round", true),
    makeRoundAA = op.inValueBool("Round Antialias", false),
    doScale = op.inValueBool("Scale by Distance", false),
    r = op.inValueSlider("r", Math.random()),
    g = op.inValueSlider("g", Math.random()),
    b = op.inValueSlider("b", Math.random()),
    a = op.inValueSlider("a", 1),
    vertCols = op.inBool("Vertex Colors", false),
    texture = op.inTexture("texture"),
    textureMulColor = op.inBool("Colorize Texture"),
    textureMask = op.inTexture("Texture Mask"),
    texMaskChan = op.inSwitch("Mask Channel", ["R", "A", "Luminance"], "R"),
    textureColorize = op.inTexture("Texture Colorize"),
    colorizeRandom = op.inValueBool("Colorize Randomize", true),
    textureOpacity = op.inTexture("Texture Opacity"),
    texturePointSize = op.inTexture("Texture Point Size"),
    texturePointSizeChannel = op.inSwitch("Point Size Channel", ["R", "G", "B"], "R"),
    texturePointSizeMul = op.inFloat("Texture Point Size Mul", 1),
    texturePointSizeMap = op.inSwitch("Map Size 0", ["Black", "Grey"], "Black"),
    flipTex = op.inValueBool("Flip Texture", false),

    inRandAtlas = op.inBool("Random Atlas"),
    inRandAtlasX = op.inFloat("Atlas Repeat X", 4),

    trigger = op.outTrigger("trigger"),
    shaderOut = op.outObject("shader", null, "shader");

op.setPortGroup("Texture", [texture, textureMulColor, textureMask, texMaskChan, textureColorize, textureOpacity, colorizeRandom]);
op.setPortGroup("Color", [r, g, b, a, vertCols]);
op.setPortGroup("Size", [pointSize, randomSize, makeRound, makeRoundAA, doScale, inPixelSize, texturePointSize, texturePointSizeMul, texturePointSizeChannel, texturePointSizeMap]);
r.setUiAttribs({ "colorPick": true });

const shader = new CGL.Shader(cgl, "PointMaterial");
shader.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG"]);
shader.define("MAKE_ROUND");

op.toWorkPortsNeedToBeLinked(render);

const
    uniPointSize = new CGL.Uniform(shader, "f", "pointSize", pointSize),
    texturePointSizeMulUniform = new CGL.Uniform(shader, "f", "texPointSizeMul", texturePointSizeMul),
    uniRandomSize = new CGL.Uniform(shader, "f", "randomSize", randomSize),
    uniColor = new CGL.Uniform(shader, "4f", "color", r, g, b, a),
    uniRandAtlasX = new CGL.Uniform(shader, "f", "atlasNumX", inRandAtlasX),

    uniWidth = new CGL.Uniform(shader, "f", "canvasWidth", cgl.canvasWidth),
    uniHeight = new CGL.Uniform(shader, "f", "canvasHeight", cgl.canvasHeight),
    textureUniform = new CGL.Uniform(shader, "t", "diffTex"),
    textureColorizeUniform = new CGL.Uniform(shader, "t", "texColorize"),
    textureOpacityUniform = new CGL.Uniform(shader, "t", "texOpacity"),
    textureColoPointSize = new CGL.Uniform(shader, "t", "texPointSize"),
    texturePointSizeUniform = new CGL.Uniform(shader, "t", "texPointSize"),
    textureMaskUniform = new CGL.Uniform(shader, "t", "texMask");

shader.setSource(attachments.pointmat_vert, attachments.pointmat_frag);
shader.glPrimitive = cgl.gl.POINTS;
shaderOut.set(shader);
shaderOut.ignoreValueSerialize = true;

render.onTriggered = doRender;
doScale.onChange =
inRandAtlas.onChange =
    makeRound.onChange =
    makeRoundAA.onChange =
    texture.onChange =
    textureColorize.onChange =
    textureMask.onChange =
    colorizeRandom.onChange =
    flipTex.onChange =
    texMaskChan.onChange =
    inPixelSize.onChange =
    textureOpacity.onChange =
    texturePointSize.onChange =
    texturePointSizeMap.onChange =
    texturePointSizeChannel.onChange =
    textureMulColor.onChange =
    vertCols.onChange = updateDefines;

updateUi();

op.preRender = function ()
{
    if (shader)shader.bind();
    doRender();
};

function doRender()
{
    uniWidth.setValue(cgl.canvasWidth);
    uniHeight.setValue(cgl.canvasHeight);

    cgl.pushShader(shader);
    shader.popTextures();
    if (texture.get() && !texture.get().deleted) shader.pushTexture(textureUniform, texture.get());
    if (textureMask.get()) shader.pushTexture(textureMaskUniform, textureMask.get());
    if (textureColorize.get()) shader.pushTexture(textureColorizeUniform, textureColorize.get());
    if (textureOpacity.get()) shader.pushTexture(textureOpacityUniform, textureOpacity.get());
    if (texturePointSize.get()) shader.pushTexture(texturePointSizeUniform, texturePointSize.get());

    trigger.trigger();

    cgl.popShader();
}

function updateUi()
{
    inRandAtlasX.setUiAttribs({ "greyout": !inRandAtlas.get() });
    texMaskChan.setUiAttribs({ "greyout": !textureMask.isLinked() });

    texturePointSizeChannel.setUiAttribs({ "greyout": !texturePointSize.isLinked() });
    texturePointSizeMul.setUiAttribs({ "greyout": !texturePointSize.isLinked() });
    texturePointSizeMap.setUiAttribs({ "greyout": !texturePointSize.isLinked() });
}

function updateDefines()
{
    shader.toggleDefine("ATLAS_NUMX", inRandAtlas.get());

    shader.toggleDefine("SCALE_BY_DISTANCE", doScale.get());
    shader.toggleDefine("MAKE_ROUND", makeRound.get());
    shader.toggleDefine("MAKE_ROUNDAA", makeRoundAA.get());

    shader.toggleDefine("VERTEX_COLORS", vertCols.get());
    shader.toggleDefine("RANDOM_COLORIZE", colorizeRandom.get());
    shader.toggleDefine("HAS_TEXTURE_DIFFUSE", texture.get());
    shader.toggleDefine("HAS_TEXTURE_MASK", textureMask.get());
    shader.toggleDefine("HAS_TEXTURE_COLORIZE", textureColorize.get());
    shader.toggleDefine("HAS_TEXTURE_OPACITY", textureOpacity.get());
    shader.toggleDefine("HAS_TEXTURE_POINTSIZE", texturePointSize.get());

    shader.toggleDefine("TEXTURE_COLORIZE_MUL", textureMulColor.get());

    shader.toggleDefine("FLIP_TEX", flipTex.get());
    shader.toggleDefine("TEXTURE_MASK_R", texMaskChan.get() == "R");
    shader.toggleDefine("TEXTURE_MASK_A", texMaskChan.get() == "A");
    shader.toggleDefine("TEXTURE_MASK_LUMI", texMaskChan.get() == "Luminance");
    shader.toggleDefine("PIXELSIZE", inPixelSize.get());

    shader.toggleDefine("POINTSIZE_CHAN_R", texturePointSizeChannel.get() == "R");
    shader.toggleDefine("POINTSIZE_CHAN_G", texturePointSizeChannel.get() == "G");
    shader.toggleDefine("POINTSIZE_CHAN_B", texturePointSizeChannel.get() == "B");

    shader.toggleDefine("DOTSIZEREMAPABS", texturePointSizeMap.get() == "Grey");
    updateUi();
}

}
};

CABLES.OPS["a7cb5d1c-cd4a-4c28-bb13-7bb9bda187ed"]={f:Ops.Gl.Shader.PointMaterial_v4,objName:"Ops.Gl.Shader.PointMaterial_v4"};




// **************************************************************
// 
// Ops.Gl.Textures.TextTexture_v5
// 
// **************************************************************

Ops.Gl.Textures.TextTexture_v5= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"text_frag":"UNI sampler2D tex;\nUNI float a;\nUNI vec3 color;\nIN vec2 texCoord;\n\nvoid main()\n{\n    outColor=texture(tex,vec2(texCoord.x,(1.0-texCoord.y)));\n}\n","text_vert":"{{MODULES_HEAD}}\n\nIN vec3 vPosition;\nUNI mat4 projMatrix;\nUNI mat4 mvMatrix;\nUNI float aspect;\nOUT vec2 texCoord;\nIN vec2 attrTexCoord;\n\nvoid main()\n{\n   vec4 pos=vec4(vPosition,  1.0);\n\n    pos.x*=aspect;\n\n   texCoord=vec2(attrTexCoord.x,1.0-attrTexCoord.y);;\n\n   gl_Position = projMatrix * mvMatrix * pos;\n}\n",};
const
    render = op.inTriggerButton("Render"),

    drawMesh = op.inValueBool("Draw Mesh", true),
    meshScale = op.inValueFloat("Scale Mesh", 0.5),

    texSizeMeth = op.inSwitch("Size", ["Auto", "Manual"], "Auto"),

    texSizeManWidth = op.inInt("Width", 512),
    texSizeManHeight = op.inInt("Height", 512),
    texSizeAutoHeight = op.inBool("Auto Height", true),

    text = op.inString("text", "cables"),

    texSizeManBreak = op.inBool("Auto Line Breaks", true),

    font = op.inString("font", "Arial"),
    weight = op.inString("weight", "normal"),
    inFontSize = op.inValueFloat("fontSize", 300),
    align = op.inSwitch("align", ["left", "center", "right"], "center"),
    valign = op.inSwitch("Vertical align", ["Top", "Middle", "Bottom"], "Top"),

    inLetterspacing = op.inFloat("Letter Spacing", 0),
    inLineHeight = op.inFloat("Line Height Add", 0),

    inPaddingY = op.inInt("Padding Y Top", 3),
    inPaddingYBot = op.inInt("Padding Y Bottom", 3),
    inPaddingX = op.inInt("Padding X", 0),

    tfilter = op.inSwitch("filter", ["nearest", "linear", "mipmap"], "linear"),
    wrap = op.inValueSelect("Wrap", ["repeat", "mirrored repeat", "clamp to edge"], "clamp to edge"),
    aniso = op.inSwitch("Anisotropic", [0, 1, 2, 4, 8, 16], 0),
    cachetexture = op.inValueBool("Reuse Texture", true),
    drawDebug = op.inBool("Show Debug", false),

    reloadOnFont = op.inBool("Redraw On Font Load", true),

    r = op.inValueSlider("r", 1),
    g = op.inValueSlider("g", 1),
    b = op.inValueSlider("b", 1),
    inOpacity = op.inFloatSlider("Opacity", 1),

    bgR = op.inValueSlider("background R", 0),
    bgG = op.inValueSlider("background G", 0),
    bgB = op.inValueSlider("background B", 0),
    bgA = op.inValueSlider("background A", 1),

    next = op.outTrigger("Next"),
    outRatio = op.outNumber("Ratio"),
    textureOut = op.outTexture("texture"),
    outAspect = op.outNumber("Aspect", 1),
    outLines = op.outNumber("Num Lines");

r.setUiAttribs({ "colorPick": true });
bgR.setUiAttribs({ "colorPick": true });

op.toWorkPortsNeedToBeLinked(render);

op.setPortGroup("Text Color", [r, g, b, inOpacity]);
op.setPortGroup("Background", [bgR, bgG, bgB, bgA]);
op.setPortGroup("Font", [font, weight, inFontSize, align, valign, inLetterspacing, inLineHeight]);
op.setPortGroup("Texture", [wrap, tfilter, aniso, cachetexture, drawDebug]);

op.setPortGroup("Rendering", [drawMesh, meshScale]);

render.onLinkChanged = () =>
{
    if (!render.isLinked())textureOut.setRef(CGL.Texture.getEmptyTexture(cgl));
    else textureOut.setRef(tex);
};

valign.onChange =
    texSizeManBreak.onChange =
    texSizeAutoHeight.onChange =
    inLineHeight.onChange =
    texSizeMeth.onChange =
    texSizeManWidth.onChange =
    texSizeManHeight.onChange =
    align.onChange =
    inLetterspacing.onChange =
    inPaddingY.onChange =
    inPaddingYBot.onChange =
    inPaddingX.onChange =
    text.onChange =
    inFontSize.onChange =
    weight.onChange =
    aniso.onChange =
    font.onChange =
    drawDebug.onChange =
    cachetexture.onChange = function ()
    {
        needsRefresh = true;
        updateUi();
    };

textureOut.ignoreValueSerialize = true;

const cgl = op.patch.cgl;
let tex = new CGL.Texture(cgl);
let autoHeight = 2;
let autoWidth = 2;

const fontImage = document.createElement("canvas");
fontImage.id = "texturetext_" + CABLES.generateUUID();
fontImage.style.display = "none";
document.body.appendChild(fontImage);
fontImage.style.letterSpacing = "0px";

let ctx = fontImage.getContext("2d");
let needsRefresh = true;
const mesh = CGL.MESHES.getSimpleRect(cgl, "texttexture rect");
const vScale = vec3.create();
const shader = new CGL.Shader(cgl, "texttexture");
shader.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG"]);
shader.setSource(attachments.text_vert, attachments.text_frag);
const texUni = new CGL.Uniform(shader, "t", "tex");
const aspectUni = new CGL.Uniform(shader, "f", "aspect", 0);
const opacityUni = new CGL.Uniform(shader, "f", "a", inOpacity);
const uniColor = new CGL.Uniform(shader, "3f", "color", r, g, b);

if (op.patch.isEditorMode()) CABLES.UI.SIMPLEWIREFRAMERECT = CABLES.UI.SIMPLEWIREFRAMERECT || new CGL.WireframeRect(cgl);

render.onTriggered = doRender;
drawMesh.onChange = updateUi;
updateUi();

op.on("delete", () =>
{
    ctx = null;
    fontImage.remove();
});

aniso.onChange =
    tfilter.onChange =
    wrap.onChange = () =>
    {
        if (tex)tex.delete();
        tex = null;
        needsRefresh = true;
    };

bgR.onChange = bgG.onChange = bgB.onChange = bgA.onChange = r.onChange = g.onChange = b.onChange = inOpacity.onChange = () =>
{
    if (!drawMesh.get() || textureOut.isLinked()) needsRefresh = true;
};

textureOut.onLinkChanged = () =>
{
    if (textureOut.isLinked()) needsRefresh = true;
};

op.patch.on("fontLoaded", (fontName) =>
{
    if (fontName == font.get()) needsRefresh = true;
});

document.fonts.ready.then(() =>
{
    if (reloadOnFont.get())
    {
        needsRefresh = true;
        console.log("reload on font...");
    }
});

document.fonts.onloadingdone = function (fontFaceSetEvent)
{
    if (reloadOnFont.get())
    {
        needsRefresh = true;
        console.log("reload on font...");
    }
};

function getWidth()
{
    return autoWidth;
}

function getHeight()
{
    return autoHeight;
}

function doRender()
{
    if (needsRefresh)
    {
        reSize();
        refresh();
    }

    if (drawMesh.get())
    {
        vScale[0] = vScale[1] = vScale[2] = meshScale.get();
        cgl.pushBlendMode(CGL.BLEND_NORMAL, false);
        cgl.pushModelMatrix();
        mat4.scale(cgl.mMatrix, cgl.mMatrix, vScale);

        shader.popTextures();
        shader.pushTexture(texUni, tex.tex);
        aspectUni.set(outAspect.get());

        if (cgl.shouldDrawHelpers(op))
            CABLES.UI.SIMPLEWIREFRAMERECT.render(outAspect.get(), 1, 1);

        cgl.pushShader(shader);
        mesh.render(shader);

        cgl.popShader();
        cgl.popBlendMode();
        cgl.popModelMatrix();
    }

    next.trigger();
}

function reSize()
{
    if (tex) tex.setSize(getWidth(), getHeight());

    ctx.canvas.width = fontImage.width = getWidth();
    ctx.canvas.height = fontImage.height = getHeight();

    outAspect.set(fontImage.width / fontImage.height);

    needsRefresh = true;
}

function autoLineBreaks(strings)
{
    let newString = "";

    for (let i = 0; i < strings.length; i++)
    {
        if (!strings[i])
        {
            newString += "\n";
            continue;
        }
        let sumWidth = 0;
        const words = strings[i].split(" ");

        for (let j = 0; j < words.length; j++)
        {
            if (!words[j]) continue;
            sumWidth += ctx.measureText(words[j] + " ").width;

            if (sumWidth > texSizeManWidth.get())
            {
                // found = true;
                newString += "\n" + words[j] + " ";
                sumWidth = ctx.measureText(words[j] + " ").width;
            }
            else
            {
                newString += words[j] + " ";
            }
        }
        newString += "\n";
    }
    let txt = newString;
    strings = txt.split("\n");
    if (strings[strings.length - 1] == "")strings.pop();
    // console.log(strings);
    return strings;
}

function refresh()
{
    cgl.checkFrameStarted("texttrexture refresh");
    const rgbStringClear = "rgba(" + Math.floor(bgR.get() * 255) + "," + Math.floor(bgG.get() * 255) + "," + Math.floor(bgB.get() * 255) + "," + bgA.get() + ")";
    ctx.fillStyle = rgbStringClear;
    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);

    const rgbString = "rgba(" + Math.floor(r.get() * 255) + ","
        + Math.floor(g.get() * 255) + "," + Math.floor(b.get() * 255) + ","
        + inOpacity.get() + ")";

    ctx.fillStyle = rgbString;
    let fontSize = parseFloat(inFontSize.get());
    let fontname = font.get();
    if (fontname.indexOf(" ") > -1) fontname = "\"" + fontname + "\"";
    ctx.font = weight.get() + " " + fontSize + "px " + fontname + "";

    ctx.textBaseline = "top";
    ctx.textAlign = align.get();
    ctx.letterSpacing = inLetterspacing.get() + "px";

    let txt = (text.get() + "").replace(/<br\/>/g, "\n");
    let strings = txt.split("\n");

    needsRefresh = false;

    let oneLineHeight = 0;
    let paddingY = Math.max(0, inPaddingY.get());
    let paddingYBot = inPaddingYBot.get();
    let paddingX = Math.max(0, inPaddingX.get());

    autoWidth = 0;
    autoHeight = 0;

    if (texSizeManBreak.get() && texSizeMeth.get() == "Manual")
    {
        if (texSizeManWidth.get() > 128)
        {
            strings = autoLineBreaks(strings);
        }
    }

    for (let i = 0; i < strings.length; i++)
    {
        const measure = ctx.measureText(strings[i]);
        oneLineHeight = Math.max(oneLineHeight, Math.ceil(Math.abs(measure.actualBoundingBoxAscent) + measure.actualBoundingBoxDescent)) + inLineHeight.get();
    }

    for (let i = 0; i < strings.length; i++)
    {
        const measure = ctx.measureText(strings[i]);
        autoWidth = Math.max(autoWidth, measure.width);
        autoHeight += oneLineHeight;
    }

    autoWidth += paddingX * 2;
    autoHeight += paddingY + paddingYBot;

    let calcHeight = autoHeight;

    if (texSizeMeth.get() == "Manual")
    {
        autoWidth = texSizeManWidth.get() + paddingX * 2;

        if (!texSizeAutoHeight.get())
        {
            autoHeight = texSizeManHeight.get();
            paddingY = 0;
        }
    }

    autoHeight = Math.ceil(autoHeight);
    autoWidth = Math.ceil(autoWidth);

    if (autoWidth > cgl.maxTexSize || autoHeight > cgl.maxTexSize) op.setUiError("textoobig", "Texture too big!");
    else op.setUiError("textoobig", null);

    autoHeight = Math.min(cgl.maxTexSize, autoHeight);
    autoWidth = Math.min(cgl.maxTexSize, autoWidth);

    if (ctx.canvas.width != autoWidth || ctx.canvas.height != autoHeight) reSize();

    let posy = paddingY;
    if (valign.get() == "Middle")posy = (autoHeight - calcHeight) / 2;
    else if (valign.get() == "Bottom")posy = (autoHeight - calcHeight);

    const dbg = drawDebug.get();

    for (let i = 0; i < strings.length; i++)
    {
        let posx = 0 + paddingX;

        if (align.get() == "center") posx = ctx.canvas.width / 2;
        if (align.get() == "right") posx = ctx.canvas.width;

        if (texSizeMeth.get() == "Manual")posx += inLetterspacing.get();

        ctx.fillText(strings[i], posx, posy);

        if (dbg)
        {
            ctx.lineWidth = 1;
            ctx.strokeStyle = "#FF0000";
            ctx.beginPath();
            ctx.moveTo(0, posy);
            ctx.lineTo(21000, posy);
            ctx.stroke();
        }

        posy += oneLineHeight;
    }

    ctx.restore();

    let cgl_wrap = CGL.Texture.WRAP_REPEAT;
    if (wrap.get() == "mirrored repeat") cgl_wrap = CGL.Texture.WRAP_MIRRORED_REPEAT;
    else if (wrap.get() == "clamp to edge") cgl_wrap = CGL.Texture.WRAP_CLAMP_TO_EDGE;

    let f = CGL.Texture.FILTER_LINEAR;
    if (tfilter.get() == "nearest") f = CGL.Texture.FILTER_NEAREST;
    else if (tfilter.get() == "mipmap") f = CGL.Texture.FILTER_MIPMAP;

    if (!cachetexture.get() || !tex || !textureOut.get() || tex.width != fontImage.width || tex.height != fontImage.height || tex.anisotropic != parseFloat(aniso.get()))
    {
        if (tex)tex.delete();
        tex = new CGL.Texture.createFromImage(cgl, fontImage, { "filter": f, "anisotropic": parseFloat(aniso.get()), "wrap": cgl_wrap });
    }

    tex.flip = false;
    tex.initTexture(fontImage, f);

    outRatio.set(ctx.canvas.height / ctx.canvas.width);
    outLines.set(strings.length);
    textureOut.setRef(tex);
    tex.unpackAlpha = false;
}

function updateUi()
{
    texSizeManWidth.setUiAttribs({ "greyout": texSizeMeth.get() != "Manual" });
    texSizeManHeight.setUiAttribs({ "greyout": texSizeMeth.get() != "Manual" || texSizeAutoHeight.get() });
    texSizeManBreak.setUiAttribs({ "greyout": texSizeMeth.get() != "Manual" });
    valign.setUiAttribs({ "greyout": texSizeMeth.get() != "Manual" });
    texSizeAutoHeight.setUiAttribs({ "greyout": texSizeMeth.get() != "Manual" });

    inPaddingY.setUiAttribs({ "greyout": !texSizeAutoHeight.get() });
    inPaddingYBot.setUiAttribs({ "greyout": !texSizeAutoHeight.get() });
    meshScale.setUiAttribs({ "greyout": !drawMesh.get() });
}

}
};

CABLES.OPS["2066e539-1959-404f-ab5d-66ba7f50ac1c"]={f:Ops.Gl.Textures.TextTexture_v5,objName:"Ops.Gl.Textures.TextTexture_v5"};




// **************************************************************
// 
// Ops.Gl.TextureToRandomPoints
// 
// **************************************************************

Ops.Gl.TextureToRandomPoints= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    cgl = op.patch.cgl,
    pUpdate = op.inTriggerButton("update"),
    inNum = op.inValueInt("Num Points", 2000),
    inSeed = op.inValueFloat("Seed", 1),
    zPos = op.inSwitch("Z Position", ["None", "Red", "Green", "Blue", "Alpha"], "Red"),
    zMultiply = op.inValueFloat("Z Multiply", 1.0),
    tex = op.inObject("texture"),
    outTrigger = op.outTrigger("trigger"),
    outPoints = op.outArray("Points"),
    outPointsNum = op.outNumber("NumPoints");

let fb = null,
    pixelData = null,
    texChanged = false;

op.toWorkPortsNeedToBeLinked(tex, outPoints);

tex.onChange = function () { texChanged = true; };

let channelType = op.patch.cgl.gl.UNSIGNED_BYTE;
let points = [];

pUpdate.onTriggered = updatePixels;

const NUM_COL_CHANNELS = 4;

function updatePixels()
{
    let realTexture = tex.get(), gl = cgl.gl;

    if (!realTexture) return;
    if (!fb) fb = gl.createFramebuffer();

    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);

    if (texChanged)
    {
        gl.framebufferTexture2D(
            gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0,
            gl.TEXTURE_2D, realTexture.tex, 0
        );

        pixelData = new Uint8Array(realTexture.width * realTexture.height * NUM_COL_CHANNELS);
        texChanged = false;
    }

    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);

    gl.readPixels(
        0, 0,
        realTexture.width,
        realTexture.height,
        gl.RGBA,
        channelType,
        pixelData
    );

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);

    let num = inNum.get();
    let numPixels = pixelData.length;

    if (num * 3 != points.length)points.length = num * 3;

    Math.randomSeed = inSeed.get();

    let pixelStepX = 1 / realTexture.width;
    let pixelStepY = 1 / realTexture.height;

    let offsetX = pixelStepX * realTexture.width / 2;
    let offsetY = pixelStepY * realTexture.height / 2;

    let ind = 0;
    let count = 0;

    let colChanOffset = 0;
    if (zPos.get() == "Green")colChanOffset = 1;
    else if (zPos.get() == "Blue")colChanOffset = 2;
    else if (zPos.get() == "Alpha")colChanOffset = 3;
    else if (zPos.get() == "None")colChanOffset = 4;

    while (ind < num * 3)
    {
        count++;
        if (count > num * 3 * 100) return;
        let x = Math.floor(Math.seededRandom() * realTexture.width);
        let y = Math.floor(Math.seededRandom() * realTexture.height);
        let intens = pixelData[(x + (y * realTexture.width)) * NUM_COL_CHANNELS + colChanOffset];

        if (intens > 10)
        {
            points[ind++] = ((x * pixelStepX) - (offsetX));
            points[ind++] = ((y * pixelStepY) - (offsetY));

            if (colChanOffset < 4) points[ind++] = (intens / 255) * zMultiply.get();
            else points[ind++] = 0;
        }
    }

    outPointsNum.set(ind / 3);
    outPoints.set(null);
    outPoints.set(points);

    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    outTrigger.trigger();
}

}
};

CABLES.OPS["ff757f51-fbb0-4728-b158-644094cd160e"]={f:Ops.Gl.TextureToRandomPoints,objName:"Ops.Gl.TextureToRandomPoints"};




// **************************************************************
// 
// Ops.Gl.Meshes.PointCloudFromArray
// 
// **************************************************************

Ops.Gl.Meshes.PointCloudFromArray= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    exe = op.inTrigger("exe"),
    arr = op.inArray("Array", 3),
    numPoints = op.inValueInt("Num Points"),
    outTrigger = op.outTrigger("Trigger out"),
    outGeom = op.outObject("Geometry"),
    pTexCoordRand = op.inValueBool("Scramble Texcoords", true),
    seed = op.inValue("Seed", 1),
    inCoords = op.inArray("Coordinates", 2),
    inPointSizes = op.inArray("Point sizes", 1),
    vertCols = op.inArray("Vertex Colors", 4);

op.toWorkPortsNeedToBeLinked(arr, exe);
op.setPortGroup("Texture Coordinates", [pTexCoordRand, seed, inCoords]);

const cgl = op.patch.cgl;
const geom = new CGL.Geometry("pointcloudfromarray");
let deactivated = false;
let mesh = null;
let texCoords = [];
let needsRebuild = true;
let showingError = false;

arr.setUiAttribs({ "title": "Positions" });
inCoords.setUiAttribs({ "title": "Texture Coordinates" });

inCoords.onChange =
    pTexCoordRand.onChange = updateTexCoordsPorts;
vertCols.onChange = updateVertCols;
numPoints.onChange = updateNumVerts;
inPointSizes.onChange = updatePointSizes;

seed.onChange =
    arr.onChange =
    vertCols.onLinkChanged =
    inPointSizes.onLinkChanged = reset;

exe.onTriggered = doRender;

op.onDelete = function () { if (mesh)mesh.dispose(); };

function doRender()
{
    let shader = cgl.getShader();

    if (CABLES.UI && shader)
    {
        if (shader.glPrimitive != cgl.gl.POINTS) op.setUiError("nopointmat", "Using a Material not made for point rendering. Try to use PointMaterial.");
        else op.setUiError("nopointmat", null);
    }

    if (needsRebuild || !mesh) rebuild();
    if (!deactivated && mesh) mesh.render(shader);
    outTrigger.trigger();
}

function reset()
{
    deactivated = arr.get() == null;

    if (!deactivated)needsRebuild = true;
    else needsRebuild = false;
}

function updateTexCoordsPorts()
{
    if (inCoords.isLinked())
    {
        seed.setUiAttribs({ "greyout": true });
        pTexCoordRand.setUiAttribs({ "greyout": true });
    }
    else
    {
        pTexCoordRand.setUiAttribs({ "greyout": false });

        if (!pTexCoordRand.get()) seed.setUiAttribs({ "greyout": true });
        else seed.setUiAttribs({ "greyout": false });
    }

    mesh = null;
    needsRebuild = true;
}

function updatePointSizes()
{
    // if(!inPointSizes.isLinked())
    // {
    //     geom.setAttribute("attrPointSize",[],1);
    // }

    if (!inPointSizes.get()) return;

    if (!geom.getAttribute("attrPointSize")) reset();

    if (mesh)mesh.setAttribute("attrPointSize", inPointSizes.get(), 1);
}

function updateVertCols()
{
    // if (!vertCols.get()) return;
    // if (!geom.vertexColors) reset();
    // console.log("update vert cols");
    needsRebuild = true;
    // if (mesh)mesh.setAttribute(CGL.SHADERVAR_VERTEX_COLOR, vertCols.get(), 4);
}

function updateNumVerts()
{
    if (mesh)
    {
        mesh.setNumVertices(Math.min(geom.vertices.length / 3, numPoints.get()));
        if (numPoints.get() == 0)mesh.setNumVertices(geom.vertices.length / 3);
    }
}

function rebuild()
{
    let verts = arr.get();

    if (!verts || verts.length == 0)
    {
        // mesh=null;
        return;
    }

    if (verts.length % 3 !== 0)
    {
        op.setUiError("div3", "Array length not multiple of 3");

        return;
    }
    else op.setUiError("div3", null);

    if (geom.vertices.length == verts.length && mesh && !inCoords.isLinked() && !vertCols.isLinked() && !geom.getAttribute("attrPointSize"))
    {
        mesh.setAttribute(CGL.SHADERVAR_VERTEX_POSITION, verts, 3);
        geom.vertices = verts;
        needsRebuild = false;

        return;
    }

    // if (geom.getAttribute("attrPointSize" && inPointSizes.isLinked())) changed = true;

    geom.clear();
    let num = verts.length / 3;
    num = Math.abs(Math.floor(num));

    if (num == 0) return;

    if (!texCoords || texCoords.length != num * 2) texCoords = new Float32Array(num * 2); // num*2;//=

    let rndTc = pTexCoordRand.get();

    if (!inCoords.isLinked())
    {
        Math.randomSeed = seed.get();
        texCoords = []; // needed otherwise its using the reference to input incoords port

        for (let i = 0; i < num; i++)
        {
            if (geom.vertices[i * 3] != verts[i * 3] ||
                geom.vertices[i * 3 + 1] != verts[i * 3 + 1] ||
                geom.vertices[i * 3 + 2] != verts[i * 3 + 2])
            {
                if (rndTc)
                {
                    texCoords[i * 2] = Math.seededRandom();
                    texCoords[i * 2 + 1] = Math.seededRandom();
                }
                else
                {
                    texCoords[i * 2] = i / num;
                    texCoords[i * 2 + 1] = i / num;
                }
            }
        }
    }

    if (vertCols.get())
    {
        if (vertCols.get().length != num * 4)
        {
            op.setUiError("vertColWrongLength", "Color array does not have the correct length! (should be " + num * 4 + ")");
            mesh = null;
            return;
        }
        else op.setUiError("vertColWrongLength", null);

        geom.vertexColors = vertCols.get();
    }
    else
    {
        op.setUiError("vertColWrongLength", null);
        geom.vertexColors = [];
    }

    if (inPointSizes.get())
    {
        if (inPointSizes.get().length != num)
        {
            op.setUiError("pointsizeWrongLength", "Color array does not have the correct length! (should be " + num + ")");
            mesh = null;
            return;
        }
        else op.setUiError("pointsizeWrongLength", null);

        geom.setAttribute("attrPointSize", inPointSizes.get(), 1);
    }
    else
    {
        op.setUiError("pointsizeWrongLength", null);
        geom.setAttribute("attrPointSize", [], 1);
    }

    if (inCoords.isLinked()) texCoords = inCoords.get();

    geom.setPointVertices(verts);
    geom.setTexCoords(texCoords);

    // if (mesh)mesh.dispose();
    if (!mesh)mesh = new CGL.Mesh(cgl, geom, { "glPrimitive": cgl.gl.POINTS });

    mesh.addVertexNumbers = true;
    mesh.setGeom(geom);

    outGeom.setRef(geom);

    updateNumVerts();
    needsRebuild = false;
}

}
};

CABLES.OPS["0a6d9c6f-6459-45ca-88ad-268a1f7304db"]={f:Ops.Gl.Meshes.PointCloudFromArray,objName:"Ops.Gl.Meshes.PointCloudFromArray"};




// **************************************************************
// 
// Ops.Gl.ImageCompose.Gradient_v2
// 
// **************************************************************

Ops.Gl.ImageCompose.Gradient_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"gradient_frag":"IN vec2 texCoord;\nUNI float amount;\nUNI float pos;\nUNI float width;\n\nUNI vec3 colA;\nUNI vec3 colB;\nUNI vec3 colC;\nUNI sampler2D tex;\n\n{{CGL.BLENDMODES3}}\n\n\n\n\nvec3 lin2srgb( vec3 cl )\n{\n\tcl = clamp( cl, 0.0, 1.0 );\n\tvec3 c_lo = 12.92 * cl;\n\tvec3 c_hi = 1.055 * pow(cl,vec3(0.41666,0.41666,0.41666)) - 0.055;\n\treturn vec3( (cl.r<0.0031308) ? c_lo.r : c_hi.r,\n                (cl.g<0.0031308) ? c_lo.g : c_hi.g,\n                (cl.b<0.0031308) ? c_lo.b : c_hi.b );\n}\n\nvec3 oklab_mix( vec3 colA, vec3 colB, float h )\n{\n    // https://www.shadertoy.com/view/ttcyRS\n    // https://bottosson.github.io/posts/oklab\n    const mat3 kCONEtoLMS = mat3(\n         0.4121656120,  0.2118591070,  0.0883097947,\n         0.5362752080,  0.6807189584,  0.2818474174,\n         0.0514575653,  0.1074065790,  0.6302613616);\n    const mat3 kLMStoCONE = mat3(\n         4.0767245293, -1.2681437731, -0.0041119885,\n        -3.3072168827,  2.6093323231, -0.7034763098,\n         0.2307590544, -0.3411344290,  1.7068625689);\n\n    // rgb to cone (arg of pow can't be negative)\n    vec3 lmsA = pow( kCONEtoLMS*colA, vec3(1.0/3.0) );\n    vec3 lmsB = pow( kCONEtoLMS*colB, vec3(1.0/3.0) );\n    // lerp\n    vec3 lms = mix( lmsA, lmsB, h );\n    // gain in the middle (no oaklab anymore, but looks better?)\n    #ifdef OKLABGAIN\n  lms *= 1.0+0.2*h*(1.0-h);\n  #endif\n    // cone to rgb\n    return kLMStoCONE*(lms*lms*lms);\n}\n\n\nvoid main()\n{\n    vec4 base=texture(tex,texCoord);\n    vec4 col;\n    float ax=texCoord.x;\n\n    #ifdef GRAD_Y\n        ax=texCoord.y;\n    #endif\n    #ifdef GRAD_XY\n        ax=(texCoord.x+texCoord.y)/2.0;\n    #endif\n    #ifdef GRAD_RADIAL\n        ax=distance(texCoord,vec2(0.5,0.5))*2.0;\n    #endif\n\n    ax=((ax-0.5)*width)+0.5;\nax=clamp(ax,0.0,1.0);\n\n    #ifndef GRAD_SMOOTHSTEP\n        if(ax<=pos) col = vec4(MIXER(colA, colB, ax*1.0/pos),1.0);\n        else col = vec4(MIXER(colB, colC, min(1.0,(ax-pos)*1.0/(1.0-pos))),1.0);\n    #endif\n\n    #ifdef GRAD_SMOOTHSTEP\n        if(ax<=pos) col = vec4(MIXER(colA, colB, smoothstep(0.0,1.0,ax*1.0/pos)),1.0);\n        else col = vec4(MIXER(colB, colC, smoothstep(0.0,1.0,min(1.0,(ax-pos)*1.0/(1.0-pos)))),1.0);\n    #endif\n\n    #ifdef SRGB\n        col.rgb=lin2srgb(col.rgb);\n    #endif\n\n    outColor=cgl_blendPixel(base,col,amount);\n}",};
const
    render = op.inTrigger("Render"),
    blendMode = CGL.TextureEffect.AddBlendSelect(op, "Blend Mode", "normal"),
    maskAlpha = CGL.TextureEffect.AddBlendAlphaMask(op),
    amount = op.inValueSlider("Amount", 1),
    width = op.inValue("Width", 1),
    gType = op.inSwitch("Type", ["X", "Y", "XY", "Radial"], "X"),
    pos1 = op.inValueSlider("Pos", 0.5),
    smoothStep = op.inValueBool("Smoothstep", true),
    inSrgb = op.inValueBool("sRGB", false),
    inColSpace = op.inSwitch("color space", ["RGB", "Oklab", "OklabG"], "RGB"),

    r = op.inValueSlider("r", Math.random()),
    g = op.inValueSlider("g", Math.random()),
    b = op.inValueSlider("b", Math.random()),

    r2 = op.inValueSlider("r2", Math.random()),
    g2 = op.inValueSlider("g2", Math.random()),
    b2 = op.inValueSlider("b2", Math.random()),

    r3 = op.inValueSlider("r3", Math.random()),
    g3 = op.inValueSlider("g3", Math.random()),
    b3 = op.inValueSlider("b3", Math.random()),

    randomize = op.inTriggerButton("Randomize"),
    next = op.outTrigger("Next");

r.setUiAttribs({ "colorPick": true });
r2.setUiAttribs({ "colorPick": true });
r3.setUiAttribs({ "colorPick": true });

op.setPortGroup("Blending", [blendMode, amount]);
op.setPortGroup("Color A", [r, g, b]);
op.setPortGroup("Color B", [r2, g2, b2]);
op.setPortGroup("Color C", [r3, g3, b3]);

const cgl = op.patch.cgl;
const shader = new CGL.Shader(cgl, "gradient");

shader.setSource(shader.getDefaultVertexShader(), attachments.gradient_frag);
const amountUniform = new CGL.Uniform(shader, "f", "amount", amount);
const uniPos = new CGL.Uniform(shader, "f", "pos", pos1);
const uniWidth = new CGL.Uniform(shader, "f", "width", width);
const textureUniform = new CGL.Uniform(shader, "t", "tex", 0);
let r3uniform, r2uniform, runiform;

r2.onChange = g2.onChange = b2.onChange = updateCol2;
r3.onChange = g3.onChange = b3.onChange = updateCol3;
r.onChange = g.onChange = b.onChange = updateCol;

r2.onLinkChanged = g2.onLinkChanged = b2.onLinkChanged =
r3.onLinkChanged = g3.onLinkChanged = b3.onLinkChanged =
r.onLinkChanged = g.onLinkChanged = b.onLinkChanged = updateUi;

updateCol();
updateCol2();
updateCol3();
updateDefines();

inSrgb.onChange =
inColSpace.onChange =
smoothStep.onChange =
    gType.onChange = updateDefines;

function updateUi()
{
    randomize.setUiAttribs({ "greyout": r2.isLinked() || g2.isLinked() || b2.isLinked() || r3.isLinked() || g3.isLinked() || b3.isLinked() || r.isLinked() || g.isLinked() || b.isLinked() });
}

function updateDefines()
{
    // shader.toggleDefine("OKLABGAIN", inoklabGain.get());
    shader.toggleDefine("SRGB", inSrgb.get());

    shader.define("MIXER", (inColSpace.get() + "").indexOf("Oklab") > -1 ? "oklab_mix" : "mix");
    shader.toggleDefine("OKLABGAIN", (inColSpace.get() + "").indexOf("OklabG") > -1);

    shader.toggleDefine("GRAD_SMOOTHSTEP", smoothStep.get());
    shader.toggleDefine("GRAD_X", gType.get() == "X");
    shader.toggleDefine("GRAD_XY", gType.get() == "XY");
    shader.toggleDefine("GRAD_Y", gType.get() == "Y");
    shader.toggleDefine("GRAD_RADIAL", gType.get() == "Radial");
}

CGL.TextureEffect.setupBlending(op, shader, blendMode, amount, maskAlpha);

randomize.onTriggered = function ()
{
    r.set(Math.random());
    g.set(Math.random());
    b.set(Math.random());

    r2.set(Math.random());
    g2.set(Math.random());
    b2.set(Math.random());

    r3.set(Math.random());
    g3.set(Math.random());
    b3.set(Math.random());

    op.refreshParams();
};

function updateCol()
{
    const colA = [r.get(), g.get(), b.get()];
    if (!runiform) runiform = new CGL.Uniform(shader, "3f", "colA", colA);
    else runiform.setValue(colA);
}

function updateCol2()
{
    const colB = [r2.get(), g2.get(), b2.get()];
    if (!r2uniform) r2uniform = new CGL.Uniform(shader, "3f", "colB", colB);
    else r2uniform.setValue(colB);
}

function updateCol3()
{
    const colC = [r3.get(), g3.get(), b3.get()];
    if (!r3uniform) r3uniform = new CGL.Uniform(shader, "3f", "colC", colC);
    else r3uniform.setValue(colC);
}

render.onTriggered = function ()
{
    if (!CGL.TextureEffect.checkOpInEffect(op)) return;

    cgl.pushShader(shader);
    cgl.currentTextureEffect.bind();
    cgl.setTexture(0, cgl.currentTextureEffect.getCurrentSourceTexture().tex);
    cgl.currentTextureEffect.finish();
    cgl.popShader();

    next.trigger();
};

}
};

CABLES.OPS["c8a9408a-75e5-481f-99a7-6aa7ca88bebc"]={f:Ops.Gl.ImageCompose.Gradient_v2,objName:"Ops.Gl.ImageCompose.Gradient_v2"};




// **************************************************************
// 
// Ops.Gl.ImageCompose.ImageCompose_v4
// 
// **************************************************************

Ops.Gl.ImageCompose.ImageCompose_v4= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"imgcomp_frag":"IN vec2 texCoord;\nUNI vec4 bgColor;\nUNI sampler2D tex;\n#ifdef USE_UVTEX\nUNI sampler2D UVTex;\n#endif\n\nvoid main()\n{\n\n    #ifndef USE_TEX\n        outColor=bgColor;\n    #endif\n    #ifdef USE_TEX\n        #ifndef USE_UVTEX\n        outColor=texture(tex,texCoord);\n        #else\n        outColor=texture(tex,texture(UVTex,texCoord).xy);\n        #endif\n    #endif\n\n\n\n}\n",};
const
    cgl = op.patch.cgl,
    render = op.inTrigger("Render"),
    inTex = op.inTexture("Base Texture"),
    inUVTex = op.inTexture("UV Texture"),
    inSize = op.inSwitch("Size", ["Auto", "Canvas", "Manual"], "Auto"),
    width = op.inValueInt("Width", 640),
    height = op.inValueInt("Height", 480),
    inFilter = op.inSwitch("Filter", ["nearest", "linear", "mipmap"], "linear"),
    inWrap = op.inValueSelect("Wrap", ["clamp to edge", "repeat", "mirrored repeat"], "repeat"),
    aniso = op.inSwitch("Anisotropic", ["0", "1", "2", "4", "8", "16"], "0"),

    inPixelFormat = op.inDropDown("Pixel Format", CGL.Texture.PIXELFORMATS, CGL.Texture.PFORMATSTR_RGBA8UB),

    inClear = op.inBool("Clear", true),
    r = op.inValueSlider("R", 0),
    g = op.inValueSlider("G", 0),
    b = op.inValueSlider("B", 0),
    a = op.inValueSlider("A", 0),

    trigger = op.outTrigger("Next"),
    texOut = op.outTexture("texture_out", CGL.Texture.getEmptyTexture(cgl)),
    outRatio = op.outNumber("Aspect Ratio"),
    outWidth = op.outNumber("Texture Width"),
    outHeight = op.outNumber("Texture Height");

op.setPortGroup("Texture Size", [inSize, width, height]);
op.setPortGroup("Texture Parameters", [inWrap, aniso, inFilter, inPixelFormat]);

r.setUiAttribs({ "colorPick": true });
op.setPortGroup("Color", [r, g, b, a, inClear]);

op.toWorkPortsNeedToBeLinked(render);

const prevViewPort = [0, 0, 0, 0];
let effect = null;
let tex = null;
let reInitEffect = true;
let isFloatTex = false;
let copyShader = null;
let copyShaderTexUni = null;
let copyShaderUVTexUni = null;
let copyShaderRGBAUni = null;

inWrap.onChange =
inFilter.onChange =
aniso.onChange =
inPixelFormat.onChange = reInitLater;

inTex.onLinkChanged =
inClear.onChange =
    inSize.onChange =
    inUVTex.onChange = updateUi;

render.onTriggered =
    op.preRender = doRender;

updateUi();

function initEffect()
{
    if (effect)effect.delete();
    if (tex)tex.delete();
    tex = null;
    effect = new CGL.TextureEffect(cgl, { "isFloatingPointTexture": CGL.Texture.isPixelFormatFloat(inPixelFormat.get()), "name": op.name });

    const cgl_aniso = Math.min(cgl.maxAnisotropic, parseFloat(aniso.get()));

    tex = new CGL.Texture(cgl,
        {
            "anisotropic": cgl_aniso,
            "name": "image_compose_v2_" + op.id,
            "pixelFormat": inPixelFormat.get(),
            "filter": getFilter(),
            "wrap": getWrap(),
            "width": getWidth(),
            "height": getHeight()
        });

    effect.setSourceTexture(tex);

    outWidth.set(getWidth());
    outHeight.set(getHeight());
    outRatio.set(getWidth() / getHeight());

    texOut.setRef(CGL.Texture.getEmptyTexture(cgl));

    reInitEffect = false;
    updateUi();
}

function getFilter()
{
    if (inFilter.get() == "nearest") return CGL.Texture.FILTER_NEAREST;
    else if (inFilter.get() == "linear") return CGL.Texture.FILTER_LINEAR;
    else if (inFilter.get() == "mipmap") return CGL.Texture.FILTER_MIPMAP;
}

function getWrap()
{
    if (inWrap.get() == "repeat") return CGL.Texture.WRAP_REPEAT;
    else if (inWrap.get() == "mirrored repeat") return CGL.Texture.WRAP_MIRRORED_REPEAT;
    else if (inWrap.get() == "clamp to edge") return CGL.Texture.WRAP_CLAMP_TO_EDGE;
}

function getWidth()
{
    let x = 0;
    if (inTex.get() && inSize.get() == "Auto") x = inTex.get().width;
    else if (inSize.get() == "Auto" || inSize.get() == "Canvas") x = cgl.canvasWidth;
    else if (inSize.get() == "ViewPort") x = cgl.getViewPort()[2];
    else x = Math.ceil(width.get());
    return op.patch.cgl.checkTextureSize(x);
}

function getHeight()
{
    let x = 0;

    if (inTex.get() && inSize.get() == "Auto") x = inTex.get().height;
    else if (inSize.get() == "Auto" || inSize.get() == "Canvas") x = cgl.canvasHeight;
    else if (inSize.get() == "ViewPort") x = cgl.getViewPort()[3];
    else x = Math.ceil(height.get());
    return op.patch.cgl.checkTextureSize(x);
}

function reInitLater()
{
    reInitEffect = true;
}

function updateResolution()
{
    if ((
        getWidth() != tex.width ||
        getHeight() != tex.height ||
        // tex.anisotropic != parseFloat(aniso.get()) ||
        // tex.isFloatingPoint() != CGL.Texture.isPixelFormatFloat(inPixelFormat.get()) ||
        tex.pixelFormat != inPixelFormat.get() ||
        tex.filter != getFilter() ||
        tex.wrap != getWrap()
    ) && (getWidth() !== 0 && getHeight() !== 0))
    {
        initEffect();
        effect.setSourceTexture(tex);
        // texOut.set(CGL.Texture.getEmptyTexture(cgl));
        texOut.setRef(tex);
        updateResolutionInfo();
        checkTypes();
    }
}

function updateResolutionInfo()
{
    let info = null;

    if (inSize.get() == "Manual")
    {
        info = null;
    }
    else if (inSize.get() == "Auto")
    {
        if (inTex.get()) info = "Input Texture";
        else info = "Canvas Size";

        info += ": " + getWidth() + " x " + getHeight();
    }

    let changed = false;
    changed = inSize.uiAttribs.info != info;
    inSize.setUiAttribs({ "info": info });
    if (changed)op.refreshParams();
}

function updateDefines()
{
    if (copyShader)copyShader.toggleDefine("USE_TEX", inTex.isLinked() || !inClear.get());
    if (copyShader)copyShader.toggleDefine("USE_UVTEX", inUVTex.isLinked());
}

function updateUi()
{
    aniso.setUiAttribs({ "greyout": getFilter() != CGL.Texture.FILTER_MIPMAP });

    r.setUiAttribs({ "greyout": inTex.isLinked() });
    b.setUiAttribs({ "greyout": inTex.isLinked() });
    g.setUiAttribs({ "greyout": inTex.isLinked() });
    a.setUiAttribs({ "greyout": inTex.isLinked() });

    inClear.setUiAttribs({ "greyout": inTex.isLinked() });
    width.setUiAttribs({ "greyout": inSize.get() != "Manual" });
    height.setUiAttribs({ "greyout": inSize.get() != "Manual" });

    // width.setUiAttribs({ "hideParam": inSize.get() != "Manual" });
    // height.setUiAttribs({ "hideParam": inSize.get() != "Manual" });

    if (tex)
        if (CGL.Texture.isPixelFormatFloat(inPixelFormat.get()) && getFilter() == CGL.Texture.FILTER_MIPMAP) op.setUiError("fpmipmap", "Don't use mipmap and 32bit at the same time, many systems do not support this.");
        else op.setUiError("fpmipmap", null);

    updateResolutionInfo();
    updateDefines();
    checkTypes();
}

function checkTypes()
{
    if (tex)
        if (inTex.isLinked() && inTex.get() && (tex.isFloatingPoint() < inTex.get().isFloatingPoint()))
            op.setUiError("textypediff", "Warning: Mixing floating point and non floating point texture can result in data/precision loss", 1);
        else
            op.setUiError("textypediff", null);
}

op.preRender = () =>
{
    doRender();
};

function copyTexture()
{
    if (!copyShader)
    {
        copyShader = new CGL.Shader(cgl, "copytextureshader");
        copyShader.setSource(copyShader.getDefaultVertexShader(), attachments.imgcomp_frag);
        copyShaderTexUni = new CGL.Uniform(copyShader, "t", "tex", 0);
        copyShaderUVTexUni = new CGL.Uniform(copyShader, "t", "UVTex", 1);
        copyShaderRGBAUni = new CGL.Uniform(copyShader, "4f", "bgColor", r, g, b, a);
        updateDefines();
    }

    cgl.pushShader(copyShader);
    cgl.currentTextureEffect.bind();

    if (inTex.get()) cgl.setTexture(0, inTex.get().tex);
    else if (!inClear.get() && texOut.get()) cgl.setTexture(0, texOut.get().tex);
    if (inUVTex.get()) cgl.setTexture(1, inUVTex.get().tex);

    cgl.currentTextureEffect.finish();
    cgl.popShader();
}

function doRender()
{
    if (!effect || reInitEffect) initEffect();

    cgl.pushBlend(false);

    updateResolution();

    const oldEffect = cgl.currentTextureEffect;
    cgl.currentTextureEffect = effect;
    cgl.currentTextureEffect.imgCompVer = 3;
    cgl.currentTextureEffect.width = width.get();
    cgl.currentTextureEffect.height = height.get();
    effect.setSourceTexture(tex);

    effect.startEffect(inTex.get() || CGL.Texture.getEmptyTexture(cgl, isFloatTex), true);
    copyTexture();

    trigger.trigger();

    cgl.pushViewPort(0, 0, width.get(), height.get());

    effect.endEffect();
    texOut.setRef(effect.getCurrentSourceTexture());

    cgl.popViewPort();

    cgl.popBlend();
    cgl.currentTextureEffect = oldEffect;
}

}
};

CABLES.OPS["17212e2b-d692-464c-8f8d-2d511dd3410a"]={f:Ops.Gl.ImageCompose.ImageCompose_v4,objName:"Ops.Gl.ImageCompose.ImageCompose_v4"};




// **************************************************************
// 
// Ops.Gl.Matrix.Camera
// 
// **************************************************************

Ops.Gl.Matrix.Camera= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const render = op.inTrigger("render");
const trigger = op.outTrigger("trigger");

/* Inputs */
// projection | prespective & ortogonal
const projectionMode = op.inValueSelect("projection mode", ["prespective", "ortogonal"], "prespective");
const zNear = op.inValue("frustum near", 0.01);
const zFar = op.inValue("frustum far", 5000.0);

const fov = op.inValue("fov", 45);
const autoAspect = op.inValueBool("Auto Aspect Ratio", true);
const aspect = op.inValue("Aspect Ratio", 1);

// look at camera
const eyeX = op.inValue("eye X", 0);
const eyeY = op.inValue("eye Y", 0);
const eyeZ = op.inValue("eye Z", 5);

const centerX = op.inValue("center X", 0);
const centerY = op.inValue("center Y", 0);
const centerZ = op.inValue("center Z", 0);

// camera transform and movements
const posX = op.inValue("truck", 0);
const posY = op.inValue("boom", 0);
const posZ = op.inValue("dolly", 0);

const rotX = op.inValue("tilt", 0);
const rotY = op.inValue("pan", 0);
const rotZ = op.inValue("roll", 0);

/* Outputs */
const outAsp = op.outNumber("Aspect");
const outArr = op.outArray("Look At Array");

/* logic */
const cgl = op.patch.cgl;

let asp = 0;

const vUp = vec3.create();
const vEye = vec3.create();
const vCenter = vec3.create();
const transMatrix = mat4.create();
mat4.identity(transMatrix);

const arr = [];

// Transform and move
const vPos = vec3.create();
const transMatrixMove = mat4.create();
mat4.identity(transMatrixMove);

let updateCameraMovementMatrix = true;

render.onTriggered = function ()
{
    if (cgl.tempData.shadowPass) return trigger.trigger();

    // Aspect ration
    if (!autoAspect.get()) asp = aspect.get();
    else asp = cgl.getViewPort()[2] / cgl.getViewPort()[3];
    outAsp.set(asp);

    // translation (truck, boom, dolly)
    cgl.pushViewMatrix();

    if (updateCameraMovementMatrix)
    {
        mat4.identity(transMatrixMove);

        vec3.set(vPos, posX.get(), posY.get(), posZ.get());
        if (posX.get() !== 0.0 || posY.get() !== 0.0 || posZ.get() !== 0.0)
            mat4.translate(transMatrixMove, transMatrixMove, vPos);

        if (rotX.get() !== 0)
            mat4.rotateX(transMatrixMove, transMatrixMove, rotX.get() * CGL.DEG2RAD);
        if (rotY.get() !== 0)
            mat4.rotateY(transMatrixMove, transMatrixMove, rotY.get() * CGL.DEG2RAD);
        if (rotZ.get() !== 0)
            mat4.rotateZ(transMatrixMove, transMatrixMove, rotZ.get() * CGL.DEG2RAD);

        updateCameraMovementMatrix = false;
    }

    mat4.multiply(cgl.vMatrix, cgl.vMatrix, transMatrixMove);

    // projection (prespective / ortogonal)
    cgl.pushPMatrix();

    // look at
    cgl.pushViewMatrix();

    if (projectionMode.get() == "prespective")
    {
        mat4.perspective(
            cgl.pMatrix,
            fov.get() * 0.0174533,
            asp,
            zNear.get(),
            zFar.get()
        );
    }
    else if (projectionMode.get() == "ortogonal")
    {
        mat4.ortho(
            cgl.pMatrix,
            -1 * (fov.get() / 14),
            1 * (fov.get() / 14),
            -1 * (fov.get() / 14) / asp,
            1 * (fov.get() / 14) / asp,
            zNear.get(),
            zFar.get()
        );
    }

    arr[0] = eyeX.get();
    arr[1] = eyeY.get();
    arr[2] = eyeZ.get();

    arr[3] = centerX.get();
    arr[4] = centerY.get();
    arr[5] = centerZ.get();

    arr[6] = 0;
    arr[7] = 1;
    arr[8] = 0;

    outArr.setRef(arr);

    vec3.set(vUp, 0, 1, 0);
    vec3.set(vEye, eyeX.get(), eyeY.get(), eyeZ.get());
    vec3.set(vCenter, centerX.get(), centerY.get(), centerZ.get());

    mat4.lookAt(transMatrix, vEye, vCenter, vUp);

    mat4.multiply(cgl.vMatrix, cgl.vMatrix, transMatrix);

    trigger.trigger();

    cgl.popViewMatrix();
    cgl.popPMatrix();

    cgl.popViewMatrix();

    // GUI for dolly, boom and truck
    if (op.isCurrentUiOp())
        gui.setTransformGizmo({
            "posX": posX,
            "posY": posY,
            "posZ": posZ
        });
};

const updateUI = function ()
{
    if (!autoAspect.get())
    {
        aspect.setUiAttribs({ "greyout": false });
    }
    else
    {
        aspect.setUiAttribs({ "greyout": true });
    }
};

const cameraMovementChanged = function ()
{
    updateCameraMovementMatrix = true;
};

// listeners
posX.onChange = cameraMovementChanged;
posY.onChange = cameraMovementChanged;
posZ.onChange = cameraMovementChanged;

rotX.onChange = cameraMovementChanged;
rotY.onChange = cameraMovementChanged;
rotZ.onChange = cameraMovementChanged;

autoAspect.onChange = updateUI;
updateUI();

}
};

CABLES.OPS["b24dbfdc-485c-49d2-92a1-7258efd9239a"]={f:Ops.Gl.Matrix.Camera,objName:"Ops.Gl.Matrix.Camera"};




// **************************************************************
// 
// Ops.Array.RandomNumbersArray_v4
// 
// **************************************************************

Ops.Array.RandomNumbersArray_v4= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    numValues = op.inValueInt("Num Values", 100),
    inModeSwitch = op.inSwitch("Mode", ["A", "AB", "ABC", "ABCD"], "A"),
    inSeed = op.inValueFloat("Random Seed ", 0),
    inInteger = op.inBool("Integer", false),
    inClosed = op.inValueBool("Last == First"),
    outValues = op.outArray("Array Out"),
    outTotalPoints = op.outNumber("Chunks Amount"),
    outArrayLength = op.outNumber("Array length");

const letters = ["A", "B", "C", "D"];
const arr = [];

const inArray = letters.map(function (value)
{
    return {
        "min": op.inValueFloat("Min " + value, -1),
        "max": op.inValueFloat("Max " + value, 1),
    };
});

for (let i = 0; i < inArray.length; i += 1)
{
    const portObj = inArray[i];
    const keys = Object.keys(portObj);

    op.setPortGroup("Value Range " + letters[i], keys.map(function (key) { return portObj[key]; }));

    if (i > 0) keys.forEach(function (key) { portObj[key].setUiAttribs({ "greyout": true }); });
}

inModeSwitch.onChange = function ()
{
    const mode = inModeSwitch.get();
    const modes = inModeSwitch.uiAttribs.values;

    outValues.setUiAttribs({ "stride": inModeSwitch.get().length });

    const index = modes.indexOf(mode);

    inArray.forEach(function (portObj, i)
    {
        const keys = Object.keys(portObj);
        keys.forEach(function (key, j)
        {
            if (i <= index) portObj[key].setUiAttribs({ "greyout": false });
            else portObj[key].setUiAttribs({ "greyout": true });
        });
    });
    init();
};

outValues.ignoreValueSerialize = true;

inClosed.onChange =
    numValues.onChange =
    inSeed.onChange =
    inInteger.onChange = init;

const minMaxArray = [];

init();

function init()
{
    const mode = inModeSwitch.get();
    const modes = inModeSwitch.uiAttribs.values;
    const index = modes.indexOf(mode);

    const n = Math.floor(Math.abs(numValues.get()));
    Math.randomSeed = inSeed.get();

    op.setUiAttrib({ "extendTitle": n + "*" + mode.length });

    const dimension = index + 1;
    const length = n * dimension;

    arr.length = length;
    const tupleLength = length / dimension;
    const isInteger = inInteger.get();

    // optimization: we only need to fetch the max min for each component once
    for (let i = 0; i < dimension; i += 1)
    {
        const portObj = inArray[i];
        const max = portObj.max.get();
        const min = portObj.min.get();
        minMaxArray[i] = [min, max];
    }

    for (let j = 0; j < tupleLength; j += 1)
    {
        for (let k = 0; k < dimension; k += 1)
        {
            const min = minMaxArray[k][0];
            const max = minMaxArray[k][1];
            const index = j * dimension + k;

            if (isInteger) arr[index] = Math.floor(Math.seededRandom() * ((max + 1) - min) + min);
            else arr[index] = Math.seededRandom() * (max - min) + min;
        }
    }

    if (inClosed.get() && arr.length > dimension)
    {
        for (let i = 0; i < dimension; i++)
            arr[arr.length - 3 + i] = arr[i];
    }

    outValues.setRef(arr);
    outTotalPoints.set(arr.length / dimension);
    outArrayLength.set(arr.length);
}

// assign change handler
inArray.forEach(function (obj)
{
    Object.keys(obj).forEach(function (key)
    {
        const x = obj[key];
        x.onChange = init;
    });
});

}
};

CABLES.OPS["8a9fa2c6-c229-49a9-9dc8-247001539217"]={f:Ops.Array.RandomNumbersArray_v4,objName:"Ops.Array.RandomNumbersArray_v4"};




// **************************************************************
// 
// Ops.Array.ArrayMathArray
// 
// **************************************************************

Ops.Array.ArrayMathArray= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const inArray_0 = op.inArray("array 0"),
    inArray_1 = op.inArray("array 1"),
    mathSelect = op.inSwitch("Math function", ["+", "-", "*", "/", "%", "min", "max"], "+"),
    outArray = op.outArray("Array result"),
    outArrayLength = op.outNumber("Array length");

let mathFunc;

let showingError = false;

const mathArray = [];

op.toWorkPortsNeedToBeLinked(inArray_1, inArray_0);

mathSelect.onChange = onFilterChange;

inArray_0.onChange = inArray_1.onChange = update;
onFilterChange();

function onFilterChange()
{
    const mathSelectValue = mathSelect.get();

    if (mathSelectValue === "+") mathFunc = function (a, b) { return a + b; };
    else if (mathSelectValue === "-") mathFunc = function (a, b) { return a - b; };
    else if (mathSelectValue === "*") mathFunc = function (a, b) { return a * b; };
    else if (mathSelectValue === "/") mathFunc = function (a, b) { return a / b; };
    else if (mathSelectValue === "%") mathFunc = function (a, b) { return a % b; };
    else if (mathSelectValue === "min") mathFunc = function (a, b) { return Math.min(a, b); };
    else if (mathSelectValue === "max") mathFunc = function (a, b) { return Math.max(a, b); };
    update();
    op.setUiAttrib({ "extendTitle": mathSelectValue });
}

function update()
{
    const array0 = inArray_0.get();
    const array1 = inArray_1.get();

    if (!array0 || !array1)
    {
        outArray.set(null);
        outArrayLength.set(0);
        return;
    }

    const l = mathArray.length = array0.length;

    for (let i = 0; i < l; i++)
    {
        mathArray[i] = mathFunc(array0[i], array1[i]);
    }

    outArrayLength.set(mathArray.length);
    outArray.setRef(mathArray);
}

}
};

CABLES.OPS["f31a1764-ce14-41de-9b3f-dc2fe249bb52"]={f:Ops.Array.ArrayMathArray,objName:"Ops.Array.ArrayMathArray"};




// **************************************************************
// 
// Ops.Array.ArrayMath
// 
// **************************************************************

Ops.Array.ArrayMath= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const inArray_0 = op.inArray("array 0"),
    NumberIn = op.inValueFloat("Number for math", 0.0),
    mathSelect = op.inSwitch("Math function", ["+", "-", "*", "/", "%", "min", "max"], "+"),
    outArray = op.outArray("Array result"),
    outArrayLength = op.outNumber("Array length");

op.toWorkPortsNeedToBeLinked(inArray_0);

let mathFunc;
let showingError = false;
let mathArray = [];

inArray_0.onChange = NumberIn.onChange = update;
mathSelect.onChange = onFilterChange;

onFilterChange();

inArray_0.onLinkChanged = () =>
{
    if (inArray_0) inArray_0.copyLinkedUiAttrib("stride", outArray);
};

function onFilterChange()
{
    let mathSelectValue = mathSelect.get();

    if (mathSelectValue === "+") mathFunc = function (a, b) { return a + b; };
    else if (mathSelectValue === "-") mathFunc = function (a, b) { return a - b; };
    else if (mathSelectValue === "*") mathFunc = function (a, b) { return a * b; };
    else if (mathSelectValue === "/") mathFunc = function (a, b) { return a / b; };
    else if (mathSelectValue === "%") mathFunc = function (a, b) { return a % b; };
    else if (mathSelectValue === "min") mathFunc = function (a, b) { return Math.min(a, b); };
    else if (mathSelectValue === "max") mathFunc = function (a, b) { return Math.max(a, b); };
    update();
    op.setUiAttrib({ "extendTitle": mathSelectValue });
}

function update()
{
    let array0 = inArray_0.get();

    mathArray.length = 0;

    if (!array0)
    {
        outArrayLength.set(0);
        outArray.set(null);
        return;
    }

    let num = NumberIn.get();
    mathArray.length = array0.length;

    let i = 0;

    for (i = 0; i < array0.length; i++)
    {
        mathArray[i] = mathFunc(array0[i], num);
    }

    outArray.setRef(mathArray);
    outArrayLength.set(mathArray.length);
}

}
};

CABLES.OPS["c7617717-3114-452f-9625-e4fefd841e88"]={f:Ops.Array.ArrayMath,objName:"Ops.Array.ArrayMath"};




// **************************************************************
// 
// Ops.Array.AnimArray_v2
// 
// **************************************************************

Ops.Array.AnimArray_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inTrigger = op.inTrigger("Update"),
    inArr = op.inArray("Next Array"),
    inDur = op.inFloat("Duration", 1),
    next = op.outTrigger("Next"),
    outArr = op.outArray("Matrix");

let lastTime = 0;
let startTime = 0;
let firsttime = true;
let cycle = 1;
let lastArr = null;
let arr1, arr2;
let result = [];

const anim = new CABLES.Anim();
anim.createPort(op, "easing", init);
anim.loop = false;

inDur.onChange = inArr.onChange = init;

inTrigger.onTriggered = () =>
{
    let t = CABLES.now() / 1000;
    const perc = anim.getValue(t);
    if (arr1 && arr2) ipMat(perc);
};

inArr.onLinkChanged = () =>
{
    if (inArr) inArr.copyLinkedUiAttrib("stride", outArr);
};

function copyArray(a)
{
    let b = [];
    b.length = a.length;
    for (let i = 0; i < a.length; i++) b[i] = a[i];
    return b;
}

function init()
{
    if (!inArr.get()) return;

    lastArr = inArr.get();
    startTime = performance.now();
    anim.clear(CABLES.now() / 1000.0);

    anim.setValue(CABLES.now() / 1000.0, cycle);

    if (cycle == 1) cycle = 0;
    else cycle = 1;

    if (result.length != lastArr.length)result = copyArray(lastArr);

    if (cycle == 0)
    {
        arr1 = inArr.get();
        arr2 = copyArray(result);
    }
    else
    {
        arr1 = copyArray(result);
        arr2 = inArr.get();
    }

    anim.setValue(inDur.get() + CABLES.now() / 1000.0, cycle);

    firsttime = false;
}

function ip(val1, val2, perc)
{
    return ((val2 - val1) * perc + val1);
}

function ipMat(perc)
{
    if (!arr1 || !arr2 || arr1.length != arr2.length)
    {
        outArr.set(null);
        op.logError("arrays wrong", arr1.length, arr2.length);
    }
    else
    {
        for (let i = 0; i < arr1.length; i++)
            result[i] = ip(arr1[i], arr2[i], perc);

        outArr.setRef(result);
    }
    next.trigger();
}

}
};

CABLES.OPS["048e852b-62ea-4314-b6f2-9ac5e7cbb066"]={f:Ops.Array.AnimArray_v2,objName:"Ops.Array.AnimArray_v2"};




// **************************************************************
// 
// Ops.Vars.VarTriggerNumber
// 
// **************************************************************

Ops.Vars.VarTriggerNumber= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    trigger = op.inTriggerButton("Trigger"),
    val = op.inValueFloat("Value", 0),
    next = op.outTrigger("Next");

op.varName = op.inDropDown("Variable", [], "", true);

new CABLES.VarSetOpWrapper(op, "number", val, op.varName, trigger, next);

}
};

CABLES.OPS["2c29baf0-2af2-486d-9218-4299594ee9c1"]={f:Ops.Vars.VarTriggerNumber,objName:"Ops.Vars.VarTriggerNumber"};




// **************************************************************
// 
// Ops.Vars.VarTriggerString
// 
// **************************************************************

Ops.Vars.VarTriggerString= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    trigger = op.inTriggerButton("Trigger"),
    val = op.inString("Value", "New String"),
    next = op.outTrigger("Next");

op.varName = op.inDropDown("Variable", [], "", true);

new CABLES.VarSetOpWrapper(op, "string", val, op.varName, trigger, next);

}
};

CABLES.OPS["d75992b7-65e2-44d8-b264-320d4c5a5630"]={f:Ops.Vars.VarTriggerString,objName:"Ops.Vars.VarTriggerString"};




// **************************************************************
// 
// Ops.Html.FontFile_v2
// 
// **************************************************************

Ops.Html.FontFile_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    filename = op.inUrl("file", [".otf", ".ttf", ".woff", ".woff2"]),
    fontname = op.inString("family"),
    inActive = op.inBool("Active", true),
    outLoaded = op.outBoolNum("Loaded"),
    loadedTrigger = op.outTrigger("Loaded Trigger");

let loadingId = null;
let fontFaceObj;
let doc = null;
let to = null;
let style = null;
let oldFontName = "";

filename.onChange = function ()
{
    outLoaded.set(false);
    addStyle(null);
};

inActive.onChange =
fontname.onChange = () =>
{
    loadSoon();
};

function loadSoon()
{
    clearTimeout(to);
    to = setTimeout(() =>
    {
        addStyle(null);
    }, 50);
}

op.patch.on("windowChanged",
    (win) =>
    {
        fontFaceObj = null;
        addStyle(win.document);
    });

function addStyle(_doc)
{
    if (style)style.remove();

    if (fontFaceObj)
    {
        const success = doc.fonts.delete(fontFaceObj);
        fontFaceObj = null;

        setTimeout(() => // delete needs some time, so we delay this a bit.....
        {
            op.patch.emitEvent("fontLoaded", oldFontName);
        }, 100);
    }

    if (!inActive.get()) return;
    doc = _doc || doc || op.patch.cgl.canvas.ownerDocument || document;

    if (loadingId)loadingId = op.patch.cgl.patch.loading.finished(loadingId);

    op.setUiError("loadingerror", null);

    oldFontName = fontname.get();

    if (filename.get() && fontname.get())
    {
        if (doc.fonts)
        {
            let url = "url(\"" + op.patch.getFilePath(String(filename.get())) + "\")";
            fontFaceObj = new FontFace(fontname.get(), url);

            loadingId = op.patch.cgl.patch.loading.start("FontFile", filename.get(), op);
            // Add the FontFace to the FontFaceSet
            doc.fonts.add(fontFaceObj);

            // Get the current status of the FontFace
            // (should be 'unloaded')

            // Load the FontFace

            // Get the current status of the Fontface
            // (should be 'loading' or 'loaded' if cached)

            // Wait until the font has been loaded, log the current status.
            fontFaceObj.loaded.then((fontFace) =>
            {
                outLoaded.set(true);
                loadedTrigger.trigger();
                loadingId = op.patch.cgl.patch.loading.finished(loadingId);

                op.patch.emitEvent("fontLoaded", fontname.get());

                // Throw an error if loading wasn't successful
            }, (fontFace) =>
            {
                op.setUiError("loadingerror", "Font loading error: " + fontFaceObj.status + "(" + filename.get() + ")");
                loadingId = op.patch.cgl.patch.loading.finished(loadingId);
                outLoaded.set(true);

                // op.logError("Font loading error! Current status", fontFaceObj.status);
            }).catch((f) =>
            {
                loadingId = op.patch.cgl.patch.loading.finished(loadingId);
                console.error("catch ", f);
            });

            fontFaceObj.load();
        }
        else
        { // font loading api not supported
            const fileUrl = op.patch.getFilePath(String(filename.get()));
            const styleStr = ""
                .endl() + "@font-face"
                .endl() + "{"
                .endl() + "  font-family: \"" + fontname.get() + "\";"
                .endl() + "  src: url(\"" + fileUrl + "\") format(\"truetype\");"
                .endl() + "}";

            style = document.createElement("style");
            style.classList.add("cablesEle");
            style.type = "text/css";
            style.innerHTML = styleStr;
            document.getElementsByTagName("head")[document.getElementsByTagName("head").length - 1].appendChild(style);
            // TODO: Poll if font loaded
        }
    }
}

}
};

CABLES.OPS["68177370-116e-4c76-aef3-3b10d68e7227"]={f:Ops.Html.FontFile_v2,objName:"Ops.Html.FontFile_v2"};




// **************************************************************
// 
// Ops.Ui.Comment_v2
// 
// **************************************************************

Ops.Ui.Comment_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inTitle = op.inString("title", "New comment"),
    inText = op.inTextarea("text");
inTitle.setUiAttribs({ "hidePort": true });
inText.setUiAttribs({ "hidePort": true });

op.init =
    inTitle.onChange =
    inText.onChange =
    op.onLoaded = update;

update();

function update()
{
    if (CABLES.UI)
    {
        op.uiAttr(
            {
                "comment_title": inTitle.get(),
                "comment_text": inText.get(),
                "extendTitle": inTitle.get()
            });
    }
}

}
};

CABLES.OPS["93492eeb-bf35-4a62-98f7-d85b0b79bfe5"]={f:Ops.Ui.Comment_v2,objName:"Ops.Ui.Comment_v2"};




// **************************************************************
// 
// Ops.Math.Compare.Equals
// 
// **************************************************************

Ops.Math.Compare.Equals= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    number1 = op.inValue("number1", 1),
    number2 = op.inValue("number2", 1),
    result = op.outBoolNum("result");

number1.onChange =
    number2.onChange = exec;
exec();

function exec()
{
    result.set(number1.get() == number2.get());
}

}
};

CABLES.OPS["4dd3cc55-eebc-4187-9d4e-2e053a956fab"]={f:Ops.Math.Compare.Equals,objName:"Ops.Math.Compare.Equals"};




// **************************************************************
// 
// Ops.Html.FontsLoaded
// 
// **************************************************************

Ops.Html.FontsLoaded= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const loaded = op.outTrigger("Font Loaded");

document.fonts.ready.then(function (e)
{
    loaded.trigger();
});

document.fonts.addEventListener("loadingdone", (event) =>
{
    loaded.trigger();
});

}
};

CABLES.OPS["5c072a3d-c307-4bcd-8f3b-7487e30f4d73"]={f:Ops.Html.FontsLoaded,objName:"Ops.Html.FontsLoaded"};




// **************************************************************
// 
// Ops.String.String_v2
// 
// **************************************************************

Ops.String.String_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    v = op.inString("value", ""),
    result = op.outString("String");

v.onChange = function ()
{
    if (!v.isLinked())
        op.setUiAttrib({ "extendTitle": v.get() });

    result.set(v.get());
};

}
};

CABLES.OPS["d697ff82-74fd-4f31-8f54-295bc64e713d"]={f:Ops.String.String_v2,objName:"Ops.String.String_v2"};




// **************************************************************
// 
// Ops.Boolean.Boolean
// 
// **************************************************************

Ops.Boolean.Boolean= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    v = op.inBool("value", false),
    result = op.outBoolNum("result");

result.set(false);
v.onChange = exec;

function exec()
{
    if (result.get() != v.get()) result.set(v.get());
}

}
};

CABLES.OPS["83e2d74c-9741-41aa-a4d7-1bda4ef55fb3"]={f:Ops.Boolean.Boolean,objName:"Ops.Boolean.Boolean"};




// **************************************************************
// 
// Ops.WebAudio.Output_v2
// 
// **************************************************************

Ops.WebAudio.Output_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inAudio = op.inObject("Audio In", null, "audioNode"),
    inGain = op.inFloatSlider("Volume", 1),
    inMute = op.inBool("Mute", false),
    inShowSusp = op.inBool("Show Audio Suspended Button", true),
    outVol = op.outNumber("Current Volume", 0),
    outChannels = op.outNumber("Number Of Channels"),
    outState = op.outString("Context State", "unknown");

op.setPortGroup("Volume Settings", [inMute, inGain]);

let isSuspended = false;
let audioCtx = CABLES.WEBAUDIO.createAudioContext(op);
let gainNode = audioCtx.createGain();
const destinationNode = audioCtx.destination;
let oldAudioIn = null;
let connectedToOut = false;

inMute.onChange = () =>
{
    mute(inMute.get());
    updateStateError();
};

inGain.onChange = setVolume;
op.onMasterVolumeChanged = setVolume;

let pauseId = op.patch.on("pause", setVolume);
let resumeId = op.patch.on("resume", setVolume);

audioCtx.addEventListener("statechange", updateStateError);
inShowSusp.onChange = updateAudioStateButton;

updateStateError();
updateAudioStateButton();

op.onDelete = () =>
{
    if (gainNode) gainNode.disconnect();
    gainNode = null;
    if (CABLES.interActionNeededButton) CABLES.interActionNeededButton.remove("audiosuspended");
    if (pauseId) op.patch.off(pauseId);
    if (resumeId) op.patch.off(resumeId);
};

inAudio.onChange = function ()
{
    op.setUiError("multipleInputs", null);
    if (oldAudioIn)
    {
        try
        {
            if (oldAudioIn.disconnect)
            {
                oldAudioIn.disconnect(gainNode);
            }
        }
        catch (e)
        {
            op.logError(e);
        }
    }

    if (connectedToOut)
    {
        if (gainNode)
        {
            gainNode.disconnect(destinationNode);
        }
        connectedToOut = false;
    }

    if (inAudio.get())
    {
        if (inAudio.links.length > 1) op.setUiError("multipleInputs", "You have connected multiple inputs. It is possible that you experience unexpected behaviour. Please use a Mixer op to connect multiple audio streams.", 1);
        else op.setUiError("multipleInputs", null);

        if (inAudio.get().connect)
        {
            inAudio.get().connect(gainNode);
        }
    }

    oldAudioIn = inAudio.get();

    if (!connectedToOut)
    {
        if (gainNode)
        {
            gainNode.connect(destinationNode);
        }
        connectedToOut = true;
    }

    if (audioCtx && audioCtx.destination)
    {
        outChannels.set(audioCtx.destination.maxChannelCount);
    }
    else
    {
        outChannels.set(0);
    }

    setVolume();
};

function setVolume()
{
    const masterVolume = op.patch.config.masterVolume || 0;

    let volume = inGain.get() * masterVolume;
    if (op.patch._paused || inMute.get()) volume = 0;
    volume = CABLES.clamp(volume, 0, 1);

    if (!gainNode) op.logError("gainNode undefined");
    if (gainNode) gainNode.gain.linearRampToValueAtTime(volume, audioCtx.currentTime + 0.05);

    outVol.set(volume);
}

function mute(b)
{
    if (b)
    {
        if (audioCtx.state === "suspended")
        { // make sure that when audio context is suspended node will also be muted
            // this prevents the initial short sound burst being heard when context is suspended
            // and started from user interaction
            // also note, we have to cancel the already scheduled values as we have no influence over
            // the order in which onchange handlers are executed

            if (gainNode)
            {
                gainNode.gain.cancelScheduledValues(audioCtx.currentTime);
                gainNode.gain.value = 0;
                gainNode.gain.setValueAtTime(0, audioCtx.currentTime);
            }

            outVol.set(0);

            return;
        }
    }

    setVolume();
}

function updateStateError()
{
    outState.set(audioCtx.state);
    op.logVerbose("audioCtx.state change", audioCtx.state);

    op.setUiError("ctxSusp", null);
    if (audioCtx.state == "suspended")
    {
        const errorText = "Your Browser suspended audio context, use playButton op to play audio after a user interaction";
        let level = 1;
        if (inMute.get()) level = 0;
        op.setUiError("ctxSusp", errorText, level);
    }

    updateAudioStateButton();
}

function updateAudioStateButton()
{
    if (audioCtx.state == "suspended")
    {
        mute(true);
        if (inShowSusp.get())
        {
            isSuspended = true;

            if (CABLES.interActionNeededButton)
            {
                CABLES.interActionNeededButton.add(op.patch, "audiosuspended", () =>
                {
                    if (audioCtx && audioCtx.state == "suspended")
                    {
                        audioCtx.resume();
                        if (CABLES.interActionNeededButton)CABLES.interActionNeededButton.remove("audiosuspended");
                    }
                });
            }
        }
        else
        {
            if (CABLES.interActionNeededButton)CABLES.interActionNeededButton.remove("audiosuspended");
        }
    }
    else
    {
        if (CABLES.interActionNeededButton)CABLES.interActionNeededButton.remove("audiosuspended");

        if (isSuspended)
        {
            op.log("was suspended - set vol");
            setVolume();
        }
    }
}

}
};

CABLES.OPS["90b95403-b0c4-4980-ab3b-b6c354771c81"]={f:Ops.WebAudio.Output_v2,objName:"Ops.WebAudio.Output_v2"};




// **************************************************************
// 
// Ops.Team.ToneAudio.FeedbackDelay
// 
// **************************************************************

Ops.Team.ToneAudio.FeedbackDelay= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
// Feedback Delay using tone.js

const
    audioIn = op.inObject("Audio In", null, "audioNode"),
    inSyncBPM = op.inBool("Sync BPM", false),
    inBPM = op.inFloat("BPM", 100),
    inNoteDivision = op.inInt("Note Division", 4),
    inNoteType = op.inValueSelect("Type", ["normal", "dotted", "triplet"], "normal"),
    inDelayTime = op.inFloat("Delay Time", 0),
    inFeedback = op.inValueSlider("Feedback", 0),
    inWet = op.inValueSlider("Mix %", 0),
    inBypass = op.inBool("Bypass", false),
    audioOut = op.outObject("Audio Out", null, "audioNode");

op.name = "FeedbackDelay";

inBPM.setUiAttribs({ "greyout": true});
inNoteDivision.setUiAttribs({ "greyout": true});
inNoteType.setUiAttribs({ "greyout": true});

inSyncBPM.onChange = function()
{
    inBPM.setUiAttribs({ "greyout": !inSyncBPM.get() });
    inNoteDivision.setUiAttribs({ "greyout": !inSyncBPM.get() });
    inNoteType.setUiAttribs({ "greyout": !inSyncBPM.get() });
    inDelayTime.setUiAttribs({ "greyout": inSyncBPM.get() });

    update();
}

inBPM.onChange =
inNoteDivision.onChange =
inNoteType.onChange =
inDelayTime.onChange =
inFeedback.onChange =
inWet.onChange = update;

const audioCtx = CABLES.WEBAUDIO.createAudioContext(op);
Tone.setContext(audioCtx);

let fdbkDelay = new Tone.FeedbackDelay(0, 0);

let postMix = audioCtx.createGain();     // wet signal
let preMix = audioCtx.createGain();      // dry signal
let bypassSwitch = audioCtx.createGain(); // final output switch

fdbkDelay.connect(postMix);
postMix.connect(bypassSwitch);
preMix.connect(bypassSwitch);

audioOut.set(bypassSwitch);

inBypass.onChange = function ()
{
    if (inBypass.get()) {
        postMix.gain.value = 0;
        preMix.gain.value = 1;
    }
    else {
        postMix.gain.value = 1;
        preMix.gain.value = 0;
    }
}

function update()
{
    if (inBPM.get() < 0.1) inBPM.set(0.1);
    if (inNoteDivision.get() < 1) inNoteDivision.set(1);

    Tone.Transport.bpm.value = inBPM.get();

    if (inSyncBPM.get())
    {
        let timeValue = String(inNoteDivision.get());
        if (inNoteType.get() == "normal") timeValue = timeValue + "n";
        else if (inNoteType.get() == "dotted") timeValue = timeValue + "n.";
        else if (inNoteType.get() == "triplet") timeValue = timeValue + "t";
        fdbkDelay.delayTime.value = timeValue;
    }
    else
    {
        fdbkDelay.delayTime.value = inDelayTime.get();
    }

    fdbkDelay.feedback.value = inFeedback.get();

    fdbkDelay.wet.value = inWet.get();
}

let oldAudioIn = null;

audioIn.onChange = function ()
{
    if (!audioIn.get())
    {
        if (oldAudioIn)
        {
            try
            {
                if (oldAudioIn.disconnect)
                {
                    oldAudioIn.disconnect(fdbkDelay);
                    oldAudioIn.disconnect(preMix);
                }
            }
            catch (e)
            {
                op.log(e);
            }
        }

        audioOut.set(null);
    }
    else
    {
        if (audioIn.get().connect)
        {
            audioIn.get().connect(fdbkDelay);
            audioIn.get().connect(preMix);
        }
    }
    oldAudioIn = audioIn.get();
};
}
};

CABLES.OPS["956e0ce4-a9ff-428c-9103-275ad87495d6"]={f:Ops.Team.ToneAudio.FeedbackDelay,objName:"Ops.Team.ToneAudio.FeedbackDelay"};




// **************************************************************
// 
// Ops.Number.Integer
// 
// **************************************************************

Ops.Number.Integer= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    input = op.inInt("Integer", 0),
    output = op.outNumber("Number out");

input.onChange = function ()
{
    output.set(Math.floor(input.get()));
};

}
};

CABLES.OPS["17bc01d7-04ad-4aab-b88b-bb09744c4a69"]={f:Ops.Number.Integer,objName:"Ops.Number.Integer"};




// **************************************************************
// 
// Ops.String.SwitchStringMultiPort
// 
// **************************************************************

Ops.String.SwitchStringMultiPort= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    inIndex = op.inInt("Index", 0),
    inStrs = op.inMultiPort("Strings", CABLES.OP_PORT_TYPE_STRING),
    outResult = op.outString("String"),
    outNum = op.outNumber("Num Values");

inIndex.onChange =
inStrs.onChange = () =>
{
    const valuePorts = inStrs.get();
    const idx = Math.ceil(Math.min(valuePorts.length - 1, Math.max(0, inIndex.get())));

    outResult.set(valuePorts[idx].get());
    outNum.set(valuePorts.length);
};

}
};

CABLES.OPS["cf8a883f-cf09-44a6-ba1c-7f9c1220b618"]={f:Ops.String.SwitchStringMultiPort,objName:"Ops.String.SwitchStringMultiPort"};




// **************************************************************
// 
// Ops.Number.SwitchNumberOnTrigger
// 
// **************************************************************

Ops.Number.SwitchNumberOnTrigger= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    currentVal = op.outNumber("Value"),
    oldVal = op.outNumber("Last Value"),
    triggered = op.outTrigger("Triggered");

let triggers = [];
let inVals = [];
let inExes = [];

function onTrigger()
{
    oldVal.set(currentVal.get());
    currentVal.set(inVals[this.slot].get());
    triggered.trigger();
}

let num = 8;
for (let i = 0; i < num; i++)
{
    let newExe = op.addInPort(new CABLES.Port(op, "Trigger " + i, CABLES.OP_PORT_TYPE_FUNCTION));
    newExe.slot = i;
    newExe.onTriggered = onTrigger.bind(newExe);
    let newVal = op.addInPort(new CABLES.Port(op, "Value " + i, CABLES.OP_PORT_TYPE_VALUE));
    inVals.push(newVal);
}

let defaultVal = op.inValueString("Default Value");

currentVal.set(defaultVal.get());
oldVal.set(defaultVal.get());

defaultVal.onChange = function ()
{
    oldVal.set(currentVal.get());
    currentVal.set(defaultVal.get());
};

}
};

CABLES.OPS["338032c5-bf47-454b-8ae1-cd91f17e5c5b"]={f:Ops.Number.SwitchNumberOnTrigger,objName:"Ops.Number.SwitchNumberOnTrigger"};




// **************************************************************
// 
// Ops.Patch.PhORckJ.MeSpeak
// 
// **************************************************************

Ops.Patch.PhORckJ.MeSpeak= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
// MeSpeak JS

const voices =
[
    "ca (Catalan)",
    "cs (Czech)",
    "de (German)",
    "el (Greek)",
    "en/en (English)",
    "en/en-n (English, regional)",
    "en/en-rp (English, regional)",
    "en/en-sc (English, Scottish)",
    "en/en-us (English, US)",
    "en/en-wm (English, regional)",
    "eo (Esperanto)",
    "es (Spanish)",
    "es-la (Spanish, Latin America)",
    "fi (Finnish)",
    "fr (French)",
    "hu (Hungarian)",
    "it (Italian)",
    "kn (Kannada)",
    "la (Latin)",
    "lv (Latvian)",
    "nl (Dutch)",
    "pl (Polish)",
    "pt (Portuguese, Brazil)",
    "pt-pt (Portuguese, European)",
    "ro (Romanian)",
    "sk (Slovak)",
    "sv (Swedish)",
    "tr (Turkish)",
    "zh (Mandarin Chinese, Pinyin)",
    "zh-yue (Cantonese Chinese, Provisional)"
];

const enPath = "en.json";

const variants =
[
    "none",
    "f1",
    "f2",
    "f3",
    "f4",
    "f5", //for female voices
    "m1",
    "m2",
    "m3",
    "m4",
    "m5",
    "m6",
    "m7", //for male voices
    "croak",
    "klatt",
    "klatt2",
    "klatt3",
    "whisper",
    "whisperf"
];

const
    text = op.inString("Text", "Hello"),
    say = op.inTriggerButton("Say"),
    amplitude = op.inFloatSlider("Amplitude", 1),
    pitch = op.inFloatSlider("Pitch", 0.5),
    speed = op.inInt("Speed (WPM)", 175),
    voice = op.inValueSelect("Voice", voices, "en/en (English)"),
    wordGap = op.inInt("Word Gap", 0),
    variant = op.inValueSelect("Variants", variants, "none"),
    lineBreak = op.inInt("Line-break length", 0),
    capitals = op.inInt("Capitals", 0),
    punct = op.inString("Punctuation", "False"),
    noStop = op.inBool("No Stop", 0),
    utf16 = op.inBool("UTF16", 0),
    ssml = op.inBool("SSML", 0),

    //volume = op.inFloatSlider("Volume", 1),
    speakLog = op.inBool("Log Console", 0),
    pan = op.inFloatSlider("Pan", 0.5), // remap values
    //rawData = op.inValueSelect("Raw Data", ["null", "base64", "mime", "array", "default"], "null"),
    //callback = op.inString("Callback Function"),
    //callbackID = op.inInt("Callback ID"),


    audioOutPort = op.outObject("Audio Out", null, "audioNode"),
    voicePlaying = op.outBool("Speaking", 0),
    voiceLoaded = op.outBool("Voice Loaded", 0);

voice.setUiAttribs({ "greyout": true}); // needs update yo add other voices
                                                /*voice.onChange = function ()
                                                {
                                                    let voiceID = voice.get().replace(/\s*\(.*?\)\s*//*g, '');
                                                    /*meSpeak.loadVoice(voiceID);
                                                };*/

// audio objects
const audioCtx = CABLES.WEBAUDIO.createAudioContext(op);
const gainNode = audioCtx.createGain();
let audiostream;

// soluion 1
/*fetch(op.patch.getFilePath(op.patch.getAssetPath() + "mespeak-core.js")) // Or load from your OP's embedded assets
  .then(response => response.text())
  .then(coreScript => {
    const blob = new Blob([coreScript], { type: "application/javascript" });
    const blobURL = URL.createObjectURL(blob);

    meSpeak.workerUrl = blobURL;
  });*/


//soultion 2
//meSpeak.restartWithInstance();

//solution 3
/*
function loadScript(src) {
    return new Promise((resolve, reject) => {
        const s = document.createElement('script');
        s.src = src;
        s.onload = resolve;
        s.onerror = reject;
        document.head.appendChild(s);
    });
}

loadScript(op.patch.getFilePath(op.patch.getAssetPath() + "mespeak.js")).then(() => {
    // Now mespeak is available
    fetch(op.patch.getFilePath(op.patch.getAssetPath() + "mespeak-core.js"))
        .then(response => response.text())
        .then(coreScript => {
            const blob = new Blob([coreScript], { type: "application/javascript" });
            const blobURL = URL.createObjectURL(blob);
            meSpeak.workerUrl = blobURL;
        });
}).catch(err => {
    console.error("Failed to load mespeak.js", err);
});*/


// on start function calls
loadVoice().then(cacheAudio).catch(error =>
{
    op.log("Error loading voice: " + error.message);
});


// port change calls

const debouncedCacheAudio = debounce(cacheAudio, 100);

text.onChange = debouncedCacheAudio;
amplitude.onChange = debouncedCacheAudio;
pitch.onChange = debouncedCacheAudio;
speed.onChange = debouncedCacheAudio;
wordGap.onChange = debouncedCacheAudio;
variant.onChange = debouncedCacheAudio;
lineBreak.onChange = debouncedCacheAudio;
capitals.onChange = debouncedCacheAudio;
punct.onChange = debouncedCacheAudio;
noStop.onChange = debouncedCacheAudio;
utf16.onChange = debouncedCacheAudio;
ssml.onChange = debouncedCacheAudio;
speakLog.onChange = debouncedCacheAudio;
pan.onChange = debouncedCacheAudio;

say.onTriggered = playAudio;

//meSpeak.restartWithInstance();
op.log("Run mode:", meSpeak.getRunMode());
//functions

function loadVoice()
{
    voiceLoaded.set(false);
    return new Promise((resolve, reject) =>
    {
        meSpeak.loadVoice(enPath, function(success, msg)
        {
            op.log(success ? "Voice loaded" : "Voice failed: " + msg);
            voiceLoaded.set(success);

        });
    });
}

function cacheAudio()
{
    const options = {
        'amplitude': parseInt(100*amplitude.get()),
        'pitch': parseInt(100*pitch.get()),
        'speed': speed.get(),
        //'voice': voiceID,
        'wordgap': wordGap.get(),
        'variant': variant.get() === "none" ? undefined : variant.get(),
        'linebreak': lineBreak.get(),
        'capitals': capitals.get(),
        'punct': punct.get(),
        'nostop': noStop.get(),
        'utf16': utf16.get(),
        'ssml': ssml.get(),

        'log': speakLog.get(),
        'pan': pan.get(),
        'rawdata': true
    };

    // for caching and playing back audio streams
    meSpeak.speak(text.get(), options, function(success, id, stream) {
        // data is ArrayBuffer of 8-bit uint
        audiostream = stream;
    });
}
function debounce(fn, delay)
{
    let timeoutId;
    return function(...args)
    {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => fn.apply(this, args), delay);
    };
}

function playAudio ()
{
    const stream = audiostream;
    if (!stream)
    {
        op.log("audiostream is undefined!");
        return;
    }

    voicePlaying.set(true);

    const clonedBuffer = stream.slice(0);

    audioCtx.decodeAudioData(clonedBuffer)
    .then(audioBuffer =>
    {
        const source = audioCtx.createBufferSource();
        source.buffer = audioBuffer;


        const vol = typeof volume === 'number' && isFinite(volume) ? volume : 1.0;
        gainNode.gain.value = vol;

        source.connect(gainNode);
        audioOutPort.set(gainNode);
        source.start();

        // Register callback
        source.onended = function () { voicePlaying.set(false); };
    })
    .catch(error =>
    {
        op.log("Error decoding audio data:");
        voicePlaying.set(false);
    });
}
}
};

CABLES.OPS["062f3b4d-1ab0-41c3-bb46-0b81243b028e"]={f:Ops.Patch.PhORckJ.MeSpeak,objName:"Ops.Patch.PhORckJ.MeSpeak"};




// **************************************************************
// 
// Ops.Number.DelayNumberSimple
// 
// **************************************************************

Ops.Number.DelayNumberSimple= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    val = op.inValue("Value"),
    de = op.inValue("Delay", 1),
    outVal = op.outNumber("Out Value");

let timeout = -1;

val.onChange = update;
de.onChange = update;

function update()
{
    clearTimeout(timeout);
    let v = val.get();
    timeout = setTimeout(function ()
    {
        outVal.set(v);
    }, de.get() * 1000);
}

}
};

CABLES.OPS["89ea7e9c-0dfb-4e1e-8e61-4e79112ee533"]={f:Ops.Number.DelayNumberSimple,objName:"Ops.Number.DelayNumberSimple"};




// **************************************************************
// 
// Ops.Html.Utils.LoadingIndicator
// 
// **************************************************************

Ops.Html.Utils.LoadingIndicator= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"css_ellipsis_css":".lds-ellipsis {\n\n}\n.lds-ellipsis div {\n  position: absolute;\n  /*top: 33px;*/\n  margin-top:-12px;\n  margin-left:-13px;\n  width: 13px;\n  height: 13px;\n  border-radius: 50%;\n  background: #fff;\n  animation-timing-function: cubic-bezier(0, 1, 1, 0);\n}\n.lds-ellipsis div:nth-child(1) {\n  left: 8px;\n  animation: lds-ellipsis1 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(2) {\n  left: 8px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(3) {\n  left: 32px;\n  animation: lds-ellipsis2 0.6s infinite;\n}\n.lds-ellipsis div:nth-child(4) {\n  left: 56px;\n  animation: lds-ellipsis3 0.6s infinite;\n}\n@keyframes lds-ellipsis1 {\n  0% {\n    transform: scale(0);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes lds-ellipsis3 {\n  0% {\n    transform: scale(1);\n  }\n  100% {\n    transform: scale(0);\n  }\n}\n@keyframes lds-ellipsis2 {\n  0% {\n    transform: translate(0, 0);\n  }\n  100% {\n    transform: translate(24px, 0);\n  }\n}\n","css_ring_css":".lds-ring {\n}\n.lds-ring div {\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  border: 3px solid #fff;\n  border-radius: 50%;\n  animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n  border-color: #fff transparent transparent transparent;\n}\n.lds-ring div:nth-child(1) {\n  animation-delay: -0.45s;\n}\n.lds-ring div:nth-child(2) {\n  animation-delay: -0.3s;\n}\n.lds-ring div:nth-child(3) {\n  animation-delay: -0.15s;\n}\n@keyframes lds-ring {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n","css_spinner_css":"._cables_spinner {\n  /*width: 40px;*/\n  /*height: 40px;*/\n  /*margin: 100px auto;*/\n  background-color: #777;\n\n  border-radius: 100%;\n  -webkit-animation: sk-scaleout 1.0s infinite ease-in-out;\n  animation: sk-scaleout 1.0s infinite ease-in-out;\n}\n\n@-webkit-keyframes sk-scaleout {\n  0% { -webkit-transform: scale(0) }\n  100% {\n    -webkit-transform: scale(1.0);\n    opacity: 0;\n  }\n}\n\n@keyframes sk-scaleout {\n  0% {\n    -webkit-transform: scale(0);\n    transform: scale(0);\n  } 100% {\n    -webkit-transform: scale(1.0);\n    transform: scale(1.0);\n    opacity: 0;\n  }\n}",};
const
    inVisible = op.inBool("Visible", true),
    inStyle = op.inSwitch("Style", ["Spinner", "Ring", "Ellipsis"], "Ring");

const div = document.createElement("div");
div.dataset.op = op.id;
const canvas = op.patch.cgl.canvas.parentElement;

inStyle.onChange = updateStyle;

div.appendChild(document.createElement("div"));
div.appendChild(document.createElement("div"));
div.appendChild(document.createElement("div"));

const size = 50;

div.style.width = size + "px";
div.style.height = size + "px";
div.style.top = "50%";
div.style.left = "50%";
div.style["pointer-events"] = "none";

div.style["margin-left"] = "-" + size / 2 + "px";
div.style["margin-top"] = "-" + size / 2 + "px";

div.style.position = "absolute";
div.style["z-index"] = "9999999";

inVisible.onChange = updateVisible;

let eleId = "css_loadingicon_" + CABLES.uuid();

const styleEle = document.createElement("style");
styleEle.type = "text/css";
styleEle.id = eleId;

let head = document.getElementsByTagName("body")[0];
head.appendChild(styleEle);

op.onDelete = () =>
{
    remove();
    if (styleEle)styleEle.remove();
};

canvas.appendChild(div);
updateStyle();

function updateStyle()
{
    const st = inStyle.get();
    if (st == "Spinner")
    {
        div.classList.add("_cables_spinner");
        styleEle.textContent = attachments.css_spinner_css;
    }
    else div.classList.remove("_cables_spinner");

    if (st == "Ring")
    {
        div.classList.add("lds-ring");
        styleEle.textContent = attachments.css_ring_css;
    }
    else div.classList.remove("lds-ring");

    if (st == "Ellipsis")
    {
        div.classList.add("lds-ellipsis");
        styleEle.textContent = attachments.css_ellipsis_css;
    }
    else div.classList.remove("lds-ellipsis");
}

function remove()
{
    div.remove();
}

function updateVisible()
{
    // remove();
    // if (inVisible.get()) canvas.appendChild(div);

    // div.style.display = inVisible.get() ? "block" : "none";
    div.style.opacity = inVisible.get() ? 1 : 0;
}

}
};

CABLES.OPS["e102834c-6dcf-459c-9e22-44ebccfc0d3b"]={f:Ops.Html.Utils.LoadingIndicator,objName:"Ops.Html.Utils.LoadingIndicator"};




// **************************************************************
// 
// Ops.Gl.Meshes.FullscreenRectangle_v2
// 
// **************************************************************

Ops.Gl.Meshes.FullscreenRectangle_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"shader_frag":"UNI sampler2D tex;\nIN vec2 texCoord;\n\nvoid main()\n{\n    outColor= texture(tex,texCoord);\n}\n\n","shader_vert":"{{MODULES_HEAD}}\n\nIN vec3 vPosition;\nUNI mat4 projMatrix;\nUNI mat4 mvMatrix;\n\nOUT vec2 texCoord;\nIN vec2 attrTexCoord;\n\nvoid main()\n{\n   vec4 pos=vec4(vPosition,  1.0);\n\n   texCoord=vec2(attrTexCoord.x,(1.0-attrTexCoord.y));\n\n   gl_Position = projMatrix * mvMatrix * pos;\n}\n",};
const
    render = op.inTrigger("render"),
    inScale = op.inSwitch("Scale", ["Stretch", "Fit"], "Fit"),
    flipY = op.inValueBool("Flip Y"),
    flipX = op.inValueBool("Flip X"),
    inTexture = op.inTexture("Texture"),
    trigger = op.outTrigger("trigger");

const cgl = op.patch.cgl;
let mesh = null;
let geom = new CGL.Geometry("fullscreen rectangle");
let x = 0, y = 0, w = 0, h = 0;

op.toWorkShouldNotBeChild("Ops.Gl.TextureEffects.ImageCompose", CABLES.OP_PORT_TYPE_FUNCTION);
op.toWorkPortsNeedToBeLinked(render);

flipX.onChange = rebuildFlip;
flipY.onChange = rebuildFlip;
render.onTriggered = doRender;
inTexture.onLinkChanged = updateUi;
inScale.onChange = updateScale;

const shader = new CGL.Shader(cgl, "fullscreenrectangle", this);
shader.setModules(["MODULE_VERTEX_POSITION", "MODULE_COLOR", "MODULE_BEGIN_FRAG"]);

shader.setSource(attachments.shader_vert, attachments.shader_frag);
shader.fullscreenRectUniform = new CGL.Uniform(shader, "t", "tex", 0);
shader.aspectUni = new CGL.Uniform(shader, "f", "aspectTex", 0);

let useShader = false;
let updateShaderLater = true;
let fitImageAspect = false;

updateUi();
updateScale();

inTexture.onChange = function ()
{
    updateShaderLater = true;
};

function updateUi()
{
    if (!CABLES.UI) return;
    flipY.setUiAttribs({ "greyout": !inTexture.isLinked() });
    flipX.setUiAttribs({ "greyout": !inTexture.isLinked() });
    inScale.setUiAttribs({ "greyout": !inTexture.isLinked() });
}

function updateShader()
{
    let tex = inTexture.get();
    if (tex) useShader = true;
    else useShader = false;
}

op.preRender = function ()
{
    updateShader();
    shader.bind();
    if (mesh)mesh.render(shader);
    doRender();
};

function updateScale()
{
    fitImageAspect = inScale.get() == "Fit";
}

function doRender()
{
    if (cgl.viewPort[2] != w || cgl.viewPort[3] != h || !mesh) rebuild();

    if (updateShaderLater) updateShader();

    cgl.pushPMatrix();
    mat4.identity(cgl.pMatrix);
    mat4.ortho(cgl.pMatrix, 0, w, h, 0, -10.0, 1000);

    cgl.pushModelMatrix();
    mat4.identity(cgl.mMatrix);

    cgl.pushViewMatrix();
    mat4.identity(cgl.vMatrix);

    if (fitImageAspect && inTexture.get())
    {
        const rat = inTexture.get().width / inTexture.get().height;

        let _h = h;
        let _w = h * rat;

        if (_w > w)
        {
            _h = w * 1 / rat;
            _w = w;
        }

        cgl.pushViewPort((w - _w) / 2, (h - _h) / 2, _w, _h);
    }

    if (useShader)
    {
        if (inTexture.get()) cgl.setTexture(0, inTexture.get().tex);
        mesh.render(shader);
    }
    else
    {
        mesh.render(cgl.getShader());
    }

    cgl.gl.clear(cgl.gl.DEPTH_BUFFER_BIT);

    cgl.popPMatrix();
    cgl.popModelMatrix();
    cgl.popViewMatrix();

    if (fitImageAspect && inTexture.get()) cgl.popViewPort();

    trigger.trigger();
}

function rebuildFlip()
{
    mesh = null;
}

function rebuild()
{
    if (cgl.viewPort[2] == w && cgl.viewPort[3] == h && mesh) return;

    let xx = 0, xy = 0;

    w = cgl.viewPort[2];
    h = cgl.viewPort[3];

    geom.vertices = new Float32Array([
        xx + w, xy + h, 0.0,
        xx, xy + h, 0.0,
        xx + w, xy, 0.0,
        xx, xy, 0.0
    ]);

    let tc = null;

    if (flipY.get())
        tc = new Float32Array([
            1.0, 0.0,
            0.0, 0.0,
            1.0, 1.0,
            0.0, 1.0
        ]);
    else
        tc = new Float32Array([
            1.0, 1.0,
            0.0, 1.0,
            1.0, 0.0,
            0.0, 0.0
        ]);

    if (flipX.get())
    {
        tc[0] = 0.0;
        tc[2] = 1.0;
        tc[4] = 0.0;
        tc[6] = 1.0;
    }

    geom.setTexCoords(tc);

    geom.verticesIndices = new Uint16Array([
        2, 1, 0,
        3, 1, 2
    ]);

    geom.vertexNormals = new Float32Array([
        0, 0, 1,
        0, 0, 1,
        0, 0, 1,
        0, 0, 1,
    ]);
    geom.tangents = new Float32Array([
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0,
        -1, 0, 0]);
    geom.biTangents == new Float32Array([
        0, -1, 0,
        0, -1, 0,
        0, -1, 0,
        0, -1, 0]);

    if (!mesh) mesh = new CGL.Mesh(cgl, geom);
    else mesh.setGeom(geom);
}

}
};

CABLES.OPS["fb70721a-eac2-4ff5-a5a2-5c59e2393972"]={f:Ops.Gl.Meshes.FullscreenRectangle_v2,objName:"Ops.Gl.Meshes.FullscreenRectangle_v2"};




// **************************************************************
// 
// Ops.Boolean.Not
// 
// **************************************************************

Ops.Boolean.Not= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={};
const
    bool = op.inValueBool("Boolean"),
    outbool = op.outBoolNum("Result");

bool.changeAlways = true;

bool.onChange = function ()
{
    outbool.set((!bool.get()));
};

}
};

CABLES.OPS["6d123c9f-7485-4fd9-a5c2-76e59dcbeb34"]={f:Ops.Boolean.Not,objName:"Ops.Boolean.Not"};




// **************************************************************
// 
// Ops.Gl.Meshes.TextMesh_v2
// 
// **************************************************************

Ops.Gl.Meshes.TextMesh_v2= class extends CABLES.Op 
{
constructor()
{
super(...arguments);
const op=this;
const attachments=op.attachments={"textmesh_frag":"{{MODULES_HEAD}}\n\n#define INSTANCING\n\nUNI sampler2D tex;\n#ifdef DO_MULTEX\n    UNI sampler2D texMul;\n#endif\n#ifdef DO_MULTEX_MASK\n    UNI sampler2D texMulMask;\n#endif\nIN vec2 texCoord;\nIN vec2 texPos;\nUNI float r;\nUNI float g;\nUNI float b;\nUNI float a;\n\nflat IN float frag_instIndex;\n\nvoid main()\n{\n    {{MODULE_BEGIN_FRAG}}\n\n    vec4 col=texture(tex,texCoord);\n    col.a=col.r;\n    col.r*=r;\n    col.g*=g;\n    col.b*=b;\n    col*=a;\n\n    if(col.a==0.0)discard;\n\n    #ifdef DO_MULTEX\n        col*=texture(texMul,texPos);\n    #endif\n\n    #ifdef DO_MULTEX_MASK\n        col*=texture(texMulMask,texPos).r;\n    #endif\n\n    {{MODULE_COLOR}}\n\n    outColor=col;\n}","textmesh_vert":"{{MODULES_HEAD}}\n\nUNI sampler2D tex;\nUNI mat4 projMatrix;\nUNI mat4 modelMatrix;\nUNI mat4 viewMatrix;\nUNI float scale;\nIN vec3 vPosition;\nIN vec2 attrTexCoord;\nIN mat4 instMat;\nIN vec2 attrTexOffsets;\nIN vec2 attrTexSize;\nIN vec2 attrTexPos;\nIN float attrVertIndex;\nIN float instanceIndex;\nflat OUT float frag_instIndex;\n\nOUT vec2 texPos;\n\nOUT vec2 texCoord;\nOUT vec4 modelPos;\n\nvoid main()\n{\n\n    texCoord=(attrTexCoord*(attrTexSize)) + attrTexOffsets;\n    mat4 instMVMat=instMat;\n    instMVMat[3][0]*=scale;\n\n    texPos=attrTexPos;\n\n    vec4 pos=vec4( vPosition.x*(attrTexSize.x/attrTexSize.y)*scale,vPosition.y*scale,vPosition.z*scale, 1. );\n\n    mat4 mvMatrix=viewMatrix * modelMatrix * instMVMat;\n    frag_instIndex=instanceIndex;\n\n    {{MODULE_VERTEX_POSITION}}\n\n    gl_Position = projMatrix * mvMatrix * pos;\n}\n\n",};
const
    render = op.inTrigger("Render"),
    str = op.inString("Text", "cables"),
    scaleText = op.inFloat("Scale Text", 1),
    scale = op.inValueFloat("Scale", 1),
    inFont = op.inString("Font", "Arial"),
    align = op.inValueSelect("align", ["left", "center", "right"], "center"),
    valign = op.inValueSelect("vertical align", ["Top", "Middle", "Bottom"], "Middle"),
    lineHeight = op.inValueFloat("Line Height", 1),
    letterSpace = op.inValueFloat("Letter Spacing"),

    tfilter = op.inSwitch("filter", ["nearest", "linear", "mipmap"], "mipmap"),
    aniso = op.inSwitch("Anisotropic", [0, 1, 2, 4, 8, 16], 0),

    inMulTex = op.inTexture("Texture Color"),
    inMulTexMask = op.inTexture("Texture Mask"),
    next = op.outTrigger("Next"),
    textureOut = op.outTexture("texture"),
    outLines = op.outNumber("Total Lines", 0),
    outWidth = op.outNumber("Width", 0),
    loaded = op.outBoolNum("Font Available", 0);

const cgl = op.patch.cgl;
const vScale = vec3.create();

vec3.set(vScale, 1, 1, 1);

op.toWorkPortsNeedToBeLinked(render);

op.setPortGroup("Masking", [inMulTex, inMulTexMask]);

scale.setUiAttribs({ "title": "Line Scale" });

textureOut.setUiAttribs({ "hidePort": true });

const textureSize = 1024;
let fontLoaded = false;
let needUpdate = true;

align.onChange =
    str.onChange =
    lineHeight.onChange = generateMeshLater;

function generateMeshLater()
{
    needUpdate = true;
}

let canvasid = null;
CABLES.OpTextureMeshCanvas = {};
let valignMode = 0;

const geom = null;
let mesh = null;

let createMesh = true;
let createTexture = true;

op.onDelete = function () { if (mesh)mesh.dispose(); };

scaleText.onChange = () =>
{
    vec3.set(vScale, scaleText.get(), scaleText.get(), scaleText.get());
};

aniso.onChange =
tfilter.onChange = () =>
{
    getFont().texture = null;
    createTexture = true;
};

inMulTexMask.onChange =
inMulTex.onChange = function ()
{
    shader.toggleDefine("DO_MULTEX", inMulTex.get());
    shader.toggleDefine("DO_MULTEX_MASK", inMulTexMask.get());
};

textureOut.setRef(null);
inFont.onChange = function ()
{
    createTexture = true;
    createMesh = true;
    checkFont();
};

op.patch.on("fontLoaded", (fontName) =>
{
    if (fontName == inFont.get())
    {
        createTexture = true;
        createMesh = true;
    }
});

function checkFont()
{
    const oldFontLoaded = fontLoaded;
    try
    {
        fontLoaded = document.fonts.check("20px \"" + inFont.get() + "\"");
    }
    catch (ex)
    {
        op.logError(ex);
    }

    if (!oldFontLoaded && fontLoaded)
    {
        loaded.set(true);
        createTexture = true;
        createMesh = true;
    }

    if (!fontLoaded) setTimeout(checkFont, 250);
}

valign.onChange = function ()
{
    if (valign.get() == "Middle")valignMode = 0;
    else if (valign.get() == "Top")valignMode = 1;
    else if (valign.get() == "Bottom")valignMode = 2;
};

function getFont()
{
    canvasid = "" + inFont.get();
    if (CABLES.OpTextureMeshCanvas.hasOwnProperty(canvasid))
        return CABLES.OpTextureMeshCanvas[canvasid];

    const fontImage = document.createElement("canvas");
    fontImage.dataset.font = inFont.get();
    fontImage.id = "texturetext_" + CABLES.generateUUID();
    fontImage.style.display = "none";
    const body = document.getElementsByTagName("body")[0];
    body.appendChild(fontImage);
    const _ctx = fontImage.getContext("2d");
    CABLES.OpTextureMeshCanvas[canvasid] =
        {
            "ctx": _ctx,
            "canvas": fontImage,
            "chars": {},
            "characters": "",
            "fontSize": 320
        };
    return CABLES.OpTextureMeshCanvas[canvasid];
}

op.onDelete = function ()
{
    if (canvasid && CABLES.OpTextureMeshCanvas[canvasid])
        CABLES.OpTextureMeshCanvas[canvasid].canvas.remove();
};

const shader = new CGL.Shader(cgl, "TextMesh", this);
shader.setSource(attachments.textmesh_vert, attachments.textmesh_frag);
const uniTex = new CGL.Uniform(shader, "t", "tex", 0);
const uniTexMul = new CGL.Uniform(shader, "t", "texMul", 1);
const uniTexMulMask = new CGL.Uniform(shader, "t", "texMulMask", 2);
const uniScale = new CGL.Uniform(shader, "f", "scale", scale);

const
    r = op.inValueSlider("r", 1),
    g = op.inValueSlider("g", 1),
    b = op.inValueSlider("b", 1),
    a = op.inValueSlider("a", 1),
    runiform = new CGL.Uniform(shader, "f", "r", r),
    guniform = new CGL.Uniform(shader, "f", "g", g),
    buniform = new CGL.Uniform(shader, "f", "b", b),
    auniform = new CGL.Uniform(shader, "f", "a", a);
r.setUiAttribs({ "colorPick": true });

op.setPortGroup("Display", [scale, inFont]);
op.setPortGroup("Alignment", [align, valign]);
op.setPortGroup("Color", [r, g, b, a]);

let height = 0;
const vec = vec3.create();
let lastTextureChange = -1;
let disabled = false;

render.onTriggered = function ()
{
    if (needUpdate)
    {
        generateMesh();
        needUpdate = false;
    }
    const font = getFont();
    if (font.lastChange != lastTextureChange)
    {
        createMesh = true;
        lastTextureChange = font.lastChange;
    }

    if (createTexture) generateTexture();
    if (createMesh) generateMesh();

    if (mesh && mesh.numInstances > 0)
    {
        cgl.pushBlendMode(CGL.BLEND_NORMAL, true);
        cgl.pushShader(shader);
        cgl.setTexture(0, textureOut.get().tex);

        const mulTex = inMulTex.get();
        if (mulTex)cgl.setTexture(1, mulTex.tex);

        const mulTexMask = inMulTexMask.get();
        if (mulTexMask)cgl.setTexture(2, mulTexMask.tex);

        if (valignMode === 2) vec3.set(vec, 0, height, 0);
        else if (valignMode === 1) vec3.set(vec, 0, 0, 0);
        else if (valignMode === 0) vec3.set(vec, 0, height / 2, 0);

        vec[1] -= lineHeight.get();
        cgl.pushModelMatrix();
        mat4.translate(cgl.mMatrix, cgl.mMatrix, vec);
        mat4.scale(cgl.mMatrix, cgl.mMatrix, vScale);

        if (!disabled)mesh.render(cgl.getShader());

        cgl.popModelMatrix();

        cgl.setTexture(0, null);
        cgl.popShader();
        cgl.popBlendMode();
    }

    next.trigger();
};

letterSpace.onChange = function ()
{
    createMesh = true;
};

function generateMesh()
{
    const theString = String(str.get() + "");
    if (!textureOut.get()) return;

    const font = getFont();
    if (!font.geom)
    {
        font.geom = new CGL.Geometry("textmesh");

        font.geom.vertices = [
            1.0, 1.0, 0.0,
            0.0, 1.0, 0.0,
            1.0, 0.0, 0.0,
            0.0, 0.0, 0.0
        ];

        font.geom.texCoords = new Float32Array([
            1.0, 1.0,
            0.0, 1.0,
            1.0, 0.0,
            0.0, 0.0
        ]);

        font.geom.verticesIndices = [
            0, 1, 2,
            2, 1, 3
        ];
    }

    if (!mesh)mesh = new CGL.Mesh(cgl, font.geom);

    const strings = (theString).split("\n");
    outLines.set(strings.length);

    const transformations = [];
    const tcOffsets = [];
    const tcSize = [];
    const texPos = [];
    const m = mat4.create();
    let charCounter = 0;
    let maxWidth = 0;
    createTexture = false;

    for (let s = 0; s < strings.length; s++)
    {
        const txt = strings[s];
        const numChars = txt.length;

        let pos = 0;
        let offX = 0;
        let width = 0;

        for (let i = 0; i < numChars; i++)
        {
            const chStr = txt.substring(i, i + 1);
            const char = font.chars[String(chStr)];
            if (char)
            {
                width += (char.texCoordWidth / char.texCoordHeight);
                width += letterSpace.get();
            }
        }

        width -= letterSpace.get();

        height = 0;

        if (align.get() == "left") offX = 0;
        else if (align.get() == "right") offX = width;
        else if (align.get() == "center") offX = width / 2;

        height = (s + 1) * lineHeight.get();

        for (let i = 0; i < numChars; i++)
        {
            const chStr = txt.substring(i, i + 1);
            const char = font.chars[String(chStr)];

            if (!char)
            {
                createTexture = true;
                return;
            }
            else
            {
                texPos.push(pos / width * 0.99 + 0.005, (1.0 - (s / (strings.length - 1))) * 0.99 + 0.005);
                tcOffsets.push(char.texCoordX, 1 - char.texCoordY - char.texCoordHeight);
                tcSize.push(char.texCoordWidth, char.texCoordHeight);

                mat4.identity(m);
                mat4.translate(m, m, [pos - offX, 0 - s * lineHeight.get(), 0]);

                pos += (char.texCoordWidth / char.texCoordHeight) + letterSpace.get();
                maxWidth = Math.max(maxWidth, pos - offX);

                transformations.push(Array.prototype.slice.call(m));

                charCounter++;
            }
        }
    }

    const transMats = [].concat.apply([], transformations);

    disabled = false;
    if (transMats.length == 0)disabled = true;

    const n = transMats.length / 16;
    mesh.setNumInstances(n);

    if (mesh.numInstances == 0)
    {
        disabled = true;
        return;
    }

    outWidth.set(maxWidth * scale.get());
    mesh.setAttribute("instMat", new Float32Array(transMats), 16, { "instanced": true });
    mesh.setAttribute("attrTexOffsets", new Float32Array(tcOffsets), 2, { "instanced": true });
    mesh.setAttribute("attrTexSize", new Float32Array(tcSize), 2, { "instanced": true });
    mesh.setAttribute("attrTexPos", new Float32Array(texPos), 2, { "instanced": true });

    createMesh = false;

    if (createTexture) generateTexture();
}

function printChars(fontSize, simulate)
{
    const font = getFont();
    if (!simulate) font.chars = {};

    const ctx = font.ctx;

    ctx.font = fontSize + "px " + inFont.get();
    ctx.textAlign = "left";

    let posy = 0;
    let posx = 0;
    const lineHeight = fontSize * 1.4;
    const result =
        {
            "fits": true
        };

    for (let i = 0; i < font.characters.length; i++)
    {
        const chStr = String(font.characters.substring(i, i + 1));
        const chWidth = (ctx.measureText(chStr).width);

        if (posx + chWidth >= textureSize)
        {
            posy += lineHeight + 2;
            posx = 0;
        }

        if (!simulate)
        {
            font.chars[chStr] =
                {
                    "str": chStr,
                    "texCoordX": posx / textureSize,
                    "texCoordY": posy / textureSize,
                    "texCoordWidth": chWidth / textureSize,
                    "texCoordHeight": lineHeight / textureSize,
                };

            ctx.fillText(chStr, posx, posy + fontSize);
        }

        posx += chWidth + 12;
    }

    if (posy > textureSize - lineHeight)
    {
        result.fits = false;
    }

    result.spaceLeft = textureSize - posy;

    return result;
}

function generateTexture()
{
    let filter = CGL.Texture.FILTER_LINEAR;
    if (tfilter.get() == "nearest") filter = CGL.Texture.FILTER_NEAREST;
    if (tfilter.get() == "mipmap") filter = CGL.Texture.FILTER_MIPMAP;

    const font = getFont();
    let string = String(str.get());
    if (string == null || string == undefined)string = "";
    for (let i = 0; i < string.length; i++)
    {
        const ch = string.substring(i, i + 1);
        if (font.characters.indexOf(ch) == -1)
        {
            font.characters += ch;
            createTexture = true;
        }
    }

    const ctx = font.ctx;
    font.canvas.width = font.canvas.height = textureSize;

    if (!font.texture)
        font.texture = CGL.Texture.createFromImage(cgl, font.canvas, {
            "filter": filter,
            "anisotropic": parseFloat(aniso.get())
        });

    font.texture.setSize(textureSize, textureSize);

    ctx.fillStyle = "transparent";
    ctx.clearRect(0, 0, textureSize, textureSize);
    ctx.fillStyle = "rgba(255,255,255,255)";

    let fontSize = font.fontSize + 40;
    let simu = printChars(fontSize, true);

    while (!simu.fits)
    {
        fontSize -= 5;
        simu = printChars(fontSize, true);
    }

    printChars(fontSize, false);

    ctx.restore();

    font.texture.initTexture(font.canvas, filter);
    font.texture.unpackAlpha = true;
    textureOut.setRef(font.texture);

    font.lastChange = CABLES.now();

    createMesh = true;
    createTexture = false;
}

}
};

CABLES.OPS["2390f6b3-2122-412e-8c8d-5c2f574e8bd1"]={f:Ops.Gl.Meshes.TextMesh_v2,objName:"Ops.Gl.Meshes.TextMesh_v2"};



window.addEventListener('load', function(event) {
CABLES.jsLoaded=new Event('CABLES.jsLoaded');
document.dispatchEvent(CABLES.jsLoaded);
});
// start js/tone.js
(function(root, factory){

	//UMD
	if ( typeof define === "function" && define.amd ) {
		define(function() {
			return factory();
		});
	} else if (typeof module === "object" && module.exports) {
		module.exports = factory();
 	} else {
		root.Tone = factory();
	}

}(this, function(){

	"use strict";
	
	var Tone;
	//constructs the main Tone object
	function Main(func){
		Tone = func();
	}
	//invokes each of the modules with the main Tone object as the argument
	function Module(func){
		func(Tone);
	}	/**
	 *  Tone.js
	 *  @author Yotam Mann
	 *  @license http://opensource.org/licenses/MIT MIT License
	 *  @copyright 2014-2018 Yotam Mann
	 */
	Main(function () {
	    
	    ///////////////////////////////////////////////////////////////////////////
	    //	TONE
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  @class  Tone is the base class of all other classes.
		 *  @constructor
		 */
	    var Tone = function () {
	        if (!(this instanceof Tone)) {
	            throw new Error('constructor needs to be called with the \'new\' keyword');
	        }
	    };
	    /**
		 *  @memberOf Tone#
		 *  @returns {String} returns the name of the class as a string
		 */
	    Tone.prototype.toString = function () {
	        for (var className in Tone) {
	            var isLetter = className[0].match(/^[A-Z]$/);
	            var sameConstructor = Tone[className] === this.constructor;
	            if (Tone.isFunction(Tone[className]) && isLetter && sameConstructor) {
	                return className;
	            }
	        }
	        return 'Tone';
	    };
	    /**
		 *  @memberOf Tone#
		 *  disconnect and dispose
		 *  @returns {Tone} this
		 */
	    Tone.prototype.dispose = function () {
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	GET/SET
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Set the parameters at once. Either pass in an
		 *  object mapping parameters to values, or to set a
		 *  single parameter, by passing in a string and value.
		 *  The last argument is an optional ramp time which
		 *  will ramp any signal values to their destination value
		 *  over the duration of the rampTime.
		 *  @param {Object|String} params
		 *  @param {Number=} value
		 *  @param {Time=} rampTime
		 *  @returns {Tone} this
		 *  @memberOf Tone#
		 *  @example
		 * //set values using an object
		 * filter.set({
		 * 	"frequency" : 300,
		 * 	"type" : highpass
		 * });
		 *  @example
		 * filter.set("type", "highpass");
		 *  @example
		 * //ramp to the value 220 over 3 seconds.
		 * oscillator.set({
		 * 	"frequency" : 220
		 * }, 3);
		 */
	    Tone.prototype.set = function (params, value, rampTime) {
	        if (Tone.isObject(params)) {
	            rampTime = value;
	        } else if (Tone.isString(params)) {
	            var tmpObj = {};
	            tmpObj[params] = value;
	            params = tmpObj;
	        }
	        paramLoop:
	            for (var attr in params) {
	                value = params[attr];
	                var parent = this;
	                if (attr.indexOf('.') !== -1) {
	                    var attrSplit = attr.split('.');
	                    for (var i = 0; i < attrSplit.length - 1; i++) {
	                        parent = parent[attrSplit[i]];
	                        if (parent instanceof Tone) {
	                            attrSplit.splice(0, i + 1);
	                            var innerParam = attrSplit.join('.');
	                            parent.set(innerParam, value);
	                            continue paramLoop;
	                        }
	                    }
	                    attr = attrSplit[attrSplit.length - 1];
	                }
	                var param = parent[attr];
	                if (Tone.isUndef(param)) {
	                    continue;
	                }
	                if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {
	                    if (param.value !== value) {
	                        if (Tone.isUndef(rampTime)) {
	                            param.value = value;
	                        } else {
	                            param.rampTo(value, rampTime);
	                        }
	                    }
	                } else if (param instanceof AudioParam) {
	                    if (param.value !== value) {
	                        param.value = value;
	                    }
	                } else if (Tone.TimeBase && param instanceof Tone.TimeBase) {
	                    parent[attr] = value;
	                } else if (param instanceof Tone) {
	                    param.set(value);
	                } else if (param !== value) {
	                    parent[attr] = value;
	                }
	            }
	        return this;
	    };
	    /**
		 *  Get the object's attributes. Given no arguments get
		 *  will return all available object properties and their corresponding
		 *  values. Pass in a single attribute to retrieve or an array
		 *  of attributes. The attribute strings can also include a "."
		 *  to access deeper properties.
		 *  @memberOf Tone#
		 *  @example
		 * osc.get();
		 * //returns {"type" : "sine", "frequency" : 440, ...etc}
		 *  @example
		 * osc.get("type");
		 * //returns { "type" : "sine"}
		 * @example
		 * //use dot notation to access deep properties
		 * synth.get(["envelope.attack", "envelope.release"]);
		 * //returns {"envelope" : {"attack" : 0.2, "release" : 0.4}}
		 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return
		 *  					                  all available.
		 *  @returns {Object}
		 */
	    Tone.prototype.get = function (params) {
	        if (Tone.isUndef(params)) {
	            params = this._collectDefaults(this.constructor);
	        } else if (Tone.isString(params)) {
	            params = [params];
	        }
	        var ret = {};
	        for (var i = 0; i < params.length; i++) {
	            var attr = params[i];
	            var parent = this;
	            var subRet = ret;
	            if (attr.indexOf('.') !== -1) {
	                var attrSplit = attr.split('.');
	                for (var j = 0; j < attrSplit.length - 1; j++) {
	                    var subAttr = attrSplit[j];
	                    subRet[subAttr] = subRet[subAttr] || {};
	                    subRet = subRet[subAttr];
	                    parent = parent[subAttr];
	                }
	                attr = attrSplit[attrSplit.length - 1];
	            }
	            var param = parent[attr];
	            if (Tone.isObject(params[attr])) {
	                subRet[attr] = param.get();
	            } else if (Tone.Signal && param instanceof Tone.Signal) {
	                subRet[attr] = param.value;
	            } else if (Tone.Param && param instanceof Tone.Param) {
	                subRet[attr] = param.value;
	            } else if (param instanceof AudioParam) {
	                subRet[attr] = param.value;
	            } else if (param instanceof Tone) {
	                subRet[attr] = param.get();
	            } else if (!Tone.isFunction(param) && Tone.isDefined(param)) {
	                subRet[attr] = param;
	            }
	        }
	        return ret;
	    };
	    /**
		 *  collect all of the default attributes in one
		 *  @private
		 *  @param {Function} constr the constructor to find the defaults from
		 *  @return {Array} all of the attributes which belong to the class
		 */
	    Tone.prototype._collectDefaults = function (constr) {
	        var ret = [];
	        if (Tone.isDefined(constr.defaults)) {
	            ret = Object.keys(constr.defaults);
	        }
	        if (Tone.isDefined(constr._super)) {
	            var superDefs = this._collectDefaults(constr._super);
	            //filter out repeats
	            for (var i = 0; i < superDefs.length; i++) {
	                if (ret.indexOf(superDefs[i]) === -1) {
	                    ret.push(superDefs[i]);
	                }
	            }
	        }
	        return ret;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	DEFAULTS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  @memberOf Tone
		 *  @param  {Array}  values  The arguments array
		 *  @param  {Array}  keys    The names of the arguments
		 *  @param {Function|Object} constr The class constructor
		 *  @return  {Object}  An object composed of the  defaults between the class' defaults
		 *                        and the passed in arguments.
		 */
	    Tone.defaults = function (values, keys, constr) {
	        var options = {};
	        if (values.length === 1 && Tone.isObject(values[0])) {
	            options = values[0];
	        } else {
	            for (var i = 0; i < keys.length; i++) {
	                options[keys[i]] = values[i];
	            }
	        }
	        if (Tone.isDefined(constr.defaults)) {
	            return Tone.defaultArg(options, constr.defaults);
	        } else if (Tone.isObject(constr)) {
	            return Tone.defaultArg(options, constr);
	        } else {
	            return options;
	        }
	    };
	    /**
		 *  If the `given` parameter is undefined, use the `fallback`.
		 *  If both `given` and `fallback` are object literals, it will
		 *  return a deep copy which includes all of the parameters from both
		 *  objects. If a parameter is undefined in given, it will return
		 *  the fallback property.
		 *  <br><br>
		 *  WARNING: if object is self referential, it will go into an an
		 *  infinite recursive loop.
		 *  @memberOf Tone
		 *  @param  {*} given
		 *  @param  {*} fallback
		 *  @return {*}
		 */
	    Tone.defaultArg = function (given, fallback) {
	        if (Tone.isObject(given) && Tone.isObject(fallback)) {
	            var ret = {};
	            //make a deep copy of the given object
	            for (var givenProp in given) {
	                ret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);
	            }
	            for (var fallbackProp in fallback) {
	                ret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);
	            }
	            return ret;
	        } else {
	            return Tone.isUndef(given) ? fallback : given;
	        }
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	CONNECTIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  connect together all of the arguments in series
		 *  @param {...AudioParam|Tone|AudioNode} nodes
		 *  @returns {Tone}
		 *  @memberOf Tone
		 *  @static
		 */
	    Tone.connectSeries = function () {
	        var currentUnit = arguments[0];
	        for (var i = 1; i < arguments.length; i++) {
	            var toUnit = arguments[i];
	            currentUnit.connect(toUnit);
	            currentUnit = toUnit;
	        }
	        return Tone;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    // TYPE CHECKING
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Test if the arg is undefined
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is undefined
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isUndef = function (val) {
	        return typeof val === 'undefined';
	    };
	    /**
		 *  Test if the arg is not undefined
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is undefined
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isDefined = function (val) {
	        return !Tone.isUndef(val);
	    };
	    /**
		 *  Test if the arg is a function
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a function
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isFunction = function (val) {
	        return typeof val === 'function';
	    };
	    /**
		 *  Test if the argument is a number.
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a number
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isNumber = function (arg) {
	        return typeof arg === 'number';
	    };
	    /**
		 *  Test if the given argument is an object literal (i.e. `{}`);
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is an object literal.
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isObject = function (arg) {
	        return Object.prototype.toString.call(arg) === '[object Object]' && arg.constructor === Object;
	    };
	    /**
		 *  Test if the argument is a boolean.
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a boolean
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isBoolean = function (arg) {
	        return typeof arg === 'boolean';
	    };
	    /**
		 *  Test if the argument is an Array
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is an array
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isArray = function (arg) {
	        return Array.isArray(arg);
	    };
	    /**
		 *  Test if the argument is a string.
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a string
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isString = function (arg) {
	        return typeof arg === 'string';
	    };
	    /**
		 *  Test if the argument is in the form of a note in scientific pitch notation.
		 *  e.g. "C4"
		 *  @param {*} arg the argument to test
		 *  @returns {Boolean} true if the arg is a string
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.isNote = function (arg) {
	        return Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);
	    };
	    /**
		 *  An empty function.
		 *  @static
		 */
	    Tone.noOp = function () {
	    };
	    /**
		 *  Make the property not writable. Internal use only.
		 *  @private
		 *  @param  {String}  property  the property to make not writable
		 */
	    Tone.prototype._readOnly = function (property) {
	        if (Array.isArray(property)) {
	            for (var i = 0; i < property.length; i++) {
	                this._readOnly(property[i]);
	            }
	        } else {
	            Object.defineProperty(this, property, {
	                writable: false,
	                enumerable: true
	            });
	        }
	    };
	    /**
		 *  Make an attribute writeable. Interal use only.
		 *  @private
		 *  @param  {String}  property  the property to make writable
		 */
	    Tone.prototype._writable = function (property) {
	        if (Array.isArray(property)) {
	            for (var i = 0; i < property.length; i++) {
	                this._writable(property[i]);
	            }
	        } else {
	            Object.defineProperty(this, property, { writable: true });
	        }
	    };
	    /**
		 * Possible play states.
		 * @enum {String}
		 */
	    Tone.State = {
	        Started: 'started',
	        Stopped: 'stopped',
	        Paused: 'paused'
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    // CONVERSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Equal power gain scale. Good for cross-fading.
		 *  @param  {NormalRange} percent (0-1)
		 *  @return {Number}         output gain (0-1)
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.equalPowerScale = function (percent) {
	        var piFactor = 0.5 * Math.PI;
	        return Math.sin(percent * piFactor);
	    };
	    /**
		 *  Convert decibels into gain.
		 *  @param  {Decibels} db
		 *  @return {Number}
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.dbToGain = function (db) {
	        return Math.pow(10, db / 20);
	    };
	    /**
		 *  Convert gain to decibels.
		 *  @param  {Number} gain (0-1)
		 *  @return {Decibels}
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.gainToDb = function (gain) {
	        return 20 * (Math.log(gain) / Math.LN10);
	    };
	    /**
		 *  Convert an interval (in semitones) to a frequency ratio.
		 *  @param  {Interval} interval the number of semitones above the base note
		 *  @return {Number}          the frequency ratio
		 *  @static
		 *  @memberOf Tone
		 *  @example
		 * tone.intervalToFrequencyRatio(0); // 1
		 * tone.intervalToFrequencyRatio(12); // 2
		 * tone.intervalToFrequencyRatio(-12); // 0.5
		 */
	    Tone.intervalToFrequencyRatio = function (interval) {
	        return Math.pow(2, interval / 12);
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	TIMING
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Return the current time of the AudioContext clock.
		 *  @return {Number} the currentTime from the AudioContext
		 *  @memberOf Tone#
		 */
	    Tone.prototype.now = function () {
	        return Tone.context.now();
	    };
	    /**
		 *  Return the current time of the AudioContext clock.
		 *  @return {Number} the currentTime from the AudioContext
		 *  @static
		 *  @memberOf Tone
		 */
	    Tone.now = function () {
	        return Tone.context.now();
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	INHERITANCE
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  have a child inherit all of Tone's (or a parent's) prototype
		 *  to inherit the parent's properties, make sure to call
		 *  Parent.call(this) in the child's constructor
		 *
		 *  based on closure library's inherit function
		 *
		 *  @memberOf Tone
		 *  @static
		 *  @param  {Function} 	child
		 *  @param  {Function=} parent (optional) parent to inherit from
		 *                             if no parent is supplied, the child
		 *                             will inherit from Tone
		 */
	    Tone.extend = function (child, parent) {
	        if (Tone.isUndef(parent)) {
	            parent = Tone;
	        }
	        function TempConstructor() {
	        }
	        TempConstructor.prototype = parent.prototype;
	        child.prototype = new TempConstructor();
	        /** @override */
	        child.prototype.constructor = child;
	        child._super = parent;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	CONTEXT
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Private reference to the global AudioContext
		 *  @type {AudioContext}
		 *  @private
		 */
	    var audioContext = null;
	    /**
		 *  A static pointer to the audio context accessible as Tone.context.
		 *  @type {Tone.Context}
		 *  @name context
		 *  @memberOf Tone
		 */
	    Object.defineProperty(Tone, 'context', {
	        get: function () {
	            return audioContext;
	        },
	        set: function (context) {
	            if (Tone.Context && context instanceof Tone.Context) {
	                audioContext = context;
	            } else {
	                audioContext = new Tone.Context(context);
	            }
	            //initialize the new audio context
	            Tone.Context.emit('init', audioContext);
	        }
	    });
	    /**
		 *  The AudioContext
		 *  @type {Tone.Context}
		 *  @name context
		 *  @memberOf Tone#
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.prototype, 'context', {
	        get: function () {
	            return Tone.context;
	        }
	    });
	    /**
		 *  Tone automatically creates a context on init, but if you are working
		 *  with other libraries which also create an AudioContext, it can be
		 *  useful to set your own. If you are going to set your own context,
		 *  be sure to do it at the start of your code, before creating any objects.
		 *  @static
		 *  @param {AudioContext} ctx The new audio context to set
		 */
	    Tone.setContext = function (ctx) {
	        Tone.context = ctx;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	ATTRIBUTES
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  The number of seconds of 1 processing block (128 samples)
		 *  @type {Number}
		 *  @name blockTime
		 *  @memberOf Tone
		 *  @static
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.prototype, 'blockTime', {
	        get: function () {
	            return 128 / this.context.sampleRate;
	        }
	    });
	    /**
		 *  The duration in seconds of one sample.
		 *  @type {Number}
		 *  @name sampleTime
		 *  @memberOf Tone
		 *  @static
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.prototype, 'sampleTime', {
	        get: function () {
	            return 1 / this.context.sampleRate;
	        }
	    });
	    /**
		 *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.
		 *  @type {Boolean}
		 *  @name supported
		 *  @memberOf Tone
		 *  @readOnly
		 *  @static
		 */
	    Object.defineProperty(Tone, 'supported', {
	        get: function () {
	            var hasAudioContext = window.hasOwnProperty('AudioContext') || window.hasOwnProperty('webkitAudioContext');
	            var hasPromises = window.hasOwnProperty('Promise');
	            var hasWorkers = window.hasOwnProperty('Worker');
	            return hasAudioContext && hasPromises && hasWorkers;
	        }
	    });
	    /**
		 *  Boolean value if the audio context has been initialized.
		 *  @type {Boolean}
		 *  @memberOf Tone
		 *  @static
		 *  @name initialized
		 */
	    Object.defineProperty(Tone, 'initialized', {
	        get: function () {
	            return audioContext !== null;
	        }
	    });
	    /**
		 *  Get the context when it becomes available
		 *  @param  {Function}  resolve  Callback when the context is initialized
		 *  @return  {Tone}
		 */
	    Tone.getContext = function (resolve) {
	        if (Tone.initialized) {
	            resolve(Tone.context);
	        } else {
	            var resCallback = function () {
	                resolve(Tone.context);
	                Tone.Context.off('init', resCallback);
	            };
	            Tone.Context.on('init', resCallback);
	        }
	        return Tone;
	    };
	    /**
		 * The version number
		 * @type {String}
		 * @static
		 */
	    Tone.version = 'r12';
	    return Tone;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Emitter gives classes which extend it
		 *         the ability to listen for and emit events.
		 *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
		 *         MIT (c) 2011 Jerome Etienne.
		 *
		 *  @extends {Tone}
		 */
	    Tone.Emitter = function () {
	        Tone.call(this);
	        /**
			 *  Contains all of the events.
			 *  @private
			 *  @type  {Object}
			 */
	        this._events = {};
	    };
	    Tone.extend(Tone.Emitter);
	    /**
		 *  Bind a callback to a specific event.
		 *  @param  {String}    event     The name of the event to listen for.
		 *  @param  {Function}  callback  The callback to invoke when the
		 *                                event is emitted
		 *  @return  {Tone.Emitter}    this
		 */
	    Tone.Emitter.prototype.on = function (event, callback) {
	        //split the event
	        var events = event.split(/\W+/);
	        for (var i = 0; i < events.length; i++) {
	            var eventName = events[i];
	            if (!this._events.hasOwnProperty(eventName)) {
	                this._events[eventName] = [];
	            }
	            this._events[eventName].push(callback);
	        }
	        return this;
	    };
	    /**
		 *  Bind a callback which is only invoked once
		 *  @param  {String}    event     The name of the event to listen for.
		 *  @param  {Function}  callback  The callback to invoke when the
		 *                                event is emitted
		 *  @return  {Tone.Emitter}    this
		 */
	    Tone.Emitter.prototype.once = function (event, callback) {
	        var boundCallback = function () {
	            //invoke the callback
	            callback.apply(this, arguments);
	            this.off(event, boundCallback);
	        }.bind(this);
	        this.on(event, boundCallback);
	        return this;
	    };
	    /**
		 *  Remove the event listener.
		 *  @param  {String}    event     The event to stop listening to.
		 *  @param  {Function=}  callback  The callback which was bound to
		 *                                the event with Tone.Emitter.on.
		 *                                If no callback is given, all callbacks
		 *                                events are removed.
		 *  @return  {Tone.Emitter}    this
		 */
	    Tone.Emitter.prototype.off = function (event, callback) {
	        var events = event.split(/\W+/);
	        for (var ev = 0; ev < events.length; ev++) {
	            event = events[ev];
	            if (this._events.hasOwnProperty(event)) {
	                if (Tone.isUndef(callback)) {
	                    this._events[event] = [];
	                } else {
	                    var eventList = this._events[event];
	                    for (var i = 0; i < eventList.length; i++) {
	                        if (eventList[i] === callback) {
	                            eventList.splice(i, 1);
	                        }
	                    }
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Invoke all of the callbacks bound to the event
		 *  with any arguments passed in.
		 *  @param  {String}  event  The name of the event.
		 *  @param {*} args... The arguments to pass to the functions listening.
		 *  @return  {Tone.Emitter}  this
		 */
	    Tone.Emitter.prototype.emit = function (event) {
	        if (this._events) {
	            var args = Array.apply(null, arguments).slice(1);
	            if (this._events.hasOwnProperty(event)) {
	                var eventList = this._events[event].slice(0);
	                for (var i = 0, len = eventList.length; i < len; i++) {
	                    eventList[i].apply(this, args);
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Add Emitter functions (on/off/emit) to the object
		 *  @param  {Object|Function}  object  The object or class to extend.
		 *  @returns {Tone.Emitter}
		 */
	    Tone.Emitter.mixin = function (object) {
	        var functions = [
	            'on',
	            'once',
	            'off',
	            'emit'
	        ];
	        object._events = {};
	        for (var i = 0; i < functions.length; i++) {
	            var func = functions[i];
	            var emitterFunc = Tone.Emitter.prototype[func];
	            object[func] = emitterFunc;
	        }
	        return Tone.Emitter;
	    };
	    /**
		 *  Clean up
		 *  @return  {Tone.Emitter}  this
		 */
	    Tone.Emitter.prototype.dispose = function () {
	        Tone.prototype.dispose.call(this);
	        this._events = null;
	        return this;
	    };
	    return Tone.Emitter;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class A Timeline class for scheduling and maintaining state
		 *         along a timeline. All events must have a "time" property.
		 *         Internally, events are stored in time order for fast
		 *         retrieval.
		 *  @extends {Tone}
		 *  @param {Positive} [memory=Infinity] The number of previous events that are retained.
		 */
	    Tone.Timeline = function () {
	        var options = Tone.defaults(arguments, ['memory'], Tone.Timeline);
	        Tone.call(this);
	        /**
			 *  The array of scheduled timeline events
			 *  @type  {Array}
			 *  @private
			 */
	        this._timeline = [];
	        /**
			 *  The memory of the timeline, i.e.
			 *  how many events in the past it will retain
			 *  @type {Positive}
			 */
	        this.memory = options.memory;
	    };
	    Tone.extend(Tone.Timeline);
	    /**
		 *  the default parameters
		 *  @static
		 *  @const
		 */
	    Tone.Timeline.defaults = { 'memory': Infinity };
	    /**
		 *  The number of items in the timeline.
		 *  @type {Number}
		 *  @memberOf Tone.Timeline#
		 *  @name length
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Timeline.prototype, 'length', {
	        get: function () {
	            return this._timeline.length;
	        }
	    });
	    /**
		 *  Insert an event object onto the timeline. Events must have a "time" attribute.
		 *  @param  {Object}  event  The event object to insert into the
		 *                           timeline.
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.add = function (event) {
	        //the event needs to have a time attribute
	        if (Tone.isUndef(event.time)) {
	            throw new Error('Tone.Timeline: events must have a time attribute');
	        }
	        event.time = event.time.valueOf();
	        var index = this._search(event.time);
	        this._timeline.splice(index + 1, 0, event);
	        //if the length is more than the memory, remove the previous ones
	        if (this.length > this.memory) {
	            var diff = this.length - this.memory;
	            this._timeline.splice(0, diff);
	        }
	        return this;
	    };
	    /**
		 *  Remove an event from the timeline.
		 *  @param  {Object}  event  The event object to remove from the list.
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.remove = function (event) {
	        var index = this._timeline.indexOf(event);
	        if (index !== -1) {
	            this._timeline.splice(index, 1);
	        }
	        return this;
	    };
	    /**
		 *  Get the nearest event whose time is less than or equal to the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @returns {Object} The event object set after that time.
		 */
	    Tone.Timeline.prototype.get = function (time, comparator) {
	        comparator = Tone.defaultArg(comparator, 'time');
	        var index = this._search(time, comparator);
	        if (index !== -1) {
	            return this._timeline[index];
	        } else {
	            return null;
	        }
	    };
	    /**
		 *  Return the first event in the timeline without removing it
		 *  @returns {Object} The first event object
		 */
	    Tone.Timeline.prototype.peek = function () {
	        return this._timeline[0];
	    };
	    /**
		 *  Return the first event in the timeline and remove it
		 *  @returns {Object} The first event object
		 */
	    Tone.Timeline.prototype.shift = function () {
	        return this._timeline.shift();
	    };
	    /**
		 *  Get the event which is scheduled after the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @returns {Object} The event object after the given time
		 */
	    Tone.Timeline.prototype.getAfter = function (time, comparator) {
	        comparator = Tone.defaultArg(comparator, 'time');
	        var index = this._search(time, comparator);
	        if (index + 1 < this._timeline.length) {
	            return this._timeline[index + 1];
	        } else {
	            return null;
	        }
	    };
	    /**
		 *  Get the event before the event at the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @returns {Object} The event object before the given time
		 */
	    Tone.Timeline.prototype.getBefore = function (time, comparator) {
	        comparator = Tone.defaultArg(comparator, 'time');
	        var len = this._timeline.length;
	        //if it's after the last item, return the last item
	        if (len > 0 && this._timeline[len - 1][comparator] < time) {
	            return this._timeline[len - 1];
	        }
	        var index = this._search(time, comparator);
	        if (index - 1 >= 0) {
	            return this._timeline[index - 1];
	        } else {
	            return null;
	        }
	    };
	    /**
		 *  Cancel events after the given time
		 *  @param  {Number}  time  The time to query.
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.cancel = function (after) {
	        if (this._timeline.length > 1) {
	            var index = this._search(after);
	            if (index >= 0) {
	                if (this._timeline[index].time === after) {
	                    //get the first item with that time
	                    for (var i = index; i >= 0; i--) {
	                        if (this._timeline[i].time === after) {
	                            index = i;
	                        } else {
	                            break;
	                        }
	                    }
	                    this._timeline = this._timeline.slice(0, index);
	                } else {
	                    this._timeline = this._timeline.slice(0, index + 1);
	                }
	            } else {
	                this._timeline = [];
	            }
	        } else if (this._timeline.length === 1) {
	            //the first item's time
	            if (this._timeline[0].time >= after) {
	                this._timeline = [];
	            }
	        }
	        return this;
	    };
	    /**
		 *  Cancel events before or equal to the given time.
		 *  @param  {Number}  time  The time to cancel before.
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.cancelBefore = function (time) {
	        var index = this._search(time);
	        if (index >= 0) {
	            this._timeline = this._timeline.slice(index + 1);
	        }
	        return this;
	    };
	    /**
		 * Returns the previous event if there is one. null otherwise
		 * @param  {Object} event The event to find the previous one of
		 * @return {Object}       The event right before the given event
		 */
	    Tone.Timeline.prototype.previousEvent = function (event) {
	        var index = this._timeline.indexOf(event);
	        if (index > 0) {
	            return this._timeline[index - 1];
	        } else {
	            return null;
	        }
	    };
	    /**
		 *  Does a binary search on the timeline array and returns the
		 *  nearest event index whose time is after or equal to the given time.
		 *  If a time is searched before the first index in the timeline, -1 is returned.
		 *  If the time is after the end, the index of the last item is returned.
		 *  @param  {Number}  time
		 *  @param  {String}  comparator Which value in the object to compare
		 *  @return  {Number} the index in the timeline array
		 *  @private
		 */
	    Tone.Timeline.prototype._search = function (time, comparator) {
	        if (this._timeline.length === 0) {
	            return -1;
	        }
	        comparator = Tone.defaultArg(comparator, 'time');
	        var beginning = 0;
	        var len = this._timeline.length;
	        var end = len;
	        if (len > 0 && this._timeline[len - 1][comparator] <= time) {
	            return len - 1;
	        }
	        while (beginning < end) {
	            // calculate the midpoint for roughly equal partition
	            var midPoint = Math.floor(beginning + (end - beginning) / 2);
	            var event = this._timeline[midPoint];
	            var nextEvent = this._timeline[midPoint + 1];
	            if (event[comparator] === time) {
	                //choose the last one that has the same time
	                for (var i = midPoint; i < this._timeline.length; i++) {
	                    var testEvent = this._timeline[i];
	                    if (testEvent[comparator] === time) {
	                        midPoint = i;
	                    }
	                }
	                return midPoint;
	            } else if (event[comparator] < time && nextEvent[comparator] > time) {
	                return midPoint;
	            } else if (event[comparator] > time) {
	                //search lower
	                end = midPoint;
	            } else {
	                //search upper
	                beginning = midPoint + 1;
	            }
	        }
	        return -1;
	    };
	    /**
		 *  Internal iterator. Applies extra safety checks for
		 *  removing items from the array.
		 *  @param  {Function}  callback
		 *  @param  {Number=}    lowerBound
		 *  @param  {Number=}    upperBound
		 *  @private
		 */
	    Tone.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {
	        lowerBound = Tone.defaultArg(lowerBound, 0);
	        upperBound = Tone.defaultArg(upperBound, this._timeline.length - 1);
	        this._timeline.slice(lowerBound, upperBound + 1).forEach(function (event) {
	            callback.call(this, event);
	        }.bind(this));
	    };
	    /**
		 *  Iterate over everything in the array
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.forEach = function (callback) {
	        this._iterate(callback);
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array at or before the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.forEachBefore = function (time, callback) {
	        //iterate over the items in reverse so that removing an item doesn't break things
	        var upperBound = this._search(time);
	        if (upperBound !== -1) {
	            this._iterate(callback, 0, upperBound);
	        }
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array after the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.forEachAfter = function (time, callback) {
	        //iterate over the items in reverse so that removing an item doesn't break things
	        var lowerBound = this._search(time);
	        this._iterate(callback, lowerBound + 1);
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array between the startTime and endTime. 
		 *  The timerange is inclusive of the startTime, but exclusive of the endTime. 
		 *  range = [startTime, endTime). 
		 *  @param  {Number}  startTime The time to check if items are before
		 *  @param  {Number}  endTime The end of the test interval. 
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.forEachBetween = function (startTime, endTime, callback) {
	        var lowerBound = this._search(startTime);
	        var upperBound = this._search(endTime);
	        if (lowerBound !== -1 && upperBound !== -1) {
	            if (this._timeline[lowerBound].time !== startTime) {
	                lowerBound += 1;
	            }
	            //exclusive of the end time
	            if (this._timeline[upperBound].time === endTime) {
	                upperBound -= 1;
	            }
	            this._iterate(callback, lowerBound, upperBound);
	        } else if (lowerBound === -1) {
	            this._iterate(callback, 0, upperBound);
	        }
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array at or after the given time. Similar to
		 *  forEachAfter, but includes the item(s) at the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.forEachFrom = function (time, callback) {
	        //iterate over the items in reverse so that removing an item doesn't break things
	        var lowerBound = this._search(time);
	        //work backwards until the event time is less than time
	        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
	            lowerBound--;
	        }
	        this._iterate(callback, lowerBound + 1);
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array at the given time
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.Timeline} this
		 */
	    Tone.Timeline.prototype.forEachAtTime = function (time, callback) {
	        //iterate over the items in reverse so that removing an item doesn't break things
	        var upperBound = this._search(time);
	        if (upperBound !== -1) {
	            this._iterate(function (event) {
	                if (event.time === time) {
	                    callback.call(this, event);
	                }
	            }, 0, upperBound);
	        }
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @return  {Tone.Timeline}  this
		 */
	    Tone.Timeline.prototype.dispose = function () {
	        Tone.prototype.dispose.call(this);
	        this._timeline = null;
	        return this;
	    };
	    return Tone.Timeline;
	});
	Module(function (Tone) {
	    if (Tone.supported) {
	        if (!window.hasOwnProperty('OfflineAudioContext') && window.hasOwnProperty('webkitOfflineAudioContext')) {
	            window.OfflineAudioContext = window.webkitOfflineAudioContext;
	        }
	        //returns promise?
	        var context = new OfflineAudioContext(1, 1, 44100);
	        var ret = context.startRendering();
	        if (!(ret instanceof Promise)) {
	            OfflineAudioContext.prototype._native_startRendering = OfflineAudioContext.prototype.startRendering;
	            OfflineAudioContext.prototype.startRendering = function () {
	                return new Promise(function (done) {
	                    this.oncomplete = function (e) {
	                        done(e.renderedBuffer);
	                    };
	                    this._native_startRendering();
	                }.bind(this));
	            };
	        }
	    }
	});
	Module(function (Tone) {
	    if (Tone.supported) {
	        if (!window.hasOwnProperty('AudioContext') && window.hasOwnProperty('webkitAudioContext')) {
	            window.AudioContext = window.webkitAudioContext;
	        }
	        //not functionally equivalent, but only an API placeholder
	        if (!AudioContext.prototype.close) {
	            AudioContext.prototype.close = function () {
	                if (Tone.isFunction(this.suspend)) {
	                    this.suspend();
	                }
	                return Promise.resolve();
	            };
	        }
	        //not functionally equivalent
	        if (!AudioContext.prototype.resume) {
	            AudioContext.prototype.resume = function () {
	                return Promise.resolve();
	            };
	        }
	        //createGain
	        if (!AudioContext.prototype.createGain && AudioContext.prototype.createGainNode) {
	            AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
	        }
	        //createDelay
	        if (!AudioContext.prototype.createDelay && AudioContext.prototype.createDelayNode) {
	            AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
	        }
	        //test decodeAudioData returns a promise
	        // https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js
	        // MIT License (c) 2015 @mohayonao
	        var decodeAudioDataPromise = false;
	        var offlineContext = new OfflineAudioContext(1, 1, 44100);
	        var audioData = new Uint32Array([
	            1179011410,
	            48,
	            1163280727,
	            544501094,
	            16,
	            131073,
	            44100,
	            176400,
	            1048580,
	            1635017060,
	            8,
	            0,
	            0,
	            0,
	            0
	        ]).buffer;
	        try {
	            var ret = offlineContext.decodeAudioData(audioData);
	            if (ret instanceof Promise) {
	                decodeAudioDataPromise = true;
	            }
	        } catch (e) {
	            decodeAudioDataPromise = false;
	        }
	        if (!decodeAudioDataPromise) {
	            AudioContext.prototype._native_decodeAudioData = AudioContext.prototype.decodeAudioData;
	            AudioContext.prototype.decodeAudioData = function (audioData) {
	                return new Promise(function (success, error) {
	                    this._native_decodeAudioData(audioData, success, error);
	                }.bind(this));
	            };
	        }
	    }
	});
	Module(function (Tone) {
	    /**
		 *  @class Wrapper around the native AudioContext.
		 *  @extends {Tone.Emitter}
		 *  @param {AudioContext=} context optionally pass in a context
		 */
	    Tone.Context = function () {
	        Tone.Emitter.call(this);
	        var options = Tone.defaults(arguments, ['context'], Tone.Context);
	        if (!options.context) {
	            options.context = new window.AudioContext();
	            if (!options.context) {
	                throw new Error('could not create AudioContext. Possibly too many AudioContexts running already.');
	            }
	        }
	        this._context = options.context;
	        // extend all of the methods
	        for (var prop in this._context) {
	            this._defineProperty(this._context, prop);
	        }
	        /**
			 *  The default latency hint
			 *  @type  {String}
			 *  @private
			 */
	        this._latencyHint = options.latencyHint;
	        /**
			 *  An object containing all of the constants AudioBufferSourceNodes
			 *  @type  {Object}
			 *  @private
			 */
	        this._constants = {};
	        ///////////////////////////////////////////////////////////////////////
	        // WORKER
	        ///////////////////////////////////////////////////////////////////////
	        /**
			 *  The amount of time events are scheduled
			 *  into the future
			 *  @type  {Number}
			 */
	        this.lookAhead = options.lookAhead;
	        /**
			 *  A reference to the actual computed update interval
			 *  @type  {Number}
			 *  @private
			 */
	        this._computedUpdateInterval = 0;
	        /**
			 *  A reliable callback method
			 *  @private
			 *  @type  {Ticker}
			 */
	        this._ticker = new Ticker(this.emit.bind(this, 'tick'), options.clockSource, options.updateInterval);
	        ///////////////////////////////////////////////////////////////////////
	        // TIMEOUTS
	        ///////////////////////////////////////////////////////////////////////
	        /**
			 *  All of the setTimeout events.
			 *  @type  {Tone.Timeline}
			 *  @private
			 */
	        this._timeouts = new Tone.Timeline();
	        /**
			 *  The timeout id counter
			 *  @private
			 *  @type {Number}
			 */
	        this._timeoutIds = 0;
	        this.on('tick', this._timeoutLoop.bind(this));
	    };
	    Tone.extend(Tone.Context, Tone.Emitter);
	    Tone.Emitter.mixin(Tone.Context);
	    /**
		 * defaults
		 * @static
		 * @type {Object}
		 */
	    Tone.Context.defaults = {
	        'clockSource': 'worker',
	        'latencyHint': 'interactive',
	        'lookAhead': 0.1,
	        'updateInterval': 0.03
	    };
	    /**
		 *  Define a property on this Tone.Context.
		 *  This is used to extend the native AudioContext
		 *  @param  {AudioContext}  context
		 *  @param  {String}  prop
		 *  @private
		 */
	    Tone.Context.prototype._defineProperty = function (context, prop) {
	        if (Tone.isUndef(this[prop])) {
	            Object.defineProperty(this, prop, {
	                get: function () {
	                    if (typeof context[prop] === 'function') {
	                        return context[prop].bind(context);
	                    } else {
	                        return context[prop];
	                    }
	                },
	                set: function (val) {
	                    context[prop] = val;
	                }
	            });
	        }
	    };
	    /**
		 *  The current audio context time
		 *  @return  {Number}
		 */
	    Tone.Context.prototype.now = function () {
	        return this._context.currentTime + this.lookAhead;
	    };
	    /**
		 *  Promise which is invoked when the context is running.
		 *  Tries to resume the context if it's not started.
		 *  @return  {Promise}
		 */
	    Tone.Context.prototype.ready = function () {
	        return new Promise(function (done) {
	            if (this._context.state === 'running') {
	                done();
	            } else {
	                this._context.resume().then(function () {
	                    done();
	                });
	            }
	        }.bind(this));
	    };
	    /**
		 *  Promise which is invoked when the context is running.
		 *  Tries to resume the context if it's not started.
		 *  @return  {Promise}
		 */
	    Tone.Context.prototype.close = function () {
	        return this._context.close().then(function () {
	            Tone.Context.emit('close', this);
	        }.bind(this));
	    };
	    /**
		 *  Generate a looped buffer at some constant value.
		 *  @param  {Number}  val
		 *  @return  {BufferSourceNode}
		 */
	    Tone.Context.prototype.getConstant = function (val) {
	        if (this._constants[val]) {
	            return this._constants[val];
	        } else {
	            var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);
	            var arr = buffer.getChannelData(0);
	            for (var i = 0; i < arr.length; i++) {
	                arr[i] = val;
	            }
	            var constant = this._context.createBufferSource();
	            constant.channelCount = 1;
	            constant.channelCountMode = 'explicit';
	            constant.buffer = buffer;
	            constant.loop = true;
	            constant.start(0);
	            this._constants[val] = constant;
	            return constant;
	        }
	    };
	    /**
		 *  The private loop which keeps track of the context scheduled timeouts
		 *  Is invoked from the clock source
		 *  @private
		 */
	    Tone.Context.prototype._timeoutLoop = function () {
	        var now = this.now();
	        while (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now) {
	            this._timeouts.shift().callback();
	        }
	    };
	    /**
		 *  A setTimeout which is gaurenteed by the clock source.
		 *  Also runs in the offline context.
		 *  @param  {Function}  fn       The callback to invoke
		 *  @param  {Seconds}    timeout  The timeout in seconds
		 *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout
		 */
	    Tone.Context.prototype.setTimeout = function (fn, timeout) {
	        this._timeoutIds++;
	        var now = this.now();
	        this._timeouts.add({
	            callback: fn,
	            time: now + timeout,
	            id: this._timeoutIds
	        });
	        return this._timeoutIds;
	    };
	    /**
		 *  Clears a previously scheduled timeout with Tone.context.setTimeout
		 *  @param  {Number}  id  The ID returned from setTimeout
		 *  @return  {Tone.Context}  this
		 */
	    Tone.Context.prototype.clearTimeout = function (id) {
	        this._timeouts.forEach(function (event) {
	            if (event.id === id) {
	                this.remove(event);
	            }
	        });
	        return this;
	    };
	    /**
		 *  How often the Web Worker callback is invoked.
		 *  This number corresponds to how responsive the scheduling
		 *  can be. Context.updateInterval + Context.lookAhead gives you the
		 *  total latency between scheduling an event and hearing it.
		 *  @type {Number}
		 *  @memberOf Tone.Context#
		 *  @name updateInterval
		 */
	    Object.defineProperty(Tone.Context.prototype, 'updateInterval', {
	        get: function () {
	            return this._ticker.updateInterval;
	        },
	        set: function (interval) {
	            this._ticker.updateInterval = interval;
	        }
	    });
	    /**
		 *  What the source of the clock is, either "worker" (Web Worker [default]),
		 *  "timeout" (setTimeout), or "offline" (none).
		 *  @type {String}
		 *  @memberOf Tone.Context#
		 *  @name clockSource
		 */
	    Object.defineProperty(Tone.Context.prototype, 'clockSource', {
	        get: function () {
	            return this._ticker.type;
	        },
	        set: function (type) {
	            this._ticker.type = type;
	        }
	    });
	    /**
		 *  The type of playback, which affects tradeoffs between audio
		 *  output latency and responsiveness.
		 *
		 *  In addition to setting the value in seconds, the latencyHint also
		 *  accepts the strings "interactive" (prioritizes low latency),
		 *  "playback" (prioritizes sustained playback), "balanced" (balances
		 *  latency and performance), and "fastest" (lowest latency, might glitch more often).
		 *  @type {String|Seconds}
		 *  @memberOf Tone.Context#
		 *  @name latencyHint
		 *  @example
		 * //set the lookAhead to 0.3 seconds
		 * Tone.context.latencyHint = 0.3;
		 */
	    Object.defineProperty(Tone.Context.prototype, 'latencyHint', {
	        get: function () {
	            return this._latencyHint;
	        },
	        set: function (hint) {
	            var lookAhead = hint;
	            this._latencyHint = hint;
	            if (Tone.isString(hint)) {
	                switch (hint) {
	                case 'interactive':
	                    lookAhead = 0.1;
	                    this._context.latencyHint = hint;
	                    break;
	                case 'playback':
	                    lookAhead = 0.8;
	                    this._context.latencyHint = hint;
	                    break;
	                case 'balanced':
	                    lookAhead = 0.25;
	                    this._context.latencyHint = hint;
	                    break;
	                case 'fastest':
	                    this._context.latencyHint = 'interactive';
	                    lookAhead = 0.01;
	                    break;
	                }
	            }
	            this.lookAhead = lookAhead;
	            this.updateInterval = lookAhead / 3;
	        }
	    });
	    /**
		 *  Unlike other dispose methods, this returns a Promise
		 *  which executes when the context is closed and disposed
		 *  @returns {Promise} this
		 */
	    Tone.Context.prototype.dispose = function () {
	        return this.close().then(function () {
	            Tone.Emitter.prototype.dispose.call(this);
	            this._ticker.dispose();
	            this._ticker = null;
	            this._timeouts.dispose();
	            this._timeouts = null;
	            for (var con in this._constants) {
	                this._constants[con].disconnect();
	            }
	            this._constants = null;
	        }.bind(this));
	    };
	    /**
		 * @class A class which provides a reliable callback using either
		 *        a Web Worker, or if that isn't supported, falls back to setTimeout.
		 * @private
		 */
	    var Ticker = function (callback, type, updateInterval) {
	        /**
			 * Either "worker" or "timeout"
			 * @type {String}
			 * @private
			 */
	        this._type = type;
	        /**
			 * The update interval of the worker
			 * @private
			 * @type {Number}
			 */
	        this._updateInterval = updateInterval;
	        /**
			 * The callback to invoke at regular intervals
			 * @type {Function}
			 * @private
			 */
	        this._callback = Tone.defaultArg(callback, Tone.noOp);
	        //create the clock source for the first time
	        this._createClock();
	    };
	    /**
		 * The possible ticker types
		 * @private
		 * @type {Object}
		 */
	    Ticker.Type = {
	        Worker: 'worker',
	        Timeout: 'timeout',
	        Offline: 'offline'
	    };
	    /**
		 *  Generate a web worker
		 *  @return  {WebWorker}
		 *  @private
		 */
	    Ticker.prototype._createWorker = function () {
	        //URL Shim
	        window.URL = window.URL || window.webkitURL;
	        var blob = new Blob([//the initial timeout time
	            'var timeoutTime = ' + (this._updateInterval * 1000).toFixed(1) + ';' + //onmessage callback
	            'self.onmessage = function(msg){' + '\ttimeoutTime = parseInt(msg.data);' + '};' + //the tick function which posts a message
	            //and schedules a new tick
	            'function tick(){' + '\tsetTimeout(tick, timeoutTime);' + '\tself.postMessage(\'tick\');' + '}' + //call tick initially
	            'tick();']);
	        var blobUrl = URL.createObjectURL(blob);
	        var worker = new Worker(blobUrl);
	        worker.onmessage = this._callback.bind(this);
	        this._worker = worker;
	    };
	    /**
		 * Create a timeout loop
		 * @private
		 */
	    Ticker.prototype._createTimeout = function () {
	        this._timeout = setTimeout(function () {
	            this._createTimeout();
	            this._callback();
	        }.bind(this), this._updateInterval * 1000);
	    };
	    /**
		 * Create the clock source.
		 * @private
		 */
	    Ticker.prototype._createClock = function () {
	        if (this._type === Ticker.Type.Worker) {
	            try {
	                this._createWorker();
	            } catch (e) {
	                // workers not supported, fallback to timeout
	                this._type = Ticker.Type.Timeout;
	                this._createClock();
	            }
	        } else if (this._type === Ticker.Type.Timeout) {
	            this._createTimeout();
	        }
	    };
	    /**
		 * @memberOf Ticker#
		 * @type {Number}
		 * @name updateInterval
		 * @private
		 */
	    Object.defineProperty(Ticker.prototype, 'updateInterval', {
	        get: function () {
	            return this._updateInterval;
	        },
	        set: function (interval) {
	            this._updateInterval = Math.max(interval, 128 / 44100);
	            if (this._type === Ticker.Type.Worker) {
	                this._worker.postMessage(Math.max(interval * 1000, 1));
	            }
	        }
	    });
	    /**
		 * The type of the ticker, either a worker or a timeout
		 * @memberOf Ticker#
		 * @type {Number}
		 * @name type
		 * @private
		 */
	    Object.defineProperty(Ticker.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            this._disposeClock();
	            this._type = type;
	            this._createClock();
	        }
	    });
	    /**
		 * Clean up the current clock source
		 * @private
		 */
	    Ticker.prototype._disposeClock = function () {
	        if (this._timeout) {
	            clearTimeout(this._timeout);
	            this._timeout = null;
	        }
	        if (this._worker) {
	            this._worker.terminate();
	            this._worker.onmessage = null;
	            this._worker = null;
	        }
	    };
	    /**
		 * Clean up
		 * @private
		 */
	    Ticker.prototype.dispose = function () {
	        this._disposeClock();
	        this._callback = null;
	    };
	    /**
		 *  Shim all connect/disconnect and some deprecated methods which are still in
		 *  some older implementations.
		 *  @private
		 */
	    Tone.getContext(function () {
	        var nativeConnect = AudioNode.prototype.connect;
	        var nativeDisconnect = AudioNode.prototype.disconnect;
	        //replace the old connect method
	        function toneConnect(B, outNum, inNum) {
	            if (B.input) {
	                inNum = Tone.defaultArg(inNum, 0);
	                if (Tone.isArray(B.input)) {
	                    return this.connect(B.input[inNum]);
	                } else {
	                    return this.connect(B.input, outNum, inNum);
	                }
	            } else {
	                try {
	                    if (B instanceof AudioNode) {
	                        nativeConnect.call(this, B, outNum, inNum);
	                        return B;
	                    } else {
	                        nativeConnect.call(this, B, outNum);
	                        return B;
	                    }
	                } catch (e) {
	                    throw new Error('error connecting to node: ' + B + '\n' + e);
	                }
	            }
	        }
	        //replace the old disconnect method
	        function toneDisconnect(B, outNum, inNum) {
	            if (B && B.input && Tone.isArray(B.input)) {
	                inNum = Tone.defaultArg(inNum, 0);
	                this.disconnect(B.input[inNum], outNum, 0);
	            } else if (B && B.input) {
	                this.disconnect(B.input, outNum, inNum);
	            } else {
	                try {
	                    nativeDisconnect.apply(this, arguments);
	                } catch (e) {
	                    throw new Error('error disconnecting node: ' + B + '\n' + e);
	                }
	            }
	        }
	        if (AudioNode.prototype.connect !== toneConnect) {
	            AudioNode.prototype.connect = toneConnect;
	            AudioNode.prototype.disconnect = toneDisconnect;
	        }
	    });
	    // set the audio context initially, and if one is not already created
	    if (Tone.supported && !Tone.initialized) {
	        Tone.context = new Tone.Context();
	        // log on first initialization
	        // allow optional silencing of this log
	        if (!window.TONE_SILENCE_VERSION_LOGGING) {
	            // eslint-disable-next-line no-console
	            console.log('%c * Tone.js ' + Tone.version + ' * ', 'background: #000; color: #fff');
	        }
	    } else if (!Tone.supported) {
	        // eslint-disable-next-line no-console
	        console.warn('This browser does not support Tone.js');
	    }
	    return Tone.Context;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.AudioNode is the base class for classes which process audio.
		 *         AudioNodes have inputs and outputs.
		 *  @param	{AudioContext=} context	The audio context to use with the class
		 *  @extends {Tone}
		 */
	    Tone.AudioNode = function () {
	        Tone.call(this);
	        //use the default context if one is not passed in
	        var options = Tone.defaults(arguments, ['context'], { 'context': Tone.context });
	        /**
			 * The AudioContext of this instance
			 * @private
			 * @type {AudioContext}
			 */
	        this._context = options.context;
	    };
	    Tone.extend(Tone.AudioNode);
	    /**
		 * Get the audio context belonging to this instance.
		 * @type {Tone.Context}
		 * @memberOf Tone.AudioNode#
		 * @name context
		 * @readOnly
		 */
	    Object.defineProperty(Tone.AudioNode.prototype, 'context', {
	        get: function () {
	            return this._context;
	        }
	    });
	    /**
		 *  Create input and outputs for this object.
		 *  @param  {Number}  [input=0]   The number of inputs
		 *  @param  {Number}  [outputs=0]  The number of outputs
		 *  @return  {Tone.AudioNode}  this
		 *  @private
		 */
	    Tone.AudioNode.prototype.createInsOuts = function (inputs, outputs) {
	        if (inputs === 1) {
	            this.input = this.context.createGain();
	        } else if (inputs > 1) {
	            this.input = new Array(inputs);
	        }
	        if (outputs === 1) {
	            this.output = this.context.createGain();
	        } else if (outputs > 1) {
	            this.output = new Array(outputs);
	        }
	    };
	    /**
		 *  channelCount is the number of channels used when up-mixing and down-mixing
		 *  connections to any inputs to the node. The default value is 2 except for
		 *  specific nodes where its value is specially determined.
		 *
		 *  @memberof Tone.AudioNode#
		 *  @type {Number}
		 *  @name channelCount
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.AudioNode.prototype, 'channelCount', {
	        get: function () {
	            return this.output.channelCount;
	        },
	        set: function (c) {
	            return this.output.channelCount = c;
	        }
	    });
	    /**
		 *  channelCountMode determines how channels will be counted when up-mixing and
		 *  down-mixing connections to any inputs to the node.
		 *  The default value is "max". This attribute has no effect for nodes with no inputs.
		 *  @memberof Tone.AudioNode#
		 *  @type {String}
		 *  @name channelCountMode
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.AudioNode.prototype, 'channelCountMode', {
	        get: function () {
	            return this.output.channelCountMode;
	        },
	        set: function (m) {
	            return this.output.channelCountMode = m;
	        }
	    });
	    /**
		 *  channelInterpretation determines how individual channels will be treated
		 *  when up-mixing and down-mixing connections to any inputs to the node.
		 *  The default value is "speakers".
		 *  @memberof Tone.AudioNode#
		 *  @type {String}
		 *  @name channelInterpretation
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.AudioNode.prototype, 'channelInterpretation', {
	        get: function () {
	            return this.output.channelInterpretation;
	        },
	        set: function (i) {
	            return this.output.channelInterpretation = i;
	        }
	    });
	    /**
		 *  The number of inputs feeding into the AudioNode.
		 *  For source nodes, this will be 0.
		 *  @type {Number}
		 *  @name numberOfInputs
		 *  @memberof Tone.AudioNode#
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfInputs', {
	        get: function () {
	            if (this.input) {
	                if (Tone.isArray(this.input)) {
	                    return this.input.length;
	                } else {
	                    return 1;
	                }
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 *  The number of outputs coming out of the AudioNode.
		 *  @type {Number}
		 *  @name numberOfOutputs
		 *  @memberof Tone.AudioNode#
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.AudioNode.prototype, 'numberOfOutputs', {
	        get: function () {
	            if (this.output) {
	                if (Tone.isArray(this.output)) {
	                    return this.output.length;
	                } else {
	                    return 1;
	                }
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 * Called when an audio param connects to this node
		 * @private
		 */
	    Tone.AudioNode.prototype._onConnect = function () {
	    };
	    /**
		 *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode
		 *  @param  {Tone | AudioParam | AudioNode} unit
		 *  @param {number} [outputNum=0] optionally which output to connect from
		 *  @param {number} [inputNum=0] optionally which input to connect to
		 *  @returns {Tone.AudioNode} this
		 */
	    Tone.AudioNode.prototype.connect = function (unit, outputNum, inputNum) {
	        if (unit._onConnect) {
	            unit._onConnect(this);
	        }
	        if (Tone.isArray(this.output)) {
	            outputNum = Tone.defaultArg(outputNum, 0);
	            this.output[outputNum].connect(unit, 0, inputNum);
	        } else {
	            this.output.connect(unit, outputNum, inputNum);
	        }
	        return this;
	    };
	    /**
		 *  disconnect the output
		 *  @param {Number|AudioNode} output Either the output index to disconnect
		 *                                   if the output is an array, or the
		 *                                   node to disconnect from.
		 *  @returns {Tone.AudioNode} this
		 */
	    Tone.AudioNode.prototype.disconnect = function (destination, outputNum, inputNum) {
	        if (Tone.isArray(this.output)) {
	            if (Tone.isNumber(destination)) {
	                this.output[destination].disconnect();
	            } else {
	                outputNum = Tone.defaultArg(outputNum, 0);
	                this.output[outputNum].disconnect(destination, 0, inputNum);
	            }
	        } else {
	            this.output.disconnect.apply(this.output, arguments);
	        }
	    };
	    /**
		 *  Connect the output of this node to the rest of the nodes in series.
		 *  @example
		 *  //connect a node to an effect, panVol and then to the master output
		 *  node.chain(effect, panVol, Tone.Master);
		 *  @param {...AudioParam|Tone|AudioNode} nodes
		 *  @returns {Tone.AudioNode} this
		 *  @private
		 */
	    Tone.AudioNode.prototype.chain = function () {
	        var currentUnit = this;
	        for (var i = 0; i < arguments.length; i++) {
	            var toUnit = arguments[i];
	            currentUnit.connect(toUnit);
	            currentUnit = toUnit;
	        }
	        return this;
	    };
	    /**
		 *  connect the output of this node to the rest of the nodes in parallel.
		 *  @param {...AudioParam|Tone|AudioNode} nodes
		 *  @returns {Tone.AudioNode} this
		 *  @private
		 */
	    Tone.AudioNode.prototype.fan = function () {
	        for (var i = 0; i < arguments.length; i++) {
	            this.connect(arguments[i]);
	        }
	        return this;
	    };
	    if (window.AudioNode) {
	        //give native nodes chain and fan methods
	        AudioNode.prototype.chain = Tone.AudioNode.prototype.chain;
	        AudioNode.prototype.fan = Tone.AudioNode.prototype.fan;
	    }
	    /**
		 * Dispose and disconnect
		 * @return {Tone.AudioNode} this
		 */
	    Tone.AudioNode.prototype.dispose = function () {
	        if (Tone.isDefined(this.input)) {
	            if (this.input instanceof AudioNode) {
	                this.input.disconnect();
	            }
	            this.input = null;
	        }
	        if (Tone.isDefined(this.output)) {
	            if (this.output instanceof AudioNode) {
	                this.output.disconnect();
	            }
	            this.output = null;
	        }
	        this._context = null;
	        return this;
	    };
	    return Tone.AudioNode;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Base class for all Signals. Used Internally.
		 *
		 *  @constructor
		 *  @extends {Tone}
		 */
	    Tone.SignalBase = function () {
	        Tone.AudioNode.call(this);
	    };
	    Tone.extend(Tone.SignalBase, Tone.AudioNode);
	    /**
		 *  When signals connect to other signals or AudioParams,
		 *  they take over the output value of that signal or AudioParam.
		 *  For all other nodes, the behavior is the same as a default <code>connect</code>.
		 *
		 *  @override
		 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node
		 *  @param {number} [outputNumber=0] The output number to connect from.
		 *  @param {number} [inputNumber=0] The input number to connect to.
		 *  @returns {Tone.SignalBase} this
		 */
	    Tone.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {
	        //zero it out so that the signal can have full control
	        if (Tone.Signal && Tone.Signal === node.constructor || Tone.Param && Tone.Param === node.constructor) {
	            //cancel changes
	            node._param.cancelScheduledValues(0);
	            //reset the value
	            node._param.value = 0;
	            //mark the value as overridden
	            node.overridden = true;
	        } else if (node instanceof AudioParam) {
	            node.cancelScheduledValues(0);
	            node.value = 0;
	        }
	        Tone.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);
	        return this;
	    };
	    return Tone.SignalBase;
	});
	Module(function (Tone) {
	    if (Tone.supported) {
	        //fixes safari only bug which is still present in 11
	        var ua = navigator.userAgent.toLowerCase();
	        var isSafari = ua.includes('safari') && !ua.includes('chrome');
	        if (isSafari) {
	            var WaveShaperNode = function (context) {
	                this._internalNode = this.input = this.output = context._native_createWaveShaper();
	                this._curve = null;
	                for (var prop in this._internalNode) {
	                    this._defineProperty(this._internalNode, prop);
	                }
	            };
	            Object.defineProperty(WaveShaperNode.prototype, 'curve', {
	                get: function () {
	                    return this._curve;
	                },
	                set: function (curve) {
	                    this._curve = curve;
	                    var array = new Float32Array(curve.length + 1);
	                    array.set(curve, 1);
	                    array[0] = curve[0];
	                    this._internalNode.curve = array;
	                }
	            });
	            WaveShaperNode.prototype._defineProperty = function (context, prop) {
	                if (Tone.isUndef(this[prop])) {
	                    Object.defineProperty(this, prop, {
	                        get: function () {
	                            if (typeof context[prop] === 'function') {
	                                return context[prop].bind(context);
	                            } else {
	                                return context[prop];
	                            }
	                        },
	                        set: function (val) {
	                            context[prop] = val;
	                        }
	                    });
	                }
	            };
	            AudioContext.prototype._native_createWaveShaper = AudioContext.prototype.createWaveShaper;
	            AudioContext.prototype.createWaveShaper = function () {
	                return new WaveShaperNode(this);
	            };
	        }
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Wraps the native Web Audio API
		 *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @param {function|Array|Number} mapping The function used to define the values.
		 *                                    The mapping function should take two arguments:
		 *                                    the first is the value at the current position
		 *                                    and the second is the array position.
		 *                                    If the argument is an array, that array will be
		 *                                    set as the wave shaping function. The input
		 *                                    signal is an AudioRange [-1, 1] value and the output
		 *                                    signal can take on any numerical values.
		 *
		 *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.
		 *  @example
		 * var timesTwo = new Tone.WaveShaper(function(val){
		 * 	return val * 2;
		 * }, 2048);
		 *  @example
		 * //a waveshaper can also be constructed with an array of values
		 * var invert = new Tone.WaveShaper([1, -1]);
		 */
	    Tone.WaveShaper = function (mapping, bufferLen) {
	        Tone.SignalBase.call(this);
	        /**
			 *  the waveshaper
			 *  @type {WaveShaperNode}
			 *  @private
			 */
	        this._shaper = this.input = this.output = this.context.createWaveShaper();
	        /**
			 *  the waveshapers curve
			 *  @type {Float32Array}
			 *  @private
			 */
	        this._curve = null;
	        if (Array.isArray(mapping)) {
	            this.curve = mapping;
	        } else if (isFinite(mapping) || Tone.isUndef(mapping)) {
	            this._curve = new Float32Array(Tone.defaultArg(mapping, 1024));
	        } else if (Tone.isFunction(mapping)) {
	            this._curve = new Float32Array(Tone.defaultArg(bufferLen, 1024));
	            this.setMap(mapping);
	        }
	    };
	    Tone.extend(Tone.WaveShaper, Tone.SignalBase);
	    /**
		 *  Uses a mapping function to set the value of the curve.
		 *  @param {function} mapping The function used to define the values.
		 *                            The mapping function take two arguments:
		 *                            the first is the value at the current position
		 *                            which goes from -1 to 1 over the number of elements
		 *                            in the curve array. The second argument is the array position.
		 *  @returns {Tone.WaveShaper} this
		 *  @example
		 * //map the input signal from [-1, 1] to [0, 10]
		 * shaper.setMap(function(val, index){
		 * 	return (val + 1) * 5;
		 * })
		 */
	    Tone.WaveShaper.prototype.setMap = function (mapping) {
	        var array = new Array(this._curve.length);
	        for (var i = 0, len = this._curve.length; i < len; i++) {
	            var normalized = i / (len - 1) * 2 - 1;
	            array[i] = mapping(normalized, i);
	        }
	        this.curve = array;
	        return this;
	    };
	    /**
		 * The array to set as the waveshaper curve. For linear curves
		 * array length does not make much difference, but for complex curves
		 * longer arrays will provide smoother interpolation.
		 * @memberOf Tone.WaveShaper#
		 * @type {Array}
		 * @name curve
		 */
	    Object.defineProperty(Tone.WaveShaper.prototype, 'curve', {
	        get: function () {
	            return this._shaper.curve;
	        },
	        set: function (mapping) {
	            this._curve = new Float32Array(mapping);
	            this._shaper.curve = this._curve;
	        }
	    });
	    /**
		 * Specifies what type of oversampling (if any) should be used when
		 * applying the shaping curve. Can either be "none", "2x" or "4x".
		 * @memberOf Tone.WaveShaper#
		 * @type {string}
		 * @name oversample
		 */
	    Object.defineProperty(Tone.WaveShaper.prototype, 'oversample', {
	        get: function () {
	            return this._shaper.oversample;
	        },
	        set: function (oversampling) {
	            if ([
	                    'none',
	                    '2x',
	                    '4x'
	                ].includes(oversampling)) {
	                this._shaper.oversample = oversampling;
	            } else {
	                throw new RangeError('Tone.WaveShaper: oversampling must be either \'none\', \'2x\', or \'4x\'');
	            }
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.WaveShaper} this
		 */
	    Tone.WaveShaper.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._shaper.disconnect();
	        this._shaper = null;
	        this._curve = null;
	        return this;
	    };
	    return Tone.WaveShaper;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.TimeBase is a flexible encoding of time
		 *         which can be evaluated to and from a string.
		 *  @extends {Tone}
		 *  @param  {Time}  val    The time value as a number or string
		 *  @param  {String=}  units  Unit values
		 *  @example
		 * Tone.TimeBase(4, "n")
		 * Tone.TimeBase(2, "t")
		 * Tone.TimeBase("2t")
		 * Tone.TimeBase("2t") + Tone.TimeBase("4n");
		 */
	    Tone.TimeBase = function (val, units) {
	        //allows it to be constructed with or without 'new'
	        if (this instanceof Tone.TimeBase) {
	            /**
				 *  The value
				 *  @type  {Number|String|Tone.TimeBase}
				 *  @private
				 */
	            this._val = val;
	            /**
				 * The units
				 * @type {String?}
				 * @private
				 */
	            this._units = units;
	            //test if the value is a string representation of a number
	            if (Tone.isUndef(this._units) && Tone.isString(this._val) && // eslint-disable-next-line eqeqeq
	                parseFloat(this._val) == this._val && this._val.charAt(0) !== '+') {
	                this._val = parseFloat(this._val);
	                this._units = this._defaultUnits;
	            } else if (val && val.constructor === this.constructor) {
	                //if they're the same type, just copy values over
	                this._val = val._val;
	                this._units = val._units;
	            } else if (val instanceof Tone.TimeBase) {
	                switch (this._defaultUnits) {
	                case 's':
	                    this._val = val.toSeconds();
	                    break;
	                case 'i':
	                    this._val = val.toTicks();
	                    break;
	                case 'hz':
	                    this._val = val.toFrequency();
	                    break;
	                case 'midi':
	                    this._val = val.toMidi();
	                    break;
	                default:
	                    throw new Error('Unrecognized default units ' + this._defaultUnits);
	                }
	            }
	        } else {
	            return new Tone.TimeBase(val, units);
	        }
	    };
	    Tone.extend(Tone.TimeBase);
	    ///////////////////////////////////////////////////////////////////////////
	    //	ABSTRACT SYNTAX TREE PARSER
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  All the primary expressions.
		 *  @private
		 *  @type  {Object}
		 */
	    Tone.TimeBase.prototype._expressions = {
	        'n': {
	            regexp: /^(\d+)n(\.?)$/i,
	            method: function (value, dot) {
	                value = parseInt(value);
	                var scalar = dot === '.' ? 1.5 : 1;
	                if (value === 1) {
	                    return this._beatsToUnits(this._getTimeSignature()) * scalar;
	                } else {
	                    return this._beatsToUnits(4 / value) * scalar;
	                }
	            }
	        },
	        't': {
	            regexp: /^(\d+)t$/i,
	            method: function (value) {
	                value = parseInt(value);
	                return this._beatsToUnits(8 / (parseInt(value) * 3));
	            }
	        },
	        'm': {
	            regexp: /^(\d+)m$/i,
	            method: function (value) {
	                return this._beatsToUnits(parseInt(value) * this._getTimeSignature());
	            }
	        },
	        'i': {
	            regexp: /^(\d+)i$/i,
	            method: function (value) {
	                return this._ticksToUnits(parseInt(value));
	            }
	        },
	        'hz': {
	            regexp: /^(\d+(?:\.\d+)?)hz$/i,
	            method: function (value) {
	                return this._frequencyToUnits(parseFloat(value));
	            }
	        },
	        'tr': {
	            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/,
	            method: function (m, q, s) {
	                var total = 0;
	                if (m && m !== '0') {
	                    total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
	                }
	                if (q && q !== '0') {
	                    total += this._beatsToUnits(parseFloat(q));
	                }
	                if (s && s !== '0') {
	                    total += this._beatsToUnits(parseFloat(s) / 4);
	                }
	                return total;
	            }
	        },
	        's': {
	            regexp: /^(\d+(?:\.\d+)?)s$/,
	            method: function (value) {
	                return this._secondsToUnits(parseFloat(value));
	            }
	        },
	        'samples': {
	            regexp: /^(\d+)samples$/,
	            method: function (value) {
	                return parseInt(value) / this.context.sampleRate;
	            }
	        },
	        'default': {
	            regexp: /^(\d+(?:\.\d+)?)$/,
	            method: function (value) {
	                return this._expressions[this._defaultUnits].method.call(this, value);
	            }
	        }
	    };
	    /**
		 *  The default units if none are given.
		 *  @type {String}
		 *  @private
		 */
	    Tone.TimeBase.prototype._defaultUnits = 's';
	    ///////////////////////////////////////////////////////////////////////////
	    //	TRANSPORT FALLBACKS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 * Return the bpm, or 120 if Transport is not available
		 * @type {Number}
		 * @private
		 */
	    Tone.TimeBase.prototype._getBpm = function () {
	        if (Tone.Transport) {
	            return Tone.Transport.bpm.value;
	        } else {
	            return 120;
	        }
	    };
	    /**
		 * Return the timeSignature or 4 if Transport is not available
		 * @type {Number}
		 * @private
		 */
	    Tone.TimeBase.prototype._getTimeSignature = function () {
	        if (Tone.Transport) {
	            return Tone.Transport.timeSignature;
	        } else {
	            return 4;
	        }
	    };
	    /**
		 * Return the PPQ or 192 if Transport is not available
		 * @type {Number}
		 * @private
		 */
	    Tone.TimeBase.prototype._getPPQ = function () {
	        if (Tone.Transport) {
	            return Tone.Transport.PPQ;
	        } else {
	            return 192;
	        }
	    };
	    /**
		 * Return the current time in whichever context is relevant
		 * @type {Number}
		 * @private
		 */
	    Tone.TimeBase.prototype._now = function () {
	        return this.now();
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	UNIT CONVERSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Returns the value of a frequency in the current units
		 *  @param {Frequency} freq
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.TimeBase.prototype._frequencyToUnits = function (freq) {
	        return 1 / freq;
	    };
	    /**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.TimeBase.prototype._beatsToUnits = function (beats) {
	        return 60 / this._getBpm() * beats;
	    };
	    /**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.TimeBase.prototype._secondsToUnits = function (seconds) {
	        return seconds;
	    };
	    /**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.TimeBase.prototype._ticksToUnits = function (ticks) {
	        return ticks * (this._beatsToUnits(1) / this._getPPQ());
	    };
	    /**
		 * With no arguments, return 'now'
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.TimeBase.prototype._noArg = function () {
	        return this._now();
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	EXPRESSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Evaluate the time value. Returns the time
		 *  in seconds.
		 *  @return  {Seconds}
		 */
	    Tone.TimeBase.prototype.valueOf = function () {
	        if (Tone.isUndef(this._val)) {
	            return this._noArg();
	        } else if (Tone.isString(this._val) && Tone.isUndef(this._units)) {
	            for (var units in this._expressions) {
	                if (this._expressions[units].regexp.test(this._val.trim())) {
	                    this._units = units;
	                    break;
	                }
	            }
	        }
	        if (Tone.isDefined(this._units)) {
	            var expr = this._expressions[this._units];
	            var matching = this._val.toString().trim().match(expr.regexp);
	            if (matching) {
	                return expr.method.apply(this, matching.slice(1));
	            } else {
	                return expr.method.call(this, parseFloat(this._val));
	            }
	        } else {
	            return this._val;
	        }
	    };
	    /**
		 *  Return the value in seconds
		 *  @return {Seconds}
		 */
	    Tone.TimeBase.prototype.toSeconds = function () {
	        return this.valueOf();
	    };
	    /**
		 *  Return the value in hertz
		 *  @return {Frequency}
		 */
	    Tone.TimeBase.prototype.toFrequency = function () {
	        return 1 / this.toSeconds();
	    };
	    /**
		 *  Return the time in samples
		 *  @return  {Samples}
		 */
	    Tone.TimeBase.prototype.toSamples = function () {
	        return this.toSeconds() * this.context.sampleRate;
	    };
	    /**
		 *  Return the time in milliseconds.
		 *  @return  {Milliseconds}
		 */
	    Tone.TimeBase.prototype.toMilliseconds = function () {
	        return this.toSeconds() * 1000;
	    };
	    /**
		 *  Clean up
		 *  @return {Tone.TimeBase} this
		 */
	    Tone.TimeBase.prototype.dispose = function () {
	        this._val = null;
	        this._units = null;
	    };
	    return Tone.TimeBase;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Frequency is a primitive type for encoding Frequency values.
		 *         Eventually all time values are evaluated to hertz
		 *         using the `eval` method.
		 *  @constructor
		 *  @extends {Tone.TimeBase}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * Tone.Frequency("C3") // 261
		 * Tone.Frequency(38, "midi") //
		 * Tone.Frequency("C3").transpose(4);
		 */
	    Tone.Frequency = function (val, units) {
	        if (this instanceof Tone.Frequency) {
	            Tone.TimeBase.call(this, val, units);
	        } else {
	            return new Tone.Frequency(val, units);
	        }
	    };
	    Tone.extend(Tone.Frequency, Tone.TimeBase);
	    ///////////////////////////////////////////////////////////////////////////
	    //	AUGMENT BASE EXPRESSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    Tone.Frequency.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {
	        'midi': {
	            regexp: /^(\d+(?:\.\d+)?midi)/,
	            method: function (value) {
	                if (this._defaultUnits === 'midi') {
	                    return value;
	                } else {
	                    return Tone.Frequency.mtof(value);
	                }
	            }
	        },
	        'note': {
	            regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,
	            method: function (pitch, octave) {
	                var index = noteToScaleIndex[pitch.toLowerCase()];
	                var noteNumber = index + (parseInt(octave) + 1) * 12;
	                if (this._defaultUnits === 'midi') {
	                    return noteNumber;
	                } else {
	                    return Tone.Frequency.mtof(noteNumber);
	                }
	            }
	        },
	        'tr': {
	            regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
	            method: function (m, q, s) {
	                var total = 1;
	                if (m && m !== '0') {
	                    total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
	                }
	                if (q && q !== '0') {
	                    total *= this._beatsToUnits(parseFloat(q));
	                }
	                if (s && s !== '0') {
	                    total *= this._beatsToUnits(parseFloat(s) / 4);
	                }
	                return total;
	            }
	        }
	    });
	    ///////////////////////////////////////////////////////////////////////////
	    //	EXPRESSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Transposes the frequency by the given number of semitones.
		 *  @param  {Interval}  interval
		 *  @return  {Tone.Frequency} A new transposed frequency
		 *  @example
		 * Tone.Frequency("A4").transpose(3); //"C5"
		 */
	    Tone.Frequency.prototype.transpose = function (interval) {
	        return new this.constructor(this.valueOf() * Tone.intervalToFrequencyRatio(interval));
	    };
	    /**
		 *  Takes an array of semitone intervals and returns
		 *  an array of frequencies transposed by those intervals.
		 *  @param  {Array}  intervals
		 *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies
		 *  @example
		 * Tone.Frequency("A4").harmonize([0, 3, 7]); //["A4", "C5", "E5"]
		 */
	    Tone.Frequency.prototype.harmonize = function (intervals) {
	        return intervals.map(function (interval) {
	            return this.transpose(interval);
	        }.bind(this));
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	UNIT CONVERSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Return the value of the frequency as a MIDI note
		 *  @return  {MIDI}
		 *  @example
		 * Tone.Frequency("C4").toMidi(); //60
		 */
	    Tone.Frequency.prototype.toMidi = function () {
	        return Tone.Frequency.ftom(this.valueOf());
	    };
	    /**
		 *  Return the value of the frequency in Scientific Pitch Notation
		 *  @return  {Note}
		 *  @example
		 * Tone.Frequency(69, "midi").toNote(); //"A4"
		 */
	    Tone.Frequency.prototype.toNote = function () {
	        var freq = this.toFrequency();
	        var log = Math.log2(freq / Tone.Frequency.A4);
	        var noteNumber = Math.round(12 * log) + 57;
	        var octave = Math.floor(noteNumber / 12);
	        if (octave < 0) {
	            noteNumber += -12 * octave;
	        }
	        var noteName = scaleIndexToNote[noteNumber % 12];
	        return noteName + octave.toString();
	    };
	    /**
		 *  Return the duration of one cycle in seconds.
		 *  @return  {Seconds}
		 */
	    Tone.Frequency.prototype.toSeconds = function () {
	        return 1 / Tone.TimeBase.prototype.toSeconds.call(this);
	    };
	    /**
		 *  Return the value in Hertz
		 *  @return  {Frequency}
		 */
	    Tone.Frequency.prototype.toFrequency = function () {
	        return Tone.TimeBase.prototype.toFrequency.call(this);
	    };
	    /**
		 *  Return the duration of one cycle in ticks
		 *  @return  {Ticks}
		 */
	    Tone.Frequency.prototype.toTicks = function () {
	        var quarterTime = this._beatsToUnits(1);
	        var quarters = this.valueOf() / quarterTime;
	        return Math.floor(quarters * Tone.Transport.PPQ);
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	UNIT CONVERSIONS HELPERS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  With no arguments, return 0
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Frequency.prototype._noArg = function () {
	        return 0;
	    };
	    /**
		 *  Returns the value of a frequency in the current units
		 *  @param {Frequency} freq
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Frequency.prototype._frequencyToUnits = function (freq) {
	        return freq;
	    };
	    /**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Frequency.prototype._ticksToUnits = function (ticks) {
	        return 1 / (ticks * 60 / (Tone.Transport.bpm.value * Tone.Transport.PPQ));
	    };
	    /**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Frequency.prototype._beatsToUnits = function (beats) {
	        return 1 / Tone.TimeBase.prototype._beatsToUnits.call(this, beats);
	    };
	    /**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Frequency.prototype._secondsToUnits = function (seconds) {
	        return 1 / seconds;
	    };
	    /**
		 *  The default units if none are given.
		 *  @private
		 */
	    Tone.Frequency.prototype._defaultUnits = 'hz';
	    ///////////////////////////////////////////////////////////////////////////
	    //	FREQUENCY CONVERSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Note to scale index
		 *  @type  {Object}
		 */
	    var noteToScaleIndex = {
	        'cbb': -2,
	        'cb': -1,
	        'c': 0,
	        'c#': 1,
	        'cx': 2,
	        'dbb': 0,
	        'db': 1,
	        'd': 2,
	        'd#': 3,
	        'dx': 4,
	        'ebb': 2,
	        'eb': 3,
	        'e': 4,
	        'e#': 5,
	        'ex': 6,
	        'fbb': 3,
	        'fb': 4,
	        'f': 5,
	        'f#': 6,
	        'fx': 7,
	        'gbb': 5,
	        'gb': 6,
	        'g': 7,
	        'g#': 8,
	        'gx': 9,
	        'abb': 7,
	        'ab': 8,
	        'a': 9,
	        'a#': 10,
	        'ax': 11,
	        'bbb': 9,
	        'bb': 10,
	        'b': 11,
	        'b#': 12,
	        'bx': 13
	    };
	    /**
		 *  scale index to note (sharps)
		 *  @type  {Array}
		 */
	    var scaleIndexToNote = [
	        'C',
	        'C#',
	        'D',
	        'D#',
	        'E',
	        'F',
	        'F#',
	        'G',
	        'G#',
	        'A',
	        'A#',
	        'B'
	    ];
	    /**
		 *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)
		 *  A4's values in Hertz.
		 *  @type {Frequency}
		 *  @static
		 */
	    Tone.Frequency.A4 = 440;
	    /**
		 *  Convert a MIDI note to frequency value.
		 *  @param  {MIDI} midi The midi number to convert.
		 *  @return {Frequency} the corresponding frequency value
		 *  @static
		 *  @example
		 * Tone.Frequency.mtof(69); // returns 440
		 */
	    Tone.Frequency.mtof = function (midi) {
	        return Tone.Frequency.A4 * Math.pow(2, (midi - 69) / 12);
	    };
	    /**
		 *  Convert a frequency value to a MIDI note.
		 *  @param {Frequency} frequency The value to frequency value to convert.
		 *  @returns  {MIDI}
		 *  @static
		 *  @example
		 * Tone.Frequency.ftom(440); // returns 69
		 */
	    Tone.Frequency.ftom = function (frequency) {
	        return 69 + Math.round(12 * Math.log2(frequency / Tone.Frequency.A4));
	    };
	    return Tone.Frequency;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Time is a primitive type for encoding Time values.
		 *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed
		 *         into the parameter of any method which takes time as an argument.
		 *  @constructor
		 *  @extends {Tone.TimeBase}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * var t = Tone.Time("4n");//a quarter note
		 */
	    Tone.Time = function (val, units) {
	        if (this instanceof Tone.Time) {
	            Tone.TimeBase.call(this, val, units);
	        } else {
	            return new Tone.Time(val, units);
	        }
	    };
	    Tone.extend(Tone.Time, Tone.TimeBase);
	    /**
		 * Extend the base expressions
		 */
	    Tone.Time.prototype._expressions = Object.assign({}, Tone.TimeBase.prototype._expressions, {
	        'quantize': {
	            regexp: /^@(.+)/,
	            method: function (capture) {
	                if (Tone.Transport) {
	                    var quantTo = new this.constructor(capture);
	                    return Tone.Transport.nextSubdivision(quantTo);
	                } else {
	                    return 0;
	                }
	            }
	        },
	        'now': {
	            regexp: /^\+(.+)/,
	            method: function (capture) {
	                return this._now() + new this.constructor(capture);
	            }
	        }
	    });
	    /**
		 *  Quantize the time by the given subdivision. Optionally add a
		 *  percentage which will move the time value towards the ideal
		 *  quantized value by that percentage.
		 *  @param  {Number|Time}  val    The subdivision to quantize to
		 *  @param  {NormalRange}  [percent=1]  Move the time value
		 *                                   towards the quantized value by
		 *                                   a percentage.
		 *  @return  {Number}  this
		 *  @example
		 * Tone.Time(21).quantize(2) //returns 22
		 * Tone.Time(0.6).quantize("4n", 0.5) //returns 0.55
		 */
	    Tone.Time.prototype.quantize = function (subdiv, percent) {
	        percent = Tone.defaultArg(percent, 1);
	        var subdivision = new this.constructor(subdiv);
	        var value = this.valueOf();
	        var multiple = Math.round(value / subdivision);
	        var ideal = multiple * subdivision;
	        var diff = ideal - value;
	        return value + diff * percent;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    // CONVERSIONS
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Convert a Time to Notation. The notation values are will be the
		 *  closest representation between 1m to 128th note.
		 *  @return {Notation}
		 *  @example
		 * //if the Transport is at 120bpm:
		 * Tone.Time(2).toNotation();//returns "1m"
		 */
	    Tone.Time.prototype.toNotation = function () {
	        var time = this.toSeconds();
	        var testNotations = ['1m'];
	        for (var power = 1; power < 8; power++) {
	            var subdiv = Math.pow(2, power);
	            testNotations.push(subdiv + 'n.');
	            testNotations.push(subdiv + 'n');
	            testNotations.push(subdiv + 't');
	        }
	        testNotations.push('0');
	        //find the closets notation representation
	        var closest = testNotations[0];
	        var closestSeconds = Tone.Time(testNotations[0]).toSeconds();
	        testNotations.forEach(function (notation) {
	            var notationSeconds = Tone.Time(notation).toSeconds();
	            if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {
	                closest = notation;
	                closestSeconds = notationSeconds;
	            }
	        });
	        return closest;
	    };
	    /**
		 *  Return the time encoded as Bars:Beats:Sixteenths.
		 *  @return  {BarsBeatsSixteenths}
		 */
	    Tone.Time.prototype.toBarsBeatsSixteenths = function () {
	        var quarterTime = this._beatsToUnits(1);
	        var quarters = this.valueOf() / quarterTime;
	        var measures = Math.floor(quarters / this._getTimeSignature());
	        var sixteenths = quarters % 1 * 4;
	        quarters = Math.floor(quarters) % this._getTimeSignature();
	        sixteenths = sixteenths.toString();
	        if (sixteenths.length > 3) {
	            // the additional parseFloat removes insignificant trailing zeroes
	            sixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));
	        }
	        var progress = [
	            measures,
	            quarters,
	            sixteenths
	        ];
	        return progress.join(':');
	    };
	    /**
		 *  Return the time in ticks.
		 *  @return  {Ticks}
		 */
	    Tone.Time.prototype.toTicks = function () {
	        var quarterTime = this._beatsToUnits(1);
	        var quarters = this.valueOf() / quarterTime;
	        return Math.round(quarters * this._getPPQ());
	    };
	    /**
		 *  Return the time in seconds.
		 *  @return  {Seconds}
		 */
	    Tone.Time.prototype.toSeconds = function () {
	        return this.valueOf();
	    };
	    /**
		 *  Return the value as a midi note.
		 *  @return  {Midi}
		 */
	    Tone.Time.prototype.toMidi = function () {
	        return Tone.Frequency.ftom(this.toFrequency());
	    };
	    return Tone.Time;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.TransportTime is a the time along the Transport's
		 *         timeline. It is similar to Tone.Time, but instead of evaluating
		 *         against the AudioContext's clock, it is evaluated against
		 *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
		 *  @constructor
		 *  @param  {Time}  val    The time value as a number or string
		 *  @param  {String=}  units  Unit values
		 *  @extends {Tone.Time}
		 */
	    Tone.TransportTime = function (val, units) {
	        if (this instanceof Tone.TransportTime) {
	            Tone.Time.call(this, val, units);
	        } else {
	            return new Tone.TransportTime(val, units);
	        }
	    };
	    Tone.extend(Tone.TransportTime, Tone.Time);
	    /**
		 * Return the current time in whichever context is relevant
		 * @type {Number}
		 * @private
		 */
	    Tone.TransportTime.prototype._now = function () {
	        return Tone.Transport.seconds;
	    };
	    return Tone.TransportTime;
	});
	Module(function (Tone) {
	    ///////////////////////////////////////////////////////////////////////////
	    //	TYPES
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 * Units which a value can take on.
		 * @enum {String}
		 */
	    Tone.Type = {
	        /**
			 *  Default units
			 *  @typedef {Default}
			 */
	        Default: 'number',
	        /**
			 *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).
			 *
			 *  * Numbers, which will be taken literally as the time (in seconds).
			 *  * Notation, ("4n", "8t") describes time in BPM and time signature relative values.
			 *  * TransportTime, ("4:3:2") will also provide tempo and time signature relative times
			 *  in the form BARS:QUARTERS:SIXTEENTHS.
			 *  * Frequency, ("8hz") is converted to the length of the cycle in seconds.
			 *  * Now-Relative, ("+1") prefix any of the above with "+" and it will be interpreted as
			 *  "the current time plus whatever expression follows".
			 *  * Expressions, ("3:0 + 2 - (1m / 7)") any of the above can also be combined
			 *  into a mathematical expression which will be evaluated to compute the desired time.
			 *  * No Argument, for methods which accept time, no argument will be interpreted as
			 *  "now" (i.e. the currentTime).
			 *
			 *  @typedef {Time}
			 */
	        Time: 'time',
	        /**
			 *  Frequency can be described similar to time, except ultimately the
			 *  values are converted to frequency instead of seconds. A number
			 *  is taken literally as the value in hertz. Additionally any of the
			 *  Time encodings can be used. Note names in the form
			 *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their
			 *  frequency value.
			 *  @typedef {Frequency}
			 */
	        Frequency: 'frequency',
	        /**
			 *  TransportTime describes a position along the Transport's timeline. It is
			 *  similar to Time in that it uses all the same encodings, but TransportTime specifically
			 *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.
			 *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)
			 *  @typedef {TransportTime}
			 */
	        TransportTime: 'transportTime',
	        /**
			 *  Ticks are the basic subunit of the Transport. They are
			 *  the smallest unit of time that the Transport supports.
			 *  @typedef {Ticks}
			 */
	        Ticks: 'ticks',
	        /**
			 *  Normal values are within the range [0, 1].
			 *  @typedef {NormalRange}
			 */
	        NormalRange: 'normalRange',
	        /**
			 *  AudioRange values are between [-1, 1].
			 *  @typedef {AudioRange}
			 */
	        AudioRange: 'audioRange',
	        /**
			 *  Decibels are a logarithmic unit of measurement which is useful for volume
			 *  because of the logarithmic way that we perceive loudness. 0 decibels
			 *  means no change in volume. -10db is approximately half as loud and 10db
			 *  is twice is loud.
			 *  @typedef {Decibels}
			 */
	        Decibels: 'db',
	        /**
			 *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.
			 *  @typedef {Interval}
			 */
	        Interval: 'interval',
	        /**
			 *  Beats per minute.
			 *  @typedef {BPM}
			 */
	        BPM: 'bpm',
	        /**
			 *  The value must be greater than or equal to 0.
			 *  @typedef {Positive}
			 */
	        Positive: 'positive',
	        /**
			 *  Gain is the ratio between input and output of a signal.
			 *  A gain of 0 is the same as silencing the signal. A gain of
			 *  1, causes no change to the incoming signal.
			 *  @typedef {Gain}
			 */
	        Gain: 'gain',
	        /**
			 *  A cent is a hundredth of a semitone.
			 *  @typedef {Cents}
			 */
	        Cents: 'cents',
	        /**
			 *  Angle between 0 and 360.
			 *  @typedef {Degrees}
			 */
	        Degrees: 'degrees',
	        /**
			 *  A number representing a midi note.
			 *  @typedef {MIDI}
			 */
	        MIDI: 'midi',
	        /**
			 *  A colon-separated representation of time in the form of
			 *  Bars:Beats:Sixteenths.
			 *  @typedef {BarsBeatsSixteenths}
			 */
	        BarsBeatsSixteenths: 'barsBeatsSixteenths',
	        /**
			 *  Sampling is the reduction of a continuous signal to a discrete signal.
			 *  Audio is typically sampled 44100 times per second.
			 *  @typedef {Samples}
			 */
	        Samples: 'samples',
	        /**
			 *  Hertz are a frequency representation defined as one cycle per second.
			 *  @typedef {Hertz}
			 */
	        Hertz: 'hertz',
	        /**
			 *  A frequency represented by a letter name,
			 *  accidental and octave. This system is known as
			 *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).
			 *  @typedef {Note}
			 */
	        Note: 'note',
	        /**
			 *  One millisecond is a thousandth of a second.
			 *  @typedef {Milliseconds}
			 */
	        Milliseconds: 'milliseconds',
	        /**
			 *  Seconds are the time unit of the AudioContext. In the end,
			 *  all values need to be evaluated to seconds.
			 *  @typedef {Seconds}
			 */
	        Seconds: 'seconds',
	        /**
			 *  A string representing a duration relative to a measure.
			 *  * "4n" = quarter note
			 *  * "2m" = two measures
			 *  * "8t" = eighth-note triplet
			 *  @typedef {Notation}
			 */
	        Notation: 'notation'
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    // AUGMENT TONE's PROTOTYPE
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Convert Time into seconds.
		 *
		 *  Unlike the method which it overrides, this takes into account
		 *  transporttime and musical notation.
		 *
		 *  Time : 1.40
		 *  Notation: 4n or 1m or 2t
		 *  Now Relative: +3n
		 *  Math: 3n+16n or even complicated expressions ((3n*2)/6 + 1)
		 *
		 *  @param  {Time} time
		 *  @return {Seconds}
		 */
	    Tone.prototype.toSeconds = function (time) {
	        if (Tone.isNumber(time)) {
	            return time;
	        } else if (Tone.isUndef(time)) {
	            return this.now();
	        } else if (Tone.isString(time)) {
	            return new Tone.Time(time).toSeconds();
	        } else if (time instanceof Tone.TimeBase) {
	            return time.toSeconds();
	        }
	    };
	    /**
		 *  Convert a frequency representation into a number.
		 *  @param  {Frequency} freq
		 *  @return {Hertz}      the frequency in hertz
		 */
	    Tone.prototype.toFrequency = function (freq) {
	        if (Tone.isNumber(freq)) {
	            return freq;
	        } else if (Tone.isString(freq) || Tone.isUndef(freq)) {
	            return new Tone.Frequency(freq).valueOf();
	        } else if (freq instanceof Tone.TimeBase) {
	            return freq.toFrequency();
	        }
	    };
	    /**
		 *  Convert a time representation into ticks.
		 *  @param  {Time} time
		 *  @return {Ticks}  the time in ticks
		 */
	    Tone.prototype.toTicks = function (time) {
	        if (Tone.isNumber(time) || Tone.isString(time)) {
	            return new Tone.TransportTime(time).toTicks();
	        } else if (Tone.isUndef(time)) {
	            return Tone.Transport.ticks;
	        } else if (time instanceof Tone.TimeBase) {
	            return time.toTicks();
	        }
	    };
	    return Tone;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Param wraps the native Web Audio's AudioParam to provide
		 *         additional unit conversion functionality. It also
		 *         serves as a base-class for classes which have a single,
		 *         automatable parameter.
		 *  @extends {Tone.AudioNode}
		 *  @param  {AudioParam}  param  The parameter to wrap.
		 *  @param  {Tone.Type} units The units of the audio param.
		 *  @param  {Boolean} convert If the param should be converted.
		 */
	    Tone.Param = function () {
	        var options = Tone.defaults(arguments, [
	            'param',
	            'units',
	            'convert'
	        ], Tone.Param);
	        Tone.AudioNode.call(this);
	        /**
			 *  The native parameter to control
			 *  @type  {AudioParam}
			 *  @private
			 */
	        this._param = this.input = options.param;
	        /**
			 *  The units of the parameter
			 *  @type {Tone.Type}
			 */
	        this.units = options.units;
	        /**
			 *  If the value should be converted or not
			 *  @type {Boolean}
			 */
	        this.convert = options.convert;
	        /**
			 *  True if the signal value is being overridden by
			 *  a connected signal.
			 *  @readOnly
			 *  @type  {boolean}
			 *  @private
			 */
	        this.overridden = false;
	        /**
			 * The timeline which tracks all of the automations.
			 * @type {Tone.Timeline}
			 * @private
			 */
	        this._events = new Tone.Timeline(1000);
	        if (Tone.isDefined(options.value) && this._param) {
	            this.value = options.value;
	        }
	    };
	    Tone.extend(Tone.Param, Tone.AudioNode);
	    /**
		 *  Defaults
		 *  @type  {Object}
		 *  @const
		 */
	    Tone.Param.defaults = {
	        'units': Tone.Type.Default,
	        'convert': true,
	        'param': undefined
	    };
	    /**
		 * The current value of the parameter.
		 * @memberOf Tone.Param#
		 * @type {Number}
		 * @name value
		 */
	    Object.defineProperty(Tone.Param.prototype, 'value', {
	        get: function () {
	            var now = this.now();
	            return this._toUnits(this.getValueAtTime(now));
	        },
	        set: function (value) {
	            this._initialValue = this._fromUnits(value);
	            this.cancelScheduledValues(this.context.currentTime);
	            this.setValueAtTime(value, this.context.currentTime);
	        }
	    });
	    /**
		 * The minimum output value of the parameter
		 * @memberOf Tone.Param#
		 * @type {Number}
		 * @name value
		 */
	    Object.defineProperty(Tone.Param.prototype, 'minValue', {
	        get: function () {
	            if (this.units === Tone.Type.Time || this.units === Tone.Type.Frequency || this.units === Tone.Type.NormalRange || this.units === Tone.Type.Positive || this.units === Tone.Type.BPM) {
	                return 0;
	            } else if (this.units === Tone.Type.AudioRange) {
	                return -1;
	            } else if (this.units === Tone.Type.Decibels) {
	                return -Infinity;
	            } else {
	                return this._param.minValue;
	            }
	        }
	    });
	    /**
		 * The maximum output value of the parameter
		 * @memberOf Tone.Param#
		 * @type {Number}
		 * @name value
		 */
	    Object.defineProperty(Tone.Param.prototype, 'maxValue', {
	        get: function () {
	            if (this.units === Tone.Type.NormalRange || this.units === Tone.Type.AudioRange) {
	                return 1;
	            } else {
	                return this._param.maxValue;
	            }
	        }
	    });
	    /**
		 *  Convert the given value from the type specified by Tone.Param.units
		 *  into the destination value (such as Gain or Frequency).
		 *  @private
		 *  @param  {*} val the value to convert
		 *  @return {number}     the number which the value should be set to
		 */
	    Tone.Param.prototype._fromUnits = function (val) {
	        if ((this.convert || Tone.isUndef(this.convert)) && !this.overridden) {
	            switch (this.units) {
	            case Tone.Type.Time:
	                return this.toSeconds(val);
	            case Tone.Type.Frequency:
	                return this.toFrequency(val);
	            case Tone.Type.Decibels:
	                return Tone.dbToGain(val);
	            case Tone.Type.NormalRange:
	                return Math.min(Math.max(val, 0), 1);
	            case Tone.Type.AudioRange:
	                return Math.min(Math.max(val, -1), 1);
	            case Tone.Type.Positive:
	                return Math.max(val, 0);
	            default:
	                return val;
	            }
	        } else {
	            return val;
	        }
	    };
	    /**
		 * Convert the parameters value into the units specified by Tone.Param.units.
		 * @private
		 * @param  {number} val the value to convert
		 * @return {number}
		 */
	    Tone.Param.prototype._toUnits = function (val) {
	        if (this.convert || Tone.isUndef(this.convert)) {
	            switch (this.units) {
	            case Tone.Type.Decibels:
	                return Tone.gainToDb(val);
	            default:
	                return val;
	            }
	        } else {
	            return val;
	        }
	    };
	    /**
		 *  the minimum output value
		 *  @type {Number}
		 *  @private
		 */
	    Tone.Param.prototype._minOutput = 0.00001;
	    /**
		 *  The event types
		 *  @enum {String}
		 *  @private
		 */
	    Tone.Param.AutomationType = {
	        Linear: 'linearRampToValueAtTime',
	        Exponential: 'exponentialRampToValueAtTime',
	        Target: 'setTargetAtTime',
	        SetValue: 'setValueAtTime'
	    };
	    /**
		 *  Schedules a parameter value change at the given time.
		 *  @param {*}	value The value to set the signal.
		 *  @param {Time}  time The time when the change should occur.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //set the frequency to "G4" in exactly 1 second from now.
		 * freq.setValueAtTime("G4", "+1");
		 */
	    Tone.Param.prototype.setValueAtTime = function (value, time) {
	        time = this.toSeconds(time);
	        value = this._fromUnits(value);
	        this._events.add({
	            'type': Tone.Param.AutomationType.SetValue,
	            'value': value,
	            'time': time
	        });
	        this._param.setValueAtTime(value, time);
	        return this;
	    };
	    /**
		 *  Get the signals value at the given time. Subsequent scheduling
		 *  may invalidate the returned value.
		 *  @param {Time} time When to get the value
		 *  @returns {Number} The value at the given time
		 */
	    Tone.Param.prototype.getValueAtTime = function (time) {
	        time = this.toSeconds(time);
	        var after = this._events.getAfter(time);
	        var before = this._events.get(time);
	        var initialValue = Tone.defaultArg(this._initialValue, this._param.defaultValue);
	        var value = initialValue;
	        //if it was set by
	        if (before === null) {
	            value = initialValue;
	        } else if (before.type === Tone.Param.AutomationType.Target) {
	            var previous = this._events.getBefore(before.time);
	            var previousVal;
	            if (previous === null) {
	                previousVal = initialValue;
	            } else {
	                previousVal = previous.value;
	            }
	            value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);
	        } else if (after === null) {
	            value = before.value;
	        } else if (after.type === Tone.Param.AutomationType.Linear) {
	            value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);
	        } else if (after.type === Tone.Param.AutomationType.Exponential) {
	            value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);
	        } else {
	            value = before.value;
	        }
	        return value;
	    };
	    /**
		 *  Creates a schedule point with the current value at the current time.
		 *  This is useful for creating an automation anchor point in order to
		 *  schedule changes from the current value.
		 *
		 *  @param {number=} now (Optionally) pass the now value in.
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.setRampPoint = function (time) {
	        time = this.toSeconds(time);
	        var currentVal = this.getValueAtTime(time);
	        this.cancelAndHoldAtTime(time);
	        if (currentVal === 0) {
	            currentVal = this._minOutput;
	        }
	        this.setValueAtTime(this._toUnits(currentVal), time);
	        return this;
	    };
	    /**
		 *  Schedules a linear continuous change in parameter value from the
		 *  previous scheduled parameter value to the given value.
		 *
		 *  @param  {number} value
		 *  @param  {Time} endTime
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.linearRampToValueAtTime = function (value, endTime) {
	        value = this._fromUnits(value);
	        endTime = this.toSeconds(endTime);
	        this._events.add({
	            'type': Tone.Param.AutomationType.Linear,
	            'value': value,
	            'time': endTime
	        });
	        this._param.linearRampToValueAtTime(value, endTime);
	        return this;
	    };
	    /**
		 *  Schedules an exponential continuous change in parameter value from
		 *  the previous scheduled parameter value to the given value.
		 *
		 *  @param  {number} value
		 *  @param  {Time} endTime
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {
	        value = this._fromUnits(value);
	        value = Math.max(this._minOutput, value);
	        endTime = this.toSeconds(endTime);
	        //store the event
	        this._events.add({
	            'type': Tone.Param.AutomationType.Exponential,
	            'time': endTime,
	            'value': value
	        });
	        this._param.exponentialRampToValueAtTime(value, endTime);
	        return this;
	    };
	    /**
		 *  Schedules an exponential continuous change in parameter value from
		 *  the current time and current value to the given value over the
		 *  duration of the rampTime.
		 *
		 *  @param  {number} value   The value to ramp to.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //exponentially ramp to the value 2 over 4 seconds.
		 * signal.exponentialRampTo(2, 4);
		 */
	    Tone.Param.prototype.exponentialRampTo = function (value, rampTime, startTime) {
	        startTime = this.toSeconds(startTime);
	        this.setRampPoint(startTime);
	        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
	        return this;
	    };
	    /**
		 *  Schedules an linear continuous change in parameter value from
		 *  the current time and current value to the given value over the
		 *  duration of the rampTime.
		 *
		 *  @param  {number} value   The value to ramp to.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //linearly ramp to the value 4 over 3 seconds.
		 * signal.linearRampTo(4, 3);
		 */
	    Tone.Param.prototype.linearRampTo = function (value, rampTime, startTime) {
	        startTime = this.toSeconds(startTime);
	        this.setRampPoint(startTime);
	        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
	        return this;
	    };
	    /**
		 *  Start exponentially approaching the target value at the given time. Since it
		 *  is an exponential approach it will continue approaching after the ramp duration. The
		 *  rampTime is the time that it takes to reach over 99% of the way towards the value.
		 *  @param  {number} value   The value to ramp to.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //exponentially ramp to the value 2 over 4 seconds.
		 * signal.exponentialRampTo(2, 4);
		 */
	    Tone.Param.prototype.targetRampTo = function (value, rampTime, startTime) {
	        startTime = this.toSeconds(startTime);
	        this.setRampPoint(startTime);
	        this.exponentialApproachValueAtTime(value, startTime, rampTime);
	        return this;
	    };
	    /**
		 *  Start exponentially approaching the target value at the given time. Since it
		 *  is an exponential approach it will continue approaching after the ramp duration. The
		 *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods
		 *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'
		 *  @param  {number} value   The value to ramp to.
		 *  @param {Time}	time 	When the ramp should start.
		 *  @param  {Time} rampTime the time that it takes the
		 *                               value to ramp from it's current value
		 *  @returns {Tone.Param} this
		 *  @example
		 * //exponentially ramp to the value 2 over 4 seconds.
		 * signal.exponentialRampTo(2, 4);
		 */
	    Tone.Param.prototype.exponentialApproachValueAtTime = function (value, time, rampTime) {
	        var timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);
	        time = this.toSeconds(time);
	        return this.setTargetAtTime(value, time, timeConstant);
	    };
	    /**
		 *  Start exponentially approaching the target value at the given time with
		 *  a rate having the given time constant.
		 *  @param {number} value
		 *  @param {Time} startTime
		 *  @param {number} timeConstant
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
	        value = this._fromUnits(value);
	        // The value will never be able to approach without timeConstant > 0.
	        if (timeConstant <= 0) {
	            throw new Error('timeConstant must be greater than 0');
	        }
	        startTime = this.toSeconds(startTime);
	        this._events.add({
	            'type': Tone.Param.AutomationType.Target,
	            'value': value,
	            'time': startTime,
	            'constant': timeConstant
	        });
	        this._param.setTargetAtTime(value, startTime, timeConstant);
	        return this;
	    };
	    /**
		 *  Sets an array of arbitrary parameter values starting at the given time
		 *  for the given duration.
		 *
		 *  @param {Array} values
		 *  @param {Time} startTime
		 *  @param {Time} duration
		 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
	        scaling = Tone.defaultArg(scaling, 1);
	        duration = this.toSeconds(duration);
	        startTime = this.toSeconds(startTime);
	        this.setValueAtTime(values[0] * scaling, startTime);
	        var segTime = duration / (values.length - 1);
	        for (var i = 1; i < values.length; i++) {
	            this.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);
	        }
	        return this;
	    };
	    /**
		 *  Cancels all scheduled parameter changes with times greater than or
		 *  equal to startTime.
		 *
		 *  @param  {Time} time
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.cancelScheduledValues = function (time) {
	        time = this.toSeconds(time);
	        this._events.cancel(time);
	        this._param.cancelScheduledValues(time);
	        return this;
	    };
	    /**
		 *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except
		 *  it holds the automated value at time until the next automated event.
		 *  @param  {Time} time
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.cancelAndHoldAtTime = function (time) {
	        var valueAtTime = this.getValueAtTime(time);
	        //if there is an event at the given time
	        //and that even is not a "set"
	        var before = this._events.get(time);
	        var after = this._events.getAfter(time);
	        if (before && before.time === time) {
	            //remove everything after
	            if (after) {
	                this._events.cancel(after.time);
	            } else {
	                this._events.cancel(time + 0.000001);
	            }
	        } else if (after) {
	            //cancel the next event(s)
	            this._events.cancel(after.time);
	            if (!this._param.cancelAndHoldAtTime) {
	                this._param.cancelScheduledValues(time);
	            }
	            if (after.type === Tone.Param.AutomationType.Linear) {
	                if (!this._param.cancelAndHoldAtTime) {
	                    this.linearRampToValueAtTime(valueAtTime, time);
	                } else {
	                    this._events.add({
	                        'type': Tone.Param.AutomationType.Linear,
	                        'value': valueAtTime,
	                        'time': time
	                    });
	                }
	            } else if (after.type === Tone.Param.AutomationType.Exponential) {
	                if (!this._param.cancelAndHoldAtTime) {
	                    this.exponentialRampToValueAtTime(valueAtTime, time);
	                } else {
	                    this._events.add({
	                        'type': Tone.Param.AutomationType.Exponential,
	                        'value': valueAtTime,
	                        'time': time
	                    });
	                }
	            }
	        }
	        //set the value at the given time
	        this._events.add({
	            'type': Tone.Param.AutomationType.SetValue,
	            'value': valueAtTime,
	            'time': time
	        });
	        if (this._param.cancelAndHoldAtTime) {
	            this._param.cancelAndHoldAtTime(time);
	        } else {
	            this._param.setValueAtTime(valueAtTime, time);
	        }
	        return this;
	    };
	    /**
		 *  Ramps to the given value over the duration of the rampTime.
		 *  Automatically selects the best ramp type (exponential or linear)
		 *  depending on the `units` of the signal
		 *
		 *  @param  {number} value
		 *  @param  {Time} rampTime 	The time that it takes the
		 *                              value to ramp from it's current value
		 *  @param {Time}	[startTime=now] 	When the ramp should start.
		 *  @returns {Tone.Param} this
		 *  @example
		 * //ramp to the value either linearly or exponentially
		 * //depending on the "units" value of the signal
		 * signal.rampTo(0, 10);
		 *  @example
		 * //schedule it to ramp starting at a specific time
		 * signal.rampTo(0, 10, 5)
		 */
	    Tone.Param.prototype.rampTo = function (value, rampTime, startTime) {
	        rampTime = Tone.defaultArg(rampTime, 0.1);
	        if (this.units === Tone.Type.Frequency || this.units === Tone.Type.BPM || this.units === Tone.Type.Decibels) {
	            this.exponentialRampTo(value, rampTime, startTime);
	        } else {
	            this.linearRampTo(value, rampTime, startTime);
	        }
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	AUTOMATION CURVE CALCULATIONS
	    //	MIT License, copyright (c) 2014 Jordan Santell
	    ///////////////////////////////////////////////////////////////////////////
	    // Calculates the the value along the curve produced by setTargetAtTime
	    Tone.Param.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {
	        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
	    };
	    // Calculates the the value along the curve produced by linearRampToValueAtTime
	    Tone.Param.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {
	        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
	    };
	    // Calculates the the value along the curve produced by exponentialRampToValueAtTime
	    Tone.Param.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {
	        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
	    };
	    /**
		 *  Clean up
		 *  @returns {Tone.Param} this
		 */
	    Tone.Param.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._param = null;
	        this._events = null;
	        return this;
	    };
	    return Tone.Param;
	});
	Module(function (Tone) {
	    /**
		 *  @class Wrapper around the OfflineAudioContext
		 *  @extends {Tone.Context}
		 *  @param  {Number}  channels  The number of channels to render
		 *  @param  {Number}  duration  The duration to render in samples
		 *  @param {Number} sampleRate the sample rate to render at
		 */
	    Tone.OfflineContext = function (channels, duration, sampleRate) {
	        /**
			 *  The offline context
			 *  @private
			 *  @type  {OfflineAudioContext}
			 */
	        var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate);
	        //wrap the methods/members
	        Tone.Context.call(this, {
	            'context': offlineContext,
	            'clockSource': 'offline',
	            'lookAhead': 0,
	            'updateInterval': 128 / sampleRate
	        });
	        /**
			 *  A private reference to the duration
			 *  @private
			 *  @type  {Number}
			 */
	        this._duration = duration;
	        /**
			 *  An artificial clock source
			 *  @type  {Number}
			 *  @private
			 */
	        this._currentTime = 0;
	    };
	    Tone.extend(Tone.OfflineContext, Tone.Context);
	    /**
		 *  Override the now method to point to the internal clock time
		 *  @return  {Number}
		 */
	    Tone.OfflineContext.prototype.now = function () {
	        return this._currentTime;
	    };
	    /**
		 *  Render the output of the OfflineContext
		 *  @return  {Promise}
		 */
	    Tone.OfflineContext.prototype.render = function () {
	        while (this._duration - this._currentTime >= 0) {
	            //invoke all the callbacks on that time
	            this.emit('tick');
	            //increment the clock
	            this._currentTime += this.blockTime;
	        }
	        return this._context.startRendering();
	    };
	    /**
		 *  Close the context
		 *  @return  {Promise}
		 */
	    Tone.OfflineContext.prototype.close = function () {
	        this._context = null;
	        return Promise.resolve();
	    };
	    return Tone.OfflineContext;
	});
	Module(function (Tone) {
	    if (Tone.supported) {
	        var ua = navigator.userAgent.toLowerCase();
	        var isMobileSafari = ua.includes('safari') && !ua.includes('chrome') && ua.includes('mobile');
	        if (isMobileSafari) {
	            //mobile safari has a bizarre bug with the offline context
	            //when a BufferSourceNode is started, it starts the offline context
	            //
	            //deferring all BufferSource starts till the last possible moment
	            //reduces the likelihood of this happening
	            Tone.OfflineContext.prototype.createBufferSource = function () {
	                var bufferSource = this._context.createBufferSource();
	                var _native_start = bufferSource.start;
	                bufferSource.start = function (time) {
	                    this.setTimeout(function () {
	                        _native_start.call(bufferSource, time);
	                    }.bind(this), 0);
	                }.bind(this);
	                return bufferSource;
	            };
	        }
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class A thin wrapper around the Native Web Audio GainNode.
		 *         The GainNode is a basic building block of the Web Audio
		 *         API and is useful for routing audio and adjusting gains.
		 *  @extends {Tone}
		 *  @param  {Number=}  gain  The initial gain of the GainNode
		 *  @param {Tone.Type=} units The units of the gain parameter.
		 */
	    Tone.Gain = function () {
	        var options = Tone.defaults(arguments, [
	            'gain',
	            'units'
	        ], Tone.Gain);
	        Tone.AudioNode.call(this);
	        /**
			 *  The GainNode
			 *  @type  {GainNode}
			 *  @private
			 */
	        this.input = this.output = this._gainNode = this.context.createGain();
	        /**
			 *  The gain parameter of the gain node.
			 *  @type {Gain}
			 *  @signal
			 */
	        this.gain = new Tone.Param({
	            'param': this._gainNode.gain,
	            'units': options.units,
	            'value': options.gain,
	            'convert': options.convert
	        });
	        this._readOnly('gain');
	    };
	    Tone.extend(Tone.Gain, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.Gain.defaults = {
	        'gain': 1,
	        'convert': true
	    };
	    /**
		 *  Clean up.
		 *  @return  {Tone.Gain}  this
		 */
	    Tone.Gain.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._gainNode.disconnect();
	        this._gainNode = null;
	        this._writable('gain');
	        this.gain.dispose();
	        this.gain = null;
	    };
	    return Tone.Gain;
	});
	Module(function (Tone) {
	    if (Tone.supported && !AudioContext.prototype.createConstantSource) {
	        var ConstantSourceNode = function (context) {
	            this.context = context;
	            var buffer = context.createBuffer(1, 128, context.sampleRate);
	            var arr = buffer.getChannelData(0);
	            for (var i = 0; i < arr.length; i++) {
	                arr[i] = 1;
	            }
	            this._bufferSource = context.createBufferSource();
	            this._bufferSource.channelCount = 1;
	            this._bufferSource.channelCountMode = 'explicit';
	            this._bufferSource.buffer = buffer;
	            this._bufferSource.loop = true;
	            var gainNode = this._output = context.createGain();
	            this.offset = gainNode.gain;
	            this._bufferSource.connect(gainNode);
	        };
	        ConstantSourceNode.prototype.start = function (time) {
	            this._bufferSource.start(time);
	            return this;
	        };
	        ConstantSourceNode.prototype.stop = function (time) {
	            this._bufferSource.stop(time);
	            return this;
	        };
	        ConstantSourceNode.prototype.connect = function () {
	            this._output.connect.apply(this._output, arguments);
	            return this;
	        };
	        ConstantSourceNode.prototype.disconnect = function () {
	            this._output.disconnect.apply(this._output, arguments);
	            return this;
	        };
	        AudioContext.prototype.createConstantSource = function () {
	            return new ConstantSourceNode(this);
	        };
	        Tone.Context.prototype.createConstantSource = function () {
	            return new ConstantSourceNode(this);
	        };
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.
		 *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
		 *          has all of the methods available to native Web Audio
		 *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
		 *          as well as additional conveniences. Read more about working with signals
		 *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
		 *
		 *  @constructor
		 *  @extends {Tone.Param}
		 *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam
		 *                                     is passed in, that parameter will be wrapped
		 *                                     and controlled by the Signal.
		 *  @param {string} [units=Number] unit The units the signal is in.
		 *  @example
		 * var signal = new Tone.Signal(10);
		 */
	    Tone.Signal = function () {
	        var options = Tone.defaults(arguments, [
	            'value',
	            'units'
	        ], Tone.Signal);
	        Tone.Param.call(this, options);
	        /**
			* When a signal is connected to another signal or audio param,
			* this signal becomes a proxy for it
			* @type {Array}
			* @private
			*/
	        this._proxies = [];
	        /**
			* Indicates if the constant source was started or not
			* @private
			* @type {Boolean}
			*/
	        this._sourceStarted = false;
	        /**
			 * The constant source node which generates the signal
			 * @type {ConstantSourceNode}
			 * @private
			 */
	        this._constantSource = this.context.createConstantSource();
	        this._param = this._constantSource.offset;
	        this.value = options.value;
	        /**
			 * The node where the constant signal value is scaled.
			 * @type {GainNode}
			 * @private
			 */
	        this.output = this._constantSource;
	        /**
			 * The node where the value is set.
			 * @type {Tone.Param}
			 * @private
			 */
	        this.input = this._param = this.output.offset;
	    };
	    Tone.extend(Tone.Signal, Tone.Param);
	    /**
		 *  The default values
		 *  @type  {Object}
		 *  @static
		 *  @const
		 */
	    Tone.Signal.defaults = {
	        'value': 0,
	        'units': Tone.Type.Default,
	        'convert': true
	    };
	    /**
		 *  When signals connect to other signals or AudioParams,
		 *  they take over the output value of that signal or AudioParam.
		 *  For all other nodes, the behavior is the same as a default <code>connect</code>.
		 *
		 *  @override
		 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node
		 *  @param {number} [outputNumber=0] The output number to connect from.
		 *  @param {number} [inputNumber=0] The input number to connect to.
		 *  @returns {Tone.Signal} this
		 *  @method
		 */
	    Tone.Signal.prototype.connect = function (node) {
	        //this is an optimization where this node will forward automations
	        //to connected nodes without any signal if possible.
	        if (this._isParam(node) && !this._sourceStarted) {
	            this._proxies.push(node);
	            node.overridden = true;
	            this._applyAutomations(node);
	        } else {
	            Tone.SignalBase.prototype.connect.apply(this, arguments);
	            if (!this._sourceStarted) {
	                this._sourceStarted = true;
	                this._constantSource.start(0);
	            }
	        }
	        return this;
	    };
	    /**
		 * Takes a node as an argument and returns if it is a Param or AudioParam
		 * @param  {*} node The node to test
		 * @return {Boolean}
		 * @private
		 */
	    Tone.Signal.prototype._isParam = function (node) {
	        return Tone.Param && Tone.Param === node.constructor || node instanceof AudioParam;
	    };
	    /**
		 * Discard the optimization and connect all of the proxies
		 * @private
		 */
	    Tone.Signal.prototype._connectProxies = function () {
	        if (!this._sourceStarted) {
	            this._sourceStarted = true;
	            this._constantSource.start(0);
	        }
	        this._proxies.forEach(function (proxy) {
	            Tone.SignalBase.prototype.connect.call(this, proxy);
	            if (proxy._proxies) {
	                proxy._connectProxies();
	            }
	        }.bind(this));
	    };
	    /**
		 * Invoked when a node is connected to this
		 * @param  {AudioNode} from
		 * @private
		 */
	    Tone.Signal.prototype._onConnect = function (from) {
	        if (!this._isParam(from)) {
	            //connect all the proxies
	            this._connectProxies();
	        }
	    };
	    /**
		 * Apply all the current automations to the given parameter
		 * @param  {AudioParam} param
		 * @private
		 */
	    Tone.Signal.prototype._applyAutomations = function (param) {
	        var now = this.context.currentTime;
	        param.cancelScheduledValues(now);
	        var currentVal = this.getValueAtTime(now);
	        param.setValueAtTime(currentVal, now);
	        this._events.forEachFrom(now, function (event) {
	            param[event.type](event.value, event.time, event.constant);
	        });
	    };
	    /**
		 * Disconnect from the given node or all nodes if no param is given.
		 * @param  {AudioNode|AudioParam} node
		 * @return {Tone.Signal}      this
		 */
	    Tone.Signal.prototype.disconnect = function (node) {
	        if (this._proxies.includes(node)) {
	            var index = this._proxies.indexOf(node);
	            this._proxies.splice(index, 1);
	        } else if (!node) {
	            //no argument, disconnect everything
	            this._proxies = [];
	        }
	        return Tone.SignalBase.prototype.disconnect.apply(this, arguments);
	    };
	    /**
		 * Return the current signal value at the given time.
		 * @param  {Time} time When to get the signal value
		 * @return {Number}
		 */
	    Tone.Signal.prototype.getValueAtTime = function (time) {
	        if (this._param.getValueAtTime) {
	            return this._param.getValueAtTime(time);
	        } else {
	            return Tone.Param.prototype.getValueAtTime.call(this, time);
	        }
	    };
	    //wrap all of the automation methods
	    [
	        'setValueAtTime',
	        'linearRampToValueAtTime',
	        'exponentialRampToValueAtTime',
	        'setTargetAtTime'
	    ].forEach(function (method) {
	        var previousMethod = Tone.Signal.prototype[method];
	        Tone.Signal.prototype[method] = function () {
	            var args = arguments;
	            previousMethod.apply(this, arguments);
	            args[0] = this._fromUnits(args[0]);
	            args[1] = this.toSeconds(args[1]);
	            //apply it to the proxies
	            this._proxies.forEach(function (signal) {
	                signal[method].apply(signal, args);
	            });
	        };
	    });
	    [
	        'cancelScheduledValues',
	        'cancelAndHoldAtTime'
	    ].forEach(function (method) {
	        var previousMethod = Tone.Signal.prototype[method];
	        Tone.Signal.prototype[method] = function () {
	            var args = arguments;
	            previousMethod.apply(this, arguments);
	            args[0] = this.toSeconds(args[0]);
	            //apply it to the proxies
	            this._proxies.forEach(function (signal) {
	                signal[method].apply(signal, args);
	            });
	        };
	    });
	    /**
		 *  dispose and disconnect
		 *  @returns {Tone.Signal} this
		 */
	    Tone.Signal.prototype.dispose = function () {
	        Tone.Param.prototype.dispose.call(this);
	        this._constantSource.disconnect();
	        this._constantSource = null;
	        this._proxies = null;
	        return this;
	    };
	    return Tone.Signal;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Pow applies an exponent to the incoming signal. The incoming signal
		 *         must be AudioRange.
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. 
		 *  @example
		 * var pow = new Tone.Pow(2);
		 * var sig = new Tone.Signal(0.5).connect(pow);
		 * //output of pow is 0.25. 
		 */
	    Tone.Pow = function (exp) {
	        Tone.SignalBase.call(this);
	        /**
			 * the exponent
			 * @private
			 * @type {number}
			 */
	        this._exp = Tone.defaultArg(exp, 1);
	        /**
			 *  @type {WaveShaperNode}
			 *  @private
			 */
	        this._expScaler = this.input = this.output = new Tone.WaveShaper(this._expFunc(this._exp), 8192);
	    };
	    Tone.extend(Tone.Pow, Tone.SignalBase);
	    /**
		 * The value of the exponent.
		 * @memberOf Tone.Pow#
		 * @type {number}
		 * @name value
		 */
	    Object.defineProperty(Tone.Pow.prototype, 'value', {
	        get: function () {
	            return this._exp;
	        },
	        set: function (exp) {
	            this._exp = exp;
	            this._expScaler.setMap(this._expFunc(this._exp));
	        }
	    });
	    /**
		 *  the function which maps the waveshaper
		 *  @param   {number} exp
		 *  @return {function}
		 *  @private
		 */
	    Tone.Pow.prototype._expFunc = function (exp) {
	        return function (val) {
	            return Math.pow(Math.abs(val), exp);
	        };
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Pow} this
		 */
	    Tone.Pow.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._expScaler.dispose();
	        this._expScaler = null;
	        return this;
	    };
	    return Tone.Pow;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
		 *          envelope generator. Tone.Envelope outputs a signal which
		 *          can be connected to an AudioParam or Tone.Signal.
		 *          <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Time} [attack] The amount of time it takes for the envelope to go from
		 *                         0 to it's maximum value.
		 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
		 *                       	to fall to the sustain value.
		 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
		 *                                	the release is triggered.
		 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0.
		 *  @example
		 * //an amplitude envelope
		 * var gainNode = Tone.context.createGain();
		 * var env = new Tone.Envelope({
		 * 	"attack" : 0.1,
		 * 	"decay" : 0.2,
		 * 	"sustain" : 1,
		 * 	"release" : 0.8,
		 * });
		 * env.connect(gainNode.gain);
		 */
	    Tone.Envelope = function () {
	        //get all of the defaults
	        var options = Tone.defaults(arguments, [
	            'attack',
	            'decay',
	            'sustain',
	            'release'
	        ], Tone.Envelope);
	        Tone.AudioNode.call(this);
	        /**
			 *  When triggerAttack is called, the attack time is the amount of
			 *  time it takes for the envelope to reach it's maximum value.
			 *  @type {Time}
			 */
	        this.attack = options.attack;
	        /**
			 *  After the attack portion of the envelope, the value will fall
			 *  over the duration of the decay time to it's sustain value.
			 *  @type {Time}
			 */
	        this.decay = options.decay;
	        /**
			 * 	The sustain value is the value
			 * 	which the envelope rests at after triggerAttack is
			 * 	called, but before triggerRelease is invoked.
			 *  @type {NormalRange}
			 */
	        this.sustain = options.sustain;
	        /**
			 *  After triggerRelease is called, the envelope's
			 *  value will fall to it's miminum value over the
			 *  duration of the release time.
			 *  @type {Time}
			 */
	        this.release = options.release;
	        /**
			 *  the next time the envelope is at standby
			 *  @type {number}
			 *  @private
			 */
	        this._attackCurve = 'linear';
	        /**
			 *  the next time the envelope is at standby
			 *  @type {number}
			 *  @private
			 */
	        this._releaseCurve = 'exponential';
	        /**
			 *  the signal
			 *  @type {Tone.Signal}
			 *  @private
			 */
	        this._sig = this.output = new Tone.Signal(0);
	        //set the attackCurve initially
	        this.attackCurve = options.attackCurve;
	        this.releaseCurve = options.releaseCurve;
	    };
	    Tone.extend(Tone.Envelope, Tone.AudioNode);
	    /**
		 *  the default parameters
		 *  @static
		 *  @const
		 */
	    Tone.Envelope.defaults = {
	        'attack': 0.01,
	        'decay': 0.1,
	        'sustain': 0.5,
	        'release': 1,
	        'attackCurve': 'linear',
	        'releaseCurve': 'exponential'
	    };
	    /**
		 * Read the current value of the envelope. Useful for
		 * syncronizing visual output to the envelope.
		 * @memberOf Tone.Envelope#
		 * @type {Number}
		 * @name value
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Envelope.prototype, 'value', {
	        get: function () {
	            return this.getValueAtTime(this.now());
	        }
	    });
	    /**
		 * The shape of the attack.
		 * Can be any of these strings:
		 * <ul>
		 *   <li>linear</li>
		 *   <li>exponential</li>
		 *   <li>sine</li>
		 *   <li>cosine</li>
		 *   <li>bounce</li>
		 *   <li>ripple</li>
		 *   <li>step</li>
		 * </ul>
		 * Can also be an array which describes the curve. Values
		 * in the array are evenly subdivided and linearly
		 * interpolated over the duration of the attack.
		 * @memberOf Tone.Envelope#
		 * @type {String|Array}
		 * @name attackCurve
		 * @example
		 * env.attackCurve = "linear";
		 * @example
		 * //can also be an array
		 * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]
		 */
	    Object.defineProperty(Tone.Envelope.prototype, 'attackCurve', {
	        get: function () {
	            if (Tone.isString(this._attackCurve)) {
	                return this._attackCurve;
	            } else if (Tone.isArray(this._attackCurve)) {
	                //look up the name in the curves array
	                for (var type in Tone.Envelope.Type) {
	                    if (Tone.Envelope.Type[type].In === this._attackCurve) {
	                        return type;
	                    }
	                }
	                //otherwise just return the array
	                return this._attackCurve;
	            }
	        },
	        set: function (curve) {
	            //check if it's a valid type
	            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
	                var curveDef = Tone.Envelope.Type[curve];
	                if (Tone.isObject(curveDef)) {
	                    this._attackCurve = curveDef.In;
	                } else {
	                    this._attackCurve = curveDef;
	                }
	            } else if (Tone.isArray(curve)) {
	                this._attackCurve = curve;
	            } else {
	                throw new Error('Tone.Envelope: invalid curve: ' + curve);
	            }
	        }
	    });
	    /**
		 * The shape of the release. See the attack curve types.
		 * @memberOf Tone.Envelope#
		 * @type {String|Array}
		 * @name releaseCurve
		 * @example
		 * env.releaseCurve = "linear";
		 */
	    Object.defineProperty(Tone.Envelope.prototype, 'releaseCurve', {
	        get: function () {
	            if (Tone.isString(this._releaseCurve)) {
	                return this._releaseCurve;
	            } else if (Tone.isArray(this._releaseCurve)) {
	                //look up the name in the curves array
	                for (var type in Tone.Envelope.Type) {
	                    if (Tone.Envelope.Type[type].Out === this._releaseCurve) {
	                        return type;
	                    }
	                }
	                //otherwise just return the array
	                return this._releaseCurve;
	            }
	        },
	        set: function (curve) {
	            //check if it's a valid type
	            if (Tone.Envelope.Type.hasOwnProperty(curve)) {
	                var curveDef = Tone.Envelope.Type[curve];
	                if (Tone.isObject(curveDef)) {
	                    this._releaseCurve = curveDef.Out;
	                } else {
	                    this._releaseCurve = curveDef;
	                }
	            } else if (Tone.isArray(curve)) {
	                this._releaseCurve = curve;
	            } else {
	                throw new Error('Tone.Envelope: invalid curve: ' + curve);
	            }
	        }
	    });
	    /**
		 *  Trigger the attack/decay portion of the ADSR envelope.
		 *  @param  {Time} [time=now] When the attack should start.
		 *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.
		 *                               number between 0-1
		 *  @returns {Tone.Envelope} this
		 *  @example
		 *  //trigger the attack 0.5 seconds from now with a velocity of 0.2
		 *  env.triggerAttack("+0.5", 0.2);
		 */
	    Tone.Envelope.prototype.triggerAttack = function (time, velocity) {
	        time = this.toSeconds(time);
	        var originalAttack = this.toSeconds(this.attack);
	        var attack = originalAttack;
	        var decay = this.toSeconds(this.decay);
	        velocity = Tone.defaultArg(velocity, 1);
	        //check if it's not a complete attack
	        var currentValue = this.getValueAtTime(time);
	        if (currentValue > 0) {
	            //subtract the current value from the attack time
	            var attackRate = 1 / attack;
	            var remainingDistance = 1 - currentValue;
	            //the attack is now the remaining time
	            attack = remainingDistance / attackRate;
	        }
	        //attack
	        if (this._attackCurve === 'linear') {
	            this._sig.linearRampTo(velocity, attack, time);
	        } else if (this._attackCurve === 'exponential') {
	            this._sig.targetRampTo(velocity, attack, time);
	        } else if (attack > 0) {
	            this._sig.cancelAndHoldAtTime(time);
	            var curve = this._attackCurve;
	            //take only a portion of the curve
	            if (attack < originalAttack) {
	                var percentComplete = 1 - attack / originalAttack;
	                var sliceIndex = Math.floor(percentComplete * this._attackCurve.length);
	                curve = this._attackCurve.slice(sliceIndex);
	                //the first index is the current value
	                curve[0] = currentValue;
	            }
	            this._sig.setValueCurveAtTime(curve, time, attack, velocity);
	        }
	        //decay
	        if (decay) {
	            this._sig.targetRampTo(velocity * this.sustain, decay, attack + time);
	        }
	        return this;
	    };
	    /**
		 *  Triggers the release of the envelope.
		 *  @param  {Time} [time=now] When the release portion of the envelope should start.
		 *  @returns {Tone.Envelope} this
		 *  @example
		 *  //trigger release immediately
		 *  env.triggerRelease();
		 */
	    Tone.Envelope.prototype.triggerRelease = function (time) {
	        time = this.toSeconds(time);
	        var currentValue = this.getValueAtTime(time);
	        if (currentValue > 0) {
	            var release = this.toSeconds(this.release);
	            if (this._releaseCurve === 'linear') {
	                this._sig.linearRampTo(0, release, time);
	            } else if (this._releaseCurve === 'exponential') {
	                this._sig.targetRampTo(0, release, time);
	            } else {
	                var curve = this._releaseCurve;
	                if (Tone.isArray(curve)) {
	                    this._sig.cancelAndHoldAtTime(time);
	                    this._sig.setValueCurveAtTime(curve, time, release, currentValue);
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Get the scheduled value at the given time. This will
		 *  return the unconverted (raw) value.
		 *  @param  {Number}  time  The time in seconds.
		 *  @return  {Number}  The scheduled value at the given time.
		 */
	    Tone.Envelope.prototype.getValueAtTime = function (time) {
	        return this._sig.getValueAtTime(time);
	    };
	    /**
		 *  triggerAttackRelease is shorthand for triggerAttack, then waiting
		 *  some duration, then triggerRelease.
		 *  @param {Time} duration The duration of the sustain.
		 *  @param {Time} [time=now] When the attack should be triggered.
		 *  @param {number} [velocity=1] The velocity of the envelope.
		 *  @returns {Tone.Envelope} this
		 *  @example
		 * //trigger the attack and then the release after 0.6 seconds.
		 * env.triggerAttackRelease(0.6);
		 */
	    Tone.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {
	        time = this.toSeconds(time);
	        this.triggerAttack(time, velocity);
	        this.triggerRelease(time + this.toSeconds(duration));
	        return this;
	    };
	    /**
		 *  Cancels all scheduled envelope changes after the given time.
		 *  @param  {Time} after
		 *  @returns {Tone.Envelope} this
		 */
	    Tone.Envelope.prototype.cancel = function (after) {
	        this._sig.cancelScheduledValues(after);
	        return this;
	    };
	    /**
		 *  Borrows the connect method from Tone.Signal.
		 *  @function
		 *  @private
		 */
	    Tone.Envelope.prototype.connect = Tone.SignalBase.prototype.connect;
	    /**
	 	 *  Generate some complex envelope curves.
	 	 */
	    (function _createCurves() {
	        var curveLen = 128;
	        var i, k;
	        //cosine curve
	        var cosineCurve = [];
	        for (i = 0; i < curveLen; i++) {
	            cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
	        }
	        //ripple curve
	        var rippleCurve = [];
	        var rippleCurveFreq = 6.4;
	        for (i = 0; i < curveLen - 1; i++) {
	            k = i / (curveLen - 1);
	            var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
	            rippleCurve[i] = sineWave / 10 + k * 0.83;
	        }
	        rippleCurve[curveLen - 1] = 1;
	        //stairs curve
	        var stairsCurve = [];
	        var steps = 5;
	        for (i = 0; i < curveLen; i++) {
	            stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
	        }
	        //in-out easing curve
	        var sineCurve = [];
	        for (i = 0; i < curveLen; i++) {
	            k = i / (curveLen - 1);
	            sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
	        }
	        //a bounce curve
	        var bounceCurve = [];
	        for (i = 0; i < curveLen; i++) {
	            k = i / (curveLen - 1);
	            var freq = Math.pow(k, 3) * 4 + 0.2;
	            var val = Math.cos(freq * Math.PI * 2 * k);
	            bounceCurve[i] = Math.abs(val * (1 - k));
	        }
	        /**
			 *  Invert a value curve to make it work for the release
			 *  @private
			 */
	        function invertCurve(curve) {
	            var out = new Array(curve.length);
	            for (var j = 0; j < curve.length; j++) {
	                out[j] = 1 - curve[j];
	            }
	            return out;
	        }
	        /**
			 *  reverse the curve
			 *  @private
			 */
	        function reverseCurve(curve) {
	            return curve.slice(0).reverse();
	        }
	        /**
			 *  attack and release curve arrays
			 *  @type  {Object}
			 *  @private
			 */
	        Tone.Envelope.Type = {
	            'linear': 'linear',
	            'exponential': 'exponential',
	            'bounce': {
	                In: invertCurve(bounceCurve),
	                Out: bounceCurve
	            },
	            'cosine': {
	                In: cosineCurve,
	                Out: reverseCurve(cosineCurve)
	            },
	            'step': {
	                In: stairsCurve,
	                Out: invertCurve(stairsCurve)
	            },
	            'ripple': {
	                In: rippleCurve,
	                Out: invertCurve(rippleCurve)
	            },
	            'sine': {
	                In: sineCurve,
	                Out: invertCurve(sineCurve)
	            }
	        };
	    }());
	    /**
		 *  Disconnect and dispose.
		 *  @returns {Tone.Envelope} this
		 */
	    Tone.Envelope.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._sig.dispose();
	        this._sig = null;
	        this._attackCurve = null;
	        this._releaseCurve = null;
	        return this;
	    };
	    return Tone.Envelope;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.
		 *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts
		 *          an audio signal as the input and will apply the envelope to the amplitude
		 *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
		 *
		 *  @constructor
		 *  @extends {Tone.Envelope}
		 *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from
		 *                               0 to it's maximum value.
		 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
		 *                       	to fall to the sustain value.
		 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
		 *                                	the release is triggered.
		 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0.
		 *  @example
		 * var ampEnv = new Tone.AmplitudeEnvelope({
		 * 	"attack": 0.1,
		 * 	"decay": 0.2,
		 * 	"sustain": 1.0,
		 * 	"release": 0.8
		 * }).toMaster();
		 * //create an oscillator and connect it
		 * var osc = new Tone.Oscillator().connect(ampEnv).start();
		 * //trigger the envelopes attack and release "8t" apart
		 * ampEnv.triggerAttackRelease("8t");
		 */
	    Tone.AmplitudeEnvelope = function () {
	        Tone.Envelope.apply(this, arguments);
	        /**
			 *  the input node
			 *  @type {GainNode}
			 *  @private
			 */
	        this.input = this.output = new Tone.Gain();
	        this._sig.connect(this.output.gain);
	    };
	    Tone.extend(Tone.AmplitudeEnvelope, Tone.Envelope);
	    /**
		 *  Clean up
		 *  @return  {Tone.AmplitudeEnvelope}  this
		 */
	    Tone.AmplitudeEnvelope.prototype.dispose = function () {
	        Tone.Envelope.prototype.dispose.call(this);
	        return this;
	    };
	    return Tone.AmplitudeEnvelope;
	});
	Module(function (Tone) {
	    /**
		 *  AnalyserNode.getFloatTimeDomainData polyfill
		 *  @private
		 */
	    if (Tone.supported) {
	        if (!AnalyserNode.prototype.getFloatTimeDomainData) {
	            //referenced https://github.com/mohayonao/get-float-time-domain-data
	            AnalyserNode.prototype.getFloatTimeDomainData = function (array) {
	                var uint8 = new Uint8Array(array.length);
	                this.getByteTimeDomainData(uint8);
	                for (var i = 0; i < uint8.length; i++) {
	                    array[i] = (uint8[i] - 128) / 128;
	                }
	            };
	        }
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Wrapper around the native Web Audio's
		 *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
		 *          Extracts FFT or Waveform data from the incoming signal.
		 *  @extends {Tone.AudioNode}
		 *  @param {String=} type The return type of the analysis, either "fft", or "waveform".
		 *  @param {Number=} size The size of the FFT. Value must be a power of
		 *                       two in the range 32 to 32768.
		 */
	    Tone.Analyser = function () {
	        var options = Tone.defaults(arguments, [
	            'type',
	            'size'
	        ], Tone.Analyser);
	        Tone.AudioNode.call(this);
	        /**
			 *  The analyser node.
			 *  @private
			 *  @type {AnalyserNode}
			 */
	        this._analyser = this.input = this.output = this.context.createAnalyser();
	        /**
			 *  The analysis type
			 *  @type {String}
			 *  @private
			 */
	        this._type = options.type;
	        /**
			 *  The buffer that the FFT data is written to
			 *  @type {TypedArray}
			 *  @private
			 */
	        this._buffer = null;
	        //set the values initially
	        this.size = options.size;
	        this.type = options.type;
	    };
	    Tone.extend(Tone.Analyser, Tone.AudioNode);
	    /**
		 *  The default values.
		 *  @type {Object}
		 *  @const
		 */
	    Tone.Analyser.defaults = {
	        'size': 1024,
	        'type': 'fft',
	        'smoothing': 0.8
	    };
	    /**
		 *  Possible return types of analyser.getValue()
		 *  @enum {String}
		 */
	    Tone.Analyser.Type = {
	        Waveform: 'waveform',
	        FFT: 'fft'
	    };
	    /**
		 *  Run the analysis given the current settings and return the
		 *  result as a TypedArray.
		 *  @returns {TypedArray}
		 */
	    Tone.Analyser.prototype.getValue = function () {
	        if (this._type === Tone.Analyser.Type.FFT) {
	            this._analyser.getFloatFrequencyData(this._buffer);
	        } else if (this._type === Tone.Analyser.Type.Waveform) {
	            this._analyser.getFloatTimeDomainData(this._buffer);
	        }
	        return this._buffer;
	    };
	    /**
		 *  The size of analysis. This must be a power of two in the range 32 to 32768.
		 *  @memberOf Tone.Analyser#
		 *  @type {Number}
		 *  @name size
		 */
	    Object.defineProperty(Tone.Analyser.prototype, 'size', {
	        get: function () {
	            return this._analyser.frequencyBinCount;
	        },
	        set: function (size) {
	            this._analyser.fftSize = size * 2;
	            this._buffer = new Float32Array(size);
	        }
	    });
	    /**
		 *  The analysis function returned by analyser.getValue(), either "fft" or "waveform".
		 *  @memberOf Tone.Analyser#
		 *  @type {String}
		 *  @name type
		 */
	    Object.defineProperty(Tone.Analyser.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            if (type !== Tone.Analyser.Type.Waveform && type !== Tone.Analyser.Type.FFT) {
	                throw new TypeError('Tone.Analyser: invalid type: ' + type);
	            }
	            this._type = type;
	        }
	    });
	    /**
		 *  0 represents no time averaging with the last analysis frame.
		 *  @memberOf Tone.Analyser#
		 *  @type {NormalRange}
		 *  @name smoothing
		 */
	    Object.defineProperty(Tone.Analyser.prototype, 'smoothing', {
	        get: function () {
	            return this._analyser.smoothingTimeConstant;
	        },
	        set: function (val) {
	            this._analyser.smoothingTimeConstant = val;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.Analyser}  this
		 */
	    Tone.Analyser.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._analyser.disconnect();
	        this._analyser = null;
	        this._buffer = null;
	    };
	    return Tone.Analyser;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Compressor is a thin wrapper around the Web Audio
		 *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
		 *         Compression reduces the volume of loud sounds or amplifies quiet sounds
		 *         by narrowing or "compressing" an audio signal's dynamic range.
		 *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.
		 *  @param {Positive} [ratio] The gain reduction ratio.
		 *  @example
		 * var comp = new Tone.Compressor(-30, 3);
		 */
	    Tone.Compressor = function () {
	        var options = Tone.defaults(arguments, [
	            'threshold',
	            'ratio'
	        ], Tone.Compressor);
	        Tone.AudioNode.call(this);
	        /**
			 *  the compressor node
			 *  @type {DynamicsCompressorNode}
			 *  @private
			 */
	        this._compressor = this.input = this.output = this.context.createDynamicsCompressor();
	        /**
			 *  the threshold vaue
			 *  @type {Decibels}
			 *  @signal
			 */
	        this.threshold = new Tone.Param({
	            'param': this._compressor.threshold,
	            'units': Tone.Type.Decibels,
	            'convert': false
	        });
	        /**
			 *  The attack parameter
			 *  @type {Time}
			 *  @signal
			 */
	        this.attack = new Tone.Param(this._compressor.attack, Tone.Type.Time);
	        /**
			 *  The release parameter
			 *  @type {Time}
			 *  @signal
			 */
	        this.release = new Tone.Param(this._compressor.release, Tone.Type.Time);
	        /**
			 *  The knee parameter
			 *  @type {Decibels}
			 *  @signal
			 */
	        this.knee = new Tone.Param({
	            'param': this._compressor.knee,
	            'units': Tone.Type.Decibels,
	            'convert': false
	        });
	        /**
			 *  The ratio value
			 *  @type {Number}
			 *  @signal
			 */
	        this.ratio = new Tone.Param({
	            'param': this._compressor.ratio,
	            'convert': false
	        });
	        //set the defaults
	        this._readOnly([
	            'knee',
	            'release',
	            'attack',
	            'ratio',
	            'threshold'
	        ]);
	        this.set(options);
	    };
	    Tone.extend(Tone.Compressor, Tone.AudioNode);
	    /**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Compressor.defaults = {
	        'ratio': 12,
	        'threshold': -24,
	        'release': 0.25,
	        'attack': 0.003,
	        'knee': 30
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.Compressor} this
		 */
	    Tone.Compressor.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'knee',
	            'release',
	            'attack',
	            'ratio',
	            'threshold'
	        ]);
	        this._compressor.disconnect();
	        this._compressor = null;
	        this.attack.dispose();
	        this.attack = null;
	        this.release.dispose();
	        this.release = null;
	        this.threshold.dispose();
	        this.threshold = null;
	        this.ratio.dispose();
	        this.ratio = null;
	        this.knee.dispose();
	        this.knee = null;
	        return this;
	    };
	    return Tone.Compressor;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Add a signal and a number or two signals. When no value is
		 *         passed into the constructor, Tone.Add will sum <code>input[0]</code>
		 *         and <code>input[1]</code>. If a value is passed into the constructor, 
		 *         the it will be added to the input.
		 *  
		 *  @constructor
		 *  @extends {Tone.Signal}
		 *  @param {number=} value If no value is provided, Tone.Add will sum the first
		 *                         and second inputs. 
		 *  @example
		 * var signal = new Tone.Signal(2);
		 * var add = new Tone.Add(2);
		 * signal.connect(add);
		 * //the output of add equals 4
		 *  @example
		 * //if constructed with no arguments
		 * //it will add the first and second inputs
		 * var add = new Tone.Add();
		 * var sig0 = new Tone.Signal(3).connect(add, 0, 0);
		 * var sig1 = new Tone.Signal(4).connect(add, 0, 1);
		 * //the output of add equals 7. 
		 */
	    Tone.Add = function (value) {
	        Tone.Signal.call(this);
	        this.createInsOuts(2, 0);
	        /**
			 *  the summing node
			 *  @type {GainNode}
			 *  @private
			 */
	        this._sum = this.input[0] = this.input[1] = this.output = new Tone.Gain();
	        /**
			 *  @private
			 *  @type {Tone.Signal}
			 */
	        this._param = this.input[1] = new Tone.Signal(value);
	        this._param.connect(this._sum);
	    };
	    Tone.extend(Tone.Add, Tone.Signal);
	    /**
		 *  Clean up.
		 *  @returns {Tone.Add} this
		 */
	    Tone.Add.prototype.dispose = function () {
	        Tone.Signal.prototype.dispose.call(this);
	        this._sum.dispose();
	        this._sum = null;
	        return this;
	    };
	    return Tone.Add;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Multiply two incoming signals. Or, if a number is given in the constructor,
		 *          multiplies the incoming signal by that value.
		 *
		 *  @constructor
		 *  @extends {Tone.Signal}
		 *  @param {number=} value Constant value to multiple. If no value is provided,
		 *                         it will return the product of the first and second inputs
		 *  @example
		 * var mult = new Tone.Multiply();
		 * var sigA = new Tone.Signal(3);
		 * var sigB = new Tone.Signal(4);
		 * sigA.connect(mult, 0, 0);
		 * sigB.connect(mult, 0, 1);
		 * //output of mult is 12.
		 *  @example
		 * var mult = new Tone.Multiply(10);
		 * var sig = new Tone.Signal(2).connect(mult);
		 * //the output of mult is 20.
		 */
	    Tone.Multiply = function (value) {
	        Tone.Signal.call(this);
	        this.createInsOuts(2, 0);
	        /**
			 *  the input node is the same as the output node
			 *  it is also the GainNode which handles the scaling of incoming signal
			 *
			 *  @type {GainNode}
			 *  @private
			 */
	        this._mult = this.input[0] = this.output = new Tone.Gain();
	        /**
			 *  the scaling parameter
			 *  @type {AudioParam}
			 *  @private
			 */
	        this._param = this.input[1] = this.output.gain;
	        this.value = Tone.defaultArg(value, 0);
	    };
	    Tone.extend(Tone.Multiply, Tone.Signal);
	    /**
		 *  clean up
		 *  @returns {Tone.Multiply} this
		 */
	    Tone.Multiply.prototype.dispose = function () {
	        Tone.Signal.prototype.dispose.call(this);
	        this._mult.dispose();
	        this._mult = null;
	        this._param = null;
	        return this;
	    };
	    return Tone.Multiply;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @example
		 * var neg = new Tone.Negate();
		 * var sig = new Tone.Signal(-2).connect(neg);
		 * //output of neg is positive 2. 
		 */
	    Tone.Negate = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  negation is done by multiplying by -1
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._multiply = this.input = this.output = new Tone.Multiply(-1);
	    };
	    Tone.extend(Tone.Negate, Tone.SignalBase);
	    /**
		 *  clean up
		 *  @returns {Tone.Negate} this
		 */
	    Tone.Negate.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._multiply.dispose();
	        this._multiply = null;
	        return this;
	    };
	    return Tone.Negate;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected 
		 *         to <code>input[0]</code>. If an argument is provided in the constructor, the 
		 *         signals <code>.value</code> will be subtracted from the incoming signal.
		 *
		 *  @extends {Tone.Signal}
		 *  @constructor
		 *  @param {number=} value The value to subtract from the incoming signal. If the value
		 *                         is omitted, it will subtract the second signal from the first.
		 *  @example
		 * var sub = new Tone.Subtract(1);
		 * var sig = new Tone.Signal(4).connect(sub);
		 * //the output of sub is 3. 
		 *  @example
		 * var sub = new Tone.Subtract();
		 * var sigA = new Tone.Signal(10);
		 * var sigB = new Tone.Signal(2.5);
		 * sigA.connect(sub, 0, 0);
		 * sigB.connect(sub, 0, 1);
		 * //output of sub is 7.5
		 */
	    Tone.Subtract = function (value) {
	        Tone.Signal.call(this);
	        this.createInsOuts(2, 0);
	        /**
			 *  the summing node
			 *  @type {GainNode}
			 *  @private
			 */
	        this._sum = this.input[0] = this.output = new Tone.Gain();
	        /**
			 *  negate the input of the second input before connecting it
			 *  to the summing node.
			 *  @type {Tone.Negate}
			 *  @private
			 */
	        this._neg = new Tone.Negate();
	        /**
			 *  the node where the value is set
			 *  @private
			 *  @type {Tone.Signal}
			 */
	        this._param = this.input[1] = new Tone.Signal(value);
	        this._param.chain(this._neg, this._sum);
	    };
	    Tone.extend(Tone.Subtract, Tone.Signal);
	    /**
		 *  Clean up.
		 *  @returns {Tone.SignalBase} this
		 */
	    Tone.Subtract.prototype.dispose = function () {
	        Tone.Signal.prototype.dispose.call(this);
	        this._neg.dispose();
	        this._neg = null;
	        this._sum.disconnect();
	        this._sum = null;
	        return this;
	    };
	    return Tone.Subtract;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @example
		 * var eqPowGain = new Tone.EqualPowerGain();
		 */
	    Tone.EqualPowerGain = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */
	        this._eqPower = this.input = this.output = new Tone.WaveShaper(function (val) {
	            if (Math.abs(val) < 0.001) {
	                //should output 0 when input is 0
	                return 0;
	            } else {
	                return Tone.equalPowerScale(val);
	            }
	        }.bind(this), 4096);
	    };
	    Tone.extend(Tone.EqualPowerGain, Tone.SignalBase);
	    /**
		 *  clean up
		 *  @returns {Tone.EqualPowerGain} this
		 */
	    Tone.EqualPowerGain.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._eqPower.dispose();
	        this._eqPower = null;
	        return this;
	    };
	    return Tone.EqualPowerGain;
	});
	Module(function (Tone) {
	    
	    /**
		 * @class  Tone.Crossfade provides equal power fading between two inputs.
		 *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
		 *
		 * @constructor
		 * @extends {Tone.AudioNode}
		 * @param {NormalRange} [initialFade=0.5]
		 * @example
		 * var crossFade = new Tone.CrossFade(0.5);
		 * //connect effect A to crossfade from
		 * //effect output 0 to crossfade input 0
		 * effectA.connect(crossFade, 0, 0);
		 * //connect effect B to crossfade from
		 * //effect output 0 to crossfade input 1
		 * effectB.connect(crossFade, 0, 1);
		 * crossFade.fade.value = 0;
		 * // ^ only effectA is output
		 * crossFade.fade.value = 1;
		 * // ^ only effectB is output
		 * crossFade.fade.value = 0.5;
		 * // ^ the two signals are mixed equally.
		 */
	    Tone.CrossFade = function (initialFade) {
	        Tone.AudioNode.call(this);
	        this.createInsOuts(2, 1);
	        /**
			 *  Alias for <code>input[0]</code>.
			 *  @type {Tone.Gain}
			 */
	        this.a = this.input[0] = new Tone.Gain();
	        /**
			 *  Alias for <code>input[1]</code>.
			 *  @type {Tone.Gain}
			 */
	        this.b = this.input[1] = new Tone.Gain();
	        /**
			 * 	The mix between the two inputs. A fade value of 0
			 * 	will output 100% <code>input[0]</code> and
			 * 	a value of 1 will output 100% <code>input[1]</code>.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.fade = new Tone.Signal(Tone.defaultArg(initialFade, 0.5), Tone.Type.NormalRange);
	        /**
			 *  equal power gain cross fade
			 *  @private
			 *  @type {Tone.EqualPowerGain}
			 */
	        this._equalPowerA = new Tone.EqualPowerGain();
	        /**
			 *  equal power gain cross fade
			 *  @private
			 *  @type {Tone.EqualPowerGain}
			 */
	        this._equalPowerB = new Tone.EqualPowerGain();
	        /**
			 *  invert the incoming signal
			 *  @private
			 *  @type {Tone}
			 */
	        this._one = this.context.getConstant(1);
	        /**
			 *  invert the incoming signal
			 *  @private
			 *  @type {Tone.Subtract}
			 */
	        this._invert = new Tone.Subtract();
	        //connections
	        this.a.connect(this.output);
	        this.b.connect(this.output);
	        this.fade.chain(this._equalPowerB, this.b.gain);
	        this._one.connect(this._invert, 0, 0);
	        this.fade.connect(this._invert, 0, 1);
	        this._invert.chain(this._equalPowerA, this.a.gain);
	        this._readOnly('fade');
	    };
	    Tone.extend(Tone.CrossFade, Tone.AudioNode);
	    /**
		 *  clean up
		 *  @returns {Tone.CrossFade} this
		 */
	    Tone.CrossFade.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable('fade');
	        this._equalPowerA.dispose();
	        this._equalPowerA = null;
	        this._equalPowerB.dispose();
	        this._equalPowerB = null;
	        this.fade.dispose();
	        this.fade = null;
	        this._invert.dispose();
	        this._invert = null;
	        this._one = null;
	        this.a.dispose();
	        this.a = null;
	        this.b.dispose();
	        this.b = null;
	        return this;
	    };
	    return Tone.CrossFade;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Filter is a filter which allows for all of the same native methods
		 *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).
		 *          Tone.Filter has the added ability to set the filter rolloff at -12
		 *          (default), -24 and -48.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.
		 *  @param {string=} type The type of filter.
		 *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.
		 *                            3 choices: -12, -24, and -48
		 *  @example
		 *  var filter = new Tone.Filter(200, "highpass");
		 */
	    Tone.Filter = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type',
	            'rolloff'
	        ], Tone.Filter);
	        Tone.AudioNode.call(this);
	        this.createInsOuts(1, 1);
	        /**
			 *  the filter(s)
			 *  @type {Array}
			 *  @private
			 */
	        this._filters = [];
	        /**
			 *  The cutoff frequency of the filter.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The detune parameter
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(0, Tone.Type.Cents);
	        /**
			 *  The gain of the filter, only used in certain filter types
			 *  @type {Number}
			 *  @signal
			 */
	        this.gain = new Tone.Signal({
	            'value': options.gain,
	            'convert': false
	        });
	        /**
			 *  The Q or Quality of the filter
			 *  @type {Positive}
			 *  @signal
			 */
	        this.Q = new Tone.Signal(options.Q);
	        /**
			 *  the type of the filter
			 *  @type {string}
			 *  @private
			 */
	        this._type = options.type;
	        /**
			 *  the rolloff value of the filter
			 *  @type {number}
			 *  @private
			 */
	        this._rolloff = options.rolloff;
	        //set the rolloff;
	        this.rolloff = options.rolloff;
	        this._readOnly([
	            'detune',
	            'frequency',
	            'gain',
	            'Q'
	        ]);
	    };
	    Tone.extend(Tone.Filter, Tone.AudioNode);
	    /**
		 *  the default parameters
		 *
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Filter.defaults = {
	        'type': 'lowpass',
	        'frequency': 350,
	        'rolloff': -12,
	        'Q': 1,
	        'gain': 0
	    };
	    /**
		 * The type of the filter. Types: "lowpass", "highpass",
		 * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking".
		 * @memberOf Tone.Filter#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.Filter.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            var types = [
	                'lowpass',
	                'highpass',
	                'bandpass',
	                'lowshelf',
	                'highshelf',
	                'notch',
	                'allpass',
	                'peaking'
	            ];
	            if (types.indexOf(type) === -1) {
	                throw new TypeError('Tone.Filter: invalid type ' + type);
	            }
	            this._type = type;
	            for (var i = 0; i < this._filters.length; i++) {
	                this._filters[i].type = type;
	            }
	        }
	    });
	    /**
		 * The rolloff of the filter which is the drop in db
		 * per octave. Implemented internally by cascading filters.
		 * Only accepts the values -12, -24, -48 and -96.
		 * @memberOf Tone.Filter#
		 * @type {number}
		 * @name rolloff
		 */
	    Object.defineProperty(Tone.Filter.prototype, 'rolloff', {
	        get: function () {
	            return this._rolloff;
	        },
	        set: function (rolloff) {
	            rolloff = parseInt(rolloff, 10);
	            var possibilities = [
	                -12,
	                -24,
	                -48,
	                -96
	            ];
	            var cascadingCount = possibilities.indexOf(rolloff);
	            //check the rolloff is valid
	            if (cascadingCount === -1) {
	                throw new RangeError('Tone.Filter: rolloff can only be -12, -24, -48 or -96');
	            }
	            cascadingCount += 1;
	            this._rolloff = rolloff;
	            //first disconnect the filters and throw them away
	            this.input.disconnect();
	            for (var i = 0; i < this._filters.length; i++) {
	                this._filters[i].disconnect();
	                this._filters[i] = null;
	            }
	            this._filters = new Array(cascadingCount);
	            for (var count = 0; count < cascadingCount; count++) {
	                var filter = this.context.createBiquadFilter();
	                filter.type = this._type;
	                this.frequency.connect(filter.frequency);
	                this.detune.connect(filter.detune);
	                this.Q.connect(filter.Q);
	                this.gain.connect(filter.gain);
	                this._filters[count] = filter;
	            }
	            //connect them up
	            var connectionChain = [this.input].concat(this._filters).concat([this.output]);
	            Tone.connectSeries.apply(Tone, connectionChain);
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return {Tone.Filter} this
		 */
	    Tone.Filter.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        for (var i = 0; i < this._filters.length; i++) {
	            this._filters[i].disconnect();
	            this._filters[i] = null;
	        }
	        this._filters = null;
	        this._writable([
	            'detune',
	            'frequency',
	            'gain',
	            'Q'
	        ]);
	        this.frequency.dispose();
	        this.Q.dispose();
	        this.frequency = null;
	        this.Q = null;
	        this.detune.dispose();
	        this.detune = null;
	        this.gain.dispose();
	        this.gain = null;
	        return this;
	    };
	    return Tone.Filter;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Split the incoming signal into three bands (low, mid, high)
		 *         with two crossover frequency controls.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency
		 *  @param {Frequency} [highFrequency] the mid/high crossover frequency
		 */
	    Tone.MultibandSplit = function () {
	        var options = Tone.defaults(arguments, [
	            'lowFrequency',
	            'highFrequency'
	        ], Tone.MultibandSplit);
	        Tone.AudioNode.call(this);
	        /**
			 *  the input
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this.input = new Tone.Gain();
	        /**
			 *  the outputs
			 *  @type {Array}
			 *  @private
			 */
	        this.output = new Array(3);
	        /**
			 *  The low band. Alias for <code>output[0]</code>
			 *  @type {Tone.Filter}
			 */
	        this.low = this.output[0] = new Tone.Filter(0, 'lowpass');
	        /**
			 *  the lower filter of the mid band
			 *  @type {Tone.Filter}
			 *  @private
			 */
	        this._lowMidFilter = new Tone.Filter(0, 'highpass');
	        /**
			 *  The mid band output. Alias for <code>output[1]</code>
			 *  @type {Tone.Filter}
			 */
	        this.mid = this.output[1] = new Tone.Filter(0, 'lowpass');
	        /**
			 *  The high band output. Alias for <code>output[2]</code>
			 *  @type {Tone.Filter}
			 */
	        this.high = this.output[2] = new Tone.Filter(0, 'highpass');
	        /**
			 *  The low/mid crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.lowFrequency = new Tone.Signal(options.lowFrequency, Tone.Type.Frequency);
	        /**
			 *  The mid/high crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.highFrequency = new Tone.Signal(options.highFrequency, Tone.Type.Frequency);
	        /**
			 *  The quality of all the filters
			 *  @type {Number}
			 *  @signal
			 */
	        this.Q = new Tone.Signal(options.Q);
	        this.input.fan(this.low, this.high);
	        this.input.chain(this._lowMidFilter, this.mid);
	        //the frequency control signal
	        this.lowFrequency.connect(this.low.frequency);
	        this.lowFrequency.connect(this._lowMidFilter.frequency);
	        this.highFrequency.connect(this.mid.frequency);
	        this.highFrequency.connect(this.high.frequency);
	        //the Q value
	        this.Q.connect(this.low.Q);
	        this.Q.connect(this._lowMidFilter.Q);
	        this.Q.connect(this.mid.Q);
	        this.Q.connect(this.high.Q);
	        this._readOnly([
	            'high',
	            'mid',
	            'low',
	            'highFrequency',
	            'lowFrequency'
	        ]);
	    };
	    Tone.extend(Tone.MultibandSplit, Tone.AudioNode);
	    /**
		 *  @private
		 *  @static
		 *  @type {Object}
		 */
	    Tone.MultibandSplit.defaults = {
	        'lowFrequency': 400,
	        'highFrequency': 2500,
	        'Q': 1
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.MultibandSplit} this
		 */
	    Tone.MultibandSplit.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'high',
	            'mid',
	            'low',
	            'highFrequency',
	            'lowFrequency'
	        ]);
	        this.low.dispose();
	        this.low = null;
	        this._lowMidFilter.dispose();
	        this._lowMidFilter = null;
	        this.mid.dispose();
	        this.mid = null;
	        this.high.dispose();
	        this.high = null;
	        this.lowFrequency.dispose();
	        this.lowFrequency = null;
	        this.highFrequency.dispose();
	        this.highFrequency = null;
	        this.Q.dispose();
	        this.Q = null;
	        return this;
	    };
	    return Tone.MultibandSplit;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as
		 *         well as the low and high crossover frequencies.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *
		 *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.
		 *  @param {Decibels} [midLevel] The gain applied to the mid.
		 *  @param {Decibels} [highLevel] The gain applied to the high.
		 *  @example
		 * var eq = new Tone.EQ3(-10, 3, -20);
		 */
	    Tone.EQ3 = function () {
	        var options = Tone.defaults(arguments, [
	            'low',
	            'mid',
	            'high'
	        ], Tone.EQ3);
	        Tone.AudioNode.call(this);
	        /**
			 *  the output node
			 *  @type {GainNode}
			 *  @private
			 */
	        this.output = new Tone.Gain();
	        /**
			 *  the multiband split
			 *  @type {Tone.MultibandSplit}
			 *  @private
			 */
	        this._multibandSplit = this.input = new Tone.MultibandSplit({
	            'lowFrequency': options.lowFrequency,
	            'highFrequency': options.highFrequency
	        });
	        /**
			 *  The gain for the lower signals
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._lowGain = new Tone.Gain(options.low, Tone.Type.Decibels);
	        /**
			 *  The gain for the mid signals
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._midGain = new Tone.Gain(options.mid, Tone.Type.Decibels);
	        /**
			 * The gain in decibels of the high part
			 * @type {Tone.Gain}
			 * @private
			 */
	        this._highGain = new Tone.Gain(options.high, Tone.Type.Decibels);
	        /**
			 * The gain in decibels of the low part
			 * @type {Decibels}
			 * @signal
			 */
	        this.low = this._lowGain.gain;
	        /**
			 * The gain in decibels of the mid part
			 * @type {Decibels}
			 * @signal
			 */
	        this.mid = this._midGain.gain;
	        /**
			 * The gain in decibels of the high part
			 * @type {Decibels}
			 * @signal
			 */
	        this.high = this._highGain.gain;
	        /**
			 *  The Q value for all of the filters.
			 *  @type {Positive}
			 *  @signal
			 */
	        this.Q = this._multibandSplit.Q;
	        /**
			 *  The low/mid crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.lowFrequency = this._multibandSplit.lowFrequency;
	        /**
			 *  The mid/high crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.highFrequency = this._multibandSplit.highFrequency;
	        //the frequency bands
	        this._multibandSplit.low.chain(this._lowGain, this.output);
	        this._multibandSplit.mid.chain(this._midGain, this.output);
	        this._multibandSplit.high.chain(this._highGain, this.output);
	        this._readOnly([
	            'low',
	            'mid',
	            'high',
	            'lowFrequency',
	            'highFrequency'
	        ]);
	    };
	    Tone.extend(Tone.EQ3, Tone.AudioNode);
	    /**
		 *  the default values
		 */
	    Tone.EQ3.defaults = {
	        'low': 0,
	        'mid': 0,
	        'high': 0,
	        'lowFrequency': 400,
	        'highFrequency': 2500
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.EQ3} this
		 */
	    Tone.EQ3.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'low',
	            'mid',
	            'high',
	            'lowFrequency',
	            'highFrequency'
	        ]);
	        this._multibandSplit.dispose();
	        this._multibandSplit = null;
	        this.lowFrequency = null;
	        this.highFrequency = null;
	        this._lowGain.dispose();
	        this._lowGain = null;
	        this._midGain.dispose();
	        this._midGain = null;
	        this._highGain.dispose();
	        this._highGain = null;
	        this.low = null;
	        this.mid = null;
	        this.high = null;
	        this.Q = null;
	        return this;
	    };
	    return Tone.EQ3;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Performs a linear scaling on an input signal.
		 *          Scales a NormalRange input to between
		 *          outputMin and outputMax.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @param {number} [outputMin=0] The output value when the input is 0. 
		 *  @param {number} [outputMax=1]	The output value when the input is 1. 
		 *  @example
		 * var scale = new Tone.Scale(50, 100);
		 * var signal = new Tone.Signal(0.5).connect(scale);
		 * //the output of scale equals 75
		 */
	    Tone.Scale = function (outputMin, outputMax) {
	        Tone.SignalBase.call(this);
	        /** 
			 *  @private
			 *  @type {number}
			 */
	        this._outputMin = Tone.defaultArg(outputMin, 0);
	        /** 
			 *  @private
			 *  @type {number}
			 */
	        this._outputMax = Tone.defaultArg(outputMax, 1);
	        /** 
			 *  @private
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._scale = this.input = new Tone.Multiply(1);
	        /** 
			 *  @private
			 *  @type {Tone.Add}
			 *  @private
			 */
	        this._add = this.output = new Tone.Add(0);
	        this._scale.connect(this._add);
	        this._setRange();
	    };
	    Tone.extend(Tone.Scale, Tone.SignalBase);
	    /**
		 * The minimum output value. This number is output when 
		 * the value input value is 0. 
		 * @memberOf Tone.Scale#
		 * @type {number}
		 * @name min
		 */
	    Object.defineProperty(Tone.Scale.prototype, 'min', {
	        get: function () {
	            return this._outputMin;
	        },
	        set: function (min) {
	            this._outputMin = min;
	            this._setRange();
	        }
	    });
	    /**
		 * The maximum output value. This number is output when 
		 * the value input value is 1. 
		 * @memberOf Tone.Scale#
		 * @type {number}
		 * @name max
		 */
	    Object.defineProperty(Tone.Scale.prototype, 'max', {
	        get: function () {
	            return this._outputMax;
	        },
	        set: function (max) {
	            this._outputMax = max;
	            this._setRange();
	        }
	    });
	    /**
		 *  set the values
		 *  @private
		 */
	    Tone.Scale.prototype._setRange = function () {
	        this._add.value = this._outputMin;
	        this._scale.value = this._outputMax - this._outputMin;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Scale} this
		 */
	    Tone.Scale.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._add.dispose();
	        this._add = null;
	        this._scale.dispose();
	        this._scale = null;
	        return this;
	    };
	    return Tone.Scale;
	});
	Module(function (Tone) {
	    /**
		 *  @class  Performs an exponential scaling on an input signal.
		 *          Scales a NormalRange value [0,1] exponentially
		 *          to the output range of outputMin to outputMax.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @param {number} [outputMin=0] The output value when the input is 0.
		 *  @param {number} [outputMax=1]	The output value when the input is 1.
		 *  @param {number} [exponent=2] The exponent which scales the incoming signal.
		 *  @example
		 * var scaleExp = new Tone.ScaleExp(0, 100, 2);
		 * var signal = new Tone.Signal(0.5).connect(scaleExp);
		 */
	    Tone.ScaleExp = function (outputMin, outputMax, exponent) {
	        Tone.SignalBase.call(this);
	        /**
			 *  scale the input to the output range
			 *  @type {Tone.Scale}
			 *  @private
			 */
	        this._scale = this.output = new Tone.Scale(outputMin, outputMax);
	        /**
			 *  @private
			 *  @type {Tone.Pow}
			 *  @private
			 */
	        this._exp = this.input = new Tone.Pow(Tone.defaultArg(exponent, 2));
	        this._exp.connect(this._scale);
	    };
	    Tone.extend(Tone.ScaleExp, Tone.SignalBase);
	    /**
		 * Instead of interpolating linearly between the <code>min</code> and
		 * <code>max</code> values, setting the exponent will interpolate between
		 * the two values with an exponential curve.
		 * @memberOf Tone.ScaleExp#
		 * @type {number}
		 * @name exponent
		 */
	    Object.defineProperty(Tone.ScaleExp.prototype, 'exponent', {
	        get: function () {
	            return this._exp.value;
	        },
	        set: function (exp) {
	            this._exp.value = exp;
	        }
	    });
	    /**
		 * The minimum output value. This number is output when
		 * the value input value is 0.
		 * @memberOf Tone.ScaleExp#
		 * @type {number}
		 * @name min
		 */
	    Object.defineProperty(Tone.ScaleExp.prototype, 'min', {
	        get: function () {
	            return this._scale.min;
	        },
	        set: function (min) {
	            this._scale.min = min;
	        }
	    });
	    /**
		 * The maximum output value. This number is output when
		 * the value input value is 1.
		 * @memberOf Tone.ScaleExp#
		 * @type {number}
		 * @name max
		 */
	    Object.defineProperty(Tone.ScaleExp.prototype, 'max', {
	        get: function () {
	            return this._scale.max;
	        },
	        set: function (max) {
	            this._scale.max = max;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.ScaleExp} this
		 */
	    Tone.ScaleExp.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._scale.dispose();
	        this._scale = null;
	        this._exp.dispose();
	        this._exp = null;
	        return this;
	    };
	    return Tone.ScaleExp;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).
		 *  @extends {Tone}
		 *  @param {Time=} delayTime The delay applied to the incoming signal.
		 *  @param {Time=} maxDelay The maximum delay time.
		 */
	    Tone.Delay = function () {
	        var options = Tone.defaults(arguments, [
	            'delayTime',
	            'maxDelay'
	        ], Tone.Delay);
	        Tone.AudioNode.call(this);
	        /**
			 * The maximum delay time initialized with the node
			 * @type {Number}
			 * @private
			 */
	        this._maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));
	        /**
			 *  The native delay node
			 *  @type {DelayNode}
			 *  @private
			 */
	        this._delayNode = this.input = this.output = this.context.createDelay(this._maxDelay);
	        /**
			 *  The amount of time the incoming signal is
			 *  delayed.
			 *  @type {Time}
			 *  @signal
			 */
	        this.delayTime = new Tone.Param({
	            'param': this._delayNode.delayTime,
	            'units': Tone.Type.Time,
	            'value': options.delayTime
	        });
	        this._readOnly('delayTime');
	    };
	    Tone.extend(Tone.Delay, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.Delay.defaults = {
	        'maxDelay': 1,
	        'delayTime': 0
	    };
	    /**
		 * The maximum delay time. This cannot be changed. The value is passed into the constructor.
		 * @memberof Tone.Delay#
		 * @type {Time}
		 * @name maxDelay
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Delay.prototype, 'maxDelay', {
	        get: function () {
	            return this._maxDelay;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.Delay}  this
		 */
	    Tone.Delay.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._delayNode.disconnect();
	        this._delayNode = null;
	        this._writable('delayTime');
	        this.delayTime = null;
	        return this;
	    };
	    return Tone.Delay;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Comb filters are basic building blocks for physical modeling. Read more
		 *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Time|Object} [delayTime] The delay time of the filter.
		 *  @param {NormalRange=} resonance The amount of feedback the filter has.
		 */
	    Tone.FeedbackCombFilter = function () {
	        var options = Tone.defaults(arguments, [
	            'delayTime',
	            'resonance'
	        ], Tone.FeedbackCombFilter);
	        Tone.AudioNode.call(this);
	        /**
			 *  the delay node
			 *  @type {DelayNode}
			 *  @private
			 */
	        this._delay = this.input = this.output = new Tone.Delay(options.delayTime);
	        /**
			 *  The amount of delay of the comb filter.
			 *  @type {Time}
			 *  @signal
			 */
	        this.delayTime = this._delay.delayTime;
	        /**
			 *  the feedback node
			 *  @type {GainNode}
			 *  @private
			 */
	        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
	        /**
			 *  The amount of feedback of the delayed signal.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.resonance = this._feedback.gain;
	        this._delay.chain(this._feedback, this._delay);
	        this._readOnly([
	            'resonance',
	            'delayTime'
	        ]);
	    };
	    Tone.extend(Tone.FeedbackCombFilter, Tone.AudioNode);
	    /**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.FeedbackCombFilter.defaults = {
	        'delayTime': 0.1,
	        'resonance': 0.5
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.FeedbackCombFilter} this
		 */
	    Tone.FeedbackCombFilter.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'resonance',
	            'delayTime'
	        ]);
	        this._delay.dispose();
	        this._delay = null;
	        this.delayTime = null;
	        this._feedback.dispose();
	        this._feedback = null;
	        this.resonance = null;
	        return this;
	    };
	    return Tone.FeedbackCombFilter;
	});
	Module(function (Tone) {
	    /**
		 *  @class  Get the current waveform data of the connected audio source.
		 *  @extends {Tone.AudioNode}
		 *  @param {Number=} size The size of the FFT. Value must be a power of
		 *                       two in the range 32 to 32768.
		 */
	    Tone.FFT = function () {
	        var options = Tone.defaults(arguments, ['size'], Tone.FFT);
	        options.type = Tone.Analyser.Type.FFT;
	        Tone.AudioNode.call(this);
	        /**
			 *  The analyser node.
			 *  @private
			 *  @type {Tone.Analyser}
			 */
	        this._analyser = this.input = this.output = new Tone.Analyser(options);
	    };
	    Tone.extend(Tone.FFT, Tone.AudioNode);
	    /**
		 *  The default values.
		 *  @type {Object}
		 *  @const
		 */
	    Tone.FFT.defaults = { 'size': 1024 };
	    /**
		 *  Gets the waveform of the audio source. Returns the waveform data
		 *  of length [size](#size) as a Float32Array with values between -1 and 1.
		 *  @returns {TypedArray}
		 */
	    Tone.FFT.prototype.getValue = function () {
	        return this._analyser.getValue();
	    };
	    /**
		 *  The size of analysis. This must be a power of two in the range 32 to 32768.
		 *  @memberOf Tone.FFT#
		 *  @type {Number}
		 *  @name size
		 */
	    Object.defineProperty(Tone.FFT.prototype, 'size', {
	        get: function () {
	            return this._analyser.size;
	        },
	        set: function (size) {
	            this._analyser.size = size;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.FFT}  this
		 */
	    Tone.FFT.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._analyser.dispose();
	        this._analyser = null;
	    };
	    return Tone.FFT;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Return the absolute value of an incoming signal.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @example
		 * var signal = new Tone.Signal(-1);
		 * var abs = new Tone.Abs();
		 * signal.connect(abs);
		 * //the output of abs is 1.
		 */
	    Tone.Abs = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  @type {Tone.LessThan}
			 *  @private
			 */
	        this._abs = this.input = this.output = new Tone.WaveShaper(function (val) {
	            if (Math.abs(val) < 0.001) {
	                return 0;
	            } else {
	                return Math.abs(val);
	            }
	        }, 1024);
	    };
	    Tone.extend(Tone.Abs, Tone.SignalBase);
	    /**
		 *  dispose method
		 *  @returns {Tone.Abs} this
		 */
	    Tone.Abs.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._abs.dispose();
	        this._abs = null;
	        return this;
	    };
	    return Tone.Abs;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Follower is a  crude envelope follower which will follow
		 *          the amplitude of an incoming signal.
		 *          Take care with small (< 0.02) attack or decay values
		 *          as follower has some ripple which is exaggerated
		 *          at these values. Read more about envelope followers (also known
		 *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Time|Object} [attack] The rate at which the follower rises.
		 *  @param {Time=} release The rate at which the folower falls.
		 *  @example
		 * var follower = new Tone.Follower(0.2, 0.4);
		 */
	    Tone.Follower = function () {
	        var options = Tone.defaults(arguments, [
	            'attack',
	            'release'
	        ], Tone.Follower);
	        Tone.AudioNode.call(this);
	        this.createInsOuts(1, 1);
	        /**
			 *  @type {Tone.Abs}
			 *  @private
			 */
	        this._abs = new Tone.Abs();
	        /**
			 *  the lowpass filter which smooths the input
			 *  @type {BiquadFilterNode}
			 *  @private
			 */
	        this._filter = this.context.createBiquadFilter();
	        this._filter.type = 'lowpass';
	        this._filter.frequency.value = 0;
	        this._filter.Q.value = -100;
	        /**
			 *  @type {WaveShaperNode}
			 *  @private
			 */
	        this._frequencyValues = new Tone.WaveShaper();
	        /**
			 *  @type {Tone.Subtract}
			 *  @private
			 */
	        this._sub = new Tone.Subtract();
	        /**
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._delay = new Tone.Delay(this.blockTime);
	        /**
			 *  this keeps it far from 0, even for very small differences
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._mult = new Tone.Multiply(10000);
	        /**
			 *  @private
			 *  @type {number}
			 */
	        this._attack = options.attack;
	        /**
			 *  @private
			 *  @type {number}
			 */
	        this._release = options.release;
	        //the smoothed signal to get the values
	        this.input.chain(this._abs, this._filter, this.output);
	        //the difference path
	        this._abs.connect(this._sub, 0, 1);
	        this._filter.chain(this._delay, this._sub);
	        //threshold the difference and use the thresh to set the frequency
	        this._sub.chain(this._mult, this._frequencyValues, this._filter.frequency);
	        //set the attack and release values in the table
	        this._setAttackRelease(this._attack, this._release);
	    };
	    Tone.extend(Tone.Follower, Tone.AudioNode);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Follower.defaults = {
	        'attack': 0.05,
	        'release': 0.5
	    };
	    /**
		 *  sets the attack and release times in the wave shaper
		 *  @param   {Time} attack
		 *  @param   {Time} release
		 *  @private
		 */
	    Tone.Follower.prototype._setAttackRelease = function (attack, release) {
	        var minTime = this.blockTime;
	        attack = Tone.Time(attack).toFrequency();
	        release = Tone.Time(release).toFrequency();
	        attack = Math.max(attack, minTime);
	        release = Math.max(release, minTime);
	        this._frequencyValues.setMap(function (val) {
	            if (val <= 0) {
	                return attack;
	            } else {
	                return release;
	            }
	        });
	    };
	    /**
		 * The attack time.
		 * @memberOf Tone.Follower#
		 * @type {Time}
		 * @name attack
		 */
	    Object.defineProperty(Tone.Follower.prototype, 'attack', {
	        get: function () {
	            return this._attack;
	        },
	        set: function (attack) {
	            this._attack = attack;
	            this._setAttackRelease(this._attack, this._release);
	        }
	    });
	    /**
		 * The release time.
		 * @memberOf Tone.Follower#
		 * @type {Time}
		 * @name release
		 */
	    Object.defineProperty(Tone.Follower.prototype, 'release', {
	        get: function () {
	            return this._release;
	        },
	        set: function (release) {
	            this._release = release;
	            this._setAttackRelease(this._attack, this._release);
	        }
	    });
	    /**
		 *  Borrows the connect method from Signal so that the output can be used
		 *  as a Tone.Signal control signal.
		 *  @function
		 */
	    Tone.Follower.prototype.connect = Tone.SignalBase.prototype.connect;
	    /**
		 *  dispose
		 *  @returns {Tone.Follower} this
		 */
	    Tone.Follower.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._filter.disconnect();
	        this._filter = null;
	        this._frequencyValues.disconnect();
	        this._frequencyValues = null;
	        this._delay.dispose();
	        this._delay = null;
	        this._sub.disconnect();
	        this._sub = null;
	        this._abs.dispose();
	        this._abs = null;
	        this._mult.dispose();
	        this._mult = null;
	        this._curve = null;
	        return this;
	    };
	    return Tone.Follower;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.ScaledEnvelop is an envelope which can be scaled
		 *         to any range. It's useful for applying an envelope
		 *         to a frequency or any other non-NormalRange signal
		 *         parameter.
		 *
		 *  @extends {Tone.Envelope}
		 *  @constructor
		 *  @param {Time|Object} [attack]	the attack time in seconds
		 *  @param {Time} [decay]	the decay time in seconds
		 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
		 *  @param {Time} [release]	the release time in seconds
		 *  @example
		 *  var scaledEnv = new Tone.ScaledEnvelope({
		 *  	"attack" : 0.2,
		 *  	"min" : 200,
		 *  	"max" : 2000
		 *  });
		 *  scaledEnv.connect(oscillator.frequency);
		 */
	    Tone.ScaledEnvelope = function () {
	        //get all of the defaults
	        var options = Tone.defaults(arguments, [
	            'attack',
	            'decay',
	            'sustain',
	            'release'
	        ], Tone.Envelope);
	        Tone.Envelope.call(this, options);
	        options = Tone.defaultArg(options, Tone.ScaledEnvelope.defaults);
	        /**
			 *  scale the incoming signal by an exponent
			 *  @type {Tone.Pow}
			 *  @private
			 */
	        this._exp = this.output = new Tone.Pow(options.exponent);
	        /**
			 *  scale the signal to the desired range
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._scale = this.output = new Tone.Scale(options.min, options.max);
	        this._sig.chain(this._exp, this._scale);
	    };
	    Tone.extend(Tone.ScaledEnvelope, Tone.Envelope);
	    /**
		 *  the default parameters
		 *  @static
		 */
	    Tone.ScaledEnvelope.defaults = {
	        'min': 0,
	        'max': 1,
	        'exponent': 1
	    };
	    /**
		 * The envelope's min output value. This is the value which it
		 * starts at.
		 * @memberOf Tone.ScaledEnvelope#
		 * @type {number}
		 * @name min
		 */
	    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'min', {
	        get: function () {
	            return this._scale.min;
	        },
	        set: function (min) {
	            this._scale.min = min;
	        }
	    });
	    /**
		 * The envelope's max output value. In other words, the value
		 * at the peak of the attack portion of the envelope.
		 * @memberOf Tone.ScaledEnvelope#
		 * @type {number}
		 * @name max
		 */
	    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'max', {
	        get: function () {
	            return this._scale.max;
	        },
	        set: function (max) {
	            this._scale.max = max;
	        }
	    });
	    /**
		 * The envelope's exponent value.
		 * @memberOf Tone.ScaledEnvelope#
		 * @type {number}
		 * @name exponent
		 */
	    Object.defineProperty(Tone.ScaledEnvelope.prototype, 'exponent', {
	        get: function () {
	            return this._exp.value;
	        },
	        set: function (exp) {
	            this._exp.value = exp;
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.ScaledEnvelope} this
		 */
	    Tone.ScaledEnvelope.prototype.dispose = function () {
	        Tone.Envelope.prototype.dispose.call(this);
	        this._scale.dispose();
	        this._scale = null;
	        this._exp.dispose();
	        this._exp = null;
	        return this;
	    };
	    return Tone.ScaledEnvelope;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`
		 *         it's got a `baseFrequency` and `octaves` parameter.
		 *
		 *  @extends {Tone.Envelope}
		 *  @constructor
		 *  @param {Time|Object} [attack]	the attack time in seconds
		 *  @param {Time} [decay]	the decay time in seconds
		 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
		 *  @param {Time} [release]	the release time in seconds
		 *  @example
		 *  var freqEnv = new Tone.FrequencyEnvelope({
		 *  	"attack" : 0.2,
		 *  	"baseFrequency" : "C2",
		 *  	"octaves" : 4
		 *  });
		 *  freqEnv.connect(oscillator.frequency);
		 */
	    Tone.FrequencyEnvelope = function () {
	        var options = Tone.defaults(arguments, [
	            'attack',
	            'decay',
	            'sustain',
	            'release'
	        ], Tone.Envelope);
	        Tone.ScaledEnvelope.call(this, options);
	        //merge it with the frequency envelope defaults
	        options = Tone.defaultArg(options, Tone.FrequencyEnvelope.defaults);
	        /**
			 *  Stores the octave value
			 *  @type {Positive}
			 *  @private
			 */
	        this._octaves = options.octaves;
	        //setup
	        this.baseFrequency = options.baseFrequency;
	        this.octaves = options.octaves;
	    };
	    Tone.extend(Tone.FrequencyEnvelope, Tone.Envelope);
	    /**
		 *  the default parameters
		 *  @static
		 */
	    Tone.FrequencyEnvelope.defaults = {
	        'baseFrequency': 200,
	        'octaves': 4,
	        'exponent': 2
	    };
	    /**
		 * The envelope's mininum output value. This is the value which it
		 * starts at.
		 * @memberOf Tone.FrequencyEnvelope#
		 * @type {Frequency}
		 * @name baseFrequency
		 */
	    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'baseFrequency', {
	        get: function () {
	            return this._scale.min;
	        },
	        set: function (min) {
	            this._scale.min = this.toFrequency(min);
	            //also update the octaves
	            this.octaves = this._octaves;
	        }
	    });
	    /**
		 * The number of octaves above the baseFrequency that the
		 * envelope will scale to.
		 * @memberOf Tone.FrequencyEnvelope#
		 * @type {Positive}
		 * @name octaves
		 */
	    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'octaves', {
	        get: function () {
	            return this._octaves;
	        },
	        set: function (octaves) {
	            this._octaves = octaves;
	            this._scale.max = this.baseFrequency * Math.pow(2, octaves);
	        }
	    });
	    /**
		 * The envelope's exponent value.
		 * @memberOf Tone.FrequencyEnvelope#
		 * @type {number}
		 * @name exponent
		 */
	    Object.defineProperty(Tone.FrequencyEnvelope.prototype, 'exponent', {
	        get: function () {
	            return this._exp.value;
	        },
	        set: function (exp) {
	            this._exp.value = exp;
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.FrequencyEnvelope} this
		 */
	    Tone.FrequencyEnvelope.prototype.dispose = function () {
	        Tone.ScaledEnvelope.prototype.dispose.call(this);
	        return this;
	    };
	    return Tone.FrequencyEnvelope;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @example
		 * var gt0 = new Tone.GreaterThanZero();
		 * var sig = new Tone.Signal(0.01).connect(gt0);
		 * //the output of gt0 is 1.
		 * sig.value = 0;
		 * //the output of gt0 is 0.
		 */
	    Tone.GreaterThanZero = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */
	        this._thresh = this.output = new Tone.WaveShaper(function (val) {
	            if (val <= 0) {
	                return 0;
	            } else {
	                return 1;
	            }
	        }, 127);
	        /**
			 *  scale the first thresholded signal by a large value.
			 *  this will help with values which are very close to 0
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._scale = this.input = new Tone.Multiply(10000);
	        //connections
	        this._scale.connect(this._thresh);
	    };
	    Tone.extend(Tone.GreaterThanZero, Tone.SignalBase);
	    /**
		 *  dispose method
		 *  @returns {Tone.GreaterThanZero} this
		 */
	    Tone.GreaterThanZero.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._scale.dispose();
	        this._scale = null;
	        this._thresh.dispose();
	        this._thresh = null;
	        return this;
	    };
	    return Tone.GreaterThanZero;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.
		 *          can compare two signals or a signal and a number.
		 *
		 *  @constructor
		 *  @extends {Tone.Signal}
		 *  @param {number} [value=0] the value to compare to the incoming signal
		 *  @example
		 * var gt = new Tone.GreaterThan(2);
		 * var sig = new Tone.Signal(4).connect(gt);
		 * //output of gt is equal 1.
		 */
	    Tone.GreaterThan = function (value) {
	        Tone.Signal.call(this);
	        this.createInsOuts(2, 0);
	        /**
			 *  subtract the amount from the incoming signal
			 *  @type {Tone.Subtract}
			 *  @private
			 */
	        this._param = this.input[0] = new Tone.Subtract(value);
	        this.input[1] = this._param.input[1];
	        /**
			 *  compare that amount to zero
			 *  @type {Tone.GreaterThanZero}
			 *  @private
			 */
	        this._gtz = this.output = new Tone.GreaterThanZero();
	        //connect
	        this._param.connect(this._gtz);
	    };
	    Tone.extend(Tone.GreaterThan, Tone.Signal);
	    /**
		 *  dispose method
		 *  @returns {Tone.GreaterThan} this
		 */
	    Tone.GreaterThan.prototype.dispose = function () {
	        Tone.Signal.prototype.dispose.call(this);
	        this._gtz.dispose();
	        this._gtz = null;
	        return this;
	    };
	    return Tone.GreaterThan;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Gate only passes a signal through when the incoming
		 *          signal exceeds a specified threshold. To do this, Gate uses
		 *          a Tone.Follower to follow the amplitude of the incoming signal.
		 *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.
		 *  @param {Time=} attack The follower's attack time
		 *  @param {Time=} release The follower's release time
		 *  @example
		 * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();
		 * var mic = new Tone.UserMedia().connect(gate);
		 * //the gate will only pass through the incoming
		 * //signal when it's louder than -30db
		 */
	    Tone.Gate = function () {
	        var options = Tone.defaults(arguments, [
	            'threshold',
	            'attack',
	            'release'
	        ], Tone.Gate);
	        Tone.AudioNode.call(this);
	        this.createInsOuts(1, 1);
	        /**
			 *  @type {Tone.Follower}
			 *  @private
			 */
	        this._follower = new Tone.Follower(options.attack, options.release);
	        /**
			 *  @type {Tone.GreaterThan}
			 *  @private
			 */
	        this._gt = new Tone.GreaterThan(Tone.dbToGain(options.threshold));
	        //the connections
	        this.input.connect(this.output);
	        //the control signal
	        this.input.chain(this._gt, this._follower, this.output.gain);
	    };
	    Tone.extend(Tone.Gate, Tone.AudioNode);
	    /**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Gate.defaults = {
	        'attack': 0.1,
	        'release': 0.1,
	        'threshold': -40
	    };
	    /**
		 * The threshold of the gate in decibels
		 * @memberOf Tone.Gate#
		 * @type {Decibels}
		 * @name threshold
		 */
	    Object.defineProperty(Tone.Gate.prototype, 'threshold', {
	        get: function () {
	            return Tone.gainToDb(this._gt.value);
	        },
	        set: function (thresh) {
	            this._gt.value = Tone.dbToGain(thresh);
	        }
	    });
	    /**
		 * The attack speed of the gate
		 * @memberOf Tone.Gate#
		 * @type {Time}
		 * @name attack
		 */
	    Object.defineProperty(Tone.Gate.prototype, 'attack', {
	        get: function () {
	            return this._follower.attack;
	        },
	        set: function (attackTime) {
	            this._follower.attack = attackTime;
	        }
	    });
	    /**
		 * The release speed of the gate
		 * @memberOf Tone.Gate#
		 * @type {Time}
		 * @name release
		 */
	    Object.defineProperty(Tone.Gate.prototype, 'release', {
	        get: function () {
	            return this._follower.release;
	        },
	        set: function (releaseTime) {
	            this._follower.release = releaseTime;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.Gate} this
		 */
	    Tone.Gate.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._follower.dispose();
	        this._gt.dispose();
	        this._follower = null;
	        this._gt = null;
	        return this;
	    };
	    return Tone.Gate;
	});
	Module(function (Tone) {
	    /**
		 * @class Tone.TickSignal extends Tone.Signal, but adds the capability
		 *        to calculate the number of elapsed ticks. exponential and target curves
		 *        are approximated with multiple linear ramps.
		 *
		 *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)
		 *        describing integrating timing functions for tempo calculations.
		 *
		 * @param {Number} value The initial value of the signal
		 * @extends {Tone.Signal}
		 */
	    Tone.TickSignal = function (value) {
	        value = Tone.defaultArg(value, 1);
	        Tone.Signal.call(this, {
	            'units': Tone.Type.Ticks,
	            'value': value
	        });
	        //extend the memory
	        this._events.memory = Infinity;
	        //clear the clock from the beginning
	        this.cancelScheduledValues(0);
	        //set an initial event
	        this._events.add({
	            'type': Tone.Param.AutomationType.SetValue,
	            'time': 0,
	            'value': value
	        });
	    };
	    Tone.extend(Tone.TickSignal, Tone.Signal);
	    /**
		 * Wraps Tone.Signal methods so that they also
		 * record the ticks.
		 * @param  {Function} method
		 * @return {Function}
		 * @private
		 */
	    function _wrapScheduleMethods(method) {
	        return function (value, time) {
	            time = this.toSeconds(time);
	            method.apply(this, arguments);
	            var event = this._events.get(time);
	            var previousEvent = this._events.previousEvent(event);
	            var ticksUntilTime = this._getTicksUntilEvent(previousEvent, time);
	            event.ticks = Math.max(ticksUntilTime, 0);
	            return this;
	        };
	    }
	    Tone.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.setValueAtTime);
	    Tone.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(Tone.Signal.prototype.linearRampToValueAtTime);
	    /**
		 *  Start exponentially approaching the target value at the given time with
		 *  a rate having the given time constant.
		 *  @param {number} value
		 *  @param {Time} startTime
		 *  @param {number} timeConstant
		 *  @returns {Tone.TickSignal} this
		 */
	    Tone.TickSignal.prototype.setTargetAtTime = function (value, time, constant) {
	        //aproximate it with multiple linear ramps
	        time = this.toSeconds(time);
	        this.setRampPoint(time);
	        value = this._fromUnits(value);
	        //start from previously scheduled value
	        var prevEvent = this._events.get(time);
	        var segments = Math.round(Math.max(1 / constant, 1));
	        for (var i = 0; i <= segments; i++) {
	            var segTime = constant * i + time;
	            var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);
	            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);
	        }
	        return this;
	    };
	    /**
		 *  Schedules an exponential continuous change in parameter value from
		 *  the previous scheduled parameter value to the given value.
		 *  @param  {number} value
		 *  @param  {Time} endTime
		 *  @returns {Tone.TickSignal} this
		 */
	    Tone.TickSignal.prototype.exponentialRampToValueAtTime = function (value, time) {
	        //aproximate it with multiple linear ramps
	        time = this.toSeconds(time);
	        value = this._fromUnits(value);
	        //start from previously scheduled value
	        var prevEvent = this._events.get(time);
	        if (prevEvent === null) {
	            prevEvent = {
	                'value': this._initialValue,
	                'time': 0
	            };
	        }
	        //approx 10 segments per second
	        var segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));
	        var segmentDur = (time - prevEvent.time) / segments;
	        for (var i = 0; i <= segments; i++) {
	            var segTime = segmentDur * i + prevEvent.time;
	            var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);
	            this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);
	        }
	        return this;
	    };
	    /**
		 * Returns the tick value at the time. Takes into account
		 * any automation curves scheduled on the signal.
		 * @private
		 * @param  {Time} time The time to get the tick count at
		 * @return {Ticks}      The number of ticks which have elapsed at the time
		 *                          given any automations.
		 */
	    Tone.TickSignal.prototype._getTicksUntilEvent = function (event, time) {
	        if (event === null) {
	            event = {
	                'ticks': 0,
	                'time': 0
	            };
	        } else if (Tone.isUndef(event.ticks)) {
	            var previousEvent = this._events.previousEvent(event);
	            event.ticks = this._getTicksUntilEvent(previousEvent, event.time);
	        }
	        var val0 = this.getValueAtTime(event.time);
	        var val1 = this.getValueAtTime(time);
	        //if it's right on the line, take the previous value
	        if (this._events.get(time).time === time && this._events.get(time).type === Tone.Param.AutomationType.SetValue) {
	            val1 = this.getValueAtTime(time - this.sampleTime);
	        }
	        return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;
	    };
	    /**
		 * Returns the tick value at the time. Takes into account
		 * any automation curves scheduled on the signal.
		 * @param  {Time} time The time to get the tick count at
		 * @return {Ticks}      The number of ticks which have elapsed at the time
		 *                          given any automations.
		 */
	    Tone.TickSignal.prototype.getTicksAtTime = function (time) {
	        time = this.toSeconds(time);
	        var event = this._events.get(time);
	        return Math.max(this._getTicksUntilEvent(event, time), 0);
	    };
	    /**
		 * Return the elapsed time of the number of ticks from the given time
		 * @param {Ticks} ticks The number of ticks to calculate
		 * @param  {Time} time The time to get the next tick from
		 * @return {Seconds} The duration of the number of ticks from the given time in seconds
		 */
	    Tone.TickSignal.prototype.getDurationOfTicks = function (ticks, time) {
	        time = this.toSeconds(time);
	        var currentTick = this.getTicksAtTime(time);
	        return this.getTimeOfTick(currentTick + ticks) - time;
	    };
	    /**
		 * Given a tick, returns the time that tick occurs at.
		 * @param  {Ticks} tick
		 * @return {Time}      The time that the tick occurs.
		 */
	    Tone.TickSignal.prototype.getTimeOfTick = function (tick) {
	        var before = this._events.get(tick, 'ticks');
	        var after = this._events.getAfter(tick, 'ticks');
	        if (before && before.ticks === tick) {
	            return before.time;
	        } else if (before && after && after.type === Tone.Param.AutomationType.Linear && before.value !== after.value) {
	            var val0 = this.getValueAtTime(before.time);
	            var val1 = this.getValueAtTime(after.time);
	            var delta = (val1 - val0) / (after.time - before.time);
	            var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));
	            var sol1 = (-val0 + k) / delta;
	            var sol2 = (-val0 - k) / delta;
	            return (sol1 > 0 ? sol1 : sol2) + before.time;
	        } else if (before) {
	            if (before.value === 0) {
	                return Infinity;
	            } else {
	                return before.time + (tick - before.ticks) / before.value;
	            }
	        } else {
	            return tick / this._initialValue;
	        }
	    };
	    /**
		 * Convert some number of ticks their the duration in seconds accounting
		 * for any automation curves starting at the given time.
		 * @param  {Ticks} ticks The number of ticks to convert to seconds.
		 * @param  {Time} [when=now]  When along the automation timeline to convert the ticks.
		 * @return {Tone.Time}       The duration in seconds of the ticks.
		 */
	    Tone.TickSignal.prototype.ticksToTime = function (ticks, when) {
	        when = this.toSeconds(when);
	        return new Tone.Time(this.getDurationOfTicks(ticks, when));
	    };
	    /**
		 * The inverse of [ticksToTime](#tickstotime). Convert a duration in
		 * seconds to the corresponding number of ticks accounting for any
		 * automation curves starting at the given time.
		 * @param  {Time} duration The time interval to convert to ticks.
		 * @param  {Time} [when=now]     When along the automation timeline to convert the ticks.
		 * @return {Tone.Ticks}          The duration in ticks.
		 */
	    Tone.TickSignal.prototype.timeToTicks = function (duration, when) {
	        when = this.toSeconds(when);
	        duration = this.toSeconds(duration);
	        var startTicks = this.getTicksAtTime(when);
	        var endTicks = this.getTicksAtTime(when + duration);
	        return new Tone.Ticks(endTicks - startTicks);
	    };
	    return Tone.TickSignal;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  A Timeline State. Provides the methods: <code>setStateAtTime("state", time)</code>
		 *          and <code>getValueAtTime(time)</code>.
		 *
		 *  @extends {Tone.Timeline}
		 *  @param {String} initial The initial state of the TimelineState. 
		 *                          Defaults to <code>undefined</code>
		 */
	    Tone.TimelineState = function (initial) {
	        Tone.Timeline.call(this);
	        /**
			 *  The initial state
			 *  @private
			 *  @type {String}
			 */
	        this._initial = initial;
	    };
	    Tone.extend(Tone.TimelineState, Tone.Timeline);
	    /**
		 *  Returns the scheduled state scheduled before or at
		 *  the given time.
		 *  @param  {Number}  time  The time to query.
		 *  @return  {String}  The name of the state input in setStateAtTime.
		 */
	    Tone.TimelineState.prototype.getValueAtTime = function (time) {
	        var event = this.get(time);
	        if (event !== null) {
	            return event.state;
	        } else {
	            return this._initial;
	        }
	    };
	    /**
		 *  Add a state to the timeline.
		 *  @param  {String}  state The name of the state to set.
		 *  @param  {Number}  time  The time to query.
		 *  @returns {Tone.TimelineState} this
		 */
	    Tone.TimelineState.prototype.setStateAtTime = function (state, time) {
	        //all state changes need to be >= the previous state time
	        //TODO throw error if time < the previous event time
	        this.add({
	            'state': state,
	            'time': time
	        });
	        return this;
	    };
	    /**
		 *  Return the event before the time with the given state
		 *  @param {Tone.State} state The state to look for
		 *  @param  {Time}  time  When to check before			
		 *  @return  {Object}  The event with the given state before the time
		 */
	    Tone.TimelineState.prototype.getLastState = function (state, time) {
	        time = this.toSeconds(time);
	        var index = this._search(time);
	        for (var i = index; i >= 0; i--) {
	            var event = this._timeline[i];
	            if (event.state === state) {
	                return event;
	            }
	        }
	    };
	    /**
		 *  Return the event after the time with the given state
		 *  @param {Tone.State} state The state to look for
		 *  @param  {Time}  time  When to check from
		 *  @return  {Object}  The event with the given state after the time
		 */
	    Tone.TimelineState.prototype.getNextState = function (state, time) {
	        time = this.toSeconds(time);
	        var index = this._search(time);
	        if (index !== -1) {
	            for (var i = index; i < this._timeline.length; i++) {
	                var event = this._timeline[i];
	                if (event.state === state) {
	                    return event;
	                }
	            }
	        }
	    };
	    return Tone.TimelineState;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Uses [Tone.TickSignal](TickSignal) to track elapsed ticks with
		 *  		complex automation curves.
		 *
		 * 	@constructor
	     *  @param {Frequency} frequency The initial frequency that the signal ticks at
		 *  @extends {Tone}
		 */
	    Tone.TickSource = function () {
	        var options = Tone.defaults(arguments, ['frequency'], Tone.TickSource);
	        /**
			 *  The frequency the callback function should be invoked.
			 *  @type  {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.TickSignal(options.frequency, Tone.Type.Frequency);
	        this._readOnly('frequency');
	        /**
			 *  The state timeline
			 *  @type {Tone.TimelineState}
			 *  @private
			 */
	        this._state = new Tone.TimelineState(Tone.State.Stopped);
	        this._state.setStateAtTime(Tone.State.Stopped, 0);
	        /**
			 * The offset values of the ticks
			 * @type {Tone.Timeline}
			 * @private
			 */
	        this._tickOffset = new Tone.Timeline();
	        //add the first event
	        this.setTicksAtTime(0, 0);
	    };
	    Tone.extend(Tone.TickSource);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.TickSource.defaults = { 'frequency': 1 };
	    /**
		 *  Returns the playback state of the source, either "started", "stopped" or "paused".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.TickSource#
		 *  @name state
		 */
	    Object.defineProperty(Tone.TickSource.prototype, 'state', {
	        get: function () {
	            return this._state.getValueAtTime(this.now());
	        }
	    });
	    /**
		 *  Start the clock at the given time. Optionally pass in an offset
		 *  of where to start the tick counter from.
		 *  @param  {Time=}  time    The time the clock should start
		 *  @param {Ticks=0} offset The number of ticks to start the source at
		 *  @return  {Tone.TickSource}  this
		 */
	    Tone.TickSource.prototype.start = function (time, offset) {
	        time = this.toSeconds(time);
	        if (this._state.getValueAtTime(time) !== Tone.State.Started) {
	            this._state.setStateAtTime(Tone.State.Started, time);
	            if (Tone.isDefined(offset)) {
	                this.setTicksAtTime(offset, time);
	            }
	        }
	        return this;
	    };
	    /**
		 *  Stop the clock. Stopping the clock resets the tick counter to 0.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.TickSource} this
		 *  @example
		 * clock.stop();
		 */
	    Tone.TickSource.prototype.stop = function (time) {
	        time = this.toSeconds(time);
	        //cancel the previous stop
	        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {
	            var event = this._state.get(time);
	            if (event.time > 0) {
	                this._tickOffset.cancel(event.time);
	                this._state.cancel(event.time);
	            }
	        }
	        this._state.cancel(time);
	        this._state.setStateAtTime(Tone.State.Stopped, time);
	        this.setTicksAtTime(0, time);
	        return this;
	    };
	    /**
		 *  Pause the clock. Pausing does not reset the tick counter.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.TickSource} this
		 */
	    Tone.TickSource.prototype.pause = function (time) {
	        time = this.toSeconds(time);
	        if (this._state.getValueAtTime(time) === Tone.State.Started) {
	            this._state.setStateAtTime(Tone.State.Paused, time);
	        }
	        return this;
	    };
	    /**
		 *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.
		 *  @param {Time} [time=now] When to clear the events after
		 *  @returns {Tone.TickSource} this
		 */
	    Tone.TickSource.prototype.cancel = function (time) {
	        time = this.toSeconds(time);
	        this._state.cancel(time);
	        this._tickOffset.cancel(time);
	        return this;
	    };
	    /**
		 * Get the elapsed ticks at the given time
		 * @param  {Time} time  When to get the tick value
		 * @return {Ticks}     The number of ticks
		 */
	    Tone.TickSource.prototype.getTicksAtTime = function (time) {
	        time = this.toSeconds(time);
	        var stopEvent = this._state.getLastState(Tone.State.Stopped, time);
	        //this event allows forEachBetween to iterate until the current time
	        var tmpEvent = {
	            state: Tone.State.Paused,
	            time: time
	        };
	        this._state.add(tmpEvent);
	        //keep track of the previous offset event
	        var lastState = stopEvent;
	        var elapsedTicks = 0;
	        //iterate through all the events since the last stop
	        this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {
	            var periodStartTime = lastState.time;
	            //if there is an offset event in this period use that
	            var offsetEvent = this._tickOffset.get(e.time);
	            if (offsetEvent.time >= lastState.time) {
	                elapsedTicks = offsetEvent.ticks;
	                periodStartTime = offsetEvent.time;
	            }
	            if (lastState.state === Tone.State.Started && e.state !== Tone.State.Started) {
	                elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);
	            }
	            lastState = e;
	        }.bind(this));
	        //remove the temporary event
	        this._state.remove(tmpEvent);
	        //return the ticks
	        return elapsedTicks;
	    };
	    /**
		 *  The number of times the callback was invoked. Starts counting at 0
		 *  and increments after the callback was invoked. Returns -1 when stopped.
		 *  @memberOf Tone.TickSource#
		 *  @name ticks
		 *  @type {Ticks}
		 */
	    Object.defineProperty(Tone.TickSource.prototype, 'ticks', {
	        get: function () {
	            return this.getTicksAtTime(this.now());
	        },
	        set: function (t) {
	            this.setTicksAtTime(t, this.now());
	        }
	    });
	    /**
		 *  The time since ticks=0 that the TickSource has been running. Accounts
		 *  for tempo curves
		 *  @memberOf Tone.TickSource#
		 *  @name seconds
		 *  @type {Seconds}
		 */
	    Object.defineProperty(Tone.TickSource.prototype, 'seconds', {
	        get: function () {
	            return this.getSecondsAtTime(this.now());
	        },
	        set: function (s) {
	            var now = this.now();
	            var ticks = this.frequency.timeToTicks(s, now);
	            this.setTicksAtTime(ticks, now);
	        }
	    });
	    /**
		 *  Return the elapsed seconds at the given time.
		 *  @param  {Time}  time  When to get the elapsed seconds
		 *  @return  {Seconds}  The number of elapsed seconds
		 */
	    Tone.TickSource.prototype.getSecondsAtTime = function (time) {
	        time = this.toSeconds(time);
	        var stopEvent = this._state.getLastState(Tone.State.Stopped, time);
	        //this event allows forEachBetween to iterate until the current time
	        var tmpEvent = {
	            state: Tone.State.Paused,
	            time: time
	        };
	        this._state.add(tmpEvent);
	        //keep track of the previous offset event
	        var lastState = stopEvent;
	        var elapsedSeconds = 0;
	        //iterate through all the events since the last stop
	        this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {
	            var periodStartTime = lastState.time;
	            //if there is an offset event in this period use that
	            var offsetEvent = this._tickOffset.get(e.time);
	            if (offsetEvent.time >= lastState.time) {
	                elapsedSeconds = offsetEvent.seconds;
	                periodStartTime = offsetEvent.time;
	            }
	            if (lastState.state === Tone.State.Started && e.state !== Tone.State.Started) {
	                elapsedSeconds += e.time - periodStartTime;
	            }
	            lastState = e;
	        }.bind(this));
	        //remove the temporary event
	        this._state.remove(tmpEvent);
	        //return the ticks
	        return elapsedSeconds;
	    };
	    /**
		 * Set the clock's ticks at the given time.
		 * @param  {Ticks} ticks The tick value to set
		 * @param  {Time} time  When to set the tick value
		 * @return {Tone.TickSource}       this
		 */
	    Tone.TickSource.prototype.setTicksAtTime = function (ticks, time) {
	        time = this.toSeconds(time);
	        this._tickOffset.cancel(time);
	        this._tickOffset.add({
	            'time': time,
	            'ticks': ticks,
	            'seconds': this.frequency.getDurationOfTicks(ticks, time)
	        });
	        return this;
	    };
	    /**
		 *  Returns the scheduled state at the given time.
		 *  @param  {Time}  time  The time to query.
		 *  @return  {String}  The name of the state input in setStateAtTime.
		 *  @example
		 * source.start("+0.1");
		 * source.getStateAtTime("+0.1"); //returns "started"
		 */
	    Tone.TickSource.prototype.getStateAtTime = function (time) {
	        time = this.toSeconds(time);
	        return this._state.getValueAtTime(time);
	    };
	    /**
		 * Get the time of the given tick. The second argument
		 * is when to test before. Since ticks can be set (with setTicksAtTime)
		 * there may be multiple times for a given tick value. 
		 * @param  {Ticks} ticks The tick number.
		 * @param  {Time=} before When to measure the tick value from. 
		 * @return {Time}       The time of the tick
		 */
	    Tone.TickSource.prototype.getTimeOfTick = function (tick, before) {
	        before = Tone.defaultArg(before, this.now());
	        var offset = this._tickOffset.get(before);
	        var event = this._state.get(before);
	        var startTime = Math.max(offset.time, event.time);
	        var absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;
	        return this.frequency.getTimeOfTick(absoluteTicks);
	    };
	    /**
		 *  Invoke the callback event at all scheduled ticks between the 
		 *  start time and the end time
		 *  @param  {Time}    startTime  The beginning of the search range
		 *  @param  {Time}    endTime    The end of the search range
		 *  @param  {Function<Time,Ticks>}  callback   The callback to invoke with each tick
		 *  @return  {Tone.TickSource}    this
		 */
	    Tone.TickSource.prototype.forEachTickBetween = function (startTime, endTime, callback) {
	        //only iterate through the sections where it is "started"
	        var lastStateEvent = this._state.get(startTime);
	        this._state.forEachBetween(startTime, endTime, function (event) {
	            if (lastStateEvent.state === Tone.State.Started && event.state !== Tone.State.Started) {
	                this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);
	            }
	            lastStateEvent = event;
	        }.bind(this));
	        startTime = Math.max(lastStateEvent.time, startTime);
	        if (lastStateEvent.state === Tone.State.Started && this._state) {
	            //figure out the difference between the frequency ticks and the 
	            var startTicks = this.frequency.getTicksAtTime(startTime);
	            var ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);
	            var diff = startTicks - ticksAtStart;
	            var offset = diff % 1;
	            if (offset !== 0) {
	                offset = 1 - offset;
	            }
	            var nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);
	            var error = null;
	            while (nextTickTime < endTime && this._state) {
	                try {
	                    callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));
	                } catch (e) {
	                    error = e;
	                    break;
	                }
	                if (this._state) {
	                    nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);
	                }
	            }
	        }
	        if (error) {
	            throw error;
	        }
	        return this;
	    };
	    /**
		 *  Clean up
		 *  @returns {Tone.TickSource} this
		 */
	    Tone.TickSource.prototype.dispose = function () {
	        Tone.Param.prototype.dispose.call(this);
	        this._state.dispose();
	        this._state = null;
	        this._tickOffset.dispose();
	        this._tickOffset = null;
	        this._writable('frequency');
	        this.frequency.dispose();
	        this.frequency = null;
	        return this;
	    };
	    return Tone.TickSource;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  A sample accurate clock which provides a callback at the given rate.
		 *          While the callback is not sample-accurate (it is still susceptible to
		 *          loose JS timing), the time passed in as the argument to the callback
		 *          is precise. For most applications, it is better to use Tone.Transport
		 *          instead of the Clock by itself since you can synchronize multiple callbacks.
		 *
		 * 	@constructor
		 *  @extends {Tone.Emitter}
		 * 	@param {function} callback The callback to be invoked with the time of the audio event
		 * 	@param {Frequency} frequency The rate of the callback
		 * 	@example
		 * //the callback will be invoked approximately once a second
		 * //and will print the time exactly once a second apart.
		 * var clock = new Tone.Clock(function(time){
		 * 	console.log(time);
		 * }, 1);
		 */
	    Tone.Clock = function () {
	        var options = Tone.defaults(arguments, [
	            'callback',
	            'frequency'
	        ], Tone.Clock);
	        Tone.Emitter.call(this);
	        /**
			 *  The callback function to invoke at the scheduled tick.
			 *  @type  {Function}
			 */
	        this.callback = options.callback;
	        /**
			 *  The next time the callback is scheduled.
			 *  @type {Number}
			 *  @private
			 */
	        this._nextTick = 0;
	        /**
			 *  The tick counter
			 *  @type  {Tone.TickSource}
			 *  @private
			 */
	        this._tickSource = new Tone.TickSource(options.frequency);
	        /**
			 *  The last time the loop callback was invoked
			 *  @private
			 *  @type {Number}
			 */
	        this._lastUpdate = 0;
	        /**
			 *  The rate the callback function should be invoked.
			 *  @type  {BPM}
			 *  @signal
			 */
	        this.frequency = this._tickSource.frequency;
	        this._readOnly('frequency');
	        /**
			 *  The state timeline
			 *  @type {Tone.TimelineState}
			 *  @private
			 */
	        this._state = new Tone.TimelineState(Tone.State.Stopped);
	        //add an initial state
	        this._state.setStateAtTime(Tone.State.Stopped, 0);
	        /**
			 *  The loop function bound to its context.
			 *  This is necessary to remove the event in the end.
			 *  @type {Function}
			 *  @private
			 */
	        this._boundLoop = this._loop.bind(this);
	        //bind a callback to the worker thread
	        this.context.on('tick', this._boundLoop);
	    };
	    Tone.extend(Tone.Clock, Tone.Emitter);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.Clock.defaults = {
	        'callback': Tone.noOp,
	        'frequency': 1
	    };
	    /**
		 *  Returns the playback state of the source, either "started", "stopped" or "paused".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.Clock#
		 *  @name state
		 */
	    Object.defineProperty(Tone.Clock.prototype, 'state', {
	        get: function () {
	            return this._state.getValueAtTime(this.now());
	        }
	    });
	    /**
		 *  Start the clock at the given time. Optionally pass in an offset
		 *  of where to start the tick counter from.
		 *  @param  {Time=}  time    The time the clock should start
		 *  @param  {Ticks=}  offset  Where the tick counter starts counting from.
		 *  @return  {Tone.Clock}  this
		 */
	    Tone.Clock.prototype.start = function (time, offset) {
	        time = this.toSeconds(time);
	        if (this._state.getValueAtTime(time) !== Tone.State.Started) {
	            this._state.setStateAtTime(Tone.State.Started, time);
	            this._tickSource.start(time, offset);
	            if (time < this._lastUpdate) {
	                this.emit('start', time, offset);
	            }
	        }
	        return this;
	    };
	    /**
		 *  Stop the clock. Stopping the clock resets the tick counter to 0.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.Clock} this
		 *  @example
		 * clock.stop();
		 */
	    Tone.Clock.prototype.stop = function (time) {
	        time = this.toSeconds(time);
	        this._state.cancel(time);
	        this._state.setStateAtTime(Tone.State.Stopped, time);
	        this._tickSource.stop(time);
	        if (time < this._lastUpdate) {
	            this.emit('stop', time);
	        }
	        return this;
	    };
	    /**
		 *  Pause the clock. Pausing does not reset the tick counter.
		 *  @param {Time} [time=now] The time when the clock should stop.
		 *  @returns {Tone.Clock} this
		 */
	    Tone.Clock.prototype.pause = function (time) {
	        time = this.toSeconds(time);
	        if (this._state.getValueAtTime(time) === Tone.State.Started) {
	            this._state.setStateAtTime(Tone.State.Paused, time);
	            this._tickSource.pause(time);
	            if (time < this._lastUpdate) {
	                this.emit('pause', time);
	            }
	        }
	        return this;
	    };
	    /**
		 *  The number of times the callback was invoked. Starts counting at 0
		 *  and increments after the callback was invoked.
		 *  @type {Ticks}
		 */
	    Object.defineProperty(Tone.Clock.prototype, 'ticks', {
	        get: function () {
	            return Math.ceil(this.getTicksAtTime(this.now()));
	        },
	        set: function (t) {
	            this._tickSource.ticks = t;
	        }
	    });
	    /**
		 *  The time since ticks=0 that the Clock has been running. Accounts
		 *  for tempo curves
		 *  @type {Seconds}
		 */
	    Object.defineProperty(Tone.Clock.prototype, 'seconds', {
	        get: function () {
	            return this._tickSource.seconds;
	        },
	        set: function (s) {
	            this._tickSource.seconds = s;
	        }
	    });
	    /**
		 *  Return the elapsed seconds at the given time.
		 *  @param  {Time}  time  When to get the elapsed seconds
		 *  @return  {Seconds}  The number of elapsed seconds
		 */
	    Tone.Clock.prototype.getSecondsAtTime = function (time) {
	        return this._tickSource.getSecondsAtTime(time);
	    };
	    /**
		 * Set the clock's ticks at the given time.
		 * @param  {Ticks} ticks The tick value to set
		 * @param  {Time} time  When to set the tick value
		 * @return {Tone.Clock}       this
		 */
	    Tone.Clock.prototype.setTicksAtTime = function (ticks, time) {
	        this._tickSource.setTicksAtTime(ticks, time);
	        return this;
	    };
	    /**
		 * Get the clock's ticks at the given time.
		 * @param  {Time} time  When to get the tick value
		 * @return {Ticks}       The tick value at the given time.
		 */
	    Tone.Clock.prototype.getTicksAtTime = function (time) {
	        return this._tickSource.getTicksAtTime(time);
	    };
	    /**
		 * Get the time of the next tick
		 * @param  {Ticks} ticks The tick number.
		 * @param  {Time} before 
		 * @return {Tone.Clock}       this
		 */
	    Tone.Clock.prototype.nextTickTime = function (offset, when) {
	        when = this.toSeconds(when);
	        var currentTick = this.getTicksAtTime(when);
	        return this._tickSource.getTimeOfTick(currentTick + offset, when);
	    };
	    /**
		 *  The scheduling loop.
		 *  @private
		 */
	    Tone.Clock.prototype._loop = function () {
	        var startTime = this._lastUpdate;
	        var endTime = this.now();
	        this._lastUpdate = endTime;
	        if (startTime !== endTime) {
	            //the state change events
	            this._state.forEachBetween(startTime, endTime, function (e) {
	                switch (e.state) {
	                case Tone.State.Started:
	                    var offset = this._tickSource.getTicksAtTime(e.time);
	                    this.emit('start', e.time, offset);
	                    break;
	                case Tone.State.Stopped:
	                    if (e.time !== 0) {
	                        this.emit('stop', e.time);
	                    }
	                    break;
	                case Tone.State.Paused:
	                    this.emit('pause', e.time);
	                    break;
	                }
	            }.bind(this));
	            //the tick callbacks
	            this._tickSource.forEachTickBetween(startTime, endTime, function (time, ticks) {
	                this.callback(time, ticks);
	            }.bind(this));
	        }
	    };
	    /**
		 *  Returns the scheduled state at the given time.
		 *  @param  {Time}  time  The time to query.
		 *  @return  {String}  The name of the state input in setStateAtTime.
		 *  @example
		 * clock.start("+0.1");
		 * clock.getStateAtTime("+0.1"); //returns "started"
		 */
	    Tone.Clock.prototype.getStateAtTime = function (time) {
	        time = this.toSeconds(time);
	        return this._state.getValueAtTime(time);
	    };
	    /**
		 *  Clean up
		 *  @returns {Tone.Clock} this
		 */
	    Tone.Clock.prototype.dispose = function () {
	        Tone.Emitter.prototype.dispose.call(this);
	        this.context.off('tick', this._boundLoop);
	        this._writable('frequency');
	        this._tickSource.dispose();
	        this._tickSource = null;
	        this.frequency = null;
	        this._boundLoop = null;
	        this._nextTick = Infinity;
	        this.callback = null;
	        this._state.dispose();
	        this._state = null;
	    };
	    return Tone.Clock;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Similar to Tone.Timeline, but all events represent
		 *         intervals with both "time" and "duration" times. The
		 *         events are placed in a tree structure optimized
		 *         for querying an intersection point with the timeline
		 *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
		 *         to represent the data.
		 *  @extends {Tone}
		 */
	    Tone.IntervalTimeline = function () {
	        Tone.call(this);
	        /**
			 *  The root node of the inteval tree
			 *  @type  {IntervalNode}
			 *  @private
			 */
	        this._root = null;
	        /**
			 *  Keep track of the length of the timeline.
			 *  @type  {Number}
			 *  @private
			 */
	        this._length = 0;
	    };
	    Tone.extend(Tone.IntervalTimeline);
	    /**
		 *  The event to add to the timeline. All events must
		 *  have a time and duration value
		 *  @param  {Object}  event  The event to add to the timeline
		 *  @return  {Tone.IntervalTimeline}  this
		 */
	    Tone.IntervalTimeline.prototype.add = function (event) {
	        if (Tone.isUndef(event.time) || Tone.isUndef(event.duration)) {
	            throw new Error('Tone.IntervalTimeline: events must have time and duration parameters');
	        }
	        event.time = event.time.valueOf();
	        var node = new IntervalNode(event.time, event.time + event.duration, event);
	        if (this._root === null) {
	            this._root = node;
	        } else {
	            this._root.insert(node);
	        }
	        this._length++;
	        // Restructure tree to be balanced
	        while (node !== null) {
	            node.updateHeight();
	            node.updateMax();
	            this._rebalance(node);
	            node = node.parent;
	        }
	        return this;
	    };
	    /**
		 *  Remove an event from the timeline.
		 *  @param  {Object}  event  The event to remove from the timeline
		 *  @return  {Tone.IntervalTimeline}  this
		 */
	    Tone.IntervalTimeline.prototype.remove = function (event) {
	        if (this._root !== null) {
	            var results = [];
	            this._root.search(event.time, results);
	            for (var i = 0; i < results.length; i++) {
	                var node = results[i];
	                if (node.event === event) {
	                    this._removeNode(node);
	                    this._length--;
	                    break;
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  The number of items in the timeline.
		 *  @type {Number}
		 *  @memberOf Tone.IntervalTimeline#
		 *  @name length
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.IntervalTimeline.prototype, 'length', {
	        get: function () {
	            return this._length;
	        }
	    });
	    /**
		 *  Remove events whose time time is after the given time
		 *  @param  {Number}  time  The time to query.
		 *  @returns {Tone.IntervalTimeline} this
		 */
	    Tone.IntervalTimeline.prototype.cancel = function (after) {
	        this.forEachFrom(after, function (event) {
	            this.remove(event);
	        }.bind(this));
	        return this;
	    };
	    /**
		 *  Set the root node as the given node
		 *  @param {IntervalNode} node
		 *  @private
		 */
	    Tone.IntervalTimeline.prototype._setRoot = function (node) {
	        this._root = node;
	        if (this._root !== null) {
	            this._root.parent = null;
	        }
	    };
	    /**
		 *  Replace the references to the node in the node's parent
		 *  with the replacement node.
		 *  @param  {IntervalNode}  node
		 *  @param  {IntervalNode}  replacement
		 *  @private
		 */
	    Tone.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {
	        if (node.parent !== null) {
	            if (node.isLeftChild()) {
	                node.parent.left = replacement;
	            } else {
	                node.parent.right = replacement;
	            }
	            this._rebalance(node.parent);
	        } else {
	            this._setRoot(replacement);
	        }
	    };
	    /**
		 *  Remove the node from the tree and replace it with
		 *  a successor which follows the schema.
		 *  @param  {IntervalNode}  node
		 *  @private
		 */
	    Tone.IntervalTimeline.prototype._removeNode = function (node) {
	        if (node.left === null && node.right === null) {
	            this._replaceNodeInParent(node, null);
	        } else if (node.right === null) {
	            this._replaceNodeInParent(node, node.left);
	        } else if (node.left === null) {
	            this._replaceNodeInParent(node, node.right);
	        } else {
	            var balance = node.getBalance();
	            var replacement, temp;
	            if (balance > 0) {
	                if (node.left.right === null) {
	                    replacement = node.left;
	                    replacement.right = node.right;
	                    temp = replacement;
	                } else {
	                    replacement = node.left.right;
	                    while (replacement.right !== null) {
	                        replacement = replacement.right;
	                    }
	                    replacement.parent.right = replacement.left;
	                    temp = replacement.parent;
	                    replacement.left = node.left;
	                    replacement.right = node.right;
	                }
	            } else if (node.right.left === null) {
	                replacement = node.right;
	                replacement.left = node.left;
	                temp = replacement;
	            } else {
	                replacement = node.right.left;
	                while (replacement.left !== null) {
	                    replacement = replacement.left;
	                }
	                replacement.parent = replacement.parent;
	                replacement.parent.left = replacement.right;
	                temp = replacement.parent;
	                replacement.left = node.left;
	                replacement.right = node.right;
	            }
	            if (node.parent !== null) {
	                if (node.isLeftChild()) {
	                    node.parent.left = replacement;
	                } else {
	                    node.parent.right = replacement;
	                }
	            } else {
	                this._setRoot(replacement);
	            }
	            // this._replaceNodeInParent(node, replacement);
	            this._rebalance(temp);
	        }
	        node.dispose();
	    };
	    /**
		 *  Rotate the tree to the left
		 *  @param  {IntervalNode}  node
		 *  @private
		 */
	    Tone.IntervalTimeline.prototype._rotateLeft = function (node) {
	        var parent = node.parent;
	        var isLeftChild = node.isLeftChild();
	        // Make node.right the new root of this sub tree (instead of node)
	        var pivotNode = node.right;
	        node.right = pivotNode.left;
	        pivotNode.left = node;
	        if (parent !== null) {
	            if (isLeftChild) {
	                parent.left = pivotNode;
	            } else {
	                parent.right = pivotNode;
	            }
	        } else {
	            this._setRoot(pivotNode);
	        }
	    };
	    /**
		 *  Rotate the tree to the right
		 *  @param  {IntervalNode}  node
		 *  @private
		 */
	    Tone.IntervalTimeline.prototype._rotateRight = function (node) {
	        var parent = node.parent;
	        var isLeftChild = node.isLeftChild();
	        // Make node.left the new root of this sub tree (instead of node)
	        var pivotNode = node.left;
	        node.left = pivotNode.right;
	        pivotNode.right = node;
	        if (parent !== null) {
	            if (isLeftChild) {
	                parent.left = pivotNode;
	            } else {
	                parent.right = pivotNode;
	            }
	        } else {
	            this._setRoot(pivotNode);
	        }
	    };
	    /**
		 *  Balance the BST
		 *  @param  {IntervalNode}  node
		 *  @private
		 */
	    Tone.IntervalTimeline.prototype._rebalance = function (node) {
	        var balance = node.getBalance();
	        if (balance > 1) {
	            if (node.left.getBalance() < 0) {
	                this._rotateLeft(node.left);
	            } else {
	                this._rotateRight(node);
	            }
	        } else if (balance < -1) {
	            if (node.right.getBalance() > 0) {
	                this._rotateRight(node.right);
	            } else {
	                this._rotateLeft(node);
	            }
	        }
	    };
	    /**
		 *  Get an event whose time and duration span the give time. Will
		 *  return the match whose "time" value is closest to the given time.
		 *  @param  {Object}  event  The event to add to the timeline
		 *  @return  {Object}  The event which spans the desired time
		 */
	    Tone.IntervalTimeline.prototype.get = function (time) {
	        if (this._root !== null) {
	            var results = [];
	            this._root.search(time, results);
	            if (results.length > 0) {
	                var max = results[0];
	                for (var i = 1; i < results.length; i++) {
	                    if (results[i].low > max.low) {
	                        max = results[i];
	                    }
	                }
	                return max.event;
	            }
	        }
	        return null;
	    };
	    /**
		 *  Iterate over everything in the timeline.
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.IntervalTimeline} this
		 */
	    Tone.IntervalTimeline.prototype.forEach = function (callback) {
	        if (this._root !== null) {
	            var allNodes = [];
	            this._root.traverse(function (node) {
	                allNodes.push(node);
	            });
	            for (var i = 0; i < allNodes.length; i++) {
	                var ev = allNodes[i].event;
	                if (ev) {
	                    callback(ev);
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array in which the given time
		 *  overlaps with the time and duration time of the event.
		 *  @param  {Number}  time The time to check if items are overlapping
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.IntervalTimeline} this
		 */
	    Tone.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {
	        if (this._root !== null) {
	            var results = [];
	            this._root.search(time, results);
	            for (var i = results.length - 1; i >= 0; i--) {
	                var ev = results[i].event;
	                if (ev) {
	                    callback(ev);
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Iterate over everything in the array in which the time is greater
		 *  than or equal to the given time.
		 *  @param  {Number}  time The time to check if items are before
		 *  @param  {Function}  callback The callback to invoke with every item
		 *  @returns {Tone.IntervalTimeline} this
		 */
	    Tone.IntervalTimeline.prototype.forEachFrom = function (time, callback) {
	        if (this._root !== null) {
	            var results = [];
	            this._root.searchAfter(time, results);
	            for (var i = results.length - 1; i >= 0; i--) {
	                var ev = results[i].event;
	                callback(ev);
	            }
	        }
	        return this;
	    };
	    /**
		 *  Clean up
		 *  @return  {Tone.IntervalTimeline}  this
		 */
	    Tone.IntervalTimeline.prototype.dispose = function () {
	        var allNodes = [];
	        if (this._root !== null) {
	            this._root.traverse(function (node) {
	                allNodes.push(node);
	            });
	        }
	        for (var i = 0; i < allNodes.length; i++) {
	            allNodes[i].dispose();
	        }
	        allNodes = null;
	        this._root = null;
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	INTERVAL NODE HELPER
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Represents a node in the binary search tree, with the addition
		 *  of a "high" value which keeps track of the highest value of
		 *  its children.
		 *  References:
		 *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
		 *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
		 *  @param {Number} low
		 *  @param {Number} high
		 *  @private
		 */
	    var IntervalNode = function (low, high, event) {
	        //the event container
	        this.event = event;
	        //the low value
	        this.low = low;
	        //the high value
	        this.high = high;
	        //the high value for this and all child nodes
	        this.max = this.high;
	        //the nodes to the left
	        this._left = null;
	        //the nodes to the right
	        this._right = null;
	        //the parent node
	        this.parent = null;
	        //the number of child nodes
	        this.height = 0;
	    };
	    /**
		 *  Insert a node into the correct spot in the tree
		 *  @param  {IntervalNode}  node
		 */
	    IntervalNode.prototype.insert = function (node) {
	        if (node.low <= this.low) {
	            if (this.left === null) {
	                this.left = node;
	            } else {
	                this.left.insert(node);
	            }
	        } else if (this.right === null) {
	            this.right = node;
	        } else {
	            this.right.insert(node);
	        }
	    };
	    /**
		 *  Search the tree for nodes which overlap
		 *  with the given point
		 *  @param  {Number}  point  The point to query
		 *  @param  {Array}  results  The array to put the results
		 */
	    IntervalNode.prototype.search = function (point, results) {
	        // If p is to the right of the rightmost point of any interval
	        // in this node and all children, there won't be any matches.
	        if (point > this.max) {
	            return;
	        }
	        // Search left children
	        if (this.left !== null) {
	            this.left.search(point, results);
	        }
	        // Check this node
	        if (this.low <= point && this.high > point) {
	            results.push(this);
	        }
	        // If p is to the left of the time of this interval,
	        // then it can't be in any child to the right.
	        if (this.low > point) {
	            return;
	        }
	        // Search right children
	        if (this.right !== null) {
	            this.right.search(point, results);
	        }
	    };
	    /**
		 *  Search the tree for nodes which are less
		 *  than the given point
		 *  @param  {Number}  point  The point to query
		 *  @param  {Array}  results  The array to put the results
		 */
	    IntervalNode.prototype.searchAfter = function (point, results) {
	        // Check this node
	        if (this.low >= point) {
	            results.push(this);
	            if (this.left !== null) {
	                this.left.searchAfter(point, results);
	            }
	        }
	        // search the right side
	        if (this.right !== null) {
	            this.right.searchAfter(point, results);
	        }
	    };
	    /**
		 *  Invoke the callback on this element and both it's branches
		 *  @param  {Function}  callback
		 */
	    IntervalNode.prototype.traverse = function (callback) {
	        callback(this);
	        if (this.left !== null) {
	            this.left.traverse(callback);
	        }
	        if (this.right !== null) {
	            this.right.traverse(callback);
	        }
	    };
	    /**
		 *  Update the height of the node
		 */
	    IntervalNode.prototype.updateHeight = function () {
	        if (this.left !== null && this.right !== null) {
	            this.height = Math.max(this.left.height, this.right.height) + 1;
	        } else if (this.right !== null) {
	            this.height = this.right.height + 1;
	        } else if (this.left !== null) {
	            this.height = this.left.height + 1;
	        } else {
	            this.height = 0;
	        }
	    };
	    /**
		 *  Update the height of the node
		 */
	    IntervalNode.prototype.updateMax = function () {
	        this.max = this.high;
	        if (this.left !== null) {
	            this.max = Math.max(this.max, this.left.max);
	        }
	        if (this.right !== null) {
	            this.max = Math.max(this.max, this.right.max);
	        }
	    };
	    /**
		 *  The balance is how the leafs are distributed on the node
		 *  @return  {Number}  Negative numbers are balanced to the right
		 */
	    IntervalNode.prototype.getBalance = function () {
	        var balance = 0;
	        if (this.left !== null && this.right !== null) {
	            balance = this.left.height - this.right.height;
	        } else if (this.left !== null) {
	            balance = this.left.height + 1;
	        } else if (this.right !== null) {
	            balance = -(this.right.height + 1);
	        }
	        return balance;
	    };
	    /**
		 *  @returns {Boolean} true if this node is the left child
		 *  of its parent
		 */
	    IntervalNode.prototype.isLeftChild = function () {
	        return this.parent !== null && this.parent.left === this;
	    };
	    /**
		 *  get/set the left node
		 *  @type {IntervalNode}
		 */
	    Object.defineProperty(IntervalNode.prototype, 'left', {
	        get: function () {
	            return this._left;
	        },
	        set: function (node) {
	            this._left = node;
	            if (node !== null) {
	                node.parent = this;
	            }
	            this.updateHeight();
	            this.updateMax();
	        }
	    });
	    /**
		 *  get/set the right node
		 *  @type {IntervalNode}
		 */
	    Object.defineProperty(IntervalNode.prototype, 'right', {
	        get: function () {
	            return this._right;
	        },
	        set: function (node) {
	            this._right = node;
	            if (node !== null) {
	                node.parent = this;
	            }
	            this.updateHeight();
	            this.updateMax();
	        }
	    });
	    /**
		 *  null out references.
		 */
	    IntervalNode.prototype.dispose = function () {
	        this.parent = null;
	        this._left = null;
	        this._right = null;
	        this.event = null;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	END INTERVAL NODE HELPER
	    ///////////////////////////////////////////////////////////////////////////
	    return Tone.IntervalTimeline;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Ticks is a primitive type for encoding Time values.
		 *         Tone.Ticks can be constructed with or without the `new` keyword. Tone.Ticks can be passed
		 *         into the parameter of any method which takes time as an argument.
		 *  @constructor
		 *  @extends {Tone.TransportTime}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * var t = Tone.Ticks("4n");//a quarter note
		 */
	    Tone.Ticks = function (val, units) {
	        if (this instanceof Tone.Ticks) {
	            Tone.TransportTime.call(this, val, units);
	        } else {
	            return new Tone.Ticks(val, units);
	        }
	    };
	    Tone.extend(Tone.Ticks, Tone.TransportTime);
	    /**
		 *  The default units if none are given.
		 *  @type {String}
		 *  @private
		 */
	    Tone.Ticks.prototype._defaultUnits = 'i';
	    /**
		 * Get the current time in the given units
		 * @return {Ticks}
		 * @private
		 */
	    Tone.Ticks.prototype._now = function () {
	        return Tone.Transport.ticks;
	    };
	    /**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Ticks.prototype._beatsToUnits = function (beats) {
	        return this._getPPQ() * beats;
	    };
	    /**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Ticks.prototype._secondsToUnits = function (seconds) {
	        return seconds / (60 / this._getBpm()) * this._getPPQ();
	    };
	    /**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Ticks.prototype._ticksToUnits = function (ticks) {
	        return ticks;
	    };
	    /**
		 *  Return the time in ticks
		 *  @return  {Ticks}
		 */
	    Tone.Ticks.prototype.toTicks = function () {
	        return this.valueOf();
	    };
	    /**
		 *  Return the time in ticks
		 *  @return  {Ticks}
		 */
	    Tone.Ticks.prototype.toSeconds = function () {
	        return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
	    };
	    return Tone.Ticks;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]
		 *         to schedule events. Do no invoke this class directly, it is
		 *         handled from within Tone.Transport.
		 *  @extends {Tone}
		 *  @param {Object} options
		 */
	    Tone.TransportEvent = function (Transport, options) {
	        options = Tone.defaultArg(options, Tone.TransportEvent.defaults);
	        Tone.call(this);
	        /**
			 * Reference to the Transport that created it
			 * @type {Tone.Transport}
			 */
	        this.Transport = Transport;
	        /**
			 * The unique id of the event
			 * @type {Number}
			 */
	        this.id = Tone.TransportEvent._eventId++;
	        /**
			 * The time the event starts
			 * @type {Ticks}
			 */
	        this.time = Tone.Ticks(options.time);
	        /**
			 * The callback to invoke
			 * @type {Function}
			 */
	        this.callback = options.callback;
	        /**
			 * If the event should be removed after being created.
			 * @type {Boolean}
			 * @private
			 */
	        this._once = options.once;
	    };
	    Tone.extend(Tone.TransportEvent);
	    /**
		 * The defaults
		 * @static
		 * @type {Object}
		 */
	    Tone.TransportEvent.defaults = {
	        'once': false,
	        'callback': Tone.noOp
	    };
	    /**
		 * Current ID counter
		 * @private
		 * @static
		 * @type {Number}
		 */
	    Tone.TransportEvent._eventId = 0;
	    /**
		 * Invoke the event callback.
		 * @param  {Time} time  The AudioContext time in seconds of the event
		 */
	    Tone.TransportEvent.prototype.invoke = function (time) {
	        if (this.callback) {
	            this.callback(time);
	            if (this._once && this.Transport) {
	                this.Transport.clear(this.id);
	            }
	        }
	    };
	    /**
		 * Clean up
		 * @return {Tone.TransportEvent} this
		 */
	    Tone.TransportEvent.prototype.dispose = function () {
	        Tone.prototype.dispose.call(this);
	        this.Transport = null;
	        this.callback = null;
	        this.time = null;
	        return this;
	    };
	    return Tone.TransportEvent;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport
		 *         to schedule repeat events. This class should not be instantiated directly.
		 *  @extends {Tone.TransportEvent}
		 *  @param {Object} options
		 */
	    Tone.TransportRepeatEvent = function (Transport, options) {
	        Tone.TransportEvent.call(this, Transport, options);
	        options = Tone.defaultArg(options, Tone.TransportRepeatEvent.defaults);
	        /**
			 * When the event should stop repeating
			 * @type {Ticks}
			 * @private
			 */
	        this.duration = Tone.Ticks(options.duration);
	        /**
			 * The interval of the repeated event
			 * @type {Ticks}
			 * @private
			 */
	        this._interval = Tone.Ticks(options.interval);
	        /**
			 * The ID of the current timeline event
			 * @type {Number}
			 * @private
			 */
	        this._currentId = -1;
	        /**
			 * The ID of the next timeline event
			 * @type {Number}
			 * @private
			 */
	        this._nextId = -1;
	        /**
			  * The time of the next event
			  * @type {Ticks}
			  * @private
			  */
	        this._nextTick = this.time;
	        /**
			 * a reference to the bound start method
			 * @type {Function}
			 * @private
			 */
	        this._boundRestart = this._restart.bind(this);
	        this.Transport.on('start loopStart', this._boundRestart);
	        this._restart();
	    };
	    Tone.extend(Tone.TransportRepeatEvent, Tone.TransportEvent);
	    /**
		 * The defaults
		 * @static
		 * @type {Object}
		 */
	    Tone.TransportRepeatEvent.defaults = {
	        'duration': Infinity,
	        'interval': 1
	    };
	    /**
		 * Invoke the callback. Returns the tick time which
		 * the next event should be scheduled at.
		 * @param  {Number} time  The AudioContext time in seconds of the event
		 */
	    Tone.TransportRepeatEvent.prototype.invoke = function (time) {
	        //create more events if necessary
	        this._createEvents(time);
	        //call the super class
	        Tone.TransportEvent.prototype.invoke.call(this, time);
	    };
	    /**
		 * Push more events onto the timeline to keep up with the position of the timeline
		 * @private
		 */
	    Tone.TransportRepeatEvent.prototype._createEvents = function (time) {
	        // schedule the next event
	        var ticks = this.Transport.getTicksAtTime(time);
	        if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {
	            this._nextTick += this._interval;
	            this._currentId = this._nextId;
	            this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));
	        }
	    };
	    /**
		 * Push more events onto the timeline to keep up with the position of the timeline
		 * @private
		 */
	    Tone.TransportRepeatEvent.prototype._restart = function (time) {
	        this.Transport.clear(this._currentId);
	        this.Transport.clear(this._nextId);
	        this._nextTick = this.time;
	        var ticks = this.Transport.getTicksAtTime(time);
	        if (ticks > this.time) {
	            this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;
	        }
	        this._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));
	        this._nextTick += this._interval;
	        this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), Tone.Ticks(this._nextTick));
	    };
	    /**
		 * Clean up
		 * @return {Tone.TransportRepeatEvent} this
		 */
	    Tone.TransportRepeatEvent.prototype.dispose = function () {
	        this.Transport.clear(this._currentId);
	        this.Transport.clear(this._nextId);
	        this.Transport.off('start loopStart', this._boundRestart);
	        this._boundCreateEvents = null;
	        Tone.TransportEvent.prototype.dispose.call(this);
	        this.duration = null;
	        this._interval = null;
	        return this;
	    };
	    return Tone.TransportRepeatEvent;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Transport for timing musical events.
		 *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
		 *          Tone.Transport timing events pass in the exact time of the scheduled event
		 *          in the argument of the callback function. Pass that time value to the object
		 *          you're scheduling. <br><br>
		 *          A single transport is created for you when the library is initialized.
		 *          <br><br>
		 *          The transport emits the events: "start", "stop", "pause", and "loop" which are
		 *          called with the time of that event as the argument.
		 *
		 *  @extends {Tone.Emitter}
		 *  @singleton
		 *  @example
		 * //repeated event every 8th note
		 * Tone.Transport.scheduleRepeat(function(time){
		 * 	//do something with the time
		 * }, "8n");
		 *  @example
		 * //schedule an event on the 16th measure
		 * Tone.Transport.schedule(function(time){
		 * 	//do something with the time
		 * }, "16:0:0");
		 */
	    Tone.Transport = function () {
	        Tone.Emitter.call(this);
	        Tone.getContext(function () {
	            ///////////////////////////////////////////////////////////////////////
	            //	LOOPING
	            //////////////////////////////////////////////////////////////////////
	            /**
				 * 	If the transport loops or not.
				 *  @type {boolean}
				 */
	            this.loop = false;
	            /**
				 * 	The loop start position in ticks
				 *  @type {Ticks}
				 *  @private
				 */
	            this._loopStart = 0;
	            /**
				 * 	The loop end position in ticks
				 *  @type {Ticks}
				 *  @private
				 */
	            this._loopEnd = 0;
	            ///////////////////////////////////////////////////////////////////////
	            //	CLOCK/TEMPO
	            //////////////////////////////////////////////////////////////////////
	            /**
				 *  Pulses per quarter is the number of ticks per quarter note.
				 *  @private
				 *  @type  {Number}
				 */
	            this._ppq = TransportConstructor.defaults.PPQ;
	            /**
				 *  watches the main oscillator for timing ticks
				 *  initially starts at 120bpm
				 *  @private
				 *  @type {Tone.Clock}
				 */
	            this._clock = new Tone.Clock({
	                'callback': this._processTick.bind(this),
	                'frequency': 0
	            });
	            this._bindClockEvents();
	            /**
				 *  The Beats Per Minute of the Transport.
				 *  @type {BPM}
				 *  @signal
				 *  @example
				 * Tone.Transport.bpm.value = 80;
				 * //ramp the bpm to 120 over 10 seconds
				 * Tone.Transport.bpm.rampTo(120, 10);
				 */
	            this.bpm = this._clock.frequency;
	            this.bpm._toUnits = this._toUnits.bind(this);
	            this.bpm._fromUnits = this._fromUnits.bind(this);
	            this.bpm.units = Tone.Type.BPM;
	            this.bpm.value = TransportConstructor.defaults.bpm;
	            this._readOnly('bpm');
	            /**
				 *  The time signature, or more accurately the numerator
				 *  of the time signature over a denominator of 4.
				 *  @type {Number}
				 *  @private
				 */
	            this._timeSignature = TransportConstructor.defaults.timeSignature;
	            ///////////////////////////////////////////////////////////////////////
	            //	TIMELINE EVENTS
	            //////////////////////////////////////////////////////////////////////
	            /**
				 *  All the events in an object to keep track by ID
				 *  @type {Object}
				 *  @private
				 */
	            this._scheduledEvents = {};
	            /**
				 * 	The scheduled events.
				 *  @type {Tone.Timeline}
				 *  @private
				 */
	            this._timeline = new Tone.Timeline();
	            /**
				 *  Repeated events
				 *  @type {Array}
				 *  @private
				 */
	            this._repeatedEvents = new Tone.IntervalTimeline();
	            /**
				 *  All of the synced Signals
				 *  @private
				 *  @type {Array}
				 */
	            this._syncedSignals = [];
	            ///////////////////////////////////////////////////////////////////////
	            //	SWING
	            //////////////////////////////////////////////////////////////////////
	            /**
				 *  The subdivision of the swing
				 *  @type  {Ticks}
				 *  @private
				 */
	            this._swingTicks = TransportConstructor.defaults.PPQ / 2;
	            //8n
	            /**
				 *  The swing amount
				 *  @type {NormalRange}
				 *  @private
				 */
	            this._swingAmount = 0;
	        }.bind(this));
	    };
	    Tone.extend(Tone.Transport, Tone.Emitter);
	    /**
		 *  the defaults
		 *  @type {Object}
		 *  @const
		 *  @static
		 */
	    Tone.Transport.defaults = {
	        'bpm': 120,
	        'swing': 0,
	        'swingSubdivision': '8n',
	        'timeSignature': 4,
	        'loopStart': 0,
	        'loopEnd': '4m',
	        'PPQ': 192
	    };
	    ///////////////////////////////////////////////////////////////////////////////
	    //	TICKS
	    ///////////////////////////////////////////////////////////////////////////////
	    /**
		 *  called on every tick
		 *  @param   {number} tickTime clock relative tick time
		 *  @private
		 */
	    Tone.Transport.prototype._processTick = function (tickTime, ticks) {
	        //handle swing
	        if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat
	            ticks % (this._swingTicks * 2) !== 0) {
	            //add some swing
	            var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);
	            var amount = Math.sin(progress * Math.PI) * this._swingAmount;
	            tickTime += Tone.Ticks(this._swingTicks * 2 / 3).toSeconds() * amount;
	        }
	        //do the loop test
	        if (this.loop) {
	            if (ticks >= this._loopEnd) {
	                this.emit('loopEnd', tickTime);
	                this._clock.setTicksAtTime(this._loopStart, tickTime);
	                ticks = this._loopStart;
	                this.emit('loopStart', tickTime, this._clock.getSecondsAtTime(tickTime));
	                this.emit('loop', tickTime);
	            }
	        }
	        //invoke the timeline events scheduled on this tick
	        this._timeline.forEachAtTime(ticks, function (event) {
	            event.invoke(tickTime);
	        });
	    };
	    ///////////////////////////////////////////////////////////////////////////////
	    //	SCHEDULABLE EVENTS
	    ///////////////////////////////////////////////////////////////////////////////
	    /**
		 *  Schedule an event along the timeline.
		 *  @param {Function} callback The callback to be invoked at the time.
		 *  @param {TransportTime}  time The time to invoke the callback at.
		 *  @return {Number} The id of the event which can be used for canceling the event.
		 *  @example
		 * //trigger the callback when the Transport reaches the desired time
		 * Tone.Transport.schedule(function(time){
		 * 	envelope.triggerAttack(time);
		 * }, "128i");
		 */
	    Tone.Transport.prototype.schedule = function (callback, time) {
	        var event = new Tone.TransportEvent(this, {
	            'time': Tone.TransportTime(time),
	            'callback': callback
	        });
	        return this._addEvent(event, this._timeline);
	    };
	    /**
		 *  Schedule a repeated event along the timeline. The event will fire
		 *  at the `interval` starting at the `startTime` and for the specified
		 *  `duration`.
		 *  @param  {Function}  callback   The callback to invoke.
		 *  @param  {Time}    interval   The duration between successive
		 *                               callbacks. Must be a positive number.
		 *  @param  {TransportTime=}    startTime  When along the timeline the events should
		 *                               start being invoked.
		 *  @param {Time} [duration=Infinity] How long the event should repeat.
		 *  @return  {Number}    The ID of the scheduled event. Use this to cancel
		 *                           the event.
		 *  @example
		 * //a callback invoked every eighth note after the first measure
		 * Tone.Transport.scheduleRepeat(callback, "8n", "1m");
		 */
	    Tone.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {
	        var event = new Tone.TransportRepeatEvent(this, {
	            'callback': callback,
	            'interval': Tone.Time(interval),
	            'time': Tone.TransportTime(startTime),
	            'duration': Tone.Time(Tone.defaultArg(duration, Infinity))
	        });
	        //kick it off if the Transport is started
	        return this._addEvent(event, this._repeatedEvents);
	    };
	    /**
		 *  Schedule an event that will be removed after it is invoked.
		 *  Note that if the given time is less than the current transport time,
		 *  the event will be invoked immediately.
		 *  @param {Function} callback The callback to invoke once.
		 *  @param {TransportTime} time The time the callback should be invoked.
		 *  @returns {Number} The ID of the scheduled event.
		 */
	    Tone.Transport.prototype.scheduleOnce = function (callback, time) {
	        var event = new Tone.TransportEvent(this, {
	            'time': Tone.TransportTime(time),
	            'callback': callback,
	            'once': true
	        });
	        return this._addEvent(event, this._timeline);
	    };
	    /**
		 *  Clear the passed in event id from the timeline
		 *  @param {Number} eventId The id of the event.
		 *  @returns {Tone.Transport} this
		 */
	    Tone.Transport.prototype.clear = function (eventId) {
	        if (this._scheduledEvents.hasOwnProperty(eventId)) {
	            var item = this._scheduledEvents[eventId.toString()];
	            item.timeline.remove(item.event);
	            item.event.dispose();
	            delete this._scheduledEvents[eventId.toString()];
	        }
	        return this;
	    };
	    /**
		 * Add an event to the correct timeline. Keep track of the
		 * timeline it was added to.
		 * @param {Tone.TransportEvent}	event
		 * @param {Tone.Timeline} timeline
		 * @returns {Number} the event id which was just added
		 * @private
		 */
	    Tone.Transport.prototype._addEvent = function (event, timeline) {
	        this._scheduledEvents[event.id.toString()] = {
	            'event': event,
	            'timeline': timeline
	        };
	        timeline.add(event);
	        return event.id;
	    };
	    /**
		 *  Remove scheduled events from the timeline after
		 *  the given time. Repeated events will be removed
		 *  if their startTime is after the given time
		 *  @param {TransportTime} [after=0] Clear all events after
		 *                          this time.
		 *  @returns {Tone.Transport} this
		 */
	    Tone.Transport.prototype.cancel = function (after) {
	        after = Tone.defaultArg(after, 0);
	        after = this.toTicks(after);
	        this._timeline.forEachFrom(after, function (event) {
	            this.clear(event.id);
	        }.bind(this));
	        this._repeatedEvents.forEachFrom(after, function (event) {
	            this.clear(event.id);
	        }.bind(this));
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////////
	    //	START/STOP/PAUSE
	    ///////////////////////////////////////////////////////////////////////////////
	    /**
		 *  Bind start/stop/pause events from the clock and emit them.
		 *  @private
		 */
	    Tone.Transport.prototype._bindClockEvents = function () {
	        this._clock.on('start', function (time, offset) {
	            offset = Tone.Ticks(offset).toSeconds();
	            this.emit('start', time, offset);
	        }.bind(this));
	        this._clock.on('stop', function (time) {
	            this.emit('stop', time);
	        }.bind(this));
	        this._clock.on('pause', function (time) {
	            this.emit('pause', time);
	        }.bind(this));
	    };
	    /**
		 *  Returns the playback state of the source, either "started", "stopped", or "paused"
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.Transport#
		 *  @name state
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'state', {
	        get: function () {
	            return this._clock.getStateAtTime(this.now());
	        }
	    });
	    /**
		 *  Start the transport and all sources synced to the transport.
		 *  @param  {Time} [time=now] The time when the transport should start.
		 *  @param  {TransportTime=} offset The timeline offset to start the transport.
		 *  @returns {Tone.Transport} this
		 *  @example
		 * //start the transport in one second starting at beginning of the 5th measure.
		 * Tone.Transport.start("+1", "4:0:0");
		 */
	    Tone.Transport.prototype.start = function (time, offset) {
	        //start the clock
	        if (Tone.isDefined(offset)) {
	            offset = this.toTicks(offset);
	        }
	        this._clock.start(time, offset);
	        return this;
	    };
	    /**
		 *  Stop the transport and all sources synced to the transport.
		 *  @param  {Time} [time=now] The time when the transport should stop.
		 *  @returns {Tone.Transport} this
		 *  @example
		 * Tone.Transport.stop();
		 */
	    Tone.Transport.prototype.stop = function (time) {
	        this._clock.stop(time);
	        return this;
	    };
	    /**
		 *  Pause the transport and all sources synced to the transport.
		 *  @param  {Time} [time=now]
		 *  @returns {Tone.Transport} this
		 */
	    Tone.Transport.prototype.pause = function (time) {
	        this._clock.pause(time);
	        return this;
	    };
	    /**
		 * Toggle the current state of the transport. If it is
		 * started, it will stop it, otherwise it will start the Transport.
		 * @param  {Time=} time The time of the event
		 * @return {Tone.Transport}      this
		 */
	    Tone.Transport.prototype.toggle = function (time) {
	        time = this.toSeconds(time);
	        if (this._clock.getStateAtTime(time) !== Tone.State.Started) {
	            this.start(time);
	        } else {
	            this.stop(time);
	        }
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////////
	    //	SETTERS/GETTERS
	    ///////////////////////////////////////////////////////////////////////////////
	    /**
		 *  The time signature as just the numerator over 4.
		 *  For example 4/4 would be just 4 and 6/8 would be 3.
		 *  @memberOf Tone.Transport#
		 *  @type {Number|Array}
		 *  @name timeSignature
		 *  @example
		 * //common time
		 * Tone.Transport.timeSignature = 4;
		 * // 7/8
		 * Tone.Transport.timeSignature = [7, 8];
		 * //this will be reduced to a single number
		 * Tone.Transport.timeSignature; //returns 3.5
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'timeSignature', {
	        get: function () {
	            return this._timeSignature;
	        },
	        set: function (timeSig) {
	            if (Tone.isArray(timeSig)) {
	                timeSig = timeSig[0] / timeSig[1] * 4;
	            }
	            this._timeSignature = timeSig;
	        }
	    });
	    /**
		 * When the Tone.Transport.loop = true, this is the starting position of the loop.
		 * @memberOf Tone.Transport#
		 * @type {Time}
		 * @name loopStart
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'loopStart', {
	        get: function () {
	            return Tone.Ticks(this._loopStart).toSeconds();
	        },
	        set: function (startPosition) {
	            this._loopStart = this.toTicks(startPosition);
	        }
	    });
	    /**
		 * When the Tone.Transport.loop = true, this is the ending position of the loop.
		 * @memberOf Tone.Transport#
		 * @type {Time}
		 * @name loopEnd
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'loopEnd', {
	        get: function () {
	            return Tone.Ticks(this._loopEnd).toSeconds();
	        },
	        set: function (endPosition) {
	            this._loopEnd = this.toTicks(endPosition);
	        }
	    });
	    /**
		 *  Set the loop start and stop at the same time.
		 *  @param {TransportTime} startPosition
		 *  @param {TransportTime} endPosition
		 *  @returns {Tone.Transport} this
		 *  @example
		 * //loop over the first measure
		 * Tone.Transport.setLoopPoints(0, "1m");
		 * Tone.Transport.loop = true;
		 */
	    Tone.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {
	        this.loopStart = startPosition;
	        this.loopEnd = endPosition;
	        return this;
	    };
	    /**
		 *  The swing value. Between 0-1 where 1 equal to
		 *  the note + half the subdivision.
		 *  @memberOf Tone.Transport#
		 *  @type {NormalRange}
		 *  @name swing
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'swing', {
	        get: function () {
	            return this._swingAmount;
	        },
	        set: function (amount) {
	            //scale the values to a normal range
	            this._swingAmount = amount;
	        }
	    });
	    /**
		 *  Set the subdivision which the swing will be applied to.
		 *  The default value is an 8th note. Value must be less
		 *  than a quarter note.
		 *
		 *  @memberOf Tone.Transport#
		 *  @type {Time}
		 *  @name swingSubdivision
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'swingSubdivision', {
	        get: function () {
	            return Tone.Ticks(this._swingTicks).toNotation();
	        },
	        set: function (subdivision) {
	            this._swingTicks = this.toTicks(subdivision);
	        }
	    });
	    /**
		 *  The Transport's position in Bars:Beats:Sixteenths.
		 *  Setting the value will jump to that position right away.
		 *  @memberOf Tone.Transport#
		 *  @type {BarsBeatsSixteenths}
		 *  @name position
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'position', {
	        get: function () {
	            var now = this.now();
	            var ticks = this._clock.getTicksAtTime(now);
	            return Tone.Ticks(ticks).toBarsBeatsSixteenths();
	        },
	        set: function (progress) {
	            var ticks = this.toTicks(progress);
	            this.ticks = ticks;
	        }
	    });
	    /**
		 *  The Transport's position in seconds
		 *  Setting the value will jump to that position right away.
		 *  @memberOf Tone.Transport#
		 *  @type {Seconds}
		 *  @name seconds
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'seconds', {
	        get: function () {
	            return this._clock.seconds;
	        },
	        set: function (s) {
	            var now = this.now();
	            var ticks = this.bpm.timeToTicks(s, now);
	            this.ticks = ticks;
	        }
	    });
	    /**
		 *  The Transport's loop position as a normalized value. Always
		 *  returns 0 if the transport if loop is not true.
		 *  @memberOf Tone.Transport#
		 *  @name progress
		 *  @type {NormalRange}
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'progress', {
	        get: function () {
	            if (this.loop) {
	                var now = this.now();
	                var ticks = this._clock.getTicksAtTime(now);
	                return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 *  The transports current tick position.
		 *
		 *  @memberOf Tone.Transport#
		 *  @type {Ticks}
		 *  @name ticks
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'ticks', {
	        get: function () {
	            return this._clock.ticks;
	        },
	        set: function (t) {
	            if (this._clock.ticks !== t) {
	                var now = this.now();
	                //stop everything synced to the transport
	                if (this.state === Tone.State.Started) {
	                    this.emit('stop', now);
	                    this._clock.setTicksAtTime(t, now);
	                    //restart it with the new time
	                    this.emit('start', now, this.seconds);
	                } else {
	                    this._clock.setTicksAtTime(t, now);
	                }
	            }
	        }
	    });
	    /**
		 * Get the clock's ticks at the given time.
		 * @param  {Time} time  When to get the tick value
		 * @return {Ticks}       The tick value at the given time.
		 */
	    Tone.Transport.prototype.getTicksAtTime = function (time) {
	        return Math.round(this._clock.getTicksAtTime(time));
	    };
	    /**
		 *  Return the elapsed seconds at the given time.
		 *  @param  {Time}  time  When to get the elapsed seconds
		 *  @return  {Seconds}  The number of elapsed seconds
		 */
	    Tone.Transport.prototype.getSecondsAtTime = function (time) {
	        return this._clock.getSecondsAtTime(time);
	    };
	    /**
		 *  Pulses Per Quarter note. This is the smallest resolution
		 *  the Transport timing supports. This should be set once
		 *  on initialization and not set again. Changing this value
		 *  after other objects have been created can cause problems.
		 *
		 *  @memberOf Tone.Transport#
		 *  @type {Number}
		 *  @name PPQ
		 */
	    Object.defineProperty(Tone.Transport.prototype, 'PPQ', {
	        get: function () {
	            return this._ppq;
	        },
	        set: function (ppq) {
	            var bpm = this.bpm.value;
	            this._ppq = ppq;
	            this.bpm.value = bpm;
	        }
	    });
	    /**
		 *  Convert from BPM to frequency (factoring in PPQ)
		 *  @param  {BPM}  bpm The BPM value to convert to frequency
		 *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.
		 *  @private
		 */
	    Tone.Transport.prototype._fromUnits = function (bpm) {
	        return 1 / (60 / bpm / this.PPQ);
	    };
	    /**
		 *  Convert from frequency (with PPQ) into BPM
		 *  @param  {Frequency}  freq The clocks frequency to convert to BPM
		 *  @return  {BPM}  The frequency value as BPM.
		 *  @private
		 */
	    Tone.Transport.prototype._toUnits = function (freq) {
	        return freq / this.PPQ * 60;
	    };
	    ///////////////////////////////////////////////////////////////////////////////
	    //	SYNCING
	    ///////////////////////////////////////////////////////////////////////////////
	    /**
		 *  Returns the time aligned to the next subdivision
		 *  of the Transport. If the Transport is not started,
		 *  it will return 0.
		 *  Note: this will not work precisely during tempo ramps.
		 *  @param  {Time}  subdivision  The subdivision to quantize to
		 *  @return  {Number}  The context time of the next subdivision.
		 *  @example
		 * Tone.Transport.start(); //the transport must be started
		 * Tone.Transport.nextSubdivision("4n");
		 */
	    Tone.Transport.prototype.nextSubdivision = function (subdivision) {
	        subdivision = this.toTicks(subdivision);
	        if (this.state !== Tone.State.Started) {
	            //if the transport's not started, return 0
	            return 0;
	        } else {
	            var now = this.now();
	            //the remainder of the current ticks and the subdivision
	            var transportPos = this.getTicksAtTime(now);
	            var remainingTicks = subdivision - transportPos % subdivision;
	            return this._clock.nextTickTime(remainingTicks, now);
	        }
	    };
	    /**
		 *  Attaches the signal to the tempo control signal so that
		 *  any changes in the tempo will change the signal in the same
		 *  ratio.
		 *
		 *  @param  {Tone.Signal} signal
		 *  @param {number=} ratio Optionally pass in the ratio between
		 *                         the two signals. Otherwise it will be computed
		 *                         based on their current values.
		 *  @returns {Tone.Transport} this
		 */
	    Tone.Transport.prototype.syncSignal = function (signal, ratio) {
	        if (!ratio) {
	            //get the sync ratio
	            var now = this.now();
	            if (signal.getValueAtTime(now) !== 0) {
	                ratio = signal.getValueAtTime(now) / this.bpm.getValueAtTime(now);
	            } else {
	                ratio = 0;
	            }
	        }
	        var ratioSignal = new Tone.Gain(ratio);
	        this.bpm.chain(ratioSignal, signal._param);
	        this._syncedSignals.push({
	            'ratio': ratioSignal,
	            'signal': signal,
	            'initial': signal.value
	        });
	        signal.value = 0;
	        return this;
	    };
	    /**
		 *  Unsyncs a previously synced signal from the transport's control.
		 *  See Tone.Transport.syncSignal.
		 *  @param  {Tone.Signal} signal
		 *  @returns {Tone.Transport} this
		 */
	    Tone.Transport.prototype.unsyncSignal = function (signal) {
	        for (var i = this._syncedSignals.length - 1; i >= 0; i--) {
	            var syncedSignal = this._syncedSignals[i];
	            if (syncedSignal.signal === signal) {
	                syncedSignal.ratio.dispose();
	                syncedSignal.signal.value = syncedSignal.initial;
	                this._syncedSignals.splice(i, 1);
	            }
	        }
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Transport} this
		 *  @private
		 */
	    Tone.Transport.prototype.dispose = function () {
	        Tone.Emitter.prototype.dispose.call(this);
	        this._clock.dispose();
	        this._clock = null;
	        this._writable('bpm');
	        this.bpm = null;
	        this._timeline.dispose();
	        this._timeline = null;
	        this._repeatedEvents.dispose();
	        this._repeatedEvents = null;
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////////
	    //	INITIALIZATION
	    ///////////////////////////////////////////////////////////////////////////////
	    var TransportConstructor = Tone.Transport;
	    Tone.Transport = new TransportConstructor();
	    Tone.Context.on('init', function (context) {
	        if (context.Transport instanceof TransportConstructor) {
	            Tone.Transport = context.Transport;
	        } else {
	            Tone.Transport = new TransportConstructor();
	        }
	        //store the Transport on the context so it can be retrieved later
	        context.Transport = Tone.Transport;
	    });
	    Tone.Context.on('close', function (context) {
	        if (context.Transport instanceof TransportConstructor) {
	            context.Transport.dispose();
	        }
	    });
	    return Tone.Transport;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Decibels} [volume=0] the initial volume
		 *  @example
		 * var vol = new Tone.Volume(-12);
		 * instrument.chain(vol, Tone.Master);
		 */
	    Tone.Volume = function () {
	        var options = Tone.defaults(arguments, ['volume'], Tone.Volume);
	        Tone.AudioNode.call(this);
	        /**
			 * the output node
			 * @type {GainNode}
			 * @private
			 */
	        this.output = this.input = new Tone.Gain(options.volume, Tone.Type.Decibels);
	        /**
			 * The unmuted volume
			 * @type {Decibels}
			 * @private
			 */
	        this._unmutedVolume = options.volume;
	        /**
			 *  The volume control in decibels.
			 *  @type {Decibels}
			 *  @signal
			 */
	        this.volume = this.output.gain;
	        this._readOnly('volume');
	        //set the mute initially
	        this.mute = options.mute;
	    };
	    Tone.extend(Tone.Volume, Tone.AudioNode);
	    /**
		 *  Defaults
		 *  @type  {Object}
		 *  @const
		 *  @static
		 */
	    Tone.Volume.defaults = {
	        'volume': 0,
	        'mute': false
	    };
	    /**
		 * Mute the output.
		 * @memberOf Tone.Volume#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * volume.mute = true;
		 */
	    Object.defineProperty(Tone.Volume.prototype, 'mute', {
	        get: function () {
	            return this.volume.value === -Infinity;
	        },
	        set: function (mute) {
	            if (!this.mute && mute) {
	                this._unmutedVolume = this.volume.value;
	                //maybe it should ramp here?
	                this.volume.value = -Infinity;
	            } else if (this.mute && !mute) {
	                this.volume.value = this._unmutedVolume;
	            }
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.Volume} this
		 */
	    Tone.Volume.prototype.dispose = function () {
	        this.input.dispose();
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable('volume');
	        this.volume.dispose();
	        this.volume = null;
	        return this;
	    };
	    return Tone.Volume;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  A single master output which is connected to the
		 *          AudioDestinationNode (aka your speakers).
		 *          It provides useful conveniences such as the ability
		 *          to set the volume and mute the entire application.
		 *          It also gives you the ability to apply master effects to your application.
		 *          <br><br>
		 *          Like Tone.Transport, A single Tone.Master is created
		 *          on initialization and you do not need to explicitly construct one.
		 *
		 *  @constructor
		 *  @extends {Tone}
		 *  @singleton
		 *  @example
		 * //the audio will go from the oscillator to the speakers
		 * oscillator.connect(Tone.Master);
		 * //a convenience for connecting to the master output is also provided:
		 * oscillator.toMaster();
		 * //the above two examples are equivalent.
		 */
	    Tone.Master = function () {
	        Tone.AudioNode.call(this);
	        Tone.getContext(function () {
	            this.createInsOuts(1, 0);
	            /**
				 *  The private volume node
				 *  @type  {Tone.Volume}
				 *  @private
				 */
	            this._volume = this.output = new Tone.Volume();
	            /**
				 * The volume of the master output.
				 * @type {Decibels}
				 * @signal
				 */
	            this.volume = this._volume.volume;
	            this._readOnly('volume');
	            //connections
	            this.input.chain(this.output, this.context.destination);
	        }.bind(this));
	    };
	    Tone.extend(Tone.Master, Tone.AudioNode);
	    /**
		 *  @type {Object}
		 *  @const
		 */
	    Tone.Master.defaults = {
	        'volume': 0,
	        'mute': false
	    };
	    /**
		 * Mute the output.
		 * @memberOf Tone.Master#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * Tone.Master.mute = true;
		 */
	    Object.defineProperty(Tone.Master.prototype, 'mute', {
	        get: function () {
	            return this._volume.mute;
	        },
	        set: function (mute) {
	            this._volume.mute = mute;
	        }
	    });
	    /**
		 *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously
		 *  chained in the master effects chain.
		 *  @param {AudioNode|Tone} args... All arguments will be connected in a row
		 *                                  and the Master will be routed through it.
		 *  @return  {Tone.Master}  this
		 *  @example
		 * //some overall compression to keep the levels in check
		 * var masterCompressor = new Tone.Compressor({
		 * 	"threshold" : -6,
		 * 	"ratio" : 3,
		 * 	"attack" : 0.5,
		 * 	"release" : 0.1
		 * });
		 * //give a little boost to the lows
		 * var lowBump = new Tone.Filter(200, "lowshelf");
		 * //route everything through the filter
		 * //and compressor before going to the speakers
		 * Tone.Master.chain(lowBump, masterCompressor);
		 */
	    Tone.Master.prototype.chain = function () {
	        this.input.disconnect();
	        this.input.chain.apply(this.input, arguments);
	        arguments[arguments.length - 1].connect(this.output);
	    };
	    /**
		 *  Clean up
		 *  @return  {Tone.Master}  this
		 */
	    Tone.Master.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable('volume');
	        this._volume.dispose();
	        this._volume = null;
	        this.volume = null;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    //	AUGMENT TONE's PROTOTYPE
	    ///////////////////////////////////////////////////////////////////////////
	    /**
		 *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)
		 *  @returns {Tone.AudioNode} this
		 *  @example
		 * //connect an oscillator to the master output
		 * var osc = new Tone.Oscillator().toMaster();
		 */
	    Tone.AudioNode.prototype.toMaster = function () {
	        this.connect(Tone.Master);
	        return this;
	    };
	    if (window.AudioNode) {
	        // Also augment AudioNode's prototype to include toMaster as a convenience
	        AudioNode.prototype.toMaster = function () {
	            this.connect(Tone.Master);
	            return this;
	        };
	    }
	    /**
		 *  initialize the module and listen for new audio contexts
		 */
	    var MasterConstructor = Tone.Master;
	    Tone.Master = new MasterConstructor();
	    Tone.Context.on('init', function (context) {
	        // if it already exists, just restore it
	        if (context.Master instanceof MasterConstructor) {
	            Tone.Master = context.Master;
	        } else {
	            Tone.Master = new MasterConstructor();
	        }
	        context.Master = Tone.Master;
	    });
	    Tone.Context.on('close', function (context) {
	        if (context.Master instanceof MasterConstructor) {
	            context.Master.dispose();
	        }
	    });
	    return Tone.Master;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Base class for sources. Sources have start/stop methods
		 *          and the ability to be synced to the
		 *          start/stop of Tone.Transport.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * //Multiple state change events can be chained together,
		 * //but must be set in the correct order and with ascending times
		 *
		 * // OK
		 * state.start().stop("+0.2");
		 * // AND
		 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
		 *
		 * // BAD
		 * state.stop("+0.2").start();
		 * // OR
		 * state.start("+0.3").stop("+0.2");
		 *
		 */
	    Tone.Source = function (options) {
	        options = Tone.defaultArg(options, Tone.Source.defaults);
	        Tone.AudioNode.call(this);
	        /**
			 *  The output volume node
			 *  @type  {Tone.Volume}
			 *  @private
			 */
	        this._volume = this.output = new Tone.Volume(options.volume);
	        /**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * source.volume.value = -6;
			 */
	        this.volume = this._volume.volume;
	        this._readOnly('volume');
	        /**
			 * 	Keep track of the scheduled state.
			 *  @type {Tone.TimelineState}
			 *  @private
			 */
	        this._state = new Tone.TimelineState(Tone.State.Stopped);
	        this._state.memory = 100;
	        /**
			 *  The synced `start` callback function from the transport
			 *  @type {Function}
			 *  @private
			 */
	        this._synced = false;
	        /**
			 *  Keep track of all of the scheduled event ids
			 *  @type  {Array}
			 *  @private
			 */
	        this._scheduled = [];
	        //make the output explicitly stereo
	        this._volume.output.output.channelCount = 2;
	        this._volume.output.output.channelCountMode = 'explicit';
	        //mute initially
	        this.mute = options.mute;
	    };
	    Tone.extend(Tone.Source, Tone.AudioNode);
	    /**
		 *  The default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Source.defaults = {
	        'volume': 0,
	        'mute': false
	    };
	    /**
		 *  Returns the playback state of the source, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.Source#
		 *  @name state
		 */
	    Object.defineProperty(Tone.Source.prototype, 'state', {
	        get: function () {
	            if (this._synced) {
	                if (Tone.Transport.state === Tone.State.Started) {
	                    return this._state.getValueAtTime(Tone.Transport.seconds);
	                } else {
	                    return Tone.State.Stopped;
	                }
	            } else {
	                return this._state.getValueAtTime(this.now());
	            }
	        }
	    });
	    /**
		 * Mute the output.
		 * @memberOf Tone.Source#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * source.mute = true;
		 */
	    Object.defineProperty(Tone.Source.prototype, 'mute', {
	        get: function () {
	            return this._volume.mute;
	        },
	        set: function (mute) {
	            this._volume.mute = mute;
	        }
	    });
	    //overwrite these functions
	    Tone.Source.prototype._start = Tone.noOp;
	    Tone.Source.prototype.restart = Tone.noOp;
	    Tone.Source.prototype._stop = Tone.noOp;
	    /**
		 *  Start the source at the specified time. If no time is given,
		 *  start the source now.
		 *  @param  {Time} [time=now] When the source should be started.
		 *  @returns {Tone.Source} this
		 *  @example
		 * source.start("+0.5"); //starts the source 0.5 seconds from now
		 */
	    Tone.Source.prototype.start = function (time, offset, duration) {
	        if (Tone.isUndef(time) && this._synced) {
	            time = Tone.Transport.seconds;
	        } else {
	            time = this.toSeconds(time);
	        }
	        //if it's started, stop it and restart it
	        if (this._state.getValueAtTime(time) === Tone.State.Started) {
	            this._state.cancel(time);
	            this._state.setStateAtTime(Tone.State.Started, time);
	            this.restart(time, offset, duration);
	        } else {
	            this._state.setStateAtTime(Tone.State.Started, time);
	            if (this._synced) {
	                // add the offset time to the event
	                var event = this._state.get(time);
	                event.offset = Tone.defaultArg(offset, 0);
	                event.duration = duration;
	                var sched = Tone.Transport.schedule(function (t) {
	                    this._start(t, offset, duration);
	                }.bind(this), time);
	                this._scheduled.push(sched);
	                //if it's already started
	                if (Tone.Transport.state === Tone.State.Started) {
	                    this._syncedStart(this.now(), Tone.Transport.seconds);
	                }
	            } else {
	                this._start.apply(this, arguments);
	            }
	        }
	        return this;
	    };
	    /**
		 *  Stop the source at the specified time. If no time is given,
		 *  stop the source now.
		 *  @param  {Time} [time=now] When the source should be stopped.
		 *  @returns {Tone.Source} this
		 *  @example
		 * source.stop(); // stops the source immediately
		 */
	    Tone.Source.prototype.stop = function (time) {
	        if (Tone.isUndef(time) && this._synced) {
	            time = Tone.Transport.seconds;
	        } else {
	            time = this.toSeconds(time);
	        }
	        if (!this._synced) {
	            this._stop.apply(this, arguments);
	        } else {
	            var sched = Tone.Transport.schedule(this._stop.bind(this), time);
	            this._scheduled.push(sched);
	        }
	        this._state.cancel(time);
	        this._state.setStateAtTime(Tone.State.Stopped, time);
	        return this;
	    };
	    /**
		 *  Sync the source to the Transport so that all subsequent
		 *  calls to `start` and `stop` are synced to the TransportTime
		 *  instead of the AudioContext time.
		 *
		 *  @returns {Tone.Source} this
		 *  @example
		 * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline
		 * source.sync().start(0).stop(0.3);
		 * //start the transport.
		 * Tone.Transport.start();
		 *
		 *  @example
		 * //start the transport with an offset and the sync'ed sources
		 * //will start in the correct position
		 * source.sync().start(0.1);
		 * //the source will be invoked with an offset of 0.4
		 * Tone.Transport.start("+0.5", 0.5);
		 */
	    Tone.Source.prototype.sync = function () {
	        this._synced = true;
	        this._syncedStart = function (time, offset) {
	            if (offset > 0) {
	                // get the playback state at that time
	                var stateEvent = this._state.get(offset);
	                // listen for start events which may occur in the middle of the sync'ed time
	                if (stateEvent && stateEvent.state === Tone.State.Started && stateEvent.time !== offset) {
	                    // get the offset
	                    var startOffset = offset - this.toSeconds(stateEvent.time);
	                    var duration;
	                    if (stateEvent.duration) {
	                        duration = this.toSeconds(stateEvent.duration) - startOffset;
	                    }
	                    this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
	                }
	            }
	        }.bind(this);
	        this._syncedStop = function (time) {
	            var seconds = Tone.Transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));
	            if (this._state.getValueAtTime(seconds) === Tone.State.Started) {
	                this._stop(time);
	            }
	        }.bind(this);
	        Tone.Transport.on('start loopStart', this._syncedStart);
	        Tone.Transport.on('stop pause loopEnd', this._syncedStop);
	        return this;
	    };
	    /**
		 *  Unsync the source to the Transport. See Tone.Source.sync
		 *  @returns {Tone.Source} this
		 */
	    Tone.Source.prototype.unsync = function () {
	        if (this._synced) {
	            Tone.Transport.off('stop pause loopEnd', this._syncedStop);
	            Tone.Transport.off('start loopStart', this._syncedStart);
	        }
	        this._synced = false;
	        // clear all of the scheduled ids
	        for (var i = 0; i < this._scheduled.length; i++) {
	            var id = this._scheduled[i];
	            Tone.Transport.clear(id);
	        }
	        this._scheduled = [];
	        this._state.cancel(0);
	        return this;
	    };
	    /**
		 *	Clean up.
		 *  @return {Tone.Source} this
		 */
	    Tone.Source.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.unsync();
	        this._scheduled = null;
	        this._writable('volume');
	        this._volume.dispose();
	        this._volume = null;
	        this.volume = null;
	        this._state.dispose();
	        this._state = null;
	    };
	    return Tone.Source;
	});
	Module(function (Tone) {
	    /**
		 *  AudioBuffer.copyTo/FromChannel polyfill
		 *  @private
		 */
	    if (Tone.supported) {
	        if (!AudioBuffer.prototype.copyToChannel) {
	            AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {
	                var channel = this.getChannelData(chanNum);
	                start = start || 0;
	                for (var i = 0; i < channel.length; i++) {
	                    channel[i + start] = src[i];
	                }
	            };
	            AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {
	                var channel = this.getChannelData(chanNum);
	                start = start || 0;
	                for (var i = 0; i < dest.length; i++) {
	                    dest[i] = channel[i + start];
	                }
	            };
	        }
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Buffer loading and storage. Tone.Buffer is used internally by all
		 *          classes that make requests for audio files such as Tone.Player,
		 *          Tone.Sampler and Tone.Convolver.
		 *
		 *          Aside from load callbacks from individual buffers, Tone.Buffer
		 *  		provides events which keep track of the loading progress
		 *  		of _all_ of the buffers. These are Tone.Buffer.on("load" / "progress" / "error")
		 *
		 *  @constructor
		 *  @extends {Tone}
		 *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set.
		 *  @param {Function=} onload A callback which is invoked after the buffer is loaded.
		 *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead
		 *                            since it will give you a callback when _all_ buffers are loaded.
		 *  @param {Function=} onerror The callback to invoke if there is an error
		 *  @example
		 * var buffer = new Tone.Buffer("path/to/sound.mp3", function(){
		 * 	//the buffer is now available.
		 * 	var buff = buffer.get();
		 * });
		 *  @example
		 * //can load provide fallback extension types if the first type is not supported.
		 * var buffer = new Tone.Buffer("path/to/sound.[mp3|ogg|wav]");
		 */
	    Tone.Buffer = function () {
	        var options = Tone.defaults(arguments, [
	            'url',
	            'onload',
	            'onerror'
	        ], Tone.Buffer);
	        Tone.call(this);
	        /**
			 *  stores the loaded AudioBuffer
			 *  @type {AudioBuffer}
			 *  @private
			 */
	        this._buffer = null;
	        /**
			 *  indicates if the buffer should be reversed or not
			 *  @type {Boolean}
			 *  @private
			 */
	        this._reversed = options.reverse;
	        /**
			 *  The XHR
			 *  @type  {XMLHttpRequest}
			 *  @private
			 */
	        this._xhr = null;
	        /**
			 * Private callback when the buffer is loaded.
			 * @type {Function}
			 * @private
			 */
	        this._onload = Tone.noOp;
	        if (options.url instanceof AudioBuffer || options.url instanceof Tone.Buffer) {
	            this.set(options.url);
	            // invoke the onload callback
	            if (options.onload) {
	                if (this.loaded) {
	                    options.onload(this);
	                } else {
	                    this._onload = options.onload;
	                }
	            }
	        } else if (Tone.isString(options.url)) {
	            this.load(options.url).then(options.onload).catch(options.onerror);
	        }
	    };
	    Tone.extend(Tone.Buffer);
	    /**
		 *  the default parameters
		 *  @type {Object}
		 */
	    Tone.Buffer.defaults = {
	        'url': undefined,
	        'reverse': false,
	        'onload': Tone.noOp,
	        'onerror': Tone.noOp
	    };
	    /**
		 *  Pass in an AudioBuffer or Tone.Buffer to set the value
		 *  of this buffer.
		 *  @param {AudioBuffer|Tone.Buffer} buffer the buffer
		 *  @returns {Tone.Buffer} this
		 */
	    Tone.Buffer.prototype.set = function (buffer) {
	        if (buffer instanceof Tone.Buffer) {
	            if (buffer.loaded) {
	                this._buffer = buffer.get();
	            } else {
	                buffer._onload = function () {
	                    this.set(buffer);
	                    this._onload(this);
	                }.bind(this);
	            }
	        } else {
	            this._buffer = buffer;
	        }
	        return this;
	    };
	    /**
		 *  @return {AudioBuffer} The audio buffer stored in the object.
		 */
	    Tone.Buffer.prototype.get = function () {
	        return this._buffer;
	    };
	    /**
		 *  Makes an xhr reqest for the selected url then decodes
		 *  the file as an audio buffer. Invokes
		 *  the callback once the audio buffer loads.
		 *  @param {String} url The url of the buffer to load.
		 *                      filetype support depends on the
		 *                      browser.
		 *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer
		 */
	    Tone.Buffer.prototype.load = function (url, onload, onerror) {
	        var promise = new Promise(function (load, error) {
	            this._xhr = Tone.Buffer.load(url, //success
	            function (buff) {
	                this._xhr = null;
	                this.set(buff);
	                load(this);
	                this._onload(this);
	                if (onload) {
	                    onload(this);
	                }
	            }.bind(this), //error
	            function (err) {
	                this._xhr = null;
	                error(err);
	                if (onerror) {
	                    onerror(err);
	                }
	            }.bind(this));
	        }.bind(this));
	        return promise;
	    };
	    /**
		 *  dispose and disconnect
		 *  @returns {Tone.Buffer} this
		 */
	    Tone.Buffer.prototype.dispose = function () {
	        Tone.prototype.dispose.call(this);
	        this._buffer = null;
	        if (this._xhr) {
	            Tone.Buffer._removeFromDownloadQueue(this._xhr);
	            this._xhr.abort();
	            this._xhr = null;
	        }
	        return this;
	    };
	    /**
		 * If the buffer is loaded or not
		 * @memberOf Tone.Buffer#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Buffer.prototype, 'loaded', {
	        get: function () {
	            return this.length > 0;
	        }
	    });
	    /**
		 * The duration of the buffer.
		 * @memberOf Tone.Buffer#
		 * @type {Number}
		 * @name duration
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Buffer.prototype, 'duration', {
	        get: function () {
	            if (this._buffer) {
	                return this._buffer.duration;
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 * The length of the buffer in samples
		 * @memberOf Tone.Buffer#
		 * @type {Number}
		 * @name length
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Buffer.prototype, 'length', {
	        get: function () {
	            if (this._buffer) {
	                return this._buffer.length;
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 * The number of discrete audio channels. Returns 0 if no buffer
		 * is loaded.
		 * @memberOf Tone.Buffer#
		 * @type {Number}
		 * @name numberOfChannels
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Buffer.prototype, 'numberOfChannels', {
	        get: function () {
	            if (this._buffer) {
	                return this._buffer.numberOfChannels;
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 *  Set the audio buffer from the array. To create a multichannel AudioBuffer,
		 *  pass in a multidimensional array.
		 *  @param {Float32Array} array The array to fill the audio buffer
		 *  @return {Tone.Buffer} this
		 */
	    Tone.Buffer.prototype.fromArray = function (array) {
	        var isMultidimensional = array[0].length > 0;
	        var channels = isMultidimensional ? array.length : 1;
	        var len = isMultidimensional ? array[0].length : array.length;
	        var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);
	        if (!isMultidimensional && channels === 1) {
	            array = [array];
	        }
	        for (var c = 0; c < channels; c++) {
	            buffer.copyToChannel(array[c], c);
	        }
	        this._buffer = buffer;
	        return this;
	    };
	    /**
		 * 	Sums muliple channels into 1 channel
		 *  @param {Number=} channel Optionally only copy a single channel from the array.
		 *  @return {Array}
		 */
	    Tone.Buffer.prototype.toMono = function (chanNum) {
	        if (Tone.isNumber(chanNum)) {
	            this.fromArray(this.toArray(chanNum));
	        } else {
	            var outputArray = new Float32Array(this.length);
	            var numChannels = this.numberOfChannels;
	            for (var channel = 0; channel < numChannels; channel++) {
	                var channelArray = this.toArray(channel);
	                for (var i = 0; i < channelArray.length; i++) {
	                    outputArray[i] += channelArray[i];
	                }
	            }
	            //divide by the number of channels
	            outputArray = outputArray.map(function (sample) {
	                return sample / numChannels;
	            });
	            this.fromArray(outputArray);
	        }
	        return this;
	    };
	    /**
		 * 	Get the buffer as an array. Single channel buffers will return a 1-dimensional
		 * 	Float32Array, and multichannel buffers will return multidimensional arrays.
		 *  @param {Number=} channel Optionally only copy a single channel from the array.
		 *  @return {Array}
		 */
	    Tone.Buffer.prototype.toArray = function (channel) {
	        if (Tone.isNumber(channel)) {
	            return this.getChannelData(channel);
	        } else if (this.numberOfChannels === 1) {
	            return this.toArray(0);
	        } else {
	            var ret = [];
	            for (var c = 0; c < this.numberOfChannels; c++) {
	                ret[c] = this.getChannelData(c);
	            }
	            return ret;
	        }
	    };
	    /**
		 *  Returns the Float32Array representing the PCM audio data for the specific channel.
		 *  @param  {Number}  channel  The channel number to return
		 *  @return  {Float32Array}  The audio as a TypedArray
		 */
	    Tone.Buffer.prototype.getChannelData = function (channel) {
	        return this._buffer.getChannelData(channel);
	    };
	    /**
		 *  Cut a subsection of the array and return a buffer of the
		 *  subsection. Does not modify the original buffer
		 *  @param {Time} start The time to start the slice
		 *  @param {Time=} end The end time to slice. If none is given
		 *                     will default to the end of the buffer
		 *  @return {Tone.Buffer} this
		 */
	    Tone.Buffer.prototype.slice = function (start, end) {
	        end = Tone.defaultArg(end, this.duration);
	        var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));
	        var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));
	        var replacement = [];
	        for (var i = 0; i < this.numberOfChannels; i++) {
	            replacement[i] = this.toArray(i).slice(startSamples, endSamples);
	        }
	        var retBuffer = new Tone.Buffer().fromArray(replacement);
	        return retBuffer;
	    };
	    /**
		 *  Reverse the buffer.
		 *  @private
		 *  @return {Tone.Buffer} this
		 */
	    Tone.Buffer.prototype._reverse = function () {
	        if (this.loaded) {
	            for (var i = 0; i < this.numberOfChannels; i++) {
	                Array.prototype.reverse.call(this.getChannelData(i));
	            }
	        }
	        return this;
	    };
	    /**
		 * Reverse the buffer.
		 * @memberOf Tone.Buffer#
		 * @type {Boolean}
		 * @name reverse
		 */
	    Object.defineProperty(Tone.Buffer.prototype, 'reverse', {
	        get: function () {
	            return this._reversed;
	        },
	        set: function (rev) {
	            if (this._reversed !== rev) {
	                this._reversed = rev;
	                this._reverse();
	            }
	        }
	    });
	    ///////////////////////////////////////////////////////////////////////////
	    // STATIC METHODS
	    ///////////////////////////////////////////////////////////////////////////
	    //statically inherits Emitter methods
	    Tone.Emitter.mixin(Tone.Buffer);
	    /**
		 *  the static queue for all of the xhr requests
		 *  @type {Array}
		 *  @private
		 */
	    Tone.Buffer._downloadQueue = [];
	    /**
		 *  A path which is prefixed before every url.
		 *  @type  {String}
		 *  @static
		 */
	    Tone.Buffer.baseUrl = '';
	    /**
		 *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,
		 *  pass in a multidimensional array.
		 *  @param {Float32Array} array The array to fill the audio buffer
		 *  @return {Tone.Buffer} A Tone.Buffer created from the array
		 */
	    Tone.Buffer.fromArray = function (array) {
	        return new Tone.Buffer().fromArray(array);
	    };
	    /**
		 * Creates a Tone.Buffer from a URL, returns a promise
		 * which resolves to a Tone.Buffer
		 * @param  {String} url The url to load.
		 * @return {Promise<Tone.Buffer>}     A promise which resolves to a Tone.Buffer
		 */
	    Tone.Buffer.fromUrl = function (url) {
	        var buffer = new Tone.Buffer();
	        return buffer.load(url).then(function () {
	            return buffer;
	        });
	    };
	    /**
		 * Remove an xhr request from the download queue
		 * @private
		 */
	    Tone.Buffer._removeFromDownloadQueue = function (request) {
	        var index = Tone.Buffer._downloadQueue.indexOf(request);
	        if (index !== -1) {
	            Tone.Buffer._downloadQueue.splice(index, 1);
	        }
	    };
	    /**
		 *  Loads a url using XMLHttpRequest.
		 *  @param {String} url
		 *  @param {Function} onload
		 *  @param {Function} onerror
		 *  @param {Function} onprogress
		 *  @return {XMLHttpRequest}
		 */
	    Tone.Buffer.load = function (url, onload, onerror) {
	        //default
	        onload = Tone.defaultArg(onload, Tone.noOp);
	        // test if the url contains multiple extensions
	        var matches = url.match(/\[(.+\|?)+\]$/);
	        if (matches) {
	            var extensions = matches[1].split('|');
	            var extension = extensions[0];
	            for (var i = 0; i < extensions.length; i++) {
	                if (Tone.Buffer.supportsType(extensions[i])) {
	                    extension = extensions[i];
	                    break;
	                }
	            }
	            url = url.replace(matches[0], extension);
	        }
	        function onError(e) {
	            Tone.Buffer._removeFromDownloadQueue(request);
	            Tone.Buffer.emit('error', e);
	            if (onerror) {
	                onerror(e);
	            } else {
	                throw e;
	            }
	        }
	        function onProgress() {
	            //calculate the progress
	            var totalProgress = 0;
	            for (var i = 0; i < Tone.Buffer._downloadQueue.length; i++) {
	                totalProgress += Tone.Buffer._downloadQueue[i].progress;
	            }
	            Tone.Buffer.emit('progress', totalProgress / Tone.Buffer._downloadQueue.length);
	        }
	        var request = new XMLHttpRequest();
	        request.open('GET', Tone.Buffer.baseUrl + url, true);
	        request.responseType = 'arraybuffer';
	        //start out as 0
	        request.progress = 0;
	        Tone.Buffer._downloadQueue.push(request);
	        request.addEventListener('load', function () {
	            if (request.status === 200) {
	                Tone.context.decodeAudioData(request.response).then(function (buff) {
	                    request.progress = 1;
	                    onProgress();
	                    onload(buff);
	                    Tone.Buffer._removeFromDownloadQueue(request);
	                    if (Tone.Buffer._downloadQueue.length === 0) {
	                        //emit the event at the end
	                        Tone.Buffer.emit('load');
	                    }
	                }).catch(function () {
	                    Tone.Buffer._removeFromDownloadQueue(request);
	                    onError('Tone.Buffer: could not decode audio data: ' + url);
	                });
	            } else {
	                onError('Tone.Buffer: could not locate file: ' + url);
	            }
	        });
	        request.addEventListener('error', onError);
	        request.addEventListener('progress', function (event) {
	            if (event.lengthComputable) {
	                //only go to 95%, the last 5% is when the audio is decoded
	                request.progress = event.loaded / event.total * 0.95;
	                onProgress();
	            }
	        });
	        request.send();
	        return request;
	    };
	    /**
		 *  Stop all of the downloads in progress
		 *  @return {Tone.Buffer}
		 *  @static
		 */
	    Tone.Buffer.cancelDownloads = function () {
	        Tone.Buffer._downloadQueue.slice().forEach(function (request) {
	            Tone.Buffer._removeFromDownloadQueue(request);
	            request.abort();
	        });
	        return Tone.Buffer;
	    };
	    /**
		 *  Checks a url's extension to see if the current browser can play that file type.
		 *  @param {String} url The url/extension to test
		 *  @return {Boolean} If the file extension can be played
		 *  @static
		 *  @example
		 * Tone.Buffer.supportsType("wav"); //returns true
		 * Tone.Buffer.supportsType("path/to/file.wav"); //returns true
		 */
	    Tone.Buffer.supportsType = function (url) {
	        var extension = url.split('.');
	        extension = extension[extension.length - 1];
	        var response = document.createElement('audio').canPlayType('audio/' + extension);
	        return response !== '';
	    };
	    /**
		 *  Returns a Promise which resolves when all of the buffers have loaded
		 *  @return {Promise}
		 */
	    Tone.loaded = function () {
	        var onload, onerror;
	        function removeEvents() {
	            //remove the events when it's resolved
	            Tone.Buffer.off('load', onload);
	            Tone.Buffer.off('error', onerror);
	        }
	        return new Promise(function (success, fail) {
	            onload = function () {
	                success();
	            };
	            onerror = function () {
	                fail();
	            };
	            //add the event listeners
	            Tone.Buffer.on('load', onload);
	            Tone.Buffer.on('error', onerror);
	        }).then(removeEvents).catch(function (e) {
	            removeEvents();
	            throw new Error(e);
	        });
	    };
	    return Tone.Buffer;
	});
	Module(function (Tone) {
	    /**
		 *  @class Wrapper around the native fire-and-forget OscillatorNode. Adds the
		 *     ability to reschedule the stop method.
		 *  @extends {Tone.AudioNode}
		 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
		 *  @param  {Function}  onload  The callback to invoke when the
		 *                               buffer is done playing.
		 */
	    Tone.OscillatorNode = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type'
	        ], Tone.OscillatorNode);
	        Tone.AudioNode.call(this, options);
	        /**
			 *  The callback to invoke after the
			 *  buffer source is done playing.
			 *  @type  {Function}
			 */
	        this.onended = options.onended;
	        /**
			 *  The oscillator start time
			 *  @type  {Number}
			 *  @private
			 */
	        this._startTime = -1;
	        /**
			 *  The oscillator stop time
			 *  @type  {Number}
			 *  @private
			 */
	        this._stopTime = -1;
	        /**
			 *  The gain node which envelopes the OscillatorNode
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._gainNode = this.output = new Tone.Gain();
	        this._gainNode.gain.setValueAtTime(0, this.context.currentTime);
	        /**
			 *  The oscillator
			 *  @type  {OscillatorNode}
			 *  @private
			 */
	        this._oscillator = this.context.createOscillator();
	        this._oscillator.connect(this._gainNode);
	        this.type = options.type;
	        /**
			 *  The frequency of the oscillator
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Param(this._oscillator.frequency, Tone.Type.Frequency);
	        this.frequency.value = options.frequency;
	        /**
			 *  The detune of the oscillator
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.detune = new Tone.Param(this._oscillator.detune, Tone.Type.Cents);
	        this.detune.value = options.detune;
	        /**
			 *  The value that the buffer ramps to
			 *  @type {Gain}
			 *  @private
			 */
	        this._gain = 1;
	    };
	    Tone.extend(Tone.OscillatorNode, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.OscillatorNode.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'type': 'sine',
	        'onended': Tone.noOp
	    };
	    /**
		 *  Returns the playback state of the oscillator, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.OscillatorNode#
		 *  @name state
		 */
	    Object.defineProperty(Tone.OscillatorNode.prototype, 'state', {
	        get: function () {
	            return this.getStateAtTime(this.now());
	        }
	    });
	    /**
		 *  Get the playback state at the given time
		 *  @param  {Time}  time  The time to test the state at
		 *  @return  {Tone.State}  The playback state. 
		 */
	    Tone.OscillatorNode.prototype.getStateAtTime = function (time) {
	        time = this.toSeconds(time);
	        if (this._startTime !== -1 && time >= this._startTime && (this._stopTime === -1 || time <= this._stopTime)) {
	            return Tone.State.Started;
	        } else {
	            return Tone.State.Stopped;
	        }
	    };
	    /**
	     * Start the oscillator node at the given time
	     * @param  {Time=} time When to start the oscillator
	     * @return {OscillatorNode}      this
	     */
	    Tone.OscillatorNode.prototype.start = function (time) {
	        if (this._startTime === -1) {
	            this._startTime = this.toSeconds(time);
	            this._oscillator.start(this._startTime);
	            var now = this.context.currentTime;
	            this._gainNode.gain.cancelScheduledValues(now);
	            this._gainNode.gain.setValueAtTime(0, now);
	            this._gainNode.gain.setValueAtTime(1, this._startTime);
	        } else {
	            throw new Error('cannot call OscillatorNode.start more than once');
	        }
	        return this;
	    };
	    /**
	     * Sets an arbitrary custom periodic waveform given a PeriodicWave.
	     * @param  {PeriodicWave} periodicWave PeriodicWave should be created with context.createPeriodicWave
	     * @return {OscillatorNode} this
	     */
	    Tone.OscillatorNode.prototype.setPeriodicWave = function (periodicWave) {
	        this._oscillator.setPeriodicWave(periodicWave);
	        return this;
	    };
	    /**
	     * Stop the oscillator node at the given time
	     * @param  {Time=} time When to stop the oscillator
	     * @return {OscillatorNode}      this
	     */
	    Tone.OscillatorNode.prototype.stop = function (time) {
	        //cancel the previous stop
	        this.cancelStop();
	        //reschedule it
	        this._stopTime = this.toSeconds(time);
	        this._gainNode.gain.setValueAtTime(0, this._stopTime);
	        this.context.clearTimeout(this._timeout);
	        this._timeout = this.context.setTimeout(function () {
	            this._oscillator.stop(this.now());
	            this.onended();
	        }.bind(this), this._stopTime - this.now());
	        return this;
	    };
	    /**
		 *  Cancel a scheduled stop event
		 *  @return  {Tone.OscillatorNode}  this
		 */
	    Tone.OscillatorNode.prototype.cancelStop = function () {
	        if (this._startTime !== -1) {
	            //cancel the stop envelope
	            this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);
	            this._gainNode.gain.setValueAtTime(1, Math.max(this.now(), this._startTime));
	            this.context.clearTimeout(this._timeout);
	            this._stopTime = -1;
	        }
	        return this;
	    };
	    /**
		 * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'
		 * @memberOf Tone.OscillatorNode#
		 * @type {Time}
		 * @name type
		 */
	    Object.defineProperty(Tone.OscillatorNode.prototype, 'type', {
	        get: function () {
	            return this._oscillator.type;
	        },
	        set: function (type) {
	            this._oscillator.type = type;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.OscillatorNode}  this
		 */
	    Tone.OscillatorNode.prototype.dispose = function () {
	        this.context.clearTimeout(this._timeout);
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.onended = null;
	        this._oscillator.disconnect();
	        this._oscillator = null;
	        this._gainNode.dispose();
	        this._gainNode = null;
	        this.frequency.dispose();
	        this.frequency = null;
	        this.detune.dispose();
	        this.detune = null;
	        return this;
	    };
	    return Tone.OscillatorNode;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Oscillator supports a number of features including
		 *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),
		 *         and Transport syncing (see Tone.Oscillator.syncFrequency).
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {Frequency} [frequency] Starting frequency
		 *  @param {string} [type] The oscillator type. Read more about type below.
		 *  @example
		 * //make and start a 440hz sine tone
		 * var osc = new Tone.Oscillator(440, "sine").toMaster().start();
		 */
	    Tone.Oscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type'
	        ], Tone.Oscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  the main oscillator
			 *  @type {OscillatorNode}
			 *  @private
			 */
	        this._oscillator = null;
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
	        /**
			 *  the periodic wave
			 *  @type {PeriodicWave}
			 *  @private
			 */
	        this._wave = null;
	        /**
			 *  The partials of the oscillator
			 *  @type {Array}
			 *  @private
			 */
	        this._partials = Tone.defaultArg(options.partials, [1]);
	        /**
			 *  the phase of the oscillator
			 *  between 0 - 360
			 *  @type {number}
			 *  @private
			 */
	        this._phase = options.phase;
	        /**
			 *  the type of the oscillator
			 *  @type {string}
			 *  @private
			 */
	        this._type = null;
	        //setup
	        this.type = options.type;
	        this.phase = this._phase;
	        this._readOnly([
	            'frequency',
	            'detune'
	        ]);
	    };
	    Tone.extend(Tone.Oscillator, Tone.Source);
	    /**
		 *  the default parameters
		 *  @type {Object}
		 */
	    Tone.Oscillator.defaults = {
	        'type': 'sine',
	        'frequency': 440,
	        'detune': 0,
	        'phase': 0,
	        'partials': []
	    };
	    /**
		 *  The Oscillator types
		 *  @enum {String}
		 */
	    Tone.Oscillator.Type = {
	        Sine: 'sine',
	        Triangle: 'triangle',
	        Sawtooth: 'sawtooth',
	        Square: 'square',
	        Custom: 'custom'
	    };
	    /**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */
	    Tone.Oscillator.prototype._start = function (time) {
	        //new oscillator with previous values
	        this._oscillator = new Tone.OscillatorNode();
	        if (this._wave) {
	            this._oscillator.setPeriodicWave(this._wave);
	        } else {
	            this._oscillator.type = this._type;
	        }
	        //connect the control signal to the oscillator frequency & detune
	        this._oscillator.connect(this.output);
	        this.frequency.connect(this._oscillator.frequency);
	        this.detune.connect(this._oscillator.detune);
	        //start the oscillator
	        time = this.toSeconds(time);
	        this._oscillator.start(time);
	    };
	    /**
		 *  stop the oscillator
		 *  @private
		 *  @param  {Time} [time=now] (optional) timing parameter
		 *  @returns {Tone.Oscillator} this
		 */
	    Tone.Oscillator.prototype._stop = function (time) {
	        if (this._oscillator) {
	            time = this.toSeconds(time);
	            this._oscillator.stop(time);
	        }
	        return this;
	    };
	    /**
		 * Restart the oscillator. Does not stop the oscillator, but instead
		 * just cancels any scheduled 'stop' from being invoked.
		 * @param  {Time=} time
		 * @return {Tone.Oscillator}      this
		 */
	    Tone.Oscillator.prototype.restart = function (time) {
	        this._oscillator.cancelStop();
	        this._state.cancel(this.toSeconds(time));
	        return this;
	    };
	    /**
		 *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,
		 *  will also affect the oscillators frequency.
		 *  @returns {Tone.Oscillator} this
		 *  @example
		 * Tone.Transport.bpm.value = 120;
		 * osc.frequency.value = 440;
		 * //the ration between the bpm and the frequency will be maintained
		 * osc.syncFrequency();
		 * Tone.Transport.bpm.value = 240;
		 * // the frequency of the oscillator is doubled to 880
		 */
	    Tone.Oscillator.prototype.syncFrequency = function () {
	        Tone.Transport.syncSignal(this.frequency);
	        return this;
	    };
	    /**
		 *  Unsync the oscillator's frequency from the Transport.
		 *  See Tone.Oscillator.syncFrequency
		 *  @returns {Tone.Oscillator} this
		 */
	    Tone.Oscillator.prototype.unsyncFrequency = function () {
	        Tone.Transport.unsyncSignal(this.frequency);
	        return this;
	    };
	    /**
		 * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of
		 * setting the first x number of partials of the oscillator. For example: "sine4" would
		 * set be the first 4 partials of the sine wave and "triangle8" would set the first
		 * 8 partials of the triangle wave.
		 * <br><br>
		 * Uses PeriodicWave internally even for native types so that it can set the phase.
		 * PeriodicWave equations are from the
		 * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).
		 *
		 * @memberOf Tone.Oscillator#
		 * @type {string}
		 * @name type
		 * @example
		 * //set it to a square wave
		 * osc.type = "square";
		 * @example
		 * //set the first 6 partials of a sawtooth wave
		 * osc.type = "sawtooth6";
		 */
	    Object.defineProperty(Tone.Oscillator.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            var isBasicType = [
	                Tone.Oscillator.Type.Sine,
	                Tone.Oscillator.Type.Square,
	                Tone.Oscillator.Type.Triangle,
	                Tone.Oscillator.Type.Sawtooth
	            ].includes(type);
	            if (this._phase === 0 && isBasicType) {
	                this._wave = null;
	                //just go with the basic approach
	                if (this._oscillator !== null) {
	                    this._oscillator.type === type;
	                }
	            } else {
	                var coefs = this._getRealImaginary(type, this._phase);
	                var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);
	                this._wave = periodicWave;
	                if (this._oscillator !== null) {
	                    this._oscillator.setPeriodicWave(this._wave);
	                }
	            }
	            this._type = type;
	        }
	    });
	    /**
		 *  Returns the real and imaginary components based
		 *  on the oscillator type.
		 *  @returns {Array} [real, imaginary]
		 *  @private
		 */
	    Tone.Oscillator.prototype._getRealImaginary = function (type, phase) {
	        var fftSize = 4096;
	        var periodicWaveSize = fftSize / 2;
	        var real = new Float32Array(periodicWaveSize);
	        var imag = new Float32Array(periodicWaveSize);
	        var partialCount = 1;
	        if (type === Tone.Oscillator.Type.Custom) {
	            partialCount = this._partials.length + 1;
	            periodicWaveSize = partialCount;
	        } else {
	            var partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);
	            if (partial) {
	                partialCount = parseInt(partial[2]) + 1;
	                type = partial[1];
	                partialCount = Math.max(partialCount, 2);
	                periodicWaveSize = partialCount;
	            }
	        }
	        for (var n = 1; n < periodicWaveSize; ++n) {
	            var piFactor = 2 / (n * Math.PI);
	            var b;
	            switch (type) {
	            case Tone.Oscillator.Type.Sine:
	                b = n <= partialCount ? 1 : 0;
	                break;
	            case Tone.Oscillator.Type.Square:
	                b = n & 1 ? 2 * piFactor : 0;
	                break;
	            case Tone.Oscillator.Type.Sawtooth:
	                b = piFactor * (n & 1 ? 1 : -1);
	                break;
	            case Tone.Oscillator.Type.Triangle:
	                if (n & 1) {
	                    b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
	                } else {
	                    b = 0;
	                }
	                break;
	            case Tone.Oscillator.Type.Custom:
	                b = this._partials[n - 1];
	                break;
	            default:
	                throw new TypeError('Tone.Oscillator: invalid type: ' + type);
	            }
	            if (b !== 0) {
	                real[n] = -b * Math.sin(phase * n);
	                imag[n] = b * Math.cos(phase * n);
	            } else {
	                real[n] = 0;
	                imag[n] = 0;
	            }
	        }
	        return [
	            real,
	            imag
	        ];
	    };
	    /**
		 *  Compute the inverse FFT for a given phase.
		 *  @param  {Float32Array}  real
		 *  @param  {Float32Array}  imag
		 *  @param  {NormalRange}  phase
		 *  @return  {AudioRange}
		 *  @private
		 */
	    Tone.Oscillator.prototype._inverseFFT = function (real, imag, phase) {
	        var sum = 0;
	        var len = real.length;
	        for (var i = 0; i < len; i++) {
	            sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
	        }
	        return sum;
	    };
	    /**
		 *  Returns the initial value of the oscillator.
		 *  @return  {AudioRange}
		 *  @private
		 */
	    Tone.Oscillator.prototype._getInitialValue = function () {
	        var coefs = this._getRealImaginary(this._type, 0);
	        var real = coefs[0];
	        var imag = coefs[1];
	        var maxValue = 0;
	        var twoPi = Math.PI * 2;
	        //check for peaks in 8 places
	        for (var i = 0; i < 8; i++) {
	            maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);
	        }
	        return -this._inverseFFT(real, imag, this._phase) / maxValue;
	    };
	    /**
		 * The partials of the waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.Oscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */
	    Object.defineProperty(Tone.Oscillator.prototype, 'partials', {
	        get: function () {
	            if (this._type !== Tone.Oscillator.Type.Custom) {
	                return [];
	            } else {
	                return this._partials;
	            }
	        },
	        set: function (partials) {
	            this._partials = partials;
	            this.type = Tone.Oscillator.Type.Custom;
	        }
	    });
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.Oscillator#
		 * @type {Degrees}
		 * @name phase
		 * @example
		 * osc.phase = 180; //flips the phase of the oscillator
		 */
	    Object.defineProperty(Tone.Oscillator.prototype, 'phase', {
	        get: function () {
	            return this._phase * (180 / Math.PI);
	        },
	        set: function (phase) {
	            this._phase = phase * Math.PI / 180;
	            //reset the type
	            this.type = this._type;
	        }
	    });
	    /**
		 *  Dispose and disconnect.
		 *  @return {Tone.Oscillator} this
		 */
	    Tone.Oscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        if (this._oscillator !== null) {
	            this._oscillator.dispose();
	            this._oscillator = null;
	        }
	        this._wave = null;
	        this._writable([
	            'frequency',
	            'detune'
	        ]);
	        this.frequency.dispose();
	        this.frequency = null;
	        this.detune.dispose();
	        this.detune = null;
	        this._partials = null;
	        return this;
	    };
	    return Tone.Oscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. 
		 *         See Tone.GainToAudio.
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @example
		 *  var a2g = new Tone.AudioToGain();
		 */
	    Tone.AudioToGain = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  @type {WaveShaperNode}
			 *  @private
			 */
	        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
	            return (x + 1) / 2;
	        });
	    };
	    Tone.extend(Tone.AudioToGain, Tone.SignalBase);
	    /**
		 *  clean up
		 *  @returns {Tone.AudioToGain} this
		 */
	    Tone.AudioToGain.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._norm.dispose();
	        this._norm = null;
	        return this;
	    };
	    return Tone.AudioToGain;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be
		 *         it's own class is that many browsers optimize out Tone.Signal
		 *         with a value of 0 and will not process nodes further down the graph.
		 *  @extends {Tone.SignalBase}
		 */
	    Tone.Zero = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  The gain node
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._gain = this.input = this.output = new Tone.Gain();
	        this.context.getConstant(0).connect(this._gain);
	    };
	    Tone.extend(Tone.Zero, Tone.SignalBase);
	    /**
		 *  clean up
		 *  @return  {Tone.Zero}  this
		 */
	    Tone.Zero.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._gain.dispose();
	        this._gain = null;
	        return this;
	    };
	    return Tone.Zero;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal
		 *          which can be attached to an AudioParam or Tone.Signal
		 *          in order to modulate that parameter with an oscillator. The LFO can
		 *          also be synced to the transport to start/stop and change when the tempo changes.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be
		 *                               in the frequency range of 0.1 to 10 hertz.
		 *  @param {number=} min The minimum output value of the LFO.
		 *  @param {number=} max The maximum value of the LFO.
		 *  @example
		 * var lfo = new Tone.LFO("4n", 400, 4000);
		 * lfo.connect(filter.frequency);
		 */
	    Tone.LFO = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'min',
	            'max'
	        ], Tone.LFO);
	        Tone.AudioNode.call(this);
	        /**
			 *  The oscillator.
			 *  @type {Tone.Oscillator}
			 *  @private
			 */
	        this._oscillator = new Tone.Oscillator({
	            'frequency': options.frequency,
	            'type': options.type
	        });
	        /**
			 *  the lfo's frequency
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this._oscillator.frequency;
	        /**
			 * The amplitude of the LFO, which controls the output range between
			 * the min and max output. For example if the min is -10 and the max
			 * is 10, setting the amplitude to 0.5 would make the LFO modulate
			 * between -5 and 5.
			 * @type {Number}
			 * @signal
			 */
	        this.amplitude = this._oscillator.volume;
	        this.amplitude.units = Tone.Type.NormalRange;
	        this.amplitude.value = options.amplitude;
	        /**
			 *  The signal which is output when the LFO is stopped
			 *  @type  {Tone.Signal}
			 *  @private
			 */
	        this._stoppedSignal = new Tone.Signal(0, Tone.Type.AudioRange);
	        /**
			 *  Just outputs zeros.
			 *  @type {Tone.Zero}
			 *  @private
			 */
	        this._zeros = new Tone.Zero();
	        /**
			 *  The value that the LFO outputs when it's stopped
			 *  @type {AudioRange}
			 *  @private
			 */
	        this._stoppedValue = 0;
	        /**
			 *  @type {Tone.AudioToGain}
			 *  @private
			 */
	        this._a2g = new Tone.AudioToGain();
	        /**
			 *  @type {Tone.Scale}
			 *  @private
			 */
	        this._scaler = this.output = new Tone.Scale(options.min, options.max);
	        /**
			 *  the units of the LFO (used for converting)
			 *  @type {Tone.Type}
			 *  @private
			 */
	        this._units = Tone.Type.Default;
	        this.units = options.units;
	        //connect it up
	        this._oscillator.chain(this._a2g, this._scaler);
	        this._zeros.connect(this._a2g);
	        this._stoppedSignal.connect(this._a2g);
	        this._readOnly([
	            'amplitude',
	            'frequency'
	        ]);
	        this.phase = options.phase;
	    };
	    Tone.extend(Tone.LFO, Tone.AudioNode);
	    /**
		 *  the default parameters
		 *
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.LFO.defaults = {
	        'type': 'sine',
	        'min': 0,
	        'max': 1,
	        'phase': 0,
	        'frequency': '4n',
	        'amplitude': 1,
	        'units': Tone.Type.Default
	    };
	    /**
		 *  Start the LFO.
		 *  @param  {Time} [time=now] the time the LFO will start
		 *  @returns {Tone.LFO} this
		 */
	    Tone.LFO.prototype.start = function (time) {
	        time = this.toSeconds(time);
	        this._stoppedSignal.setValueAtTime(0, time);
	        this._oscillator.start(time);
	        return this;
	    };
	    /**
		 *  Stop the LFO.
		 *  @param  {Time} [time=now] the time the LFO will stop
		 *  @returns {Tone.LFO} this
		 */
	    Tone.LFO.prototype.stop = function (time) {
	        time = this.toSeconds(time);
	        this._stoppedSignal.setValueAtTime(this._stoppedValue, time);
	        this._oscillator.stop(time);
	        return this;
	    };
	    /**
		 *  Sync the start/stop/pause to the transport
		 *  and the frequency to the bpm of the transport
		 *  @returns {Tone.LFO} this
		 *  @example
		 *  lfo.frequency.value = "8n";
		 *  lfo.sync().start(0)
		 *  //the rate of the LFO will always be an eighth note,
		 *  //even as the tempo changes
		 */
	    Tone.LFO.prototype.sync = function () {
	        this._oscillator.sync();
	        this._oscillator.syncFrequency();
	        return this;
	    };
	    /**
		 *  unsync the LFO from transport control
		 *  @returns {Tone.LFO} this
		 */
	    Tone.LFO.prototype.unsync = function () {
	        this._oscillator.unsync();
	        this._oscillator.unsyncFrequency();
	        return this;
	    };
	    /**
		 * The miniumum output of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {number}
		 * @name min
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'min', {
	        get: function () {
	            return this._toUnits(this._scaler.min);
	        },
	        set: function (min) {
	            min = this._fromUnits(min);
	            this._scaler.min = min;
	        }
	    });
	    /**
		 * The maximum output of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {number}
		 * @name max
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'max', {
	        get: function () {
	            return this._toUnits(this._scaler.max);
	        },
	        set: function (max) {
	            max = this._fromUnits(max);
	            this._scaler.max = max;
	        }
	    });
	    /**
		 * The type of the oscillator: sine, square, sawtooth, triangle.
		 * @memberOf Tone.LFO#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'type', {
	        get: function () {
	            return this._oscillator.type;
	        },
	        set: function (type) {
	            this._oscillator.type = type;
	            this._stoppedValue = this._oscillator._getInitialValue();
	            this._stoppedSignal.value = this._stoppedValue;
	        }
	    });
	    /**
		 * The phase of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {number}
		 * @name phase
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'phase', {
	        get: function () {
	            return this._oscillator.phase;
	        },
	        set: function (phase) {
	            this._oscillator.phase = phase;
	            this._stoppedValue = this._oscillator._getInitialValue();
	            this._stoppedSignal.value = this._stoppedValue;
	        }
	    });
	    /**
		 * The output units of the LFO.
		 * @memberOf Tone.LFO#
		 * @type {Tone.Type}
		 * @name units
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'units', {
	        get: function () {
	            return this._units;
	        },
	        set: function (val) {
	            var currentMin = this.min;
	            var currentMax = this.max;
	            //convert the min and the max
	            this._units = val;
	            this.min = currentMin;
	            this.max = currentMax;
	        }
	    });
	    /**
		 * Mute the output.
		 * @memberOf Tone.LFO#
		 * @type {Boolean}
		 * @name mute
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'mute', {
	        get: function () {
	            return this._oscillator.mute;
	        },
	        set: function (mute) {
	            this._oscillator.mute = mute;
	        }
	    });
	    /**
		 *  Returns the playback state of the source, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.LFO#
		 *  @name state
		 */
	    Object.defineProperty(Tone.LFO.prototype, 'state', {
	        get: function () {
	            return this._oscillator.state;
	        }
	    });
	    /**
		 *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.
		 *  Tone.LFO will automatically convert to the destination units of the
		 *  will get the units from the connected node.
		 *  @param  {Tone | AudioParam | AudioNode} node
		 *  @param {number} [outputNum=0] optionally which output to connect from
		 *  @param {number} [inputNum=0] optionally which input to connect to
		 *  @returns {Tone.LFO} this
		 *  @private
		 */
	    Tone.LFO.prototype.connect = function (node) {
	        if (node.constructor === Tone.Signal || node.constructor === Tone.Param) {
	            this.convert = node.convert;
	            this.units = node.units;
	        }
	        Tone.SignalBase.prototype.connect.apply(this, arguments);
	        return this;
	    };
	    /**
		 *  private method borrowed from Param converts
		 *  units from their destination value
		 *  @function
		 *  @private
		 */
	    Tone.LFO.prototype._fromUnits = Tone.Param.prototype._fromUnits;
	    /**
		 *  private method borrowed from Param converts
		 *  units to their destination value
		 *  @function
		 *  @private
		 */
	    Tone.LFO.prototype._toUnits = Tone.Param.prototype._toUnits;
	    /**
		 *  disconnect and dispose
		 *  @returns {Tone.LFO} this
		 */
	    Tone.LFO.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'amplitude',
	            'frequency'
	        ]);
	        this._oscillator.dispose();
	        this._oscillator = null;
	        this._stoppedSignal.dispose();
	        this._stoppedSignal = null;
	        this._zeros.dispose();
	        this._zeros = null;
	        this._scaler.dispose();
	        this._scaler = null;
	        this._a2g.dispose();
	        this._a2g = null;
	        this.frequency = null;
	        this.amplitude = null;
	        return this;
	    };
	    return Tone.LFO;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Limiter will limit the loudness of an incoming signal.
		 *         It is composed of a Tone.Compressor with a fast attack
		 *         and release. Limiters are commonly used to safeguard against
		 *         signal clipping. Unlike a compressor, limiters do not provide
		 *         smooth gain reduction and almost completely prevent
		 *         additional gain above the threshold.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {number} threshold The theshold above which the limiting is applied.
		 *  @example
		 *  var limiter = new Tone.Limiter(-6);
		 */
	    Tone.Limiter = function () {
	        var options = Tone.defaults(arguments, ['threshold'], Tone.Limiter);
	        Tone.AudioNode.call(this);
	        /**
			 *  the compressor
			 *  @private
			 *  @type {Tone.Compressor}
			 */
	        this._compressor = this.input = this.output = new Tone.Compressor({
	            'attack': 0.001,
	            'decay': 0.001,
	            'threshold': options.threshold
	        });
	        /**
			 * The threshold of of the limiter
			 * @type {Decibel}
			 * @signal
			 */
	        this.threshold = this._compressor.threshold;
	        this._readOnly('threshold');
	    };
	    Tone.extend(Tone.Limiter, Tone.AudioNode);
	    /**
		 *  The default value
		 *  @type {Object}
		 *  @const
		 *  @static
		 */
	    Tone.Limiter.defaults = { 'threshold': -12 };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Limiter} this
		 */
	    Tone.Limiter.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._compressor.dispose();
	        this._compressor = null;
	        this._writable('threshold');
	        this.threshold = null;
	        return this;
	    };
	    return Tone.Limiter;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to
		 *         Tone.FeedbackCombFilter, but includes a lowpass filter.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Time|Object} [delayTime] The delay time of the comb filter
		 *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter
		 *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the
		 *                                signal as it is fedback.
		 */
	    Tone.LowpassCombFilter = function () {
	        var options = Tone.defaults(arguments, [
	            'delayTime',
	            'resonance',
	            'dampening'
	        ], Tone.LowpassCombFilter);
	        Tone.AudioNode.call(this);
	        this.createInsOuts(1, 1);
	        /**
			 *  the delay node
			 *  @type {DelayNode}
			 *  @private
			 */
	        this._delay = this.input = new Tone.Delay(options.delayTime);
	        /**
			 *  The delayTime of the comb filter.
			 *  @type {Time}
			 *  @signal
			 */
	        this.delayTime = this._delay.delayTime;
	        /**
			 *  the lowpass filter
			 *  @type  {BiquadFilterNode}
			 *  @private
			 */
	        this._lowpass = this.output = this.context.createBiquadFilter();
	        this._lowpass.Q.value = -3.0102999566398125;
	        this._lowpass.type = 'lowpass';
	        /**
			 *  The dampening control of the feedback
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.dampening = new Tone.Param({
	            'param': this._lowpass.frequency,
	            'units': Tone.Type.Frequency,
	            'value': options.dampening
	        });
	        /**
			 *  the feedback gain
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._feedback = new Tone.Gain(options.resonance, Tone.Type.NormalRange);
	        /**
			 *  The amount of feedback of the delayed signal.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.resonance = this._feedback.gain;
	        //connections
	        this._delay.chain(this._lowpass, this._feedback, this._delay);
	        this._readOnly([
	            'dampening',
	            'resonance',
	            'delayTime'
	        ]);
	    };
	    Tone.extend(Tone.LowpassCombFilter, Tone.AudioNode);
	    /**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.LowpassCombFilter.defaults = {
	        'delayTime': 0.1,
	        'resonance': 0.5,
	        'dampening': 3000
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.LowpassCombFilter} this
		 */
	    Tone.LowpassCombFilter.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'dampening',
	            'resonance',
	            'delayTime'
	        ]);
	        this.dampening.dispose();
	        this.dampening = null;
	        this.resonance.dispose();
	        this.resonance = null;
	        this._delay.dispose();
	        this._delay = null;
	        this.delayTime = null;
	        this._lowpass.disconnect();
	        this._lowpass = null;
	        this._feedback.disconnect();
	        this._feedback = null;
	        return this;
	    };
	    return Tone.LowpassCombFilter;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Merge brings two signals into the left and right
		 *          channels of a single stereo channel.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * var merge = new Tone.Merge().toMaster();
		 * //routing a sine tone in the left channel
		 * //and noise in the right channel
		 * var osc = new Tone.Oscillator().connect(merge.left);
		 * var noise = new Tone.Noise().connect(merge.right);
		 * //starting our oscillators
		 * noise.start();
		 * osc.start();
		 */
	    Tone.Merge = function () {
	        Tone.AudioNode.call(this);
	        this.createInsOuts(2, 0);
	        /**
			 *  The left input channel.
			 *  Alias for <code>input[0]</code>
			 *  @type {GainNode}
			 */
	        this.left = this.input[0] = new Tone.Gain();
	        /**
			 *  The right input channel.
			 *  Alias for <code>input[1]</code>.
			 *  @type {GainNode}
			 */
	        this.right = this.input[1] = new Tone.Gain();
	        /**
			 *  the merger node for the two channels
			 *  @type {ChannelMergerNode}
			 *  @private
			 */
	        this._merger = this.output = this.context.createChannelMerger(2);
	        //connections
	        this.left.connect(this._merger, 0, 0);
	        this.right.connect(this._merger, 0, 1);
	        this.left.channelCount = 1;
	        this.right.channelCount = 1;
	        this.left.channelCountMode = 'explicit';
	        this.right.channelCountMode = 'explicit';
	    };
	    Tone.extend(Tone.Merge, Tone.AudioNode);
	    /**
		 *  Clean up.
		 *  @returns {Tone.Merge} this
		 */
	    Tone.Merge.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.left.dispose();
	        this.left = null;
	        this.right.dispose();
	        this.right = null;
	        this._merger.disconnect();
	        this._merger = null;
	        return this;
	    };
	    return Tone.Merge;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
		 *          of an input signal with some averaging applied. It can also get the raw
		 *          value of the input signal.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Number} smoothing The amount of smoothing applied between frames.
		 *  @example
		 * var meter = new Tone.Meter();
		 * var mic = new Tone.UserMedia().open();
		 * //connect mic to the meter
		 * mic.connect(meter);
		 * //the current level of the mic input in decibels
		 * var level = meter.getValue();
		 */
	    Tone.Meter = function () {
	        var options = Tone.defaults(arguments, ['smoothing'], Tone.Meter);
	        Tone.AudioNode.call(this);
	        /**
			 *  The analyser node which computes the levels.
			 *  @private
			 *  @type  {Tone.Analyser}
			 */
	        this.input = this.output = this._analyser = new Tone.Analyser('waveform', 1024);
	        /**
			 *  The amount of carryover between the current and last frame.
			 *  Only applied meter for "level" type.
			 *  @type  {Number}
			 */
	        this.smoothing = options.smoothing;
	    };
	    Tone.extend(Tone.Meter, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @type {Object}
		 *  @static
		 *  @const
		 */
	    Tone.Meter.defaults = { 'smoothing': 0.8 };
	    /**
		 *  Get the current decibel value of the incoming signal
		 *  @returns {Decibels}
		 */
	    Tone.Meter.prototype.getLevel = function () {
	        this._analyser.type = 'fft';
	        var values = this._analyser.getValue();
	        var offset = 28;
	        // normalizes most signal levels
	        // TODO: compute loudness from FFT
	        return Math.max.apply(this, values) + offset;
	    };
	    /**
		 *  Get the signal value of the incoming signal
		 *  @returns {Number}
		 */
	    Tone.Meter.prototype.getValue = function () {
	        this._analyser.type = 'waveform';
	        var value = this._analyser.getValue();
	        return value[0];
	    };
	    /**
		 * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.
		 * @memberOf Tone.Meter#
		 * @type {Number}
		 * @name smoothing
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Meter.prototype, 'smoothing', {
	        get: function () {
	            return this._analyser.smoothing;
	        },
	        set: function (val) {
	            this._analyser.smoothing = val;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.Meter} this
		 */
	    Tone.Meter.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._analyser.dispose();
	        this._analyser = null;
	        return this;
	    };
	    return Tone.Meter;
	});
	Module(function (Tone) {
	    
	    /**
		 *	@class  Tone.Split splits an incoming signal into left and right channels.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * var split = new Tone.Split();
		 * stereoSignal.connect(split);
		 */
	    Tone.Split = function () {
	        Tone.AudioNode.call(this);
	        this.createInsOuts(0, 2);
	        /**
			 *  @type {ChannelSplitterNode}
			 *  @private
			 */
	        this._splitter = this.input = this.context.createChannelSplitter(2);
	        this._splitter.channelCount = 2;
	        this._splitter.channelCountMode = 'explicit';
	        /**
			 *  Left channel output.
			 *  Alias for <code>output[0]</code>
			 *  @type {Tone.Gain}
			 */
	        this.left = this.output[0] = new Tone.Gain();
	        /**
			 *  Right channel output.
			 *  Alias for <code>output[1]</code>
			 *  @type {Tone.Gain}
			 */
	        this.right = this.output[1] = new Tone.Gain();
	        //connections
	        this._splitter.connect(this.left, 0, 0);
	        this._splitter.connect(this.right, 1, 0);
	    };
	    Tone.extend(Tone.Split, Tone.AudioNode);
	    /**
		 *  Clean up.
		 *  @returns {Tone.Split} this
		 */
	    Tone.Split.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._splitter.disconnect();
	        this.left.dispose();
	        this.left = null;
	        this.right.dispose();
	        this.right = null;
	        this._splitter = null;
	        return this;
	    };
	    return Tone.Split;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Mid/Side processing separates the the 'mid' signal
		 *         (which comes out of both the left and the right channel)
		 *         and the 'side' (which only comes out of the the side channels). <br><br>
		 *         <code>
		 *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>
		 *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>
		 *         </code>
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 */
	    Tone.MidSideSplit = function () {
	        Tone.AudioNode.call(this);
	        this.createInsOuts(0, 2);
	        /**
			 *  split the incoming signal into left and right channels
			 *  @type  {Tone.Split}
			 *  @private
			 */
	        this._split = this.input = new Tone.Split();
	        /**
			 *  The mid send. Connect to mid processing. Alias for
			 *  <code>output[0]</code>
			 *  @type {Tone.Add}
			 */
	        this._midAdd = new Tone.Add();
	        /**
			 * Multiply the _midAdd by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */
	        this.mid = this.output[0] = new Tone.Multiply(Math.SQRT1_2);
	        /**
			 *  The side output. Connect to side processing. Also Output 1
			 *  @type {Tone.Subtract}
			 */
	        this._sideSubtract = new Tone.Subtract();
	        /**
			 * Multiply the _midAdd by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */
	        this.side = this.output[1] = new Tone.Multiply(Math.SQRT1_2);
	        this._split.connect(this._midAdd, 0, 0);
	        this._split.connect(this._midAdd, 1, 1);
	        this._split.connect(this._sideSubtract, 0, 0);
	        this._split.connect(this._sideSubtract, 1, 1);
	        this._midAdd.connect(this.mid);
	        this._sideSubtract.connect(this.side);
	    };
	    Tone.extend(Tone.MidSideSplit, Tone.AudioNode);
	    /**
		 *  clean up
		 *  @returns {Tone.MidSideSplit} this
		 */
	    Tone.MidSideSplit.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.mid.dispose();
	        this.mid = null;
	        this.side.dispose();
	        this.side = null;
	        this._midAdd.dispose();
	        this._midAdd = null;
	        this._sideSubtract.dispose();
	        this._sideSubtract = null;
	        this._split.dispose();
	        this._split = null;
	        return this;
	    };
	    return Tone.MidSideSplit;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Mid/Side processing separates the the 'mid' signal
		 *         (which comes out of both the left and the right channel)
		 *         and the 'side' (which only comes out of the the side channels).
		 *         MidSideMerge merges the mid and side signal after they've been seperated
		 *         by Tone.MidSideSplit.<br><br>
		 *         <code>
		 *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>
		 *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>
		 *         </code>
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 */
	    Tone.MidSideMerge = function () {
	        Tone.AudioNode.call(this);
	        this.createInsOuts(2, 0);
	        /**
			 *  The mid signal input. Alias for
			 *  <code>input[0]</code>
			 *  @type  {Tone.Gain}
			 */
	        this.mid = this.input[0] = new Tone.Gain();
	        /**
			 *  recombine the mid/side into Left
			 *  @type {Tone.Add}
			 *  @private
			 */
	        this._left = new Tone.Add();
	        /**
			 * Multiply the left by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */
	        this._timesTwoLeft = new Tone.Multiply(Math.SQRT1_2);
	        /**
			 *  The side signal input. Alias for
			 *  <code>input[1]</code>
			 *  @type  {Tone.Gain}
			 */
	        this.side = this.input[1] = new Tone.Gain();
	        /**
			 *  recombine the mid/side into Right
			 *  @type {Tone.Subtract}
			 *  @private
			 */
	        this._right = new Tone.Subtract();
	        /**
			 * Multiply the right by sqrt(1/2)
			 * @type {Tone.Multiply}
			 */
	        this._timesTwoRight = new Tone.Multiply(Math.SQRT1_2);
	        /**
			 *  Merge the left/right signal back into a stereo signal.
			 *  @type {Tone.Merge}
			 *  @private
			 */
	        this._merge = this.output = new Tone.Merge();
	        this.mid.connect(this._left, 0, 0);
	        this.side.connect(this._left, 0, 1);
	        this.mid.connect(this._right, 0, 0);
	        this.side.connect(this._right, 0, 1);
	        this._left.connect(this._timesTwoLeft);
	        this._right.connect(this._timesTwoRight);
	        this._timesTwoLeft.connect(this._merge, 0, 0);
	        this._timesTwoRight.connect(this._merge, 0, 1);
	    };
	    Tone.extend(Tone.MidSideMerge, Tone.AudioNode);
	    /**
		 *  clean up
		 *  @returns {Tone.MidSideMerge} this
		 */
	    Tone.MidSideMerge.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.mid.dispose();
	        this.mid = null;
	        this.side.dispose();
	        this.side = null;
	        this._left.dispose();
	        this._left = null;
	        this._timesTwoLeft.dispose();
	        this._timesTwoLeft = null;
	        this._right.dispose();
	        this._right = null;
	        this._timesTwoRight.dispose();
	        this._timesTwoRight = null;
	        this._merge.dispose();
	        this._merge = null;
	        return this;
	    };
	    return Tone.MidSideMerge;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.MidSideCompressor applies two different compressors to the mid
		 *         and side signal components. See Tone.MidSideSplit.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @param {Object} options The options that are passed to the mid and side
		 *                          compressors.
		 *  @constructor
		 */
	    Tone.MidSideCompressor = function (options) {
	        Tone.AudioNode.call(this);
	        options = Tone.defaultArg(options, Tone.MidSideCompressor.defaults);
	        /**
			 *  the mid/side split
			 *  @type  {Tone.MidSideSplit}
			 *  @private
			 */
	        this._midSideSplit = this.input = new Tone.MidSideSplit();
	        /**
			 *  the mid/side recombination
			 *  @type  {Tone.MidSideMerge}
			 *  @private
			 */
	        this._midSideMerge = this.output = new Tone.MidSideMerge();
	        /**
			 *  The compressor applied to the mid signal
			 *  @type  {Tone.Compressor}
			 */
	        this.mid = new Tone.Compressor(options.mid);
	        /**
			 *  The compressor applied to the side signal
			 *  @type  {Tone.Compressor}
			 */
	        this.side = new Tone.Compressor(options.side);
	        this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);
	        this._midSideSplit.side.chain(this.side, this._midSideMerge.side);
	        this._readOnly([
	            'mid',
	            'side'
	        ]);
	    };
	    Tone.extend(Tone.MidSideCompressor, Tone.AudioNode);
	    /**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.MidSideCompressor.defaults = {
	        'mid': {
	            'ratio': 3,
	            'threshold': -24,
	            'release': 0.03,
	            'attack': 0.02,
	            'knee': 16
	        },
	        'side': {
	            'ratio': 6,
	            'threshold': -30,
	            'release': 0.25,
	            'attack': 0.03,
	            'knee': 10
	        }
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.MidSideCompressor} this
		 */
	    Tone.MidSideCompressor.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'mid',
	            'side'
	        ]);
	        this.mid.dispose();
	        this.mid = null;
	        this.side.dispose();
	        this.side = null;
	        this._midSideSplit.dispose();
	        this._midSideSplit = null;
	        this._midSideMerge.dispose();
	        this._midSideMerge = null;
	        return this;
	    };
	    return Tone.MidSideCompressor;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal
		 *         where both left and right channels have the same value. This can be useful
		 *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 */
	    Tone.Mono = function () {
	        Tone.AudioNode.call(this);
	        this.createInsOuts(1, 0);
	        /**
			 *  merge the signal
			 *  @type {Tone.Merge}
			 *  @private
			 */
	        this._merge = this.output = new Tone.Merge();
	        this.input.connect(this._merge, 0, 0);
	        this.input.connect(this._merge, 0, 1);
	    };
	    Tone.extend(Tone.Mono, Tone.AudioNode);
	    /**
		 *  clean up
		 *  @returns {Tone.Mono} this
		 */
	    Tone.Mono.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._merge.dispose();
	        this._merge = null;
	        return this;
	    };
	    return Tone.Mono;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class A compressor with seperate controls over low/mid/high dynamics
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {Object} options The low/mid/high compressor settings.
		 *  @example
		 *  var multiband = new Tone.MultibandCompressor({
		 *  	"lowFrequency" : 200,
		 *  	"highFrequency" : 1300
		 *  	"low" : {
		 *  		"threshold" : -12
		 *  	}
		 *  })
		 */
	    Tone.MultibandCompressor = function (options) {
	        Tone.AudioNode.call(this);
	        options = Tone.defaultArg(arguments, Tone.MultibandCompressor.defaults);
	        /**
			 *  split the incoming signal into high/mid/low
			 *  @type {Tone.MultibandSplit}
			 *  @private
			 */
	        this._splitter = this.input = new Tone.MultibandSplit({
	            'lowFrequency': options.lowFrequency,
	            'highFrequency': options.highFrequency
	        });
	        /**
			 *  low/mid crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.lowFrequency = this._splitter.lowFrequency;
	        /**
			 *  mid/high crossover frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.highFrequency = this._splitter.highFrequency;
	        /**
			 *  the output
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this.output = new Tone.Gain();
	        /**
			 *  The compressor applied to the low frequencies.
			 *  @type {Tone.Compressor}
			 */
	        this.low = new Tone.Compressor(options.low);
	        /**
			 *  The compressor applied to the mid frequencies.
			 *  @type {Tone.Compressor}
			 */
	        this.mid = new Tone.Compressor(options.mid);
	        /**
			 *  The compressor applied to the high frequencies.
			 *  @type {Tone.Compressor}
			 */
	        this.high = new Tone.Compressor(options.high);
	        //connect the compressor
	        this._splitter.low.chain(this.low, this.output);
	        this._splitter.mid.chain(this.mid, this.output);
	        this._splitter.high.chain(this.high, this.output);
	        this._readOnly([
	            'high',
	            'mid',
	            'low',
	            'highFrequency',
	            'lowFrequency'
	        ]);
	    };
	    Tone.extend(Tone.MultibandCompressor, Tone.AudioNode);
	    /**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.MultibandCompressor.defaults = {
	        'low': Tone.Compressor.defaults,
	        'mid': Tone.Compressor.defaults,
	        'high': Tone.Compressor.defaults,
	        'lowFrequency': 250,
	        'highFrequency': 2000
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.MultibandCompressor} this
		 */
	    Tone.MultibandCompressor.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._splitter.dispose();
	        this._writable([
	            'high',
	            'mid',
	            'low',
	            'highFrequency',
	            'lowFrequency'
	        ]);
	        this.low.dispose();
	        this.mid.dispose();
	        this.high.dispose();
	        this._splitter = null;
	        this.low = null;
	        this.mid = null;
	        this.high = null;
	        this.lowFrequency = null;
	        this.highFrequency = null;
	        return this;
	    };
	    return Tone.MultibandCompressor;
	});
	Module(function (Tone) {
	    if (Tone.supported && !window.StereoPannerNode) {
	        /**
			 * @class Shimmed StereoPannerNode
			 * @param  {AudioContext} context
			 * @private
			 */
	        var StereoPannerNode = function (context) {
	            /**
				 * The audio context
				 * @type {AudioContext}
				 */
	            this.context = context;
	            /**
				 * The left/right panning. [-1, 1]
				 * @type {AudioRange}
				 * @signal
				 */
	            this.pan = new Tone.Signal(0, Tone.Type.AudioRange);
	            /**
				 * Equal power scaling of the right gain
				 * @type {Tone.WaveShaper}
				 */
	            var rightWaveShaper = new Tone.WaveShaper(function (val) {
	                return Tone.equalPowerScale((val + 1) / 2);
	            }, 4096);
	            /**
				 * Equal power scaling of the left gain
				 * @type {Tone.WaveShaper}
				 * @private
				 */
	            var leftWaveShaper = new Tone.WaveShaper(function (val) {
	                return Tone.equalPowerScale(1 - (val + 1) / 2);
	            }, 4096);
	            /**
				 * The left gain value
				 * @type {Tone.Gain}
				 * @private
				 */
	            var leftGain = new Tone.Gain();
	            /**
				 * The right gain value
				 * @type {Tone.Gain}
				 * @private
				 */
	            var rightGain = new Tone.Gain();
	            /**
				 * Split the incoming signal
				 * @type {Tone.Split}
				 * @private
				 */
	            var split = this.input = new Tone.Split();
	            /**
				 * Keeps the waveshapers from optimizing 0s
				 * @type {Tone.Zero}
				 * @private
				 */
	            var zero = new Tone.Zero();
	            zero.fan(rightWaveShaper, leftWaveShaper);
	            /**
				 * Merge the outgoing signal
				 * @type {Tone.Merge}
				 * @private
				 */
	            var merge = this.output = new Tone.Merge();
	            //connections
	            split.left.chain(leftGain, merge.left);
	            split.right.chain(rightGain, merge.right);
	            this.pan.chain(leftWaveShaper, leftGain.gain);
	            this.pan.chain(rightWaveShaper, rightGain.gain);
	        };
	        StereoPannerNode.prototype.disconnect = function () {
	            this.output.disconnect.apply(this.output, arguments);
	        };
	        StereoPannerNode.prototype.connect = function () {
	            this.output.connect.apply(this.output, arguments);
	        };
	        //add it to the AudioContext
	        AudioContext.prototype.createStereoPanner = function () {
	            return new StereoPannerNode(this);
	        };
	        Tone.Context.prototype.createStereoPanner = function () {
	            return new StereoPannerNode(this);
	        };
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Panner is an equal power Left/Right Panner and does not
		 *          support 3D. Panner uses the StereoPannerNode when available.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {NormalRange} [initialPan=0] The initail panner value (center).
		 *  @example
		 *  //pan the input signal hard right.
		 *  var panner = new Tone.Panner(1);
		 */
	    Tone.Panner = function (initialPan) {
	        Tone.AudioNode.call(this);
	        /**
			*  the panner node
			*  @type {StereoPannerNode}
			*  @private
			*/
	        this._panner = this.input = this.output = this.context.createStereoPanner();
	        /**
			*  The pan control. -1 = hard left, 1 = hard right.
			*  @type {AudioRange}
			*  @signal
			*/
	        this.pan = this._panner.pan;
	        //initial value
	        this.pan.value = Tone.defaultArg(initialPan, 0);
	        this._readOnly('pan');
	    };
	    Tone.extend(Tone.Panner, Tone.AudioNode);
	    /**
		 *  Clean up.
		 *  @returns {Tone.Panner} this
		 */
	    Tone.Panner.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable('pan');
	        this._panner.disconnect();
	        this._panner = null;
	        this.pan = null;
	        return this;
	    };
	    return Tone.Panner;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  A spatialized panner node which supports equalpower or HRTF panning.
		 *          Tries to normalize the API across various browsers. See Tone.Listener
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Number} positionX The initial x position.
		 *  @param {Number} positionY The initial y position.
		 *  @param {Number} positionZ The initial z position.
		 */
	    Tone.Panner3D = function () {
	        var options = Tone.defaults(arguments, [
	            'positionX',
	            'positionY',
	            'positionZ'
	        ], Tone.Panner3D);
	        Tone.AudioNode.call(this);
	        /**
			 *  The panner node
			 *  @type {PannerNode}
			 *  @private
			 */
	        this._panner = this.input = this.output = this.context.createPanner();
	        //set some values
	        this._panner.panningModel = options.panningModel;
	        this._panner.maxDistance = options.maxDistance;
	        this._panner.distanceModel = options.distanceModel;
	        this._panner.coneOuterGain = options.coneOuterGain;
	        this._panner.coneOuterAngle = options.coneOuterAngle;
	        this._panner.coneInnerAngle = options.coneInnerAngle;
	        this._panner.refDistance = options.refDistance;
	        this._panner.rolloffFactor = options.rolloffFactor;
	        /**
			 *  Holds the current orientation
			 *  @type  {Array}
			 *  @private
			 */
	        this._orientation = [
	            options.orientationX,
	            options.orientationY,
	            options.orientationZ
	        ];
	        /**
			 *  Holds the current position
			 *  @type  {Array}
			 *  @private
			 */
	        this._position = [
	            options.positionX,
	            options.positionY,
	            options.positionZ
	        ];
	        // set the default position/orientation
	        this.orientationX = options.orientationX;
	        this.orientationY = options.orientationY;
	        this.orientationZ = options.orientationZ;
	        this.positionX = options.positionX;
	        this.positionY = options.positionY;
	        this.positionZ = options.positionZ;
	    };
	    Tone.extend(Tone.Panner3D, Tone.AudioNode);
	    /**
		 *  Defaults according to the specification
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Panner3D.defaults = {
	        'positionX': 0,
	        'positionY': 0,
	        'positionZ': 0,
	        'orientationX': 0,
	        'orientationY': 0,
	        'orientationZ': 0,
	        'panningModel': 'equalpower',
	        'maxDistance': 10000,
	        'distanceModel': 'inverse',
	        'coneOuterGain': 0,
	        'coneOuterAngle': 360,
	        'coneInnerAngle': 360,
	        'refDistance': 1,
	        'rolloffFactor': 1
	    };
	    /**
		 * The ramp time which is applied to the setTargetAtTime
		 * @type {Number}
		 * @private
		 */
	    Tone.Panner3D.prototype._rampTimeConstant = 0.01;
	    /**
		 *  Sets the position of the source in 3d space.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @return {Tone.Panner3D} this
		 */
	    Tone.Panner3D.prototype.setPosition = function (x, y, z) {
	        if (this._panner.positionX) {
	            var now = this.now();
	            this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
	            this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
	            this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
	        } else {
	            this._panner.setPosition(x, y, z);
	        }
	        this._position = Array.prototype.slice.call(arguments);
	        return this;
	    };
	    /**
		 *  Sets the orientation of the source in 3d space.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @return {Tone.Panner3D} this
		 */
	    Tone.Panner3D.prototype.setOrientation = function (x, y, z) {
	        if (this._panner.orientationX) {
	            var now = this.now();
	            this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);
	            this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);
	            this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);
	        } else {
	            this._panner.setOrientation(x, y, z);
	        }
	        this._orientation = Array.prototype.slice.call(arguments);
	        return this;
	    };
	    /**
		 *  The x position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name positionX
		 */
	    Object.defineProperty(Tone.Panner3D.prototype, 'positionX', {
	        set: function (pos) {
	            this._position[0] = pos;
	            this.setPosition.apply(this, this._position);
	        },
	        get: function () {
	            return this._position[0];
	        }
	    });
	    /**
		 *  The y position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name positionY
		 */
	    Object.defineProperty(Tone.Panner3D.prototype, 'positionY', {
	        set: function (pos) {
	            this._position[1] = pos;
	            this.setPosition.apply(this, this._position);
	        },
	        get: function () {
	            return this._position[1];
	        }
	    });
	    /**
		 *  The z position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name positionZ
		 */
	    Object.defineProperty(Tone.Panner3D.prototype, 'positionZ', {
	        set: function (pos) {
	            this._position[2] = pos;
	            this.setPosition.apply(this, this._position);
	        },
	        get: function () {
	            return this._position[2];
	        }
	    });
	    /**
		 *  The x orientation of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name orientationX
		 */
	    Object.defineProperty(Tone.Panner3D.prototype, 'orientationX', {
	        set: function (pos) {
	            this._orientation[0] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[0];
	        }
	    });
	    /**
		 *  The y orientation of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name orientationY
		 */
	    Object.defineProperty(Tone.Panner3D.prototype, 'orientationY', {
	        set: function (pos) {
	            this._orientation[1] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[1];
	        }
	    });
	    /**
		 *  The z orientation of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name orientationZ
		 */
	    Object.defineProperty(Tone.Panner3D.prototype, 'orientationZ', {
	        set: function (pos) {
	            this._orientation[2] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[2];
	        }
	    });
	    /**
		 *  Proxy a property on the panner to an exposed public propery
		 *  @param  {String}  prop
		 *  @private
		 */
	    Tone.Panner3D._aliasProperty = function (prop) {
	        Object.defineProperty(Tone.Panner3D.prototype, prop, {
	            set: function (val) {
	                this._panner[prop] = val;
	            },
	            get: function () {
	                return this._panner[prop];
	            }
	        });
	    };
	    /**
		 *  The panning model. Either "equalpower" or "HRTF".
		 *  @type {String}
		 *  @memberOf Tone.Panner3D#
		 *  @name panningModel
		 */
	    Tone.Panner3D._aliasProperty('panningModel');
	    /**
		 *  A reference distance for reducing volume as source move further from the listener
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name refDistance
		 */
	    Tone.Panner3D._aliasProperty('refDistance');
	    /**
		 *  Describes how quickly the volume is reduced as source moves away from listener.
		 *  @type {Number}
		 *  @memberOf Tone.Panner3D#
		 *  @name rolloffFactor
		 */
	    Tone.Panner3D._aliasProperty('rolloffFactor');
	    /**
		 *  The distance model used by,  "linear", "inverse", or "exponential".
		 *  @type {String}
		 *  @memberOf Tone.Panner3D#
		 *  @name distanceModel
		 */
	    Tone.Panner3D._aliasProperty('distanceModel');
	    /**
		 *  The angle, in degrees, inside of which there will be no volume reduction
		 *  @type {Degrees}
		 *  @memberOf Tone.Panner3D#
		 *  @name coneInnerAngle
		 */
	    Tone.Panner3D._aliasProperty('coneInnerAngle');
	    /**
		 *  The angle, in degrees, outside of which the volume will be reduced
		 *  to a constant value of coneOuterGain
		 *  @type {Degrees}
		 *  @memberOf Tone.Panner3D#
		 *  @name coneOuterAngle
		 */
	    Tone.Panner3D._aliasProperty('coneOuterAngle');
	    /**
		 *  The gain outside of the coneOuterAngle
		 *  @type {Gain}
		 *  @memberOf Tone.Panner3D#
		 *  @name coneOuterGain
		 */
	    Tone.Panner3D._aliasProperty('coneOuterGain');
	    /**
		 *  The maximum distance between source and listener,
		 *  after which the volume will not be reduced any further.
		 *  @type {Positive}
		 *  @memberOf Tone.Panner3D#
		 *  @name maxDistance
		 */
	    Tone.Panner3D._aliasProperty('maxDistance');
	    /**
		 *  Clean up.
		 *  @returns {Tone.Panner3D} this
		 */
	    Tone.Panner3D.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._panner.disconnect();
	        this._panner = null;
	        this._orientation = null;
	        this._position = null;
	        return this;
	    };
	    return Tone.Panner3D;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.
		 *
		 *  @extends {Tone.AudioNode}
		 *  @constructor
		 *  @param {AudioRange} pan the initial pan
		 *  @param {number} volume The output volume.
		 *  @example
		 * //pan the incoming signal left and drop the volume
		 * var panVol = new Tone.PanVol(-0.25, -12);
		 */
	    Tone.PanVol = function () {
	        var options = Tone.defaults(arguments, [
	            'pan',
	            'volume'
	        ], Tone.PanVol);
	        Tone.AudioNode.call(this);
	        /**
			 *  The panning node
			 *  @type {Tone.Panner}
			 *  @private
			 */
	        this._panner = this.input = new Tone.Panner(options.pan);
	        /**
			 *  The L/R panning control.
			 *  @type {AudioRange}
			 *  @signal
			 */
	        this.pan = this._panner.pan;
	        /**
			 *  The volume node
			 *  @type {Tone.Volume}
			 *  @private
			 */
	        this._volume = this.output = new Tone.Volume(options.volume);
	        /**
			 *  The volume control in decibels.
			 *  @type {Decibels}
			 *  @signal
			 */
	        this.volume = this._volume.volume;
	        //connections
	        this._panner.connect(this._volume);
	        this.mute = options.mute;
	        this._readOnly([
	            'pan',
	            'volume'
	        ]);
	    };
	    Tone.extend(Tone.PanVol, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @type  {Object}
		 *  @const
		 *  @static
		 */
	    Tone.PanVol.defaults = {
	        'pan': 0,
	        'volume': 0,
	        'mute': false
	    };
	    /**
		 * Mute/unmute the volume
		 * @memberOf Tone.PanVol#
		 * @name mute
		 * @type {Boolean}
		 */
	    Object.defineProperty(Tone.PanVol.prototype, 'mute', {
	        get: function () {
	            return this._volume.mute;
	        },
	        set: function (mute) {
	            this._volume.mute = mute;
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.PanVol} this
		 */
	    Tone.PanVol.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._writable([
	            'pan',
	            'volume'
	        ]);
	        this._panner.dispose();
	        this._panner = null;
	        this.pan = null;
	        this._volume.dispose();
	        this._volume = null;
	        this.volume = null;
	        return this;
	    };
	    return Tone.PanVol;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Solo lets you isolate a specific audio stream. When
		 *         an instance is set to `solo=true`, it will mute all other instances.
		 *  @extends {Tone.AudioNode}
		 *  @example
		 * var soloA = new Tone.Solo()
		 * var soloB = new Tone.Solo()
		 * soloA.solo = true
		 * //no audio will pass through soloB
		 */
	    Tone.Solo = function () {
	        var options = Tone.defaults(arguments, ['solo'], Tone.Solo);
	        Tone.AudioNode.call(this);
	        /**
			 *  The input and output node
			 *  @type  {Tone.Gain}
			 */
	        this.input = this.output = new Tone.Gain();
	        /**
			 *  A bound _soloed method
			 *  @type  {Function}
			 *  @private
			 */
	        this._soloBind = this._soloed.bind(this);
	        //listen for solo events class-wide.
	        this.context.on('solo', this._soloBind);
	        //set initially
	        this.solo = options.solo;
	    };
	    Tone.extend(Tone.Solo, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @type  {Object}
		 *  @static
		 */
	    Tone.Solo.defaults = { solo: false };
	    /**
		 *  Isolates this instance and mutes all other instances of Tone.Solo.
		 *  Only one instance can be soloed at a time. A soloed
		 *  instance will report `solo=false` when another instance is soloed.
		 *  @memberOf Tone.Solo#
		 *  @type {Boolean}
		 *  @name solo
		 */
	    Object.defineProperty(Tone.Solo.prototype, 'solo', {
	        get: function () {
	            return this._isSoloed();
	        },
	        set: function (solo) {
	            if (solo) {
	                this._addSolo();
	            } else {
	                this._removeSolo();
	            }
	            this.context.emit('solo', this);
	        }
	    });
	    /**
		 *  If the current instance is muted, i.e. another instance is soloed
		 *  @memberOf Tone.Solo#
		 *  @type {Boolean}
		 *  @name muted
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Solo.prototype, 'muted', {
	        get: function () {
	            return this.input.gain.value === 0;
	        }
	    });
	    /**
		 * Add this to the soloed array
		 * @private
		 */
	    Tone.Solo.prototype._addSolo = function () {
	        if (!Tone.isArray(this.context._currentSolo)) {
	            this.context._currentSolo = [];
	        }
	        if (!this._isSoloed()) {
	            this.context._currentSolo.push(this);
	        }
	    };
	    /**
		 * Remove this from the soloed array
		 * @private
		 */
	    Tone.Solo.prototype._removeSolo = function () {
	        if (this._isSoloed()) {
	            var index = this.context._currentSolo.indexOf(this);
	            this.context._currentSolo.splice(index, 1);
	        }
	    };
	    /**
		 * @return {Boolean} Is this on the soloed array
		 * @private
		 */
	    Tone.Solo.prototype._isSoloed = function () {
	        if (Tone.isArray(this.context._currentSolo)) {
	            return this.context._currentSolo.length !== 0 && this.context._currentSolo.indexOf(this) !== -1;
	        } else {
	            return false;
	        }
	    };
	    /**
		 * @return {Boolean} Returns true if no one is soloed
		 * @private
		 */
	    Tone.Solo.prototype._noSolos = function () {
	        return !Tone.isArray(this.context._currentSolo) || this.context._currentSolo.length === 0;
	    };
	    /**
		 *  Solo the current instance and unsolo all other instances.
		 *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.
		 *  @private
		 */
	    Tone.Solo.prototype._soloed = function () {
	        if (this._isSoloed()) {
	            this.input.gain.value = 1;
	        } else if (this._noSolos()) {
	            //no one is soloed
	            this.input.gain.value = 1;
	        } else {
	            this.input.gain.value = 0;
	        }
	    };
	    /**
		 *  Clean up
		 *  @return  {Tone.Solo}  this
		 */
	    Tone.Solo.prototype.dispose = function () {
	        this.context.off('solo', this._soloBind);
	        this._removeSolo();
	        this._soloBind = null;
	        Tone.AudioNode.prototype.dispose.call(this);
	        return this;
	    };
	    return Tone.Solo;
	});
	Module(function (Tone) {
	    /**
		 *  @class  Get the current waveform data of the connected audio source.
		 *  @extends {Tone.AudioNode}
		 *  @param {Number=} size The size of the FFT. Value must be a power of
		 *                       two in the range 32 to 32768.
		 */
	    Tone.Waveform = function () {
	        var options = Tone.defaults(arguments, ['size'], Tone.Waveform);
	        options.type = Tone.Analyser.Type.Waveform;
	        Tone.AudioNode.call(this);
	        /**
			 *  The analyser node.
			 *  @private
			 *  @type {Tone.Analyser}
			 */
	        this._analyser = this.input = this.output = new Tone.Analyser(options);
	    };
	    Tone.extend(Tone.Waveform, Tone.AudioNode);
	    /**
		 *  The default values.
		 *  @type {Object}
		 *  @const
		 */
	    Tone.Waveform.defaults = { 'size': 1024 };
	    /**
		 *  Gets the waveform of the audio source. Returns the waveform data
		 *  of length [size](#size) as a Float32Array with values between -1 and 1.
		 *  @returns {TypedArray}
		 */
	    Tone.Waveform.prototype.getValue = function () {
	        return this._analyser.getValue();
	    };
	    /**
		 *  The size of analysis. This must be a power of two in the range 32 to 32768.
		 *  @memberOf Tone.Waveform#
		 *  @type {Number}
		 *  @name size
		 */
	    Object.defineProperty(Tone.Waveform.prototype, 'size', {
	        get: function () {
	            return this._analyser.size;
	        },
	        set: function (size) {
	            this._analyser.size = size;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.Waveform}  this
		 */
	    Tone.Waveform.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._analyser.dispose();
	        this._analyser = null;
	    };
	    return Tone.Waveform;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.CtrlInterpolate will interpolate between given values based
		 *         on the "index" property. Passing in an array or object literal
		 *         will interpolate each of the parameters. Note (i.e. "C3")
		 *         and Time (i.e. "4n + 2") can be interpolated. All other values are
		 *         assumed to be numbers. 
		 *  @example
		 * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);
		 * interp.index = 0.75;
		 * interp.value; //returns 1.5
		 *
		 *  @example
		 * var interp = new Tone.CtrlInterpolate([
		 * 	[2, 4, 5],
		 * 	[9, 3, 2],
		 * ]);
		 * @param {Array} values The array of values to interpolate over
		 * @param {Positive} index The initial interpolation index.
		 * @extends {Tone}
		 */
	    Tone.CtrlInterpolate = function () {
	        var options = Tone.defaults(arguments, [
	            'values',
	            'index'
	        ], Tone.CtrlInterpolate);
	        Tone.call(this);
	        /**
			 *  The values to interpolate between
			 *  @type  {Array}
			 */
	        this.values = options.values;
	        /**
			 *  The interpolated index between values. For example: a value of 1.5
			 *  would interpolate equally between the value at index 1
			 *  and the value at index 2. 
			 *  @example
			 * interp.index = 0; 
			 * interp.value; //returns the value at 0
			 * interp.index = 0.5;
			 * interp.value; //returns the value between indices 0 and 1. 
			 *  @type  {Positive}
			 */
	        this.index = options.index;
	    };
	    Tone.extend(Tone.CtrlInterpolate);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.CtrlInterpolate.defaults = {
	        'index': 0,
	        'values': []
	    };
	    /**
		 *  The current interpolated value based on the index
		 *  @readOnly
		 *  @memberOf Tone.CtrlInterpolate#
		 *  @type {*}
		 *  @name value
		 */
	    Object.defineProperty(Tone.CtrlInterpolate.prototype, 'value', {
	        get: function () {
	            var index = this.index;
	            index = Math.min(index, this.values.length - 1);
	            var lowerPosition = Math.floor(index);
	            var lower = this.values[lowerPosition];
	            var upper = this.values[Math.ceil(index)];
	            return this._interpolate(index - lowerPosition, lower, upper);
	        }
	    });
	    /**
		 *  Internal interpolation routine
		 *  @param  {NormalRange}  index  The index between the lower and upper
		 *  @param  {*}  lower 
		 *  @param  {*}  upper 
		 *  @return  {*}  The interpolated value
		 *  @private
		 */
	    Tone.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {
	        if (Tone.isArray(lower)) {
	            var retArray = [];
	            for (var i = 0; i < lower.length; i++) {
	                retArray[i] = this._interpolate(index, lower[i], upper[i]);
	            }
	            return retArray;
	        } else if (Tone.isObject(lower)) {
	            var retObj = {};
	            for (var attr in lower) {
	                retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);
	            }
	            return retObj;
	        } else {
	            lower = this._toNumber(lower);
	            upper = this._toNumber(upper);
	            return (1 - index) * lower + index * upper;
	        }
	    };
	    /**
		 *  Convert from the given type into a number
		 *  @param  {Number|String}  value
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.CtrlInterpolate.prototype._toNumber = function (val) {
	        if (Tone.isNumber(val)) {
	            return val;
	        } else {
	            //otherwise assume that it's Time...
	            return this.toSeconds(val);
	        }
	    };
	    /**
		 *  Clean up
		 *  @return  {Tone.CtrlInterpolate}  this
		 */
	    Tone.CtrlInterpolate.prototype.dispose = function () {
	        this.values = null;
	    };
	    return Tone.CtrlInterpolate;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.CtrlMarkov represents a Markov Chain where each call
		 *         to Tone.CtrlMarkov.next will move to the next state. If the next
		 *         state choice is an array, the next state is chosen randomly with
		 *         even probability for all of the choices. For a weighted probability
		 *         of the next choices, pass in an object with "state" and "probability" attributes. 
		 *         The probabilities will be normalized and then chosen. If no next options
		 *         are given for the current state, the state will stay there. 
		 *  @extends {Tone}
		 *  @example
		 * var chain = new Tone.CtrlMarkov({
		 * 	"beginning" : ["end", "middle"],
		 * 	"middle" : "end"
		 * });
		 * chain.value = "beginning";
		 * chain.next(); //returns "end" or "middle" with 50% probability
		 *
		 *  @example
		 * var chain = new Tone.CtrlMarkov({
		 * 	"beginning" : [{"value" : "end", "probability" : 0.8}, 
		 * 					{"value" : "middle", "probability" : 0.2}],
		 * 	"middle" : "end"
		 * });
		 * chain.value = "beginning";
		 * chain.next(); //returns "end" with 80% probability or "middle" with 20%.
		 *  @param {Object} values An object with the state names as the keys
		 *                         and the next state(s) as the values. 
		 */
	    Tone.CtrlMarkov = function (values, initial) {
	        Tone.call(this);
	        /**
			 *  The Markov values with states as the keys
			 *  and next state(s) as the values. 
			 *  @type {Object}
			 */
	        this.values = Tone.defaultArg(values, {});
	        /**
			 *  The current state of the Markov values. The next
			 *  state will be evaluated and returned when Tone.CtrlMarkov.next
			 *  is invoked.
			 *  @type {String}
			 */
	        this.value = Tone.defaultArg(initial, Object.keys(this.values)[0]);
	    };
	    Tone.extend(Tone.CtrlMarkov);
	    /**
		 *  Returns the next state of the Markov values. 
		 *  @return  {String}
		 */
	    Tone.CtrlMarkov.prototype.next = function () {
	        if (this.values.hasOwnProperty(this.value)) {
	            var next = this.values[this.value];
	            if (Tone.isArray(next)) {
	                var distribution = this._getProbDistribution(next);
	                var rand = Math.random();
	                var total = 0;
	                for (var i = 0; i < distribution.length; i++) {
	                    var dist = distribution[i];
	                    if (rand > total && rand < total + dist) {
	                        var chosen = next[i];
	                        if (Tone.isObject(chosen)) {
	                            this.value = chosen.value;
	                        } else {
	                            this.value = chosen;
	                        }
	                    }
	                    total += dist;
	                }
	            } else {
	                this.value = next;
	            }
	        }
	        return this.value;
	    };
	    /**
		 *  Choose randomly from an array weighted options in the form 
		 *  {"state" : string, "probability" : number} or an array of values
		 *  @param  {Array}  options 
		 *  @return  {Array}  The randomly selected choice
		 *  @private
		 */
	    Tone.CtrlMarkov.prototype._getProbDistribution = function (options) {
	        var distribution = [];
	        var total = 0;
	        var needsNormalizing = false;
	        for (var i = 0; i < options.length; i++) {
	            var option = options[i];
	            if (Tone.isObject(option)) {
	                needsNormalizing = true;
	                distribution[i] = option.probability;
	            } else {
	                distribution[i] = 1 / options.length;
	            }
	            total += distribution[i];
	        }
	        if (needsNormalizing) {
	            //normalize the values
	            for (var j = 0; j < distribution.length; j++) {
	                distribution[j] = distribution[j] / total;
	            }
	        }
	        return distribution;
	    };
	    /**
		 *  Clean up
		 *  @return  {Tone.CtrlMarkov}  this
		 */
	    Tone.CtrlMarkov.prototype.dispose = function () {
	        this.values = null;
	    };
	    return Tone.CtrlMarkov;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Generate patterns from an array of values.
		 *         Has a number of arpeggiation and randomized
		 *         selection patterns. 
		 *           <ul>
		 *  	        <li>"up" - cycles upward</li>
		 *  			<li>"down" - cycles downward</li>
		 *  			<li>"upDown" - up then and down</li>
		 *  			<li>"downUp" - cycles down then and up</li>
		 *  			<li>"alternateUp" - jump up two and down one</li>
		 *  			<li>"alternateDown" - jump down two and up one</li>
		 *  			<li>"random" - randomly select an index</li>
		 *  			<li>"randomWalk" - randomly moves one index away from the current position</li>
		 *  			<li>"randomOnce" - randomly select an index without repeating until all values have been chosen.</li>
		 *     		</ul>
		 *  @param  {Array}  values   An array of options to choose from.
		 *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.
		 *  @extends {Tone}
		 */
	    Tone.CtrlPattern = function () {
	        var options = Tone.defaults(arguments, [
	            'values',
	            'type'
	        ], Tone.CtrlPattern);
	        Tone.call(this);
	        /**
			 *  The array of values to arpeggiate over
			 *  @type {Array}
			 */
	        this.values = options.values;
	        /**
			 *  The current position in the values array
			 *  @type  {Number}
			 */
	        this.index = 0;
	        /**
			 *  The type placeholder
			 *  @type {Tone.CtrlPattern.Type}
			 *  @private
			 */
	        this._type = null;
	        /**
			 *  Shuffled values for the RandomOnce type
			 *  @type {Array}
			 *  @private
			 */
	        this._shuffled = null;
	        /**
			 *  The direction of the movement
			 *  @type {String}
			 *  @private
			 */
	        this._direction = null;
	        this.type = options.type;
	    };
	    Tone.extend(Tone.CtrlPattern);
	    /**
		 *  The Control Patterns
		 *  @type  {Object}
		 *  @static
		 */
	    Tone.CtrlPattern.Type = {
	        Up: 'up',
	        Down: 'down',
	        UpDown: 'upDown',
	        DownUp: 'downUp',
	        AlternateUp: 'alternateUp',
	        AlternateDown: 'alternateDown',
	        Random: 'random',
	        RandomWalk: 'randomWalk',
	        RandomOnce: 'randomOnce'
	    };
	    /**
		 *  The default values. 
		 *  @type  {Object}
		 */
	    Tone.CtrlPattern.defaults = {
	        'type': Tone.CtrlPattern.Type.Up,
	        'values': []
	    };
	    /**
		 *  The value at the current index of the pattern.
		 *  @readOnly
		 *  @memberOf Tone.CtrlPattern#
		 *  @type {*}
		 *  @name value
		 */
	    Object.defineProperty(Tone.CtrlPattern.prototype, 'value', {
	        get: function () {
	            //some safeguards
	            if (this.values.length === 0) {
	                return;
	            } else if (this.values.length === 1) {
	                return this.values[0];
	            }
	            this.index = Math.min(this.index, this.values.length - 1);
	            var val = this.values[this.index];
	            if (this.type === Tone.CtrlPattern.Type.RandomOnce) {
	                if (this.values.length !== this._shuffled.length) {
	                    this._shuffleValues();
	                }
	                val = this.values[this._shuffled[this.index]];
	            }
	            return val;
	        }
	    });
	    /**
		 *  The pattern used to select the next
		 *  item from the values array
		 *  @memberOf Tone.CtrlPattern#
		 *  @type {Tone.CtrlPattern.Type}
		 *  @name type
		 */
	    Object.defineProperty(Tone.CtrlPattern.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            this._type = type;
	            this._shuffled = null;
	            //the first index
	            if (this._type === Tone.CtrlPattern.Type.Up || this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.RandomOnce || this._type === Tone.CtrlPattern.Type.AlternateUp) {
	                this.index = 0;
	            } else if (this._type === Tone.CtrlPattern.Type.Down || this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
	                this.index = this.values.length - 1;
	            }
	            //the direction
	            if (this._type === Tone.CtrlPattern.Type.UpDown || this._type === Tone.CtrlPattern.Type.AlternateUp) {
	                this._direction = Tone.CtrlPattern.Type.Up;
	            } else if (this._type === Tone.CtrlPattern.Type.DownUp || this._type === Tone.CtrlPattern.Type.AlternateDown) {
	                this._direction = Tone.CtrlPattern.Type.Down;
	            }
	            //randoms
	            if (this._type === Tone.CtrlPattern.Type.RandomOnce) {
	                this._shuffleValues();
	            } else if (this._type === Tone.CtrlPattern.Random) {
	                this.index = Math.floor(Math.random() * this.values.length);
	            }
	        }
	    });
	    /**
		 *  Return the next value given the current position
		 *  and pattern.
		 *  @return {*} The next value
		 */
	    Tone.CtrlPattern.prototype.next = function () {
	        var type = this.type;
	        //choose the next index
	        if (type === Tone.CtrlPattern.Type.Up) {
	            this.index++;
	            if (this.index >= this.values.length) {
	                this.index = 0;
	            }
	        } else if (type === Tone.CtrlPattern.Type.Down) {
	            this.index--;
	            if (this.index < 0) {
	                this.index = this.values.length - 1;
	            }
	        } else if (type === Tone.CtrlPattern.Type.UpDown || type === Tone.CtrlPattern.Type.DownUp) {
	            if (this._direction === Tone.CtrlPattern.Type.Up) {
	                this.index++;
	            } else {
	                this.index--;
	            }
	            if (this.index < 0) {
	                this.index = 1;
	                this._direction = Tone.CtrlPattern.Type.Up;
	            } else if (this.index >= this.values.length) {
	                this.index = this.values.length - 2;
	                this._direction = Tone.CtrlPattern.Type.Down;
	            }
	        } else if (type === Tone.CtrlPattern.Type.Random) {
	            this.index = Math.floor(Math.random() * this.values.length);
	        } else if (type === Tone.CtrlPattern.Type.RandomWalk) {
	            if (Math.random() < 0.5) {
	                this.index--;
	                this.index = Math.max(this.index, 0);
	            } else {
	                this.index++;
	                this.index = Math.min(this.index, this.values.length - 1);
	            }
	        } else if (type === Tone.CtrlPattern.Type.RandomOnce) {
	            this.index++;
	            if (this.index >= this.values.length) {
	                this.index = 0;
	                //reshuffle the values for next time
	                this._shuffleValues();
	            }
	        } else if (type === Tone.CtrlPattern.Type.AlternateUp) {
	            if (this._direction === Tone.CtrlPattern.Type.Up) {
	                this.index += 2;
	                this._direction = Tone.CtrlPattern.Type.Down;
	            } else {
	                this.index -= 1;
	                this._direction = Tone.CtrlPattern.Type.Up;
	            }
	            if (this.index >= this.values.length) {
	                this.index = 0;
	                this._direction = Tone.CtrlPattern.Type.Up;
	            }
	        } else if (type === Tone.CtrlPattern.Type.AlternateDown) {
	            if (this._direction === Tone.CtrlPattern.Type.Up) {
	                this.index += 1;
	                this._direction = Tone.CtrlPattern.Type.Down;
	            } else {
	                this.index -= 2;
	                this._direction = Tone.CtrlPattern.Type.Up;
	            }
	            if (this.index < 0) {
	                this.index = this.values.length - 1;
	                this._direction = Tone.CtrlPattern.Type.Down;
	            }
	        }
	        return this.value;
	    };
	    /**
		 *  Shuffles the values and places the results into the _shuffled
		 *  @private
		 */
	    Tone.CtrlPattern.prototype._shuffleValues = function () {
	        var copy = [];
	        this._shuffled = [];
	        for (var i = 0; i < this.values.length; i++) {
	            copy[i] = i;
	        }
	        while (copy.length > 0) {
	            var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
	            this._shuffled.push(randVal[0]);
	        }
	    };
	    /**
		 *  Clean up
		 *  @returns {Tone.CtrlPattern} this
		 */
	    Tone.CtrlPattern.prototype.dispose = function () {
	        this._shuffled = null;
	        this.values = null;
	    };
	    return Tone.CtrlPattern;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Choose a random value.
		 *  @extends {Tone}
		 *  @example
		 * var randomWalk = new Tone.CtrlRandom({
		 * 	"min" : 0,
		 * 	"max" : 10,
		 * 	"integer" : true
		 * });
		 * randomWalk.eval();
		 *
		 *  @param {Number|Time=} min The minimum return value.
		 *  @param {Number|Time=} max The maximum return value.
		 */
	    Tone.CtrlRandom = function () {
	        var options = Tone.defaults(arguments, [
	            'min',
	            'max'
	        ], Tone.CtrlRandom);
	        Tone.call(this);
	        /**
			 *  The minimum return value
			 *  @type  {Number|Time}
			 */
	        this.min = options.min;
	        /**
			 *  The maximum return value
			 *  @type  {Number|Time}
			 */
	        this.max = options.max;
	        /**
			 *  If the return value should be an integer
			 *  @type  {Boolean}
			 */
	        this.integer = options.integer;
	    };
	    Tone.extend(Tone.CtrlRandom);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.CtrlRandom.defaults = {
	        'min': 0,
	        'max': 1,
	        'integer': false
	    };
	    /**
		 *  Return a random value between min and max. 
		 *  @readOnly
		 *  @memberOf Tone.CtrlRandom#
		 *  @type {*}
		 *  @name value
		 */
	    Object.defineProperty(Tone.CtrlRandom.prototype, 'value', {
	        get: function () {
	            var min = this.toSeconds(this.min);
	            var max = this.toSeconds(this.max);
	            var rand = Math.random();
	            var val = rand * min + (1 - rand) * max;
	            if (this.integer) {
	                val = Math.floor(val);
	            }
	            return val;
	        }
	    });
	    return Tone.CtrlRandom;
	});
	Module(function (Tone) {
	    /**
		 *  @class A data structure for holding multiple buffers.
		 *  
		 *  @param  {Object|Array}    urls      An object literal or array
		 *                                      of urls to load.
		 *  @param  {Function=}  callback  The callback to invoke when
		 *                                 the buffers are loaded. 
		 *  @extends {Tone}
		 *  @example
		 * //load a whole bank of piano samples
		 * var pianoSamples = new Tone.Buffers({
		 * 	"C4" : "path/to/C4.mp3"
		 * 	"C#4" : "path/to/C#4.mp3"
		 * 	"D4" : "path/to/D4.mp3"
		 * 	"D#4" : "path/to/D#4.mp3"
		 * 	...
		 * }, function(){
		 * 	//play one of the samples when they all load
		 * 	player.buffer = pianoSamples.get("C4");
		 * 	player.start();
		 * });
		 * 	@example
		 * //To pass in additional parameters in the second parameter
		 * var buffers = new Tone.Buffers(urls, {
		 * 	"onload" : callback,
		 * 	"baseUrl" : "../path/to/audio/"
		 * })
		 */
	    Tone.Buffers = function (urls) {
	        //remove the urls from the options
	        var args = Array.prototype.slice.call(arguments);
	        args.shift();
	        var options = Tone.defaults(args, [
	            'onload',
	            'baseUrl'
	        ], Tone.Buffers);
	        Tone.call(this);
	        /**
			 *  All of the buffers
			 *  @type  {Object}
			 *  @private
			 */
	        this._buffers = {};
	        /**
			 *  A path which is prefixed before every url.
			 *  @type  {String}
			 */
	        this.baseUrl = options.baseUrl;
	        this._loadingCount = 0;
	        //add each one
	        for (var key in urls) {
	            this._loadingCount++;
	            this.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));
	        }
	    };
	    Tone.extend(Tone.Buffers);
	    /**
		 *  Defaults
		 *  @type  {Object}
		 */
	    Tone.Buffers.defaults = {
	        'onload': Tone.noOp,
	        'baseUrl': ''
	    };
	    /**
		 *  True if the buffers object has a buffer by that name.
		 *  @param  {String|Number}  name  The key or index of the 
		 *                                 buffer.
		 *  @return  {Boolean}
		 */
	    Tone.Buffers.prototype.has = function (name) {
	        return this._buffers.hasOwnProperty(name);
	    };
	    /**
		 *  Get a buffer by name. If an array was loaded, 
		 *  then use the array index.
		 *  @param  {String|Number}  name  The key or index of the 
		 *                                 buffer.
		 *  @return  {Tone.Buffer}
		 */
	    Tone.Buffers.prototype.get = function (name) {
	        if (this.has(name)) {
	            return this._buffers[name];
	        } else {
	            throw new Error('Tone.Buffers: no buffer named ' + name);
	        }
	    };
	    /**
		 *  A buffer was loaded. decrement the counter.
		 *  @param  {Function}  callback 
		 *  @private
		 */
	    Tone.Buffers.prototype._bufferLoaded = function (callback) {
	        this._loadingCount--;
	        if (this._loadingCount === 0 && callback) {
	            callback(this);
	        }
	    };
	    /**
		 * If the buffers are loaded or not
		 * @memberOf Tone.Buffers#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Buffers.prototype, 'loaded', {
	        get: function () {
	            var isLoaded = true;
	            for (var buffName in this._buffers) {
	                var buff = this.get(buffName);
	                isLoaded = isLoaded && buff.loaded;
	            }
	            return isLoaded;
	        }
	    });
	    /**
		 *  Add a buffer by name and url to the Buffers
		 *  @param  {String}    name      A unique name to give
		 *                                the buffer
		 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, 
		 *                                                 or a buffer which will be added
		 *                                                 with the given name.
		 *  @param  {Function=}  callback  The callback to invoke 
		 *                                 when the url is loaded.
		 */
	    Tone.Buffers.prototype.add = function (name, url, callback) {
	        callback = Tone.defaultArg(callback, Tone.noOp);
	        if (url instanceof Tone.Buffer) {
	            this._buffers[name] = url;
	            callback(this);
	        } else if (url instanceof AudioBuffer) {
	            this._buffers[name] = new Tone.Buffer(url);
	            callback(this);
	        } else if (Tone.isString(url)) {
	            this._buffers[name] = new Tone.Buffer(this.baseUrl + url, callback);
	        }
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @return  {Tone.Buffers} this
		 */
	    Tone.Buffers.prototype.dispose = function () {
	        Tone.prototype.dispose.call(this);
	        for (var name in this._buffers) {
	            this._buffers[name].dispose();
	        }
	        this._buffers = null;
	        return this;
	    };
	    return Tone.Buffers;
	});
	Module(function (Tone) {
	    
	    /**
		 *  buses are another way of routing audio
		 *
		 *  augments Tone.prototype to include send and recieve
		 */
	    /**
		 *  All of the routes
		 *
		 *  @type {Object}
		 *  @static
		 *  @private
		 */
	    var Buses = {};
	    /**
		 *  Send this signal to the channel name.
		 *  @param  {String} channelName A named channel to send the signal to.
		 *  @param  {Decibels} amount The amount of the source to send to the bus.
		 *  @return {GainNode} The gain node which connects this node to the desired channel.
		 *                     Can be used to adjust the levels of the send.
		 *  @example
		 * source.send("reverb", -12);
		 */
	    Tone.prototype.send = function (channelName, amount) {
	        if (!Buses.hasOwnProperty(channelName)) {
	            Buses[channelName] = this.context.createGain();
	        }
	        amount = Tone.defaultArg(amount, 0);
	        var sendKnob = new Tone.Gain(amount, Tone.Type.Decibels);
	        this.connect(sendKnob);
	        sendKnob.connect(Buses[channelName]);
	        return sendKnob;
	    };
	    /**
		 *  Recieve the input from the desired channelName to the input
		 *
		 *  @param  {String} channelName A named channel to send the signal to.
		 *  @param  {Number=} channelNumber The channel to connect to
		 *  @returns {Tone} this
		 *  @example
		 * reverbEffect.receive("reverb");
		 */
	    Tone.prototype.receive = function (channelName, inputNum) {
	        if (!Buses.hasOwnProperty(channelName)) {
	            Buses[channelName] = this.context.createGain();
	        }
	        Buses[channelName].connect(this, 0, inputNum);
	        return this;
	    };
	    //remove all the send/receives when a new audio context is passed in
	    Tone.Context.on('init', function (context) {
	        if (context.Buses) {
	            Buses = context.Buses;
	        } else {
	            Buses = {};
	            context.Buses = Buses;
	        }
	    });
	    return Tone;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Draw is useful for synchronizing visuals and audio events.
		 *         Callbacks from Tone.Transport or any of the Tone.Event classes
		 *         always happen _before_ the scheduled time and are not synchronized
		 *         to the animation frame so they are not good for triggering tightly
		 *         synchronized visuals and sound. Tone.Draw makes it easy to schedule
		 *         callbacks using the AudioContext time and uses requestAnimationFrame.
		 *         
		 *  @singleton
		 *  @extends {Tone}
		 *  @example
		 * Tone.Transport.schedule(function(time){
		 * 	//use the time argument to schedule a callback with Tone.Draw
		 * 	Tone.Draw.schedule(function(){
		 * 		//do drawing or DOM manipulation here
		 * 	}, time)
		 * }, "+0.5")
		 */
	    Tone.Draw = function () {
	        Tone.call(this);
	        /**
			 *  All of the events.
			 *  @type  {Tone.Timeline}
			 *  @private
			 */
	        this._events = new Tone.Timeline();
	        /**
			 *  The duration after which events are not invoked.
			 *  @type  {Number}
			 *  @default 0.25
			 */
	        this.expiration = 0.25;
	        /**
			 *  The amount of time before the scheduled time 
			 *  that the callback can be invoked. Default is
			 *  half the time of an animation frame (0.008 seconds).
			 *  @type  {Number}
			 *  @default 0.008
			 */
	        this.anticipation = 0.008;
	        /**
			 *  The draw loop
			 *  @type  {Function}
			 *  @private
			 */
	        this._boundDrawLoop = this._drawLoop.bind(this);
	    };
	    Tone.extend(Tone.Draw);
	    /**
		 *  Schedule a function at the given time to be invoked
		 *  on the nearest animation frame.
		 *  @param  {Function}  callback  Callback is invoked at the given time.
		 *  @param  {Time}    time      The time relative to the AudioContext time
		 *                              to invoke the callback.
		 *  @return  {Tone.Draw}    this
		 */
	    Tone.Draw.prototype.schedule = function (callback, time) {
	        this._events.add({
	            callback: callback,
	            time: this.toSeconds(time)
	        });
	        //start the draw loop on the first event
	        if (this._events.length === 1) {
	            requestAnimationFrame(this._boundDrawLoop);
	        }
	        return this;
	    };
	    /**
		 *  Cancel events scheduled after the given time
		 *  @param  {Time=}  after  Time after which scheduled events will 
		 *                          be removed from the scheduling timeline.
		 *  @return  {Tone.Draw}  this
		 */
	    Tone.Draw.prototype.cancel = function (after) {
	        this._events.cancel(this.toSeconds(after));
	        return this;
	    };
	    /**
		 *  The draw loop
		 *  @private
		 */
	    Tone.Draw.prototype._drawLoop = function () {
	        var now = Tone.now();
	        while (this._events.length && this._events.peek().time - this.anticipation <= now) {
	            var event = this._events.shift();
	            if (now - event.time <= this.expiration) {
	                event.callback();
	            }
	        }
	        if (this._events.length > 0) {
	            requestAnimationFrame(this._boundDrawLoop);
	        }
	    };
	    //make a singleton
	    Tone.Draw = new Tone.Draw();
	    return Tone.Draw;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space
		 *          using a right-handed cartesian coordinate system.
		 *          The units used in the coordinate system are not defined;
		 *          these coordinates are independent/invariant of any particular
		 *          units such as meters or feet. Tone.Panner3D objects have an forward
		 *          vector representing the direction the sound is projecting. Additionally,
		 *          they have a sound cone representing how directional the sound is.
		 *          For example, the sound could be omnidirectional, in which case it would
		 *          be heard anywhere regardless of its forward, or it can be more directional
		 *          and heard only if it is facing the listener. Tone.Listener objects
		 *          (representing a person's ears) have an forward and up vector
		 *          representing in which direction the person is facing. Because both the
		 *          source stream and the listener can be moving, they both have a velocity
		 *          vector representing both the speed and direction of movement. Taken together,
		 *          these two velocities can be used to generate a doppler shift effect which changes the pitch.
		 *          <br><br>
		 *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D
		 *
		 *  @constructor
		 *  @extends {Tone}
		 *  @singleton
		 */
	    Tone.Listener = function () {
	        Tone.call(this);
	        /**
			 *  Holds the current forward orientation
			 *  @type  {Array}
			 *  @private
			 */
	        this._orientation = [
	            0,
	            0,
	            0,
	            0,
	            0,
	            0
	        ];
	        /**
			 *  Holds the current position
			 *  @type  {Array}
			 *  @private
			 */
	        this._position = [
	            0,
	            0,
	            0
	        ];
	        Tone.getContext(function () {
	            // set the default position/forward
	            this.set(ListenerConstructor.defaults);
	        }.bind(this));
	    };
	    Tone.extend(Tone.Listener);
	    /**
		 *  Defaults according to the specification
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Listener.defaults = {
	        'positionX': 0,
	        'positionY': 0,
	        'positionZ': 0,
	        'forwardX': 0,
	        'forwardY': 0,
	        'forwardZ': 1,
	        'upX': 0,
	        'upY': 1,
	        'upZ': 0
	    };
	    /**
		 * The ramp time which is applied to the setTargetAtTime
		 * @type {Number}
		 * @private
		 */
	    Tone.Listener.prototype._rampTimeConstant = 0.01;
	    /**
		 *  Sets the position of the listener in 3d space.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @return {Tone.Listener} this
		 */
	    Tone.Listener.prototype.setPosition = function (x, y, z) {
	        if (this.context.listener.positionX) {
	            var now = this.now();
	            this.context.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
	            this.context.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
	            this.context.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
	        } else {
	            this.context.listener.setPosition(x, y, z);
	        }
	        this._position = Array.prototype.slice.call(arguments);
	        return this;
	    };
	    /**
		 *  Sets the orientation of the listener using two vectors, the forward
		 *  vector (which direction the listener is facing) and the up vector
		 *  (which the up direction of the listener). An up vector
		 *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction.
		 *  @param  {Number}  x
		 *  @param  {Number}  y
		 *  @param  {Number}  z
		 *  @param  {Number}  upX
		 *  @param  {Number}  upY
		 *  @param  {Number}  upZ
		 *  @return {Tone.Listener} this
		 */
	    Tone.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {
	        if (this.context.listener.forwardX) {
	            var now = this.now();
	            this.context.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);
	            this.context.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);
	            this.context.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);
	            this.context.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);
	            this.context.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);
	            this.context.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);
	        } else {
	            this.context.listener.setOrientation(x, y, z, upX, upY, upZ);
	        }
	        this._orientation = Array.prototype.slice.call(arguments);
	        return this;
	    };
	    /**
		 *  The x position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name positionX
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'positionX', {
	        set: function (pos) {
	            this._position[0] = pos;
	            this.setPosition.apply(this, this._position);
	        },
	        get: function () {
	            return this._position[0];
	        }
	    });
	    /**
		 *  The y position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name positionY
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'positionY', {
	        set: function (pos) {
	            this._position[1] = pos;
	            this.setPosition.apply(this, this._position);
	        },
	        get: function () {
	            return this._position[1];
	        }
	    });
	    /**
		 *  The z position of the panner object.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name positionZ
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'positionZ', {
	        set: function (pos) {
	            this._position[2] = pos;
	            this.setPosition.apply(this, this._position);
	        },
	        get: function () {
	            return this._position[2];
	        }
	    });
	    /**
		 *  The x coordinate of the listeners front direction. i.e.
		 *  which way they are facing.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name forwardX
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'forwardX', {
	        set: function (pos) {
	            this._orientation[0] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[0];
	        }
	    });
	    /**
		 *  The y coordinate of the listeners front direction. i.e.
		 *  which way they are facing.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name forwardY
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'forwardY', {
	        set: function (pos) {
	            this._orientation[1] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[1];
	        }
	    });
	    /**
		 *  The z coordinate of the listeners front direction. i.e.
		 *  which way they are facing.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name forwardZ
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'forwardZ', {
	        set: function (pos) {
	            this._orientation[2] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[2];
	        }
	    });
	    /**
		 *  The x coordinate of the listener's up direction. i.e.
		 *  the direction the listener is standing in.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name upX
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'upX', {
	        set: function (pos) {
	            this._orientation[3] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[3];
	        }
	    });
	    /**
		 *  The y coordinate of the listener's up direction. i.e.
		 *  the direction the listener is standing in.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name upY
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'upY', {
	        set: function (pos) {
	            this._orientation[4] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[4];
	        }
	    });
	    /**
		 *  The z coordinate of the listener's up direction. i.e.
		 *  the direction the listener is standing in.
		 *  @type {Number}
		 *  @memberOf Tone.Listener#
		 *  @name upZ
		 */
	    Object.defineProperty(Tone.Listener.prototype, 'upZ', {
	        set: function (pos) {
	            this._orientation[5] = pos;
	            this.setOrientation.apply(this, this._orientation);
	        },
	        get: function () {
	            return this._orientation[5];
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.Listener} this
		 */
	    Tone.Listener.prototype.dispose = function () {
	        this._orientation = null;
	        this._position = null;
	        return this;
	    };
	    //SINGLETON SETUP
	    var ListenerConstructor = Tone.Listener;
	    Tone.Listener = new ListenerConstructor();
	    Tone.Context.on('init', function (context) {
	        if (context.Listener instanceof ListenerConstructor) {
	            //a single listener object
	            Tone.Listener = context.Listener;
	        } else {
	            //make new Listener insides
	            Tone.Listener = new ListenerConstructor();
	        }
	        context.Listener = Tone.Listener;
	    });
	    //END SINGLETON SETUP
	    return Tone.Listener;
	});
	Module(function (Tone) {
	    /**
		 * Because of a bug in iOS causing the currentTime to increment
		 * before the rendering is started, sometimes it takes multiple
		 * attempts to render the audio correctly.
		 * @private
		 */
	    function attemptRender(callback, duration, sampleRate, tries) {
	        tries = Tone.defaultArg(tries, 0);
	        var context = new Tone.OfflineContext(2, duration, sampleRate);
	        Tone.context = context;
	        //invoke the callback/scheduling
	        var response = callback(Tone.Transport);
	        if (context.currentTime > 0 && tries < 1000) {
	            return attemptRender(callback, duration, sampleRate, ++tries);
	        } else {
	            return {
	                'response': response,
	                'context': context
	            };
	        }
	    }
	    /**
		 *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.
		 *  The OfflineAudioContext is capable of rendering much faster than real time in many cases.
		 *  The callback function also passes in an offline instance of Tone.Transport which can be used
		 *  to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions
		 *  as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit
		 *  user action like a click or tap. 
		 *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.
		 *  @param  {Time}  duration     the amount of time to record for.
		 *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.
		 *  @example
		 * //render 2 seconds of the oscillator
		 * Tone.Offline(function(){
		 * 	//only nodes created in this callback will be recorded
		 * 	var oscillator = new Tone.Oscillator().toMaster().start(0)
		 * 	//schedule their events
		 * }, 2).then(function(buffer){
		 * 	//do something with the output buffer
		 * })
		 * @example
		 * //can also schedule events along the Transport
		 * //using the passed in Offline Transport
		 * Tone.Offline(function(Transport){
		 * 	var osc = new Tone.Oscillator().toMaster()
		 * 	Transport.schedule(function(time){
		 * 		osc.start(time).stop(time + 0.1)
		 * 	}, 1)
		 * 	Transport.start(0.2)
		 * }, 4).then(function(buffer){
		 * 	//do something with the output buffer
		 * })
		 */
	    Tone.Offline = function (callback, duration) {
	        //set the OfflineAudioContext
	        var sampleRate = Tone.context.sampleRate;
	        var originalContext = Tone.context;
	        var renderRet = attemptRender(callback, duration, sampleRate);
	        var response = renderRet.response;
	        var context = renderRet.context;
	        var ret;
	        if (response instanceof Promise) {
	            //wait for the promise to resolve
	            ret = response.then(function () {
	                //then render the audio
	                return context.render();
	            });
	        } else {
	            //process the audio
	            ret = context.render();
	        }
	        //return the original AudioContext
	        Tone.context = originalContext;
	        //return the audio
	        return ret.then(function (buffer) {
	            //wrap it in a Tone.Buffer
	            return new Tone.Buffer(buffer);
	        });
	    };
	    return Tone.Offline;
	});
	Module(function (Tone) {
	    
	    /**
		 * 	@class  Tone.Effect is the base class for effects. Connect the effect between
		 * 	        the effectSend and effectReturn GainNodes, then control the amount of
		 * 	        effect which goes to the output using the wet control.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {NormalRange|Object} [wet] The starting wet value.
		 */
	    Tone.Effect = function () {
	        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);
	        Tone.AudioNode.call(this);
	        this.createInsOuts(1, 1);
	        /**
			 *  the drywet knob to control the amount of effect
			 *  @type {Tone.CrossFade}
			 *  @private
			 */
	        this._dryWet = new Tone.CrossFade(options.wet);
	        /**
			 *  The wet control is how much of the effected
			 *  will pass through to the output. 1 = 100% effected
			 *  signal, 0 = 100% dry signal.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.wet = this._dryWet.fade;
	        /**
			 *  connect the effectSend to the input of hte effect
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this.effectSend = new Tone.Gain();
	        /**
			 *  connect the output of the effect to the effectReturn
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this.effectReturn = new Tone.Gain();
	        //connections
	        this.input.connect(this._dryWet.a);
	        this.input.connect(this.effectSend);
	        this.effectReturn.connect(this._dryWet.b);
	        this._dryWet.connect(this.output);
	        this._readOnly(['wet']);
	    };
	    Tone.extend(Tone.Effect, Tone.AudioNode);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Effect.defaults = { 'wet': 1 };
	    /**
		 *  chains the effect in between the effectSend and effectReturn
		 *  @param  {Tone} effect
		 *  @private
		 *  @returns {Tone.Effect} this
		 */
	    Tone.Effect.prototype.connectEffect = function (effect) {
	        this.effectSend.chain(effect, this.effectReturn);
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Effect} this
		 */
	    Tone.Effect.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._dryWet.dispose();
	        this._dryWet = null;
	        this.effectSend.dispose();
	        this.effectSend = null;
	        this.effectReturn.dispose();
	        this.effectReturn = null;
	        this._writable(['wet']);
	        this.wet = null;
	        return this;
	    };
	    return Tone.Effect;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
		 *         Setting the LFO rate and depth allows for control over the filter modulation rate 
		 *         and depth.
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Time|Object} [frequency] The rate of the LFO.
		 *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation
	 	 *  @param {Frequency=} octaves The number of octaves above the baseFrequency
		 *  @example
		 * //create an autofilter and start it's LFO
		 * var autoFilter = new Tone.AutoFilter("4n").toMaster().start();
		 * //route an oscillator through the filter and start it
		 * var oscillator = new Tone.Oscillator().connect(autoFilter).start();
		 */
	    Tone.AutoFilter = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'baseFrequency',
	            'octaves'
	        ], Tone.AutoFilter);
	        Tone.Effect.call(this, options);
	        /**
			 *  the lfo which drives the filter cutoff
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfo = new Tone.LFO({
	            'frequency': options.frequency,
	            'amplitude': options.depth
	        });
	        /**
			 * The range of the filter modulating between the min and max frequency. 
			 * 0 = no modulation. 1 = full modulation.
			 * @type {NormalRange}
			 * @signal
			 */
	        this.depth = this._lfo.amplitude;
	        /**
			 * How fast the filter modulates between min and max. 
			 * @type {Frequency}
			 * @signal
			 */
	        this.frequency = this._lfo.frequency;
	        /**
			 *  The filter node
			 *  @type {Tone.Filter}
			 */
	        this.filter = new Tone.Filter(options.filter);
	        /**
			 *  The octaves placeholder
			 *  @type {Positive}
			 *  @private
			 */
	        this._octaves = 0;
	        //connections
	        this.connectEffect(this.filter);
	        this._lfo.connect(this.filter.frequency);
	        this.type = options.type;
	        this._readOnly([
	            'frequency',
	            'depth'
	        ]);
	        this.octaves = options.octaves;
	        this.baseFrequency = options.baseFrequency;
	    };
	    //extend Effect
	    Tone.extend(Tone.AutoFilter, Tone.Effect);
	    /**
		 *  defaults
		 *  @static
		 *  @type {Object}
		 */
	    Tone.AutoFilter.defaults = {
	        'frequency': 1,
	        'type': 'sine',
	        'depth': 1,
	        'baseFrequency': 200,
	        'octaves': 2.6,
	        'filter': {
	            'type': 'lowpass',
	            'rolloff': -12,
	            'Q': 1
	        }
	    };
	    /**
		 * Start the effect.
		 * @param {Time} [time=now] When the LFO will start. 
		 * @returns {Tone.AutoFilter} this
		 */
	    Tone.AutoFilter.prototype.start = function (time) {
	        this._lfo.start(time);
	        return this;
	    };
	    /**
		 * Stop the effect.
		 * @param {Time} [time=now] When the LFO will stop. 
		 * @returns {Tone.AutoFilter} this
		 */
	    Tone.AutoFilter.prototype.stop = function (time) {
	        this._lfo.stop(time);
	        return this;
	    };
	    /**
		 * Sync the filter to the transport.
		 * @param {Time} [delay=0] Delay time before starting the effect after the
		 *                               Transport has started. 
		 * @returns {Tone.AutoFilter} this
		 */
	    Tone.AutoFilter.prototype.sync = function (delay) {
	        this._lfo.sync(delay);
	        return this;
	    };
	    /**
		 * Unsync the filter from the transport.
		 * @returns {Tone.AutoFilter} this
		 */
	    Tone.AutoFilter.prototype.unsync = function () {
	        this._lfo.unsync();
	        return this;
	    };
	    /**
		 * Type of oscillator attached to the AutoFilter. 
		 * Possible values: "sine", "square", "triangle", "sawtooth".
		 * @memberOf Tone.AutoFilter#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.AutoFilter.prototype, 'type', {
	        get: function () {
	            return this._lfo.type;
	        },
	        set: function (type) {
	            this._lfo.type = type;
	        }
	    });
	    /**
		 * The minimum value of the filter's cutoff frequency.
		 * @memberOf Tone.AutoFilter#
		 * @type {Frequency}
		 * @name min
		 */
	    Object.defineProperty(Tone.AutoFilter.prototype, 'baseFrequency', {
	        get: function () {
	            return this._lfo.min;
	        },
	        set: function (freq) {
	            this._lfo.min = this.toFrequency(freq);
	            //and set the max
	            this.octaves = this._octaves;
	        }
	    });
	    /**
		 * The maximum value of the filter's cutoff frequency. 
		 * @memberOf Tone.AutoFilter#
		 * @type {Positive}
		 * @name octaves
		 */
	    Object.defineProperty(Tone.AutoFilter.prototype, 'octaves', {
	        get: function () {
	            return this._octaves;
	        },
	        set: function (oct) {
	            this._octaves = oct;
	            this._lfo.max = this.baseFrequency * Math.pow(2, oct);
	        }
	    });
	    /**
		 *  Clean up. 
		 *  @returns {Tone.AutoFilter} this
		 */
	    Tone.AutoFilter.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._lfo.dispose();
	        this._lfo = null;
	        this.filter.dispose();
	        this.filter = null;
	        this._writable([
	            'frequency',
	            'depth'
	        ]);
	        this.frequency = null;
	        this.depth = null;
	        return this;
	    };
	    return Tone.AutoFilter;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. 
		 *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. 
		 *  @example
		 * //create an autopanner and start it's LFO
		 * var autoPanner = new Tone.AutoPanner("4n").toMaster().start();
		 * //route an oscillator through the panner and start it
		 * var oscillator = new Tone.Oscillator().connect(autoPanner).start();
		 */
	    Tone.AutoPanner = function () {
	        var options = Tone.defaults(arguments, ['frequency'], Tone.AutoPanner);
	        Tone.Effect.call(this, options);
	        /**
			 *  the lfo which drives the panning
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfo = new Tone.LFO({
	            'frequency': options.frequency,
	            'amplitude': options.depth,
	            'min': -1,
	            'max': 1
	        });
	        /**
			 * The amount of panning between left and right. 
			 * 0 = always center. 1 = full range between left and right. 
			 * @type {NormalRange}
			 * @signal
			 */
	        this.depth = this._lfo.amplitude;
	        /**
			 *  the panner node which does the panning
			 *  @type {Tone.Panner}
			 *  @private
			 */
	        this._panner = new Tone.Panner();
	        /**
			 * How fast the panner modulates between left and right. 
			 * @type {Frequency}
			 * @signal
			 */
	        this.frequency = this._lfo.frequency;
	        //connections
	        this.connectEffect(this._panner);
	        this._lfo.connect(this._panner.pan);
	        this.type = options.type;
	        this._readOnly([
	            'depth',
	            'frequency'
	        ]);
	    };
	    //extend Effect
	    Tone.extend(Tone.AutoPanner, Tone.Effect);
	    /**
		 *  defaults
		 *  @static
		 *  @type {Object}
		 */
	    Tone.AutoPanner.defaults = {
	        'frequency': 1,
	        'type': 'sine',
	        'depth': 1
	    };
	    /**
		 * Start the effect.
		 * @param {Time} [time=now] When the LFO will start. 
		 * @returns {Tone.AutoPanner} this
		 */
	    Tone.AutoPanner.prototype.start = function (time) {
	        this._lfo.start(time);
	        return this;
	    };
	    /**
		 * Stop the effect.
		 * @param {Time} [time=now] When the LFO will stop. 
		 * @returns {Tone.AutoPanner} this
		 */
	    Tone.AutoPanner.prototype.stop = function (time) {
	        this._lfo.stop(time);
	        return this;
	    };
	    /**
		 * Sync the panner to the transport.
		 * @param {Time} [delay=0] Delay time before starting the effect after the
		 *                               Transport has started. 
		 * @returns {Tone.AutoPanner} this
		 */
	    Tone.AutoPanner.prototype.sync = function (delay) {
	        this._lfo.sync(delay);
	        return this;
	    };
	    /**
		 * Unsync the panner from the transport
		 * @returns {Tone.AutoPanner} this
		 */
	    Tone.AutoPanner.prototype.unsync = function () {
	        this._lfo.unsync();
	        return this;
	    };
	    /**
		 * Type of oscillator attached to the AutoFilter. 
		 * Possible values: "sine", "square", "triangle", "sawtooth".
		 * @memberOf Tone.AutoFilter#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.AutoPanner.prototype, 'type', {
	        get: function () {
	            return this._lfo.type;
	        },
	        set: function (type) {
	            this._lfo.type = type;
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.AutoPanner} this
		 */
	    Tone.AutoPanner.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._lfo.dispose();
	        this._lfo = null;
	        this._panner.dispose();
	        this._panner = null;
	        this._writable([
	            'depth',
	            'frequency'
	        ]);
	        this.frequency = null;
	        this.depth = null;
	        return this;
	    };
	    return Tone.AutoPanner;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).
		 *          The frequency of the filter is adjusted proportionally to the
		 *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set
		 *                                            to at the low point of the wah
		 *  @param {Positive} [octaves] The number of octaves above the baseFrequency
		 *                                the filter will sweep to when fully open
		 *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for
		 *                                   the incoming signal. Normal range of -40 to 0.
		 *  @example
		 * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();
		 * //initialize the synth and connect to autowah
		 * var synth = new Synth.connect(autoWah);
		 * //Q value influences the effect of the wah - default is 2
		 * autoWah.Q.value = 6;
		 * //more audible on higher notes
		 * synth.triggerAttackRelease("C4", "8n")
		 */
	    Tone.AutoWah = function () {
	        var options = Tone.defaults(arguments, [
	            'baseFrequency',
	            'octaves',
	            'sensitivity'
	        ], Tone.AutoWah);
	        Tone.Effect.call(this, options);
	        /**
			 *  The envelope follower. Set the attack/release
			 *  timing to adjust how the envelope is followed.
			 *  @type {Tone.Follower}
			 *  @private
			 */
	        this.follower = new Tone.Follower(options.follower);
	        /**
			 *  scales the follower value to the frequency domain
			 *  @type {Tone}
			 *  @private
			 */
	        this._sweepRange = new Tone.ScaleExp(0, 1, 0.5);
	        /**
			 *  @type {number}
			 *  @private
			 */
	        this._baseFrequency = options.baseFrequency;
	        /**
			 *  @type {number}
			 *  @private
			 */
	        this._octaves = options.octaves;
	        /**
			 *  the input gain to adjust the sensitivity
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._inputBoost = new Tone.Gain();
	        /**
			 *  @type {BiquadFilterNode}
			 *  @private
			 */
	        this._bandpass = new Tone.Filter({
	            'rolloff': -48,
	            'frequency': 0,
	            'Q': options.Q
	        });
	        /**
			 *  @type {Tone.Filter}
			 *  @private
			 */
	        this._peaking = new Tone.Filter(0, 'peaking');
	        this._peaking.gain.value = options.gain;
	        /**
			 * The gain of the filter.
			 * @type {Number}
			 * @signal
			 */
	        this.gain = this._peaking.gain;
	        /**
			 * The quality of the filter.
			 * @type {Positive}
			 * @signal
			 */
	        this.Q = this._bandpass.Q;
	        //the control signal path
	        this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);
	        this._sweepRange.connect(this._bandpass.frequency);
	        this._sweepRange.connect(this._peaking.frequency);
	        //the filtered path
	        this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn);
	        //set the initial value
	        this._setSweepRange();
	        this.sensitivity = options.sensitivity;
	        this._readOnly([
	            'gain',
	            'Q'
	        ]);
	    };
	    Tone.extend(Tone.AutoWah, Tone.Effect);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.AutoWah.defaults = {
	        'baseFrequency': 100,
	        'octaves': 6,
	        'sensitivity': 0,
	        'Q': 2,
	        'gain': 2,
	        'follower': {
	            'attack': 0.3,
	            'release': 0.5
	        }
	    };
	    /**
		 * The number of octaves that the filter will sweep above the
		 * baseFrequency.
		 * @memberOf Tone.AutoWah#
		 * @type {Number}
		 * @name octaves
		 */
	    Object.defineProperty(Tone.AutoWah.prototype, 'octaves', {
	        get: function () {
	            return this._octaves;
	        },
	        set: function (octaves) {
	            this._octaves = octaves;
	            this._setSweepRange();
	        }
	    });
	    /**
		 * The base frequency from which the sweep will start from.
		 * @memberOf Tone.AutoWah#
		 * @type {Frequency}
		 * @name baseFrequency
		 */
	    Object.defineProperty(Tone.AutoWah.prototype, 'baseFrequency', {
	        get: function () {
	            return this._baseFrequency;
	        },
	        set: function (baseFreq) {
	            this._baseFrequency = baseFreq;
	            this._setSweepRange();
	        }
	    });
	    /**
		 * The sensitivity to control how responsive to the input signal the filter is.
		 * @memberOf Tone.AutoWah#
		 * @type {Decibels}
		 * @name sensitivity
		 */
	    Object.defineProperty(Tone.AutoWah.prototype, 'sensitivity', {
	        get: function () {
	            return Tone.gainToDb(1 / this._inputBoost.gain.value);
	        },
	        set: function (sensitivy) {
	            this._inputBoost.gain.value = 1 / Tone.dbToGain(sensitivy);
	        }
	    });
	    /**
		 *  sets the sweep range of the scaler
		 *  @private
		 */
	    Tone.AutoWah.prototype._setSweepRange = function () {
	        this._sweepRange.min = this._baseFrequency;
	        this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.AutoWah} this
		 */
	    Tone.AutoWah.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this.follower.dispose();
	        this.follower = null;
	        this._sweepRange.dispose();
	        this._sweepRange = null;
	        this._bandpass.dispose();
	        this._bandpass = null;
	        this._peaking.dispose();
	        this._peaking = null;
	        this._inputBoost.dispose();
	        this._inputBoost = null;
	        this._writable([
	            'gain',
	            'Q'
	        ]);
	        this.gain = null;
	        this.Q = null;
	        return this;
	    };
	    return Tone.AutoWah;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus
		 *         values in the NormalRange.
		 *
		 *  @constructor
		 *  @extends {Tone.SignalBase}
		 *  @param {NormalRange} modulus The modulus to apply.
		 *  @example
		 * var mod = new Tone.Modulo(0.2)
		 * var sig = new Tone.Signal(0.5).connect(mod);
		 * //mod outputs 0.1
		 */
	    Tone.Modulo = function (modulus) {
	        Tone.SignalBase.call(this);
	        this.createInsOuts(1, 0);
	        /**
			 *  A waveshaper gets the integer multiple of
			 *  the input signal and the modulus.
			 *  @private
			 *  @type {Tone.WaveShaper}
			 */
	        this._shaper = new Tone.WaveShaper(Math.pow(2, 16));
	        /**
			 *  the integer multiple is multiplied by the modulus
			 *  @type  {Tone.Multiply}
			 *  @private
			 */
	        this._multiply = new Tone.Multiply();
	        /**
			 *  and subtracted from the input signal
			 *  @type  {Tone.Subtract}
			 *  @private
			 */
	        this._subtract = this.output = new Tone.Subtract();
	        /**
			 *  the modulus signal
			 *  @type  {Tone.Signal}
			 *  @private
			 */
	        this._modSignal = new Tone.Signal(modulus);
	        //connections
	        this.input.fan(this._shaper, this._subtract);
	        this._modSignal.connect(this._multiply, 0, 0);
	        this._shaper.connect(this._multiply, 0, 1);
	        this._multiply.connect(this._subtract, 0, 1);
	        this._setWaveShaper(modulus);
	    };
	    Tone.extend(Tone.Modulo, Tone.SignalBase);
	    /**
		 *  @param  {number}  mod  the modulus to apply
		 *  @private
		 */
	    Tone.Modulo.prototype._setWaveShaper = function (mod) {
	        this._shaper.setMap(function (val) {
	            var multiple = Math.floor((val + 0.0001) / mod);
	            return multiple;
	        });
	    };
	    /**
		 * The modulus value.
		 * @memberOf Tone.Modulo#
		 * @type {NormalRange}
		 * @name value
		 */
	    Object.defineProperty(Tone.Modulo.prototype, 'value', {
	        get: function () {
	            return this._modSignal.value;
	        },
	        set: function (mod) {
	            this._modSignal.value = mod;
	            this._setWaveShaper(mod);
	        }
	    });
	    /**
		 * clean up
		 *  @returns {Tone.Modulo} this
		 */
	    Tone.Modulo.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._shaper.dispose();
	        this._shaper = null;
	        this._multiply.dispose();
	        this._multiply = null;
	        this._subtract.dispose();
	        this._subtract = null;
	        this._modSignal.dispose();
	        this._modSignal = null;
	        return this;
	    };
	    return Tone.Modulo;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth.
		 *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing
		 *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {Number} bits The number of bits to downsample the signal. Nominal range
		 *                       of 1 to 8.
		 *  @example
		 * //initialize crusher and route a synth through it
		 * var crusher = new Tone.BitCrusher(4).toMaster();
		 * var synth = new Tone.MonoSynth().connect(crusher);
		 */
	    Tone.BitCrusher = function () {
	        var options = Tone.defaults(arguments, ['bits'], Tone.BitCrusher);
	        Tone.Effect.call(this, options);
	        var invStepSize = 1 / Math.pow(2, options.bits - 1);
	        /**
			 *  Subtract the input signal and the modulus of the input signal
			 *  @type {Tone.Subtract}
			 *  @private
			 */
	        this._subtract = new Tone.Subtract();
	        /**
			 *  The mod function
			 *  @type  {Tone.Modulo}
			 *  @private
			 */
	        this._modulo = new Tone.Modulo(invStepSize);
	        /**
			 *  keeps track of the bits
			 *  @type {number}
			 *  @private
			 */
	        this._bits = options.bits;
	        //connect it up
	        this.effectSend.fan(this._subtract, this._modulo);
	        this._modulo.connect(this._subtract, 0, 1);
	        this._subtract.connect(this.effectReturn);
	    };
	    Tone.extend(Tone.BitCrusher, Tone.Effect);
	    /**
		 *  the default values
		 *  @static
		 *  @type {Object}
		 */
	    Tone.BitCrusher.defaults = { 'bits': 4 };
	    /**
		 * The bit depth of the effect. Nominal range of 1-8.
		 * @memberOf Tone.BitCrusher#
		 * @type {number}
		 * @name bits
		 */
	    Object.defineProperty(Tone.BitCrusher.prototype, 'bits', {
	        get: function () {
	            return this._bits;
	        },
	        set: function (bits) {
	            this._bits = bits;
	            var invStepSize = 1 / Math.pow(2, bits - 1);
	            this._modulo.value = invStepSize;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.BitCrusher} this
		 */
	    Tone.BitCrusher.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._subtract.dispose();
	        this._subtract = null;
	        this._modulo.dispose();
	        this._modulo = null;
	        return this;
	    };
	    return Tone.BitCrusher;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good 
		 *         for making different types of distortion sounds.
		 *         Note that odd orders sound very different from even ones, 
		 *         and order = 1 is no change. 
		 *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. 
		 *  @example
		 * //create a new cheby
		 * var cheby = new Tone.Chebyshev(50);
		 * //create a monosynth connected to our cheby
		 * synth = new Tone.MonoSynth().connect(cheby);
		 */
	    Tone.Chebyshev = function () {
	        var options = Tone.defaults(arguments, ['order'], Tone.Chebyshev);
	        Tone.Effect.call(this, options);
	        /**
			 *  @type {WaveShaperNode}
			 *  @private
			 */
	        this._shaper = new Tone.WaveShaper(4096);
	        /**
			 * holds onto the order of the filter
			 * @type {number}
			 * @private
			 */
	        this._order = options.order;
	        this.connectEffect(this._shaper);
	        this.order = options.order;
	        this.oversample = options.oversample;
	    };
	    Tone.extend(Tone.Chebyshev, Tone.Effect);
	    /**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Chebyshev.defaults = {
	        'order': 1,
	        'oversample': 'none'
	    };
	    /**
		 *  get the coefficient for that degree
		 *  @param {number} x the x value
		 *  @param   {number} degree 
		 *  @param {Object} memo memoize the computed value. 
		 *                       this speeds up computation greatly. 
		 *  @return  {number}       the coefficient 
		 *  @private
		 */
	    Tone.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {
	        if (memo.hasOwnProperty(degree)) {
	            return memo[degree];
	        } else if (degree === 0) {
	            memo[degree] = 0;
	        } else if (degree === 1) {
	            memo[degree] = x;
	        } else {
	            memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);
	        }
	        return memo[degree];
	    };
	    /**
		 * The order of the Chebyshev polynomial which creates
		 * the equation which is applied to the incoming 
		 * signal through a Tone.WaveShaper. The equations
		 * are in the form:<br>
		 * order 2: 2x^2 + 1<br>
		 * order 3: 4x^3 + 3x <br>
		 * @memberOf Tone.Chebyshev#
		 * @type {Positive}
		 * @name order
		 */
	    Object.defineProperty(Tone.Chebyshev.prototype, 'order', {
	        get: function () {
	            return this._order;
	        },
	        set: function (order) {
	            this._order = order;
	            var curve = new Array(4096);
	            var len = curve.length;
	            for (var i = 0; i < len; ++i) {
	                var x = i * 2 / len - 1;
	                if (x === 0) {
	                    //should output 0 when input is 0
	                    curve[i] = 0;
	                } else {
	                    curve[i] = this._getCoefficient(x, order, {});
	                }
	            }
	            this._shaper.curve = curve;
	        }
	    });
	    /**
		 * The oversampling of the effect. Can either be "none", "2x" or "4x".
		 * @memberOf Tone.Chebyshev#
		 * @type {string}
		 * @name oversample
		 */
	    Object.defineProperty(Tone.Chebyshev.prototype, 'oversample', {
	        get: function () {
	            return this._shaper.oversample;
	        },
	        set: function (oversampling) {
	            this._shaper.oversample = oversampling;
	        }
	    });
	    /**
		 *  Clean up. 
		 *  @returns {Tone.Chebyshev} this
		 */
	    Tone.Chebyshev.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._shaper.dispose();
	        this._shaper = null;
	        return this;
	    };
	    return Tone.Chebyshev;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.
		 *
		 *	@constructor
		 *	@extends {Tone.Effect}
		 */
	    Tone.StereoEffect = function () {
	        //get the defaults
	        Tone.AudioNode.call(this);
	        var options = Tone.defaults(arguments, ['wet'], Tone.Effect);
	        this.createInsOuts(1, 1);
	        /**
			 *  the drywet knob to control the amount of effect
			 *  @type {Tone.CrossFade}
			 *  @private
			 */
	        this._dryWet = new Tone.CrossFade(options.wet);
	        /**
			 *  The wet control, i.e. how much of the effected
			 *  will pass through to the output.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.wet = this._dryWet.fade;
	        /**
			 *  then split it
			 *  @type {Tone.Split}
			 *  @private
			 */
	        this._split = new Tone.Split();
	        /**
			 *  the effects send LEFT
			 *  @type {GainNode}
			 *  @private
			 */
	        this.effectSendL = this._split.left;
	        /**
			 *  the effects send RIGHT
			 *  @type {GainNode}
			 *  @private
			 */
	        this.effectSendR = this._split.right;
	        /**
			 *  the stereo effect merger
			 *  @type {Tone.Merge}
			 *  @private
			 */
	        this._merge = new Tone.Merge();
	        /**
			 *  the effect return LEFT
			 *  @type {GainNode}
			 *  @private
			 */
	        this.effectReturnL = this._merge.left;
	        /**
			 *  the effect return RIGHT
			 *  @type {GainNode}
			 *  @private
			 */
	        this.effectReturnR = this._merge.right;
	        //connections
	        this.input.connect(this._split);
	        //dry wet connections
	        this.input.connect(this._dryWet, 0, 0);
	        this._merge.connect(this._dryWet, 0, 1);
	        this._dryWet.connect(this.output);
	        this._readOnly(['wet']);
	    };
	    Tone.extend(Tone.StereoEffect, Tone.Effect);
	    /**
		 *  Clean up.
		 *  @returns {Tone.StereoEffect} this
		 */
	    Tone.StereoEffect.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._dryWet.dispose();
	        this._dryWet = null;
	        this._split.dispose();
	        this._split = null;
	        this._merge.dispose();
	        this._merge = null;
	        this.effectSendL = null;
	        this.effectSendR = null;
	        this.effectReturnL = null;
	        this.effectReturnR = null;
	        this._writable(['wet']);
	        this.wet = null;
	        return this;
	    };
	    return Tone.StereoEffect;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Chorus is a stereo chorus effect composed of
		 *         a left and right delay with a Tone.LFO applied to the delayTime of each channel.
		 *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
		 *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
		 *
		 *	@constructor
		 *	@extends {Tone.StereoEffect}
		 *	@param {Frequency|Object} [frequency] The frequency of the LFO.
		 *	@param {Milliseconds} [delayTime] The delay of the chorus effect in ms.
		 *	@param {NormalRange} [depth] The depth of the chorus.
		 *	@example
		 * var chorus = new Tone.Chorus(4, 2.5, 0.5);
		 * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);
		 * synth.triggerAttackRelease(["C3","E3","G3"], "8n");
		 */
	    Tone.Chorus = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'delayTime',
	            'depth'
	        ], Tone.Chorus);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  the depth of the chorus
			 *  @type {number}
			 *  @private
			 */
	        this._depth = options.depth;
	        /**
			 *  the delayTime
			 *  @type {number}
			 *  @private
			 */
	        this._delayTime = options.delayTime / 1000;
	        /**
			 *  the lfo which controls the delayTime
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfoL = new Tone.LFO({
	            'frequency': options.frequency,
	            'min': 0,
	            'max': 1
	        });
	        /**
			 *  another LFO for the right side with a 180 degree phase diff
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfoR = new Tone.LFO({
	            'frequency': options.frequency,
	            'min': 0,
	            'max': 1,
	            'phase': 180
	        });
	        /**
			 *  delay for left
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._delayNodeL = new Tone.Delay();
	        /**
			 *  delay for right
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._delayNodeR = new Tone.Delay();
	        /**
			 * The frequency of the LFO which modulates the delayTime.
			 * @type {Frequency}
			 * @signal
			 */
	        this.frequency = this._lfoL.frequency;
	        //connections
	        this.effectSendL.chain(this._delayNodeL, this.effectReturnL);
	        this.effectSendR.chain(this._delayNodeR, this.effectReturnR);
	        //and pass through to make the detune apparent
	        this.effectSendL.connect(this.effectReturnL);
	        this.effectSendR.connect(this.effectReturnR);
	        //lfo setup
	        this._lfoL.connect(this._delayNodeL.delayTime);
	        this._lfoR.connect(this._delayNodeR.delayTime);
	        //start the lfo
	        this._lfoL.start();
	        this._lfoR.start();
	        //have one LFO frequency control the other
	        this._lfoL.frequency.connect(this._lfoR.frequency);
	        //set the initial values
	        this.depth = this._depth;
	        this.frequency.value = options.frequency;
	        this.type = options.type;
	        this._readOnly(['frequency']);
	        this.spread = options.spread;
	    };
	    Tone.extend(Tone.Chorus, Tone.StereoEffect);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Chorus.defaults = {
	        'frequency': 1.5,
	        'delayTime': 3.5,
	        'depth': 0.7,
	        'type': 'sine',
	        'spread': 180
	    };
	    /**
		 * The depth of the effect. A depth of 1 makes the delayTime
		 * modulate between 0 and 2*delayTime (centered around the delayTime).
		 * @memberOf Tone.Chorus#
		 * @type {NormalRange}
		 * @name depth
		 */
	    Object.defineProperty(Tone.Chorus.prototype, 'depth', {
	        get: function () {
	            return this._depth;
	        },
	        set: function (depth) {
	            this._depth = depth;
	            var deviation = this._delayTime * depth;
	            this._lfoL.min = Math.max(this._delayTime - deviation, 0);
	            this._lfoL.max = this._delayTime + deviation;
	            this._lfoR.min = Math.max(this._delayTime - deviation, 0);
	            this._lfoR.max = this._delayTime + deviation;
	        }
	    });
	    /**
		 * The delayTime in milliseconds of the chorus. A larger delayTime
		 * will give a more pronounced effect. Nominal range a delayTime
		 * is between 2 and 20ms.
		 * @memberOf Tone.Chorus#
		 * @type {Milliseconds}
		 * @name delayTime
		 */
	    Object.defineProperty(Tone.Chorus.prototype, 'delayTime', {
	        get: function () {
	            return this._delayTime * 1000;
	        },
	        set: function (delayTime) {
	            this._delayTime = delayTime / 1000;
	            this.depth = this._depth;
	        }
	    });
	    /**
		 * The oscillator type of the LFO.
		 * @memberOf Tone.Chorus#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.Chorus.prototype, 'type', {
	        get: function () {
	            return this._lfoL.type;
	        },
	        set: function (type) {
	            this._lfoL.type = type;
	            this._lfoR.type = type;
	        }
	    });
	    /**
		 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
		 * When set to 180, LFO's will be panned hard left and right respectively.
		 * @memberOf Tone.Chorus#
		 * @type {Degrees}
		 * @name spread
		 */
	    Object.defineProperty(Tone.Chorus.prototype, 'spread', {
	        get: function () {
	            return this._lfoR.phase - this._lfoL.phase;
	        },
	        set: function (spread) {
	            this._lfoL.phase = 90 - spread / 2;
	            this._lfoR.phase = spread / 2 + 90;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.Chorus} this
		 */
	    Tone.Chorus.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        this._lfoL.dispose();
	        this._lfoL = null;
	        this._lfoR.dispose();
	        this._lfoR = null;
	        this._delayNodeL.dispose();
	        this._delayNodeL = null;
	        this._delayNodeR.dispose();
	        this._delayNodeR = null;
	        this._writable('frequency');
	        this.frequency = null;
	        return this;
	    };
	    return Tone.Chorus;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Convolver is a wrapper around the Native Web Audio
		 *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
		 *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
		 *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer
		 *                                           contianing the impulse response.
		 *  @param {Function=} onload The callback to invoke when the url is loaded.
		 *  @example
		 * //initializing the convolver with an impulse response
		 * var convolver = new Tone.Convolver("./path/to/ir.wav").toMaster();
		 */
	    Tone.Convolver = function () {
	        var options = Tone.defaults(arguments, [
	            'url',
	            'onload'
	        ], Tone.Convolver);
	        Tone.Effect.call(this, options);
	        /**
			 *  convolver node
			 *  @type {ConvolverNode}
			 *  @private
			 */
	        this._convolver = this.context.createConvolver();
	        /**
			 *  the convolution buffer
			 *  @type {Tone.Buffer}
			 *  @private
			 */
	        this._buffer = new Tone.Buffer(options.url, function (buffer) {
	            this._convolver.buffer = buffer.get();
	            options.onload();
	        }.bind(this));
	        this.connectEffect(this._convolver);
	    };
	    Tone.extend(Tone.Convolver, Tone.Effect);
	    /**
		 *  @static
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.Convolver.defaults = { 'onload': Tone.noOp };
	    /**
		 *  The convolver's buffer
		 *  @memberOf Tone.Convolver#
		 *  @type {AudioBuffer}
		 *  @name buffer
		 */
	    Object.defineProperty(Tone.Convolver.prototype, 'buffer', {
	        get: function () {
	            return this._buffer.get();
	        },
	        set: function (buffer) {
	            this._buffer.set(buffer);
	            this._convolver.buffer = this._buffer.get();
	        }
	    });
	    /**
		 *  Load an impulse response url as an audio buffer.
		 *  Decodes the audio asynchronously and invokes
		 *  the callback once the audio buffer loads.
		 *  @param {string} url The url of the buffer to load.
		 *                      filetype support depends on the
		 *                      browser.
		 *  @param  {function=} callback
		 *  @returns {Promise}
		 */
	    Tone.Convolver.prototype.load = function (url, callback) {
	        return this._buffer.load(url, function (buff) {
	            this.buffer = buff;
	            if (callback) {
	                callback();
	            }
	        }.bind(this));
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Convolver} this
		 */
	    Tone.Convolver.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._convolver.disconnect();
	        this._convolver = null;
	        this._buffer.dispose();
	        this._buffer = null;
	        return this;
	    };
	    return Tone.Convolver;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.
		 *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)
		 *  @example
		 * var dist = new Tone.Distortion(0.8).toMaster();
		 * var fm = new Tone.SimpleFM().connect(dist);
		 * //this sounds good on bass notes
		 * fm.triggerAttackRelease("A1", "8n");
		 */
	    Tone.Distortion = function () {
	        var options = Tone.defaults(arguments, ['distortion'], Tone.Distortion);
	        Tone.Effect.call(this, options);
	        /**
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */
	        this._shaper = new Tone.WaveShaper(4096);
	        /**
			 * holds the distortion amount
			 * @type {number}
			 * @private
			 */
	        this._distortion = options.distortion;
	        this.connectEffect(this._shaper);
	        this.distortion = options.distortion;
	        this.oversample = options.oversample;
	    };
	    Tone.extend(Tone.Distortion, Tone.Effect);
	    /**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Distortion.defaults = {
	        'distortion': 0.4,
	        'oversample': 'none'
	    };
	    /**
		 * The amount of distortion.
		 * @memberOf Tone.Distortion#
		 * @type {NormalRange}
		 * @name distortion
		 */
	    Object.defineProperty(Tone.Distortion.prototype, 'distortion', {
	        get: function () {
	            return this._distortion;
	        },
	        set: function (amount) {
	            this._distortion = amount;
	            var k = amount * 100;
	            var deg = Math.PI / 180;
	            this._shaper.setMap(function (x) {
	                if (Math.abs(x) < 0.001) {
	                    //should output 0 when input is 0
	                    return 0;
	                } else {
	                    return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
	                }
	            });
	        }
	    });
	    /**
		 * The oversampling of the effect. Can either be "none", "2x" or "4x".
		 * @memberOf Tone.Distortion#
		 * @type {string}
		 * @name oversample
		 */
	    Object.defineProperty(Tone.Distortion.prototype, 'oversample', {
	        get: function () {
	            return this._shaper.oversample;
	        },
	        set: function (oversampling) {
	            this._shaper.oversample = oversampling;
	        }
	    });
	    /**
		 *  Clean up. 
		 *  @returns {Tone.Distortion} this
		 */
	    Tone.Distortion.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._shaper.dispose();
	        this._shaper = null;
	        return this;
	    };
	    return Tone.Distortion;
	});
	Module(function (Tone) {
	    
	    /**
		 * 	@class  Tone.FeedbackEffect provides a loop between an 
		 * 	        audio source and its own output. This is a base-class
		 * 	        for feedback effects. 
		 *
		 *  @constructor
		 *  @extends {Tone.Effect}
		 *  @param {NormalRange|Object} [feedback] The initial feedback value.
		 */
	    Tone.FeedbackEffect = function () {
	        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);
	        Tone.Effect.call(this, options);
	        /**
			 *  the gain which controls the feedback
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._feedbackGain = new Tone.Gain(options.feedback, Tone.Type.NormalRange);
	        /**
			 *  The amount of signal which is fed back into the effect input. 
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.feedback = this._feedbackGain.gain;
	        //the feedback loop
	        this.effectReturn.chain(this._feedbackGain, this.effectSend);
	        this._readOnly(['feedback']);
	    };
	    Tone.extend(Tone.FeedbackEffect, Tone.Effect);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.FeedbackEffect.defaults = { 'feedback': 0.125 };
	    /**
		 *  Clean up. 
		 *  @returns {Tone.FeedbackEffect} this
		 */
	    Tone.FeedbackEffect.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._writable(['feedback']);
	        this._feedbackGain.dispose();
	        this._feedbackGain = null;
	        this.feedback = null;
	        return this;
	    };
	    return Tone.FeedbackEffect;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.FeedbackDelay is a DelayNode in which part of output
		 *          signal is fed back into the delay.
		 *
		 *  @constructor
		 *  @extends {Tone.FeedbackEffect}
		 *  @param {Time|Object} [delayTime] The delay applied to the incoming signal.
		 *  @param {NormalRange=} feedback The amount of the effected signal which
		 *                            is fed back through the delay.
		 *  @example
		 * var feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toMaster();
		 * var tom = new Tone.DrumSynth({
		 * 	"octaves" : 4,
		 * 	"pitchDecay" : 0.1
		 * }).connect(feedbackDelay);
		 * tom.triggerAttackRelease("A2","32n");
		 */
	    Tone.FeedbackDelay = function () {
	        var options = Tone.defaults(arguments, [
	            'delayTime',
	            'feedback'
	        ], Tone.FeedbackDelay);
	        Tone.FeedbackEffect.call(this, options);
	        /**
			 *  the delay node
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._delayNode = new Tone.Delay(options.delayTime, options.maxDelay);
	        /**
			 *  The delayTime of the DelayNode.
			 *  @type {Time}
			 *  @signal
			 */
	        this.delayTime = this._delayNode.delayTime;
	        // connect it up
	        this.connectEffect(this._delayNode);
	        this._readOnly(['delayTime']);
	    };
	    Tone.extend(Tone.FeedbackDelay, Tone.FeedbackEffect);
	    /**
		 *  The default values.
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.FeedbackDelay.defaults = {
	        'delayTime': 0.25,
	        'maxDelay': 1
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.FeedbackDelay} this
		 */
	    Tone.FeedbackDelay.prototype.dispose = function () {
	        Tone.FeedbackEffect.prototype.dispose.call(this);
	        this._delayNode.dispose();
	        this._delayNode = null;
	        this._writable(['delayTime']);
	        this.delayTime = null;
	        return this;
	    };
	    return Tone.FeedbackDelay;
	});
	Module(function (Tone) {
	    
	    /**
		 *  an array of comb filter delay values from Freeverb implementation
		 *  @static
		 *  @private
		 *  @type {Array}
		 */
	    var combFilterTunings = [
	        1557 / 44100,
	        1617 / 44100,
	        1491 / 44100,
	        1422 / 44100,
	        1277 / 44100,
	        1356 / 44100,
	        1188 / 44100,
	        1116 / 44100
	    ];
	    /**
		 *  an array of allpass filter frequency values from Freeverb implementation
		 *  @private
		 *  @static
		 *  @type {Array}
		 */
	    var allpassFilterFrequencies = [
	        225,
	        556,
	        441,
	        341
	    ];
	    /**
		 *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
		 *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.
		 *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part
		 *                                 of the reverb.
		 *  @example
		 * var freeverb = new Tone.Freeverb().toMaster();
		 * freeverb.dampening.value = 1000;
		 * //routing synth through the reverb
		 * var synth = new Tone.AMSynth().connect(freeverb);
		 */
	    Tone.Freeverb = function () {
	        var options = Tone.defaults(arguments, [
	            'roomSize',
	            'dampening'
	        ], Tone.Freeverb);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  The roomSize value between. A larger roomSize
			 *  will result in a longer decay.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
	        /**
			 *  The amount of dampening of the reverberant signal.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.dampening = new Tone.Signal(options.dampening, Tone.Type.Frequency);
	        /**
			 *  the comb filters
			 *  @type {Array}
			 *  @private
			 */
	        this._combFilters = [];
	        /**
			 *  the allpass filters on the left
			 *  @type {Array}
			 *  @private
			 */
	        this._allpassFiltersL = [];
	        /**
			 *  the allpass filters on the right
			 *  @type {Array}
			 *  @private
			 */
	        this._allpassFiltersR = [];
	        //make the allpass filters on the right
	        for (var l = 0; l < allpassFilterFrequencies.length; l++) {
	            var allpassL = this.context.createBiquadFilter();
	            allpassL.type = 'allpass';
	            allpassL.frequency.value = allpassFilterFrequencies[l];
	            this._allpassFiltersL.push(allpassL);
	        }
	        //make the allpass filters on the left
	        for (var r = 0; r < allpassFilterFrequencies.length; r++) {
	            var allpassR = this.context.createBiquadFilter();
	            allpassR.type = 'allpass';
	            allpassR.frequency.value = allpassFilterFrequencies[r];
	            this._allpassFiltersR.push(allpassR);
	        }
	        //make the comb filters
	        for (var c = 0; c < combFilterTunings.length; c++) {
	            var lfpf = new Tone.LowpassCombFilter(combFilterTunings[c]);
	            if (c < combFilterTunings.length / 2) {
	                this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);
	            } else {
	                this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);
	            }
	            this.roomSize.connect(lfpf.resonance);
	            this.dampening.connect(lfpf.dampening);
	            this._combFilters.push(lfpf);
	        }
	        //chain the allpass filters togetehr
	        Tone.connectSeries.apply(Tone, this._allpassFiltersL);
	        Tone.connectSeries.apply(Tone, this._allpassFiltersR);
	        this._allpassFiltersL[this._allpassFiltersL.length - 1].connect(this.effectReturnL);
	        this._allpassFiltersR[this._allpassFiltersR.length - 1].connect(this.effectReturnR);
	        this._readOnly([
	            'roomSize',
	            'dampening'
	        ]);
	    };
	    Tone.extend(Tone.Freeverb, Tone.StereoEffect);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Freeverb.defaults = {
	        'roomSize': 0.7,
	        'dampening': 3000
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Freeverb} this
		 */
	    Tone.Freeverb.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        for (var al = 0; al < this._allpassFiltersL.length; al++) {
	            this._allpassFiltersL[al].disconnect();
	            this._allpassFiltersL[al] = null;
	        }
	        this._allpassFiltersL = null;
	        for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {
	            this._allpassFiltersR[ar].disconnect();
	            this._allpassFiltersR[ar] = null;
	        }
	        this._allpassFiltersR = null;
	        for (var cf = 0; cf < this._combFilters.length; cf++) {
	            this._combFilters[cf].dispose();
	            this._combFilters[cf] = null;
	        }
	        this._combFilters = null;
	        this._writable([
	            'roomSize',
	            'dampening'
	        ]);
	        this.roomSize.dispose();
	        this.roomSize = null;
	        this.dampening.dispose();
	        this.dampening = null;
	        return this;
	    };
	    return Tone.Freeverb;
	});
	Module(function (Tone) {
	    
	    /**
		 *  an array of the comb filter delay time values
		 *  @private
		 *  @static
		 *  @type {Array}
		 */
	    var combFilterDelayTimes = [
	        1687 / 25000,
	        1601 / 25000,
	        2053 / 25000,
	        2251 / 25000
	    ];
	    /**
		 *  the resonances of each of the comb filters
		 *  @private
		 *  @static
		 *  @type {Array}
		 */
	    var combFilterResonances = [
	        0.773,
	        0.802,
	        0.753,
	        0.733
	    ];
	    /**
		 *  the allpass filter frequencies
		 *  @private
		 *  @static
		 *  @type {Array}
		 */
	    var allpassFilterFreqs = [
	        347,
	        113,
	        37
	    ];
	    /**
		 *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
		 *         tuned by John Chowning in 1970.
		 *         It is made up of three allpass filters and four Tone.FeedbackCombFilter.
		 *
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.
		 *  @example
		 * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);
		 * var delay = new Tone.FeedbackDelay(0.5);
		 * //connecting the synth to reverb through delay
		 * var synth = new Tone.DuoSynth().chain(delay, reverb);
		 * synth.triggerAttackRelease("A4","8n");
		 */
	    Tone.JCReverb = function () {
	        var options = Tone.defaults(arguments, ['roomSize'], Tone.JCReverb);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  room size control values between [0,1]
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.roomSize = new Tone.Signal(options.roomSize, Tone.Type.NormalRange);
	        /**
			 *  scale the room size
			 *  @type {Tone.Scale}
			 *  @private
			 */
	        this._scaleRoomSize = new Tone.Scale(-0.733, 0.197);
	        /**
			 *  a series of allpass filters
			 *  @type {Array}
			 *  @private
			 */
	        this._allpassFilters = [];
	        /**
			 *  parallel feedback comb filters
			 *  @type {Array}
			 *  @private
			 */
	        this._feedbackCombFilters = [];
	        //make the allpass filters
	        for (var af = 0; af < allpassFilterFreqs.length; af++) {
	            var allpass = this.context.createBiquadFilter();
	            allpass.type = 'allpass';
	            allpass.frequency.value = allpassFilterFreqs[af];
	            this._allpassFilters.push(allpass);
	        }
	        //and the comb filters
	        for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {
	            var fbcf = new Tone.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);
	            this._scaleRoomSize.connect(fbcf.resonance);
	            fbcf.resonance.value = combFilterResonances[cf];
	            this._allpassFilters[this._allpassFilters.length - 1].connect(fbcf);
	            if (cf < combFilterDelayTimes.length / 2) {
	                fbcf.connect(this.effectReturnL);
	            } else {
	                fbcf.connect(this.effectReturnR);
	            }
	            this._feedbackCombFilters.push(fbcf);
	        }
	        //chain the allpass filters together
	        this.roomSize.connect(this._scaleRoomSize);
	        Tone.connectSeries.apply(Tone, this._allpassFilters);
	        this.effectSendL.connect(this._allpassFilters[0]);
	        this.effectSendR.connect(this._allpassFilters[0]);
	        this._readOnly(['roomSize']);
	    };
	    Tone.extend(Tone.JCReverb, Tone.StereoEffect);
	    /**
		 *  the default values
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.JCReverb.defaults = { 'roomSize': 0.5 };
	    /**
		 *  Clean up.
		 *  @returns {Tone.JCReverb} this
		 */
	    Tone.JCReverb.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        for (var apf = 0; apf < this._allpassFilters.length; apf++) {
	            this._allpassFilters[apf].disconnect();
	            this._allpassFilters[apf] = null;
	        }
	        this._allpassFilters = null;
	        for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {
	            this._feedbackCombFilters[fbcf].dispose();
	            this._feedbackCombFilters[fbcf] = null;
	        }
	        this._feedbackCombFilters = null;
	        this._writable(['roomSize']);
	        this.roomSize.dispose();
	        this.roomSize = null;
	        this._scaleRoomSize.dispose();
	        this._scaleRoomSize = null;
	        return this;
	    };
	    return Tone.JCReverb;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Mid/Side processing separates the the 'mid' signal
		 *         (which comes out of both the left and the right channel)
		 *         and the 'side' (which only comes out of the the side channels)
		 *         and effects them separately before being recombined.
		 *         Applies a Mid/Side seperation and recombination.
		 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
		 *         <br><br>
		 *         This is a base-class for Mid/Side Effects.
		 *
		 *  @extends {Tone.Effect}
		 *  @constructor
		 */
	    Tone.MidSideEffect = function () {
	        Tone.Effect.apply(this, arguments);
	        /**
			 *  The mid/side split
			 *  @type  {Tone.MidSideSplit}
			 *  @private
			 */
	        this._midSideSplit = new Tone.MidSideSplit();
	        /**
			 *  The mid/side merge
			 *  @type  {Tone.MidSideMerge}
			 *  @private
			 */
	        this._midSideMerge = new Tone.MidSideMerge();
	        /**
			 *  The mid send. Connect to mid processing
			 *  @type {Tone}
			 *  @private
			 */
	        this.midSend = this._midSideSplit.mid;
	        /**
			 *  The side send. Connect to side processing
			 *  @type {Tone}
			 *  @private
			 */
	        this.sideSend = this._midSideSplit.side;
	        /**
			 *  The mid return connection
			 *  @type {GainNode}
			 *  @private
			 */
	        this.midReturn = this._midSideMerge.mid;
	        /**
			 *  The side return connection
			 *  @type {GainNode}
			 *  @private
			 */
	        this.sideReturn = this._midSideMerge.side;
	        //the connections
	        this.effectSend.connect(this._midSideSplit);
	        this._midSideMerge.connect(this.effectReturn);
	    };
	    Tone.extend(Tone.MidSideEffect, Tone.Effect);
	    /**
		 *  Clean up.
		 *  @returns {Tone.MidSideEffect} this
		 */
	    Tone.MidSideEffect.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._midSideSplit.dispose();
	        this._midSideSplit = null;
	        this._midSideMerge.dispose();
	        this._midSideMerge = null;
	        this.midSend = null;
	        this.sideSend = null;
	        this.midReturn = null;
	        this.sideReturn = null;
	        return this;
	    };
	    return Tone.MidSideEffect;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase
		 *         of different frequency components of an incoming signal. Read more on
		 *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).
		 *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
		 *
		 *	@extends {Tone.StereoEffect}
		 *	@constructor
		 *	@param {Frequency|Object} [frequency] The speed of the phasing.
		 *	@param {number} [octaves] The octaves of the effect.
		 *	@param {Frequency} [baseFrequency] The base frequency of the filters.
		 *	@example
		 * var phaser = new Tone.Phaser({
		 * 	"frequency" : 15,
		 * 	"octaves" : 5,
		 * 	"baseFrequency" : 1000
		 * }).toMaster();
		 * var synth = new Tone.FMSynth().connect(phaser);
		 * synth.triggerAttackRelease("E3", "2n");
		 */
	    Tone.Phaser = function () {
	        //set the defaults
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'octaves',
	            'baseFrequency'
	        ], Tone.Phaser);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  the lfo which controls the frequency on the left side
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfoL = new Tone.LFO(options.frequency, 0, 1);
	        /**
			 *  the lfo which controls the frequency on the right side
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfoR = new Tone.LFO(options.frequency, 0, 1);
	        this._lfoR.phase = 180;
	        /**
			 *  the base modulation frequency
			 *  @type {number}
			 *  @private
			 */
	        this._baseFrequency = options.baseFrequency;
	        /**
			 *  the octaves of the phasing
			 *  @type {number}
			 *  @private
			 */
	        this._octaves = options.octaves;
	        /**
			 *  The quality factor of the filters
			 *  @type {Positive}
			 *  @signal
			 */
	        this.Q = new Tone.Signal(options.Q, Tone.Type.Positive);
	        /**
			 *  the array of filters for the left side
			 *  @type {Array}
			 *  @private
			 */
	        this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);
	        /**
			 *  the array of filters for the left side
			 *  @type {Array}
			 *  @private
			 */
	        this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);
	        /**
			 * the frequency of the effect
			 * @type {Tone.Signal}
			 */
	        this.frequency = this._lfoL.frequency;
	        this.frequency.value = options.frequency;
	        //connect them up
	        this.effectSendL.connect(this._filtersL[0]);
	        this.effectSendR.connect(this._filtersR[0]);
	        this._filtersL[options.stages - 1].connect(this.effectReturnL);
	        this._filtersR[options.stages - 1].connect(this.effectReturnR);
	        //control the frequency with one LFO
	        this._lfoL.frequency.connect(this._lfoR.frequency);
	        //set the options
	        this.baseFrequency = options.baseFrequency;
	        this.octaves = options.octaves;
	        //start the lfo
	        this._lfoL.start();
	        this._lfoR.start();
	        this._readOnly([
	            'frequency',
	            'Q'
	        ]);
	    };
	    Tone.extend(Tone.Phaser, Tone.StereoEffect);
	    /**
		 *  defaults
		 *  @static
		 *  @type {object}
		 */
	    Tone.Phaser.defaults = {
	        'frequency': 0.5,
	        'octaves': 3,
	        'stages': 10,
	        'Q': 10,
	        'baseFrequency': 350
	    };
	    /**
		 *  @param {number} stages
		 *  @returns {Array} the number of filters all connected together
		 *  @private
		 */
	    Tone.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {
	        var filters = new Array(stages);
	        //make all the filters
	        for (var i = 0; i < stages; i++) {
	            var filter = this.context.createBiquadFilter();
	            filter.type = 'allpass';
	            Q.connect(filter.Q);
	            connectToFreq.connect(filter.frequency);
	            filters[i] = filter;
	        }
	        Tone.connectSeries.apply(Tone, filters);
	        return filters;
	    };
	    /**
		 * The number of octaves the phase goes above
		 * the baseFrequency
		 * @memberOf Tone.Phaser#
		 * @type {Positive}
		 * @name octaves
		 */
	    Object.defineProperty(Tone.Phaser.prototype, 'octaves', {
	        get: function () {
	            return this._octaves;
	        },
	        set: function (octaves) {
	            this._octaves = octaves;
	            var max = this._baseFrequency * Math.pow(2, octaves);
	            this._lfoL.max = max;
	            this._lfoR.max = max;
	        }
	    });
	    /**
		 * The the base frequency of the filters.
		 * @memberOf Tone.Phaser#
		 * @type {number}
		 * @name baseFrequency
		 */
	    Object.defineProperty(Tone.Phaser.prototype, 'baseFrequency', {
	        get: function () {
	            return this._baseFrequency;
	        },
	        set: function (freq) {
	            this._baseFrequency = freq;
	            this._lfoL.min = freq;
	            this._lfoR.min = freq;
	            this.octaves = this._octaves;
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.Phaser} this
		 */
	    Tone.Phaser.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'Q'
	        ]);
	        this.Q.dispose();
	        this.Q = null;
	        this._lfoL.dispose();
	        this._lfoL = null;
	        this._lfoR.dispose();
	        this._lfoR = null;
	        for (var i = 0; i < this._filtersL.length; i++) {
	            this._filtersL[i].disconnect();
	            this._filtersL[i] = null;
	        }
	        this._filtersL = null;
	        for (var j = 0; j < this._filtersR.length; j++) {
	            this._filtersR[j].disconnect();
	            this._filtersR[j] = null;
	        }
	        this._filtersR = null;
	        this.frequency = null;
	        return this;
	    };
	    return Tone.Phaser;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Just like a stereo feedback effect, but the feedback is routed from left to right
		 *         and right to left instead of on the same channel.
		 *
		 *	@constructor
		 *	@extends {Tone.StereoEffect}
		 */
	    Tone.StereoXFeedbackEffect = function () {
	        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  The amount of feedback from the output
			 *  back into the input of the effect (routed
			 *  across left and right channels).
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
	        /**
			 *  the left side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._feedbackLR = new Tone.Gain();
	        /**
			 *  the right side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._feedbackRL = new Tone.Gain();
	        //connect it up
	        this.effectReturnL.chain(this._feedbackLR, this.effectSendR);
	        this.effectReturnR.chain(this._feedbackRL, this.effectSendL);
	        this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);
	        this._readOnly(['feedback']);
	    };
	    Tone.extend(Tone.StereoXFeedbackEffect, Tone.StereoEffect);
	    /**
		 *  clean up
		 *  @returns {Tone.StereoXFeedbackEffect} this
		 */
	    Tone.StereoXFeedbackEffect.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        this._writable(['feedback']);
	        this.feedback.dispose();
	        this.feedback = null;
	        this._feedbackLR.dispose();
	        this._feedbackLR = null;
	        this._feedbackRL.dispose();
	        this._feedbackRL = null;
	        return this;
	    };
	    return Tone.StereoXFeedbackEffect;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard
		 *          first in one channel and next in the opposite channel. In a stereo
		 *          system these are the right and left channels.
		 *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays
		 *          with independent delay values. Each delay is routed to one channel
		 *          (left or right), and the channel triggered second will always
		 *          trigger at the same interval after the first.
		 *
		 * 	@constructor
		 * 	@extends {Tone.StereoXFeedbackEffect}
		 *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.
		 *  @param {NormalRange=} feedback The amount of the effected signal which
		 *                                 is fed back through the delay.
		 *  @example
		 * var pingPong = new Tone.PingPongDelay("4n", 0.2).toMaster();
		 * var drum = new Tone.DrumSynth().connect(pingPong);
		 * drum.triggerAttackRelease("C4", "32n");
		 */
	    Tone.PingPongDelay = function () {
	        var options = Tone.defaults(arguments, [
	            'delayTime',
	            'feedback'
	        ], Tone.PingPongDelay);
	        Tone.StereoXFeedbackEffect.call(this, options);
	        /**
			 *  the delay node on the left side
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._leftDelay = new Tone.Delay(0, options.maxDelayTime);
	        /**
			 *  the delay node on the right side
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._rightDelay = new Tone.Delay(0, options.maxDelayTime);
	        /**
			 *  the predelay on the right side
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._rightPreDelay = new Tone.Delay(0, options.maxDelayTime);
	        /**
			 *  the delay time signal
			 *  @type {Time}
			 *  @signal
			 */
	        this.delayTime = new Tone.Signal(options.delayTime, Tone.Type.Time);
	        //connect it up
	        this.effectSendL.chain(this._leftDelay, this.effectReturnL);
	        this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);
	        this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime);
	        //rearranged the feedback to be after the rightPreDelay
	        this._feedbackLR.disconnect();
	        this._feedbackLR.connect(this._rightDelay);
	        this._readOnly(['delayTime']);
	    };
	    Tone.extend(Tone.PingPongDelay, Tone.StereoXFeedbackEffect);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.PingPongDelay.defaults = {
	        'delayTime': 0.25,
	        'maxDelayTime': 1
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.PingPongDelay} this
		 */
	    Tone.PingPongDelay.prototype.dispose = function () {
	        Tone.StereoXFeedbackEffect.prototype.dispose.call(this);
	        this._leftDelay.dispose();
	        this._leftDelay = null;
	        this._rightDelay.dispose();
	        this._rightDelay = null;
	        this._rightPreDelay.dispose();
	        this._rightPreDelay = null;
	        this._writable(['delayTime']);
	        this.delayTime.dispose();
	        this.delayTime = null;
	        return this;
	    };
	    return Tone.PingPongDelay;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal.
		 *         The effect is achieved by speeding up or slowing down the delayTime
		 *         of a DelayNode using a sawtooth wave.
		 *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
		 *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
		 *
		 *  @extends {Tone.FeedbackEffect}
		 *  @param {Interval=} pitch The interval to transpose the incoming signal by.
		 */
	    Tone.PitchShift = function () {
	        var options = Tone.defaults(arguments, ['pitch'], Tone.PitchShift);
	        Tone.FeedbackEffect.call(this, options);
	        /**
			 *  The pitch signal
			 *  @type  {Tone.Signal}
			 *  @private
			 */
	        this._frequency = new Tone.Signal(0);
	        /**
			 *  Uses two DelayNodes to cover up the jump in
			 *  the sawtooth wave.
			 *  @type  {DelayNode}
			 *  @private
			 */
	        this._delayA = new Tone.Delay(0, 1);
	        /**
			 *  The first LFO.
			 *  @type  {Tone.LFO}
			 *  @private
			 */
	        this._lfoA = new Tone.LFO({
	            'min': 0,
	            'max': 0.1,
	            'type': 'sawtooth'
	        }).connect(this._delayA.delayTime);
	        /**
			 *  The second DelayNode
			 *  @type  {DelayNode}
			 *  @private
			 */
	        this._delayB = new Tone.Delay(0, 1);
	        /**
			 *  The first LFO.
			 *  @type  {Tone.LFO}
			 *  @private
			 */
	        this._lfoB = new Tone.LFO({
	            'min': 0,
	            'max': 0.1,
	            'type': 'sawtooth',
	            'phase': 180
	        }).connect(this._delayB.delayTime);
	        /**
			 *  Crossfade quickly between the two delay lines
			 *  to cover up the jump in the sawtooth wave
			 *  @type  {Tone.CrossFade}
			 *  @private
			 */
	        this._crossFade = new Tone.CrossFade();
	        /**
			 *  LFO which alternates between the two
			 *  delay lines to cover up the disparity in the
			 *  sawtooth wave.
			 *  @type  {Tone.LFO}
			 *  @private
			 */
	        this._crossFadeLFO = new Tone.LFO({
	            'min': 0,
	            'max': 1,
	            'type': 'triangle',
	            'phase': 90
	        }).connect(this._crossFade.fade);
	        /**
			 *  The delay node
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._feedbackDelay = new Tone.Delay(options.delayTime);
	        /**
			 *  The amount of delay on the input signal
			 *  @type {Time}
			 *  @signal
			 */
	        this.delayTime = this._feedbackDelay.delayTime;
	        this._readOnly('delayTime');
	        /**
			 *  Hold the current pitch
			 *  @type {Number}
			 *  @private
			 */
	        this._pitch = options.pitch;
	        /**
			 *  Hold the current windowSize
			 *  @type {Number}
			 *  @private
			 */
	        this._windowSize = options.windowSize;
	        //connect the two delay lines up
	        this._delayA.connect(this._crossFade.a);
	        this._delayB.connect(this._crossFade.b);
	        //connect the frequency
	        this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency);
	        //route the input
	        this.effectSend.fan(this._delayA, this._delayB);
	        this._crossFade.chain(this._feedbackDelay, this.effectReturn);
	        //start the LFOs at the same time
	        var now = this.now();
	        this._lfoA.start(now);
	        this._lfoB.start(now);
	        this._crossFadeLFO.start(now);
	        //set the initial value
	        this.windowSize = this._windowSize;
	    };
	    Tone.extend(Tone.PitchShift, Tone.FeedbackEffect);
	    /**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */
	    Tone.PitchShift.defaults = {
	        'pitch': 0,
	        'windowSize': 0.1,
	        'delayTime': 0,
	        'feedback': 0
	    };
	    /**
		 * Repitch the incoming signal by some interval (measured
		 * in semi-tones).
		 * @memberOf Tone.PitchShift#
		 * @type {Interval}
		 * @name pitch
		 * @example
		 * pitchShift.pitch = -12; //down one octave
		 * pitchShift.pitch = 7; //up a fifth
		 */
	    Object.defineProperty(Tone.PitchShift.prototype, 'pitch', {
	        get: function () {
	            return this._pitch;
	        },
	        set: function (interval) {
	            this._pitch = interval;
	            var factor = 0;
	            if (interval < 0) {
	                this._lfoA.min = 0;
	                this._lfoA.max = this._windowSize;
	                this._lfoB.min = 0;
	                this._lfoB.max = this._windowSize;
	                factor = Tone.intervalToFrequencyRatio(interval - 1) + 1;
	            } else {
	                this._lfoA.min = this._windowSize;
	                this._lfoA.max = 0;
	                this._lfoB.min = this._windowSize;
	                this._lfoB.max = 0;
	                factor = Tone.intervalToFrequencyRatio(interval) - 1;
	            }
	            this._frequency.value = factor * (1.2 / this._windowSize);
	        }
	    });
	    /**
		 * The window size corresponds roughly to the sample length in a looping sampler.
		 * Smaller values are desirable for a less noticeable delay time of the pitch shifted
		 * signal, but larger values will result in smoother pitch shifting for larger intervals.
		 * A nominal range of 0.03 to 0.1 is recommended.
		 * @memberOf Tone.PitchShift#
		 * @type {Time}
		 * @name windowSize
		 * @example
		 * pitchShift.windowSize = 0.1;
		 */
	    Object.defineProperty(Tone.PitchShift.prototype, 'windowSize', {
	        get: function () {
	            return this._windowSize;
	        },
	        set: function (size) {
	            this._windowSize = this.toSeconds(size);
	            this.pitch = this._pitch;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.PitchShift}  this
		 */
	    Tone.PitchShift.prototype.dispose = function () {
	        Tone.FeedbackEffect.prototype.dispose.call(this);
	        this._frequency.dispose();
	        this._frequency = null;
	        this._delayA.disconnect();
	        this._delayA = null;
	        this._delayB.disconnect();
	        this._delayB = null;
	        this._lfoA.dispose();
	        this._lfoA = null;
	        this._lfoB.dispose();
	        this._lfoB = null;
	        this._crossFade.dispose();
	        this._crossFade = null;
	        this._crossFadeLFO.dispose();
	        this._crossFadeLFO = null;
	        this._writable('delayTime');
	        this._feedbackDelay.dispose();
	        this._feedbackDelay = null;
	        this.delayTime = null;
	        return this;
	    };
	    return Tone.PitchShift;
	});
	Module(function (Tone) {
	    /**
		 *  @class Wrapper around the native BufferSourceNode.
		 *  @extends {Tone.AudioNode}
		 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
		 *  @param  {Function}  onload  The callback to invoke when the
		 *                               buffer is done playing.
		 */
	    Tone.BufferSource = function () {
	        var options = Tone.defaults(arguments, [
	            'buffer',
	            'onload'
	        ], Tone.BufferSource);
	        Tone.AudioNode.call(this, options);
	        /**
			 *  The callback to invoke after the
			 *  buffer source is done playing.
			 *  @type  {Function}
			 */
	        this.onended = options.onended;
	        /**
			 *  The time that the buffer was started.
			 *  @type  {Number}
			 *  @private
			 */
	        this._startTime = -1;
	        /**
			 *  An additional flag if the actual BufferSourceNode
			 *  has been started. b/c stopping an unstarted buffer
			 *  will throw it into an invalid state
			 *  @type  {Boolean}
			 *  @private
			 */
	        this._sourceStarted = false;
	        /**
			 *  Flag if the source has already been stopped
			 *  @type  {Boolean}
			 *  @private
			 */
	        this._sourceStopped = false;
	        /**
			 *  The time that the buffer is scheduled to stop.
			 *  @type  {Number}
			 *  @private
			 */
	        this._stopTime = -1;
	        /**
			 *  The gain node which envelopes the BufferSource
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._gainNode = this.output = new Tone.Gain();
	        /**
			 *  The buffer source
			 *  @type  {AudioBufferSourceNode}
			 *  @private
			 */
	        this._source = this.context.createBufferSource();
	        this._source.connect(this._gainNode);
	        this._source.onended = this._onended.bind(this);
	        /**
			 * The private buffer instance
			 * @type {Tone.Buffer}
			 * @private
			 */
	        this._buffer = new Tone.Buffer(options.buffer, options.onload);
	        /**
			 *  The playbackRate of the buffer
			 *  @type {Positive}
			 *  @signal
			 */
	        this.playbackRate = new Tone.Param(this._source.playbackRate, Tone.Type.Positive);
	        /**
			 *  The fadeIn time of the amplitude envelope.
			 *  @type {Time}
			 */
	        this.fadeIn = options.fadeIn;
	        /**
			 *  The fadeOut time of the amplitude envelope.
			 *  @type {Time}
			 */
	        this.fadeOut = options.fadeOut;
	        /**
			 * The curve applied to the fades, either "linear" or "exponential"
			 * @type {String}
			 */
	        this.curve = options.curve;
	        /**
			 *  The value that the buffer ramps to
			 *  @type {Gain}
			 *  @private
			 */
	        this._gain = 1;
	        /**
			 * The onended timeout
			 * @type {Number}
			 * @private
			 */
	        this._onendedTimeout = -1;
	        //set some values initially
	        this.loop = options.loop;
	        this.loopStart = options.loopStart;
	        this.loopEnd = options.loopEnd;
	        this.playbackRate.value = options.playbackRate;
	    };
	    Tone.extend(Tone.BufferSource, Tone.AudioNode);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.BufferSource.defaults = {
	        'onended': Tone.noOp,
	        'onload': Tone.noOp,
	        'loop': false,
	        'loopStart': 0,
	        'loopEnd': 0,
	        'fadeIn': 0,
	        'fadeOut': 0,
	        'curve': 'linear',
	        'playbackRate': 1
	    };
	    /**
		 *  Returns the playback state of the source, either "started" or "stopped".
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.BufferSource#
		 *  @name state
		 */
	    Object.defineProperty(Tone.BufferSource.prototype, 'state', {
	        get: function () {
	            return this.getStateAtTime(this.now());
	        }
	    });
	    /**
		 *  Get the playback state at the given time
		 *  @param  {Time}  time  The time to test the state at
		 *  @return  {Tone.State}  The playback state. 
		 */
	    Tone.BufferSource.prototype.getStateAtTime = function (time) {
	        time = this.toSeconds(time);
	        if (this._startTime !== -1 && time >= this._startTime && !this._sourceStopped) {
	            return Tone.State.Started;
	        } else {
	            return Tone.State.Stopped;
	        }
	    };
	    /**
		 *  Start the buffer
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.
		 *  @param  {Time=}  fadeInTime  The optional fadeIn ramp time.
		 *  @return  {Tone.BufferSource}  this
		 */
	    Tone.BufferSource.prototype.start = function (time, offset, duration, gain, fadeInTime) {
	        if (this._startTime !== -1) {
	            throw new Error('Tone.BufferSource can only be started once.');
	        }
	        if (!this.buffer.loaded) {
	            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');
	        }
	        time = this.toSeconds(time);
	        //if it's a loop the default offset is the loopstart point
	        if (this.loop) {
	            offset = Tone.defaultArg(offset, this.loopStart);
	        } else {
	            //otherwise the default offset is 0
	            offset = Tone.defaultArg(offset, 0);
	        }
	        offset = this.toSeconds(offset);
	        gain = Tone.defaultArg(gain, 1);
	        this._gain = gain;
	        fadeInTime = this.toSeconds(Tone.defaultArg(fadeInTime, this.fadeIn));
	        this.fadeIn = fadeInTime;
	        if (fadeInTime > 0) {
	            this._gainNode.gain.setValueAtTime(0, time);
	            if (this.curve === 'linear') {
	                this._gainNode.gain.linearRampToValueAtTime(this._gain, time + fadeInTime);
	            } else {
	                this._gainNode.gain.exponentialApproachValueAtTime(this._gain, time, fadeInTime);
	            }
	        } else {
	            this._gainNode.gain.setValueAtTime(gain, time);
	        }
	        this._startTime = time;
	        var computedDur = this.toSeconds(Tone.defaultArg(duration, this.buffer.duration - offset % this.buffer.duration));
	        computedDur = Math.max(computedDur, 0);
	        if (Tone.isDefined(duration)) {
	            //clip the duration when not looping
	            if (!this.loop) {
	                computedDur = Math.min(computedDur, this.buffer.duration - offset % this.buffer.duration);
	            }
	            this.stop(time + computedDur, this.fadeOut);
	        }
	        //start the buffer source
	        if (this.loop) {
	            //modify the offset if it's greater than the loop time
	            var loopEnd = this.loopEnd || this.buffer.duration;
	            var loopStart = this.loopStart;
	            var loopDuration = loopEnd - loopStart;
	            //move the offset back
	            if (offset >= loopEnd) {
	                offset = (offset - loopStart) % loopDuration + loopStart;
	            }
	        }
	        this._source.buffer = this.buffer.get();
	        this._source.loopEnd = this.loopEnd || this.buffer.duration;
	        if (offset < this.buffer.duration) {
	            this._sourceStarted = true;
	            this._source.start(time, offset);
	        }
	        return this;
	    };
	    /**
		 *  Stop the buffer. Optionally add a ramp time to fade the
		 *  buffer out.
		 *  @param  {Time=}  time         The time the buffer should stop.
		 *  @param  {Time=}  fadeOutTime  How long the gain should fade out for
		 *  @return  {Tone.BufferSource}  this
		 */
	    Tone.BufferSource.prototype.stop = function (time, fadeOutTime) {
	        if (!this.buffer.loaded) {
	            throw new Error('Tone.BufferSource: buffer is either not set or not loaded.');
	        }
	        if (this._sourceStopped) {
	            return;
	        }
	        time = this.toSeconds(time);
	        //if the event has already been scheduled, clear it
	        if (this._stopTime !== -1) {
	            this.cancelStop();
	        }
	        //stop if it's schedule before the start time
	        if (time <= this._startTime) {
	            this._gainNode.gain.cancelScheduledValues(time);
	            this._gainNode.gain.value = 0;
	            return this;
	        }
	        time = Math.max(this._startTime + this.fadeIn + this.sampleTime, time);
	        //cancel the previous curve
	        this._gainNode.gain.cancelScheduledValues(time);
	        this._stopTime = time;
	        //the fadeOut time
	        fadeOutTime = this.toSeconds(Tone.defaultArg(fadeOutTime, this.fadeOut));
	        var heldDuration = time - this._startTime - this.fadeIn - this.sampleTime;
	        if (!this.loop) {
	            //make sure the fade does not go beyond the length of the buffer
	            heldDuration = Math.min(heldDuration, this.buffer.duration);
	        }
	        fadeOutTime = Math.min(heldDuration, fadeOutTime);
	        var startFade = time - fadeOutTime;
	        if (fadeOutTime > this.sampleTime) {
	            this._gainNode.gain.setValueAtTime(this._gain, startFade);
	            if (this.curve === 'linear') {
	                this._gainNode.gain.linearRampToValueAtTime(0, time);
	            } else {
	                this._gainNode.gain.exponentialApproachValueAtTime(0, startFade, fadeOutTime);
	            }
	        } else {
	            this._gainNode.gain.setValueAtTime(0, time);
	        }
	        Tone.context.clearTimeout(this._onendedTimeout);
	        this._onendedTimeout = Tone.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());
	        return this;
	    };
	    /**
		 *  Cancel a scheduled stop event
		 *  @return  {Tone.BufferSource}  this
		 */
	    Tone.BufferSource.prototype.cancelStop = function () {
	        if (this._startTime !== -1 && !this._sourceStopped) {
	            //cancel the stop envelope
	            var fadeInTime = this.toSeconds(this.fadeIn);
	            this._gainNode.gain.cancelScheduledValues(this._startTime + fadeInTime + this.sampleTime);
	            this._gainNode.gain.setValueAtTime(1, Math.max(this.now(), this._startTime + fadeInTime + this.sampleTime));
	            this.context.clearTimeout(this._onendedTimeout);
	            this._stopTime = -1;
	        }
	        return this;
	    };
	    /**
		 *  Internal callback when the buffer is ended.
		 *  Invokes `onended` and disposes the node.
		 *  @private
		 */
	    Tone.BufferSource.prototype._onended = function () {
	        if (!this._sourceStopped) {
	            this._sourceStopped = true;
	            //allow additional time for the exponential curve to fully decay
	            var additionalTail = this.curve === 'exponential' ? this.fadeOut * 2 : 0;
	            if (this._sourceStarted && this._stopTime !== -1) {
	                this._source.stop(this._stopTime + additionalTail);
	            }
	            this.onended(this);
	        }
	    };
	    /**
		 * If loop is true, the loop will start at this position.
		 * @memberOf Tone.BufferSource#
		 * @type {Time}
		 * @name loopStart
		 */
	    Object.defineProperty(Tone.BufferSource.prototype, 'loopStart', {
	        get: function () {
	            return this._source.loopStart;
	        },
	        set: function (loopStart) {
	            this._source.loopStart = this.toSeconds(loopStart);
	        }
	    });
	    /**
		 * If loop is true, the loop will end at this position.
		 * @memberOf Tone.BufferSource#
		 * @type {Time}
		 * @name loopEnd
		 */
	    Object.defineProperty(Tone.BufferSource.prototype, 'loopEnd', {
	        get: function () {
	            return this._source.loopEnd;
	        },
	        set: function (loopEnd) {
	            this._source.loopEnd = this.toSeconds(loopEnd);
	        }
	    });
	    /**
		 * The audio buffer belonging to the player.
		 * @memberOf Tone.BufferSource#
		 * @type {Tone.Buffer}
		 * @name buffer
		 */
	    Object.defineProperty(Tone.BufferSource.prototype, 'buffer', {
	        get: function () {
	            return this._buffer;
	        },
	        set: function (buffer) {
	            this._buffer.set(buffer);
	        }
	    });
	    /**
		 * If the buffer should loop once it's over.
		 * @memberOf Tone.BufferSource#
		 * @type {Boolean}
		 * @name loop
		 */
	    Object.defineProperty(Tone.BufferSource.prototype, 'loop', {
	        get: function () {
	            return this._source.loop;
	        },
	        set: function (loop) {
	            this._source.loop = loop;
	            this.cancelStop();
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return  {Tone.BufferSource}  this
		 */
	    Tone.BufferSource.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.onended = null;
	        this._source.onended = null;
	        this._source.disconnect();
	        this._source = null;
	        this._gainNode.dispose();
	        this._gainNode = null;
	        this._buffer.dispose();
	        this._buffer = null;
	        this._startTime = -1;
	        this.playbackRate = null;
	        Tone.context.clearTimeout(this._onendedTimeout);
	        return this;
	    };
	    return Tone.BufferSource;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.
		 *          Tone.Noise supports the noise types: "pink", "white", and "brown". Read more about
		 *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {string} type the noise type (white|pink|brown)
		 *  @example
		 * //initialize the noise and start
		 * var noise = new Tone.Noise("pink").start();
		 *
		 * //make an autofilter to shape the noise
		 * var autoFilter = new Tone.AutoFilter({
		 * 	"frequency" : "8m",
		 * 	"min" : 800,
		 * 	"max" : 15000
		 * }).connect(Tone.Master);
		 *
		 * //connect the noise
		 * noise.connect(autoFilter);
		 * //start the autofilter LFO
		 * autoFilter.start()
		 */
	    Tone.Noise = function () {
	        var options = Tone.defaults(arguments, ['type'], Tone.Noise);
	        Tone.Source.call(this, options);
	        /**
			 *  @private
			 *  @type {AudioBufferSourceNode}
			 */
	        this._source = null;
	        /**
			 *  the buffer
			 *  @private
			 *  @type {AudioBuffer}
			 */
	        this._type = options.type;
	        /**
			 *  The playback rate of the noise. Affects
			 *  the "frequency" of the noise.
			 *  @type {Positive}
			 *  @signal
			 */
	        this._playbackRate = options.playbackRate;
	    };
	    Tone.extend(Tone.Noise, Tone.Source);
	    /**
		 *  the default parameters
		 *
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Noise.defaults = {
	        'type': 'white',
	        'playbackRate': 1
	    };
	    /**
		 * The type of the noise. Can be "white", "brown", or "pink".
		 * @memberOf Tone.Noise#
		 * @type {string}
		 * @name type
		 * @example
		 * noise.type = "white";
		 */
	    Object.defineProperty(Tone.Noise.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            if (this._type !== type) {
	                if (type in _noiseBuffers) {
	                    this._type = type;
	                    //if it's playing, stop and restart it
	                    if (this.state === Tone.State.Started) {
	                        var now = this.now();
	                        this._stop(now);
	                        this._start(now);
	                    }
	                } else {
	                    throw new TypeError('Tone.Noise: invalid type: ' + type);
	                }
	            }
	        }
	    });
	    /**
		 *  The playback rate of the noise. Affects
		 *  the "frequency" of the noise.
		 *  @type {Positive}
		 *  @signal
		 */
	    Object.defineProperty(Tone.Noise.prototype, 'playbackRate', {
	        get: function () {
	            return this._playbackRate;
	        },
	        set: function (rate) {
	            this._playbackRate = rate;
	            if (this._source) {
	                this._source.playbackRate.value = rate;
	            }
	        }
	    });
	    /**
		 *  internal start method
		 *
		 *  @param {Time} time
		 *  @private
		 */
	    Tone.Noise.prototype._start = function (time) {
	        var buffer = _noiseBuffers[this._type];
	        this._source = new Tone.BufferSource(buffer).connect(this.output);
	        this._source.loop = true;
	        this._source.playbackRate.value = this._playbackRate;
	        this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));
	    };
	    /**
		 *  internal stop method
		 *
		 *  @param {Time} time
		 *  @private
		 */
	    Tone.Noise.prototype._stop = function (time) {
	        if (this._source) {
	            this._source.stop(this.toSeconds(time));
	            this._source = null;
	        }
	    };
	    /**
		 * Restarts the noise.
		 * @param  {[type]} time [description]
		 * @return {[type]}      [description]
		 */
	    Tone.Noise.prototype.restart = function (time) {
	        //TODO could be optimized by cancelling the buffer source 'stop'
	        //stop and restart
	        this._stop(time);
	        this._start(time);
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.Noise} this
		 */
	    Tone.Noise.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        if (this._source !== null) {
	            this._source.disconnect();
	            this._source = null;
	        }
	        this._buffer = null;
	        return this;
	    };
	    ///////////////////////////////////////////////////////////////////////////
	    // THE BUFFERS
	    ///////////////////////////////////////////////////////////////////////////
	    //Noise buffer stats
	    var bufferLength = 44100 * 5;
	    var channels = 2;
	    /**
		 *	The noise arrays. Generated on initialization.
		 *  borrowed heavily from https://github.com/zacharydenton/noise.js
		 *  (c) 2013 Zach Denton (MIT)
		 *  @static
		 *  @private
		 *  @type {Array}
		 */
	    var _noiseArrays = {
	        'pink': function () {
	            var buffer = [];
	            for (var channelNum = 0; channelNum < channels; channelNum++) {
	                var channel = new Float32Array(bufferLength);
	                buffer[channelNum] = channel;
	                var b0, b1, b2, b3, b4, b5, b6;
	                b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0;
	                for (var i = 0; i < bufferLength; i++) {
	                    var white = Math.random() * 2 - 1;
	                    b0 = 0.99886 * b0 + white * 0.0555179;
	                    b1 = 0.99332 * b1 + white * 0.0750759;
	                    b2 = 0.969 * b2 + white * 0.153852;
	                    b3 = 0.8665 * b3 + white * 0.3104856;
	                    b4 = 0.55 * b4 + white * 0.5329522;
	                    b5 = -0.7616 * b5 - white * 0.016898;
	                    channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
	                    channel[i] *= 0.11;
	                    // (roughly) compensate for gain
	                    b6 = white * 0.115926;
	                }
	            }
	            return buffer;
	        }(),
	        'brown': function () {
	            var buffer = [];
	            for (var channelNum = 0; channelNum < channels; channelNum++) {
	                var channel = new Float32Array(bufferLength);
	                buffer[channelNum] = channel;
	                var lastOut = 0;
	                for (var i = 0; i < bufferLength; i++) {
	                    var white = Math.random() * 2 - 1;
	                    channel[i] = (lastOut + 0.02 * white) / 1.02;
	                    lastOut = channel[i];
	                    channel[i] *= 3.5;    // (roughly) compensate for gain
	                }
	            }
	            return buffer;
	        }(),
	        'white': function () {
	            var buffer = [];
	            for (var channelNum = 0; channelNum < channels; channelNum++) {
	                var channel = new Float32Array(bufferLength);
	                buffer[channelNum] = channel;
	                for (var i = 0; i < bufferLength; i++) {
	                    channel[i] = Math.random() * 2 - 1;
	                }
	            }
	            return buffer;
	        }()
	    };
	    /**
		 *	static noise buffers
		 *  @static
		 *  @private
		 *  @type {Tone.Buffer}
		 */
	    var _noiseBuffers = {};
	    //create the Tone.Buffers
	    function createBuffers() {
	        for (var type in _noiseArrays) {
	            _noiseBuffers[type] = new Tone.Buffer().fromArray(_noiseArrays[type]);
	        }
	    }
	    //create the noise buffers
	    Tone.getContext(createBuffers);
	    Tone.Context.on('init', createBuffers);
	    return Tone.Noise;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Simple convolution created with decaying noise.
		 *  		Generates an Impulse Response Buffer
		 * 			with Tone.Offline then feeds the IR into ConvolverNode.
		 * 			Note: the Reverb will not make any sound until [generate](#generate)
		 * 			has been invoked and resolved.
		 *
		 * 			Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).
		 * 			Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.
		 *
		 *  @extends {Tone.Convolver}
		 *  @param {Time=} decay The amount of time it will reverberate for.
		 */
	    Tone.Reverb = function () {
	        var options = Tone.defaults(arguments, ['decay'], Tone.Reverb);
	        Tone.Effect.call(this, options);
	        /**
			 *  Convolver node
			 *  @type {ConvolverNode}
			 *  @private
			 */
	        this._convolver = this.context.createConvolver();
	        /**
			 * The duration of the reverb
			 * @type {Time}
			 */
	        this.decay = options.decay;
	        /**
			 * The amount of time before the reverb is fully
			 * ramped in.
			 * @type {Time}
			 */
	        this.preDelay = options.preDelay;
	        this.connectEffect(this._convolver);
	    };
	    Tone.extend(Tone.Reverb, Tone.Effect);
	    /**
		 * The defaults
		 * @type {Object}
		 * @static
		 */
	    Tone.Reverb.defaults = {
	        'decay': 1.5,
	        'preDelay': 0.01
	    };
	    /**
		 * Generate the Impulse Response. Returns a promise while the IR is being
		 * generated.
		 * @return {Promise<Tone.Reverb>} Promise which returns this object.
		 */
	    Tone.Reverb.prototype.generate = function () {
	        return Tone.Offline(function () {
	            //create a noise burst which decays over the duration
	            var noiseL = new Tone.Noise();
	            var noiseR = new Tone.Noise();
	            var merge = new Tone.Merge();
	            noiseL.connect(merge.left);
	            noiseR.connect(merge.right);
	            var gainNode = new Tone.Gain().toMaster();
	            merge.connect(gainNode);
	            noiseL.start(0);
	            noiseR.start(0);
	            //short fade in
	            gainNode.gain.setValueAtTime(0, 0);
	            gainNode.gain.linearRampToValueAtTime(1, this.preDelay);
	            //decay
	            gainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay - this.preDelay);
	        }.bind(this), this.decay).then(function (buffer) {
	            this._convolver.buffer = buffer.get();
	            return this;
	        }.bind(this));
	    };
	    /**
		 *  Clean up.
		 *  @return  {Tone.Reverb}  this
		 */
	    Tone.Reverb.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._convolver.disconnect();
	        this._convolver = null;
	        return this;
	    };
	    return Tone.Reverb;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Base class for stereo feedback effects where the effectReturn
		 *         is fed back into the same channel.
		 *
		 *	@constructor
		 *	@extends {Tone.StereoEffect}
		 */
	    Tone.StereoFeedbackEffect = function () {
	        var options = Tone.defaults(arguments, ['feedback'], Tone.FeedbackEffect);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  controls the amount of feedback
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.feedback = new Tone.Signal(options.feedback, Tone.Type.NormalRange);
	        /**
			 *  the left side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._feedbackL = new Tone.Gain();
	        /**
			 *  the right side feeback
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._feedbackR = new Tone.Gain();
	        //connect it up
	        this.effectReturnL.chain(this._feedbackL, this.effectSendL);
	        this.effectReturnR.chain(this._feedbackR, this.effectSendR);
	        this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);
	        this._readOnly(['feedback']);
	    };
	    Tone.extend(Tone.StereoFeedbackEffect, Tone.StereoEffect);
	    /**
		 *  clean up
		 *  @returns {Tone.StereoFeedbackEffect} this
		 */
	    Tone.StereoFeedbackEffect.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        this._writable(['feedback']);
	        this.feedback.dispose();
	        this.feedback = null;
	        this._feedbackL.dispose();
	        this._feedbackL = null;
	        this._feedbackR.dispose();
	        this._feedbackR = null;
	        return this;
	    };
	    return Tone.StereoFeedbackEffect;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Applies a width factor to the mid/side seperation.
		 *         0 is all mid and 1 is all side.
		 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
		 *         <br><br>
		 *         <code>
		 *         Mid *= 2*(1-width)<br>
		 *         Side *= 2*width
		 *         </code>
		 *
		 *  @extends {Tone.MidSideEffect}
		 *  @constructor
		 *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.
		 */
	    Tone.StereoWidener = function () {
	        var options = Tone.defaults(arguments, ['width'], Tone.StereoWidener);
	        Tone.MidSideEffect.call(this, options);
	        /**
			 *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
	        this._readOnly(['width']);
	        /**
			 * Two times the (1-width) for the mid channel
			 * @type {Tone.Multiply}
			 * @private
			 */
	        this._twoTimesWidthMid = new Tone.Multiply(2);
	        /**
			 * Two times the width for the side channel
			 * @type {Tone.Multiply}
			 * @private
			 */
	        this._twoTimesWidthSide = new Tone.Multiply(2);
	        /**
			 *  Mid multiplier
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._midMult = new Tone.Multiply();
	        this._twoTimesWidthMid.connect(this._midMult, 0, 1);
	        this.midSend.chain(this._midMult, this.midReturn);
	        /**
			 * 1 - width
			 * @type {Tone}
			 */
	        this._oneMinusWidth = new Tone.Subtract();
	        this._oneMinusWidth.connect(this._twoTimesWidthMid);
	        this.context.getConstant(1).connect(this._oneMinusWidth, 0, 0);
	        this.width.connect(this._oneMinusWidth, 0, 1);
	        /**
			 *  Side multiplier
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._sideMult = new Tone.Multiply();
	        this.width.connect(this._twoTimesWidthSide);
	        this._twoTimesWidthSide.connect(this._sideMult, 0, 1);
	        this.sideSend.chain(this._sideMult, this.sideReturn);
	    };
	    Tone.extend(Tone.StereoWidener, Tone.MidSideEffect);
	    /**
		 *  the default values
		 *  @static
		 *  @type {Object}
		 */
	    Tone.StereoWidener.defaults = { 'width': 0.5 };
	    /**
		 *  Clean up.
		 *  @returns {Tone.StereoWidener} this
		 */
	    Tone.StereoWidener.prototype.dispose = function () {
	        Tone.MidSideEffect.prototype.dispose.call(this);
	        this._writable(['width']);
	        this.width.dispose();
	        this.width = null;
	        this._midMult.dispose();
	        this._midMult = null;
	        this._sideMult.dispose();
	        this._sideMult = null;
	        this._twoTimesWidthMid.dispose();
	        this._twoTimesWidthMid = null;
	        this._twoTimesWidthSide.dispose();
	        this._twoTimesWidthSide = null;
	        this._oneMinusWidth.dispose();
	        this._oneMinusWidth = null;
	        return this;
	    };
	    return Tone.StereoWidener;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.
		 *         The type, frequency, and depth of the LFO is controllable.
		 *
		 *  @extends {Tone.StereoEffect}
		 *  @constructor
		 *  @param {Frequency} [frequency] The rate of the effect.
		 *  @param {NormalRange} [depth] The depth of the effect.
		 *  @example
		 * //create a tremolo and start it's LFO
		 * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();
		 * //route an oscillator through the tremolo and start it
		 * var oscillator = new Tone.Oscillator().connect(tremolo).start();
		 */
	    Tone.Tremolo = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'depth'
	        ], Tone.Tremolo);
	        Tone.StereoEffect.call(this, options);
	        /**
			 *  The tremelo LFO in the left channel
			 *  @type  {Tone.LFO}
			 *  @private
			 */
	        this._lfoL = new Tone.LFO({
	            'phase': options.spread,
	            'min': 1,
	            'max': 0
	        });
	        /**
			 *  The tremelo LFO in the left channel
			 *  @type  {Tone.LFO}
			 *  @private
			 */
	        this._lfoR = new Tone.LFO({
	            'phase': options.spread,
	            'min': 1,
	            'max': 0
	        });
	        /**
			 *  Where the gain is multiplied
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._amplitudeL = new Tone.Gain();
	        /**
			 *  Where the gain is multiplied
			 *  @type  {Tone.Gain}
			 *  @private
			 */
	        this._amplitudeR = new Tone.Gain();
	        /**
			 *  The frequency of the tremolo.
			 *  @type  {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The depth of the effect. A depth of 0, has no effect
			 *  on the amplitude, and a depth of 1 makes the amplitude
			 *  modulate fully between 0 and 1.
			 *  @type  {NormalRange}
			 *  @signal
			 */
	        this.depth = new Tone.Signal(options.depth, Tone.Type.NormalRange);
	        this._readOnly([
	            'frequency',
	            'depth'
	        ]);
	        this.effectSendL.chain(this._amplitudeL, this.effectReturnL);
	        this.effectSendR.chain(this._amplitudeR, this.effectReturnR);
	        this._lfoL.connect(this._amplitudeL.gain);
	        this._lfoR.connect(this._amplitudeR.gain);
	        this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
	        this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
	        this.type = options.type;
	        this.spread = options.spread;
	    };
	    Tone.extend(Tone.Tremolo, Tone.StereoEffect);
	    /**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Tremolo.defaults = {
	        'frequency': 10,
	        'type': 'sine',
	        'depth': 0.5,
	        'spread': 180
	    };
	    /**
		 * Start the tremolo.
		 * @param {Time} [time=now] When the tremolo begins.
		 * @returns {Tone.Tremolo} this
		 */
	    Tone.Tremolo.prototype.start = function (time) {
	        this._lfoL.start(time);
	        this._lfoR.start(time);
	        return this;
	    };
	    /**
		 * Stop the tremolo.
		 * @param {Time} [time=now] When the tremolo stops.
		 * @returns {Tone.Tremolo} this
		 */
	    Tone.Tremolo.prototype.stop = function (time) {
	        this._lfoL.stop(time);
	        this._lfoR.stop(time);
	        return this;
	    };
	    /**
		 * Sync the effect to the transport.
		 * @param {Time} [delay=0] Delay time before starting the effect after the
		 *                              Transport has started.
		 * @returns {Tone.AutoFilter} this
		 */
	    Tone.Tremolo.prototype.sync = function (delay) {
	        this._lfoL.sync(delay);
	        this._lfoR.sync(delay);
	        Tone.Transport.syncSignal(this.frequency);
	        return this;
	    };
	    /**
		 * Unsync the filter from the transport
		 * @returns {Tone.Tremolo} this
		 */
	    Tone.Tremolo.prototype.unsync = function () {
	        this._lfoL.unsync();
	        this._lfoR.unsync();
	        Tone.Transport.unsyncSignal(this.frequency);
	        return this;
	    };
	    /**
		 * The Tremolo's oscillator type.
		 * @memberOf Tone.Tremolo#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.Tremolo.prototype, 'type', {
	        get: function () {
	            return this._lfoL.type;
	        },
	        set: function (type) {
	            this._lfoL.type = type;
	            this._lfoR.type = type;
	        }
	    });
	    /**
		 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
		 * When set to 180, LFO's will be panned hard left and right respectively.
		 * @memberOf Tone.Tremolo#
		 * @type {Degrees}
		 * @name spread
		 */
	    Object.defineProperty(Tone.Tremolo.prototype, 'spread', {
	        get: function () {
	            return this._lfoR.phase - this._lfoL.phase;    //180
	        },
	        set: function (spread) {
	            this._lfoL.phase = 90 - spread / 2;
	            this._lfoR.phase = spread / 2 + 90;
	        }
	    });
	    /**
		 *  clean up
		 *  @returns {Tone.Tremolo} this
		 */
	    Tone.Tremolo.prototype.dispose = function () {
	        Tone.StereoEffect.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'depth'
	        ]);
	        this._lfoL.dispose();
	        this._lfoL = null;
	        this._lfoR.dispose();
	        this._lfoR = null;
	        this._amplitudeL.dispose();
	        this._amplitudeL = null;
	        this._amplitudeR.dispose();
	        this._amplitudeR = null;
	        this.frequency = null;
	        this.depth = null;
	        return this;
	    };
	    return Tone.Tremolo;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
		 *         modulates the delayTime of the delay, causing the pitch to rise
		 *         and fall. 
		 *  @extends {Tone.Effect}
		 *  @param {Frequency} frequency The frequency of the vibrato.
		 *  @param {NormalRange} depth The amount the pitch is modulated.
		 */
	    Tone.Vibrato = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'depth'
	        ], Tone.Vibrato);
	        Tone.Effect.call(this, options);
	        /**
			 *  The delay node used for the vibrato effect
			 *  @type {Tone.Delay}
			 *  @private
			 */
	        this._delayNode = new Tone.Delay(0, options.maxDelay);
	        /**
			 *  The LFO used to control the vibrato
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._lfo = new Tone.LFO({
	            'type': options.type,
	            'min': 0,
	            'max': options.maxDelay,
	            'frequency': options.frequency,
	            'phase': -90    //offse the phase so the resting position is in the center
	        }).start().connect(this._delayNode.delayTime);
	        /**
			 *  The frequency of the vibrato
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this._lfo.frequency;
	        /**
			 *  The depth of the vibrato. 
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.depth = this._lfo.amplitude;
	        this.depth.value = options.depth;
	        this._readOnly([
	            'frequency',
	            'depth'
	        ]);
	        this.effectSend.chain(this._delayNode, this.effectReturn);
	    };
	    Tone.extend(Tone.Vibrato, Tone.Effect);
	    /**
		 *  The defaults
		 *  @type  {Object}
		 *  @const
		 */
	    Tone.Vibrato.defaults = {
	        'maxDelay': 0.005,
	        'frequency': 5,
	        'depth': 0.1,
	        'type': 'sine'
	    };
	    /**
		 * Type of oscillator attached to the Vibrato.
		 * @memberOf Tone.Vibrato#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.Vibrato.prototype, 'type', {
	        get: function () {
	            return this._lfo.type;
	        },
	        set: function (type) {
	            this._lfo.type = type;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @returns {Tone.Vibrato} this
		 */
	    Tone.Vibrato.prototype.dispose = function () {
	        Tone.Effect.prototype.dispose.call(this);
	        this._delayNode.dispose();
	        this._delayNode = null;
	        this._lfo.dispose();
	        this._lfo = null;
	        this._writable([
	            'frequency',
	            'depth'
	        ]);
	        this.frequency = null;
	        this.depth = null;
	    };
	    return Tone.Vibrato;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable
		 *          callback for a single or repeatable events along the timeline.
		 *
		 *  @extends {Tone}
		 *  @param {function} callback The callback to invoke at the time.
		 *  @param {*} value The value or values which should be passed to
		 *                      the callback function on invocation.
		 *  @example
		 * var chord = new Tone.Event(function(time, chord){
		 * 	//the chord as well as the exact time of the event
		 * 	//are passed in as arguments to the callback function
		 * }, ["D4", "E4", "F4"]);
		 * //start the chord at the beginning of the transport timeline
		 * chord.start();
		 * //loop it every measure for 8 measures
		 * chord.loop = 8;
		 * chord.loopEnd = "1m";
		 */
	    Tone.Event = function () {
	        var options = Tone.defaults(arguments, [
	            'callback',
	            'value'
	        ], Tone.Event);
	        Tone.call(this);
	        /**
			 *  Loop value
			 *  @type  {Boolean|Positive}
			 *  @private
			 */
	        this._loop = options.loop;
	        /**
			 *  The callback to invoke.
			 *  @type  {Function}
			 */
	        this.callback = options.callback;
	        /**
			 *  The value which is passed to the
			 *  callback function.
			 *  @type  {*}
			 *  @private
			 */
	        this.value = options.value;
	        /**
			 *  When the note is scheduled to start.
			 *  @type  {Number}
			 *  @private
			 */
	        this._loopStart = this.toTicks(options.loopStart);
	        /**
			 *  When the note is scheduled to start.
			 *  @type  {Number}
			 *  @private
			 */
	        this._loopEnd = this.toTicks(options.loopEnd);
	        /**
			 *  Tracks the scheduled events
			 *  @type {Tone.TimelineState}
			 *  @private
			 */
	        this._state = new Tone.TimelineState(Tone.State.Stopped);
	        /**
			 *  The playback speed of the note. A speed of 1
			 *  is no change.
			 *  @private
			 *  @type {Positive}
			 */
	        this._playbackRate = 1;
	        /**
			 *  A delay time from when the event is scheduled to start
			 *  @type {Ticks}
			 *  @private
			 */
	        this._startOffset = 0;
	        /**
			 *  private holder of probability value
			 *  @type {NormalRange}
			 *  @private
			 */
	        this._probability = options.probability;
	        /**
			 *  the amount of variation from the
			 *  given time.
			 *  @type {Boolean|Time}
			 *  @private
			 */
	        this._humanize = options.humanize;
	        /**
			 *  If mute is true, the callback won't be
			 *  invoked.
			 *  @type {Boolean}
			 */
	        this.mute = options.mute;
	        //set the initial values
	        this.playbackRate = options.playbackRate;
	    };
	    Tone.extend(Tone.Event);
	    /**
		 *  The default values
		 *  @type  {Object}
		 *  @const
		 */
	    Tone.Event.defaults = {
	        'callback': Tone.noOp,
	        'loop': false,
	        'loopEnd': '1m',
	        'loopStart': 0,
	        'playbackRate': 1,
	        'value': null,
	        'probability': 1,
	        'mute': false,
	        'humanize': false
	    };
	    /**
		 *  Reschedule all of the events along the timeline
		 *  with the updated values.
		 *  @param {Time} after Only reschedules events after the given time.
		 *  @return  {Tone.Event}  this
		 *  @private
		 */
	    Tone.Event.prototype._rescheduleEvents = function (after) {
	        //if no argument is given, schedules all of the events
	        after = Tone.defaultArg(after, -1);
	        this._state.forEachFrom(after, function (event) {
	            var duration;
	            if (event.state === Tone.State.Started) {
	                if (Tone.isDefined(event.id)) {
	                    Tone.Transport.clear(event.id);
	                }
	                var startTick = event.time + Math.round(this.startOffset / this._playbackRate);
	                if (this._loop) {
	                    duration = Infinity;
	                    if (Tone.isNumber(this._loop)) {
	                        duration = this._loop * this._getLoopDuration();
	                    }
	                    var nextEvent = this._state.getAfter(startTick);
	                    if (nextEvent !== null) {
	                        duration = Math.min(duration, nextEvent.time - startTick);
	                    }
	                    if (duration !== Infinity) {
	                        //schedule a stop since it's finite duration
	                        this._state.setStateAtTime(Tone.State.Stopped, startTick + duration + 1);
	                        duration = Tone.Ticks(duration);
	                    }
	                    var interval = Tone.Ticks(this._getLoopDuration());
	                    event.id = Tone.Transport.scheduleRepeat(this._tick.bind(this), interval, Tone.Ticks(startTick), duration);
	                } else {
	                    event.id = Tone.Transport.schedule(this._tick.bind(this), Tone.Ticks(startTick));
	                }
	            }
	        }.bind(this));
	        return this;
	    };
	    /**
		 *  Returns the playback state of the note, either "started" or "stopped".
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.Event#
		 *  @name state
		 */
	    Object.defineProperty(Tone.Event.prototype, 'state', {
	        get: function () {
	            return this._state.getValueAtTime(Tone.Transport.ticks);
	        }
	    });
	    /**
		 *  The start from the scheduled start time
		 *  @type {Ticks}
		 *  @memberOf Tone.Event#
		 *  @name startOffset
		 *  @private
		 */
	    Object.defineProperty(Tone.Event.prototype, 'startOffset', {
	        get: function () {
	            return this._startOffset;
	        },
	        set: function (offset) {
	            this._startOffset = offset;
	        }
	    });
	    /**
		 *  The probability of the notes being triggered.
		 *  @memberOf Tone.Event#
		 *  @type {NormalRange}
		 *  @name probability
		 */
	    Object.defineProperty(Tone.Event.prototype, 'probability', {
	        get: function () {
	            return this._probability;
	        },
	        set: function (prob) {
	            this._probability = prob;
	        }
	    });
	    /**
		 *  If set to true, will apply small random variation
		 *  to the callback time. If the value is given as a time, it will randomize
		 *  by that amount.
		 *  @example
		 * event.humanize = true;
		 *  @type {Boolean|Time}
		 *  @name humanize
		 */
	    Object.defineProperty(Tone.Event.prototype, 'humanize', {
	        get: function () {
	            return this._humanize;
	        },
	        set: function (variation) {
	            this._humanize = variation;
	        }
	    });
	    /**
		 *  Start the note at the given time.
		 *  @param  {TimelinePosition}  time  When the note should start.
		 *  @return  {Tone.Event}  this
		 */
	    Tone.Event.prototype.start = function (time) {
	        time = this.toTicks(time);
	        if (this._state.getValueAtTime(time) === Tone.State.Stopped) {
	            this._state.add({
	                'state': Tone.State.Started,
	                'time': time,
	                'id': undefined
	            });
	            this._rescheduleEvents(time);
	        }
	        return this;
	    };
	    /**
		 *  Stop the Event at the given time.
		 *  @param  {TimelinePosition}  time  When the note should stop.
		 *  @return  {Tone.Event}  this
		 */
	    Tone.Event.prototype.stop = function (time) {
	        this.cancel(time);
	        time = this.toTicks(time);
	        if (this._state.getValueAtTime(time) === Tone.State.Started) {
	            this._state.setStateAtTime(Tone.State.Stopped, time);
	            var previousEvent = this._state.getBefore(time);
	            var reschedulTime = time;
	            if (previousEvent !== null) {
	                reschedulTime = previousEvent.time;
	            }
	            this._rescheduleEvents(reschedulTime);
	        }
	        return this;
	    };
	    /**
		 *  Cancel all scheduled events greater than or equal to the given time
		 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
		 *  @return  {Tone.Event}  this
		 */
	    Tone.Event.prototype.cancel = function (time) {
	        time = Tone.defaultArg(time, -Infinity);
	        time = this.toTicks(time);
	        this._state.forEachFrom(time, function (event) {
	            Tone.Transport.clear(event.id);
	        });
	        this._state.cancel(time);
	        return this;
	    };
	    /**
		 *  The callback function invoker. Also
		 *  checks if the Event is done playing
		 *  @param  {Number}  time  The time of the event in seconds
		 *  @private
		 */
	    Tone.Event.prototype._tick = function (time) {
	        var ticks = Tone.Transport.getTicksAtTime(time);
	        if (!this.mute && this._state.getValueAtTime(ticks) === Tone.State.Started) {
	            if (this.probability < 1 && Math.random() > this.probability) {
	                return;
	            }
	            if (this.humanize) {
	                var variation = 0.02;
	                if (!Tone.isBoolean(this.humanize)) {
	                    variation = this.toSeconds(this.humanize);
	                }
	                time += (Math.random() * 2 - 1) * variation;
	            }
	            this.callback(time, this.value);
	        }
	    };
	    /**
		 *  Get the duration of the loop.
		 *  @return  {Ticks}
		 *  @private
		 */
	    Tone.Event.prototype._getLoopDuration = function () {
	        return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
	    };
	    /**
		 *  If the note should loop or not
		 *  between Tone.Event.loopStart and
		 *  Tone.Event.loopEnd. An integer
		 *  value corresponds to the number of
		 *  loops the Event does after it starts.
		 *  @memberOf Tone.Event#
		 *  @type {Boolean|Positive}
		 *  @name loop
		 */
	    Object.defineProperty(Tone.Event.prototype, 'loop', {
	        get: function () {
	            return this._loop;
	        },
	        set: function (loop) {
	            this._loop = loop;
	            this._rescheduleEvents();
	        }
	    });
	    /**
		 * 	The playback rate of the note. Defaults to 1.
		 *  @memberOf Tone.Event#
		 *  @type {Positive}
		 *  @name playbackRate
		 *  @example
		 * note.loop = true;
		 * //repeat the note twice as fast
		 * note.playbackRate = 2;
		 */
	    Object.defineProperty(Tone.Event.prototype, 'playbackRate', {
	        get: function () {
	            return this._playbackRate;
	        },
	        set: function (rate) {
	            this._playbackRate = rate;
	            this._rescheduleEvents();
	        }
	    });
	    /**
		 *  The loopEnd point is the time the event will loop
		 *  if Tone.Event.loop is true.
		 *  @memberOf Tone.Event#
		 *  @type {Time}
		 *  @name loopEnd
		 */
	    Object.defineProperty(Tone.Event.prototype, 'loopEnd', {
	        get: function () {
	            return Tone.Ticks(this._loopEnd).toSeconds();
	        },
	        set: function (loopEnd) {
	            this._loopEnd = this.toTicks(loopEnd);
	            if (this._loop) {
	                this._rescheduleEvents();
	            }
	        }
	    });
	    /**
		 *  The time when the loop should start.
		 *  @memberOf Tone.Event#
		 *  @type {Time}
		 *  @name loopStart
		 */
	    Object.defineProperty(Tone.Event.prototype, 'loopStart', {
	        get: function () {
	            return Tone.Ticks(this._loopStart).toSeconds();
	        },
	        set: function (loopStart) {
	            this._loopStart = this.toTicks(loopStart);
	            if (this._loop) {
	                this._rescheduleEvents();
	            }
	        }
	    });
	    /**
		 *  The current progress of the loop interval.
		 *  Returns 0 if the event is not started yet or
		 *  it is not set to loop.
		 *  @memberOf Tone.Event#
		 *  @type {NormalRange}
		 *  @name progress
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Event.prototype, 'progress', {
	        get: function () {
	            if (this._loop) {
	                var ticks = Tone.Transport.ticks;
	                var lastEvent = this._state.get(ticks);
	                if (lastEvent !== null && lastEvent.state === Tone.State.Started) {
	                    var loopDuration = this._getLoopDuration();
	                    var progress = (ticks - lastEvent.time) % loopDuration;
	                    return progress / loopDuration;
	                } else {
	                    return 0;
	                }
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 *  Clean up
		 *  @return  {Tone.Event}  this
		 */
	    Tone.Event.prototype.dispose = function () {
	        this.cancel();
	        this._state.dispose();
	        this._state = null;
	        this.callback = null;
	        this.value = null;
	    };
	    return Tone.Event;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Loop creates a looped callback at the 
		 *         specified interval. The callback can be 
		 *         started, stopped and scheduled along
		 *         the Transport's timeline. 
		 *  @example
		 * var loop = new Tone.Loop(function(time){
		 * 	//triggered every eighth note. 
		 * 	console.log(time);
		 * }, "8n").start(0);
		 * Tone.Transport.start();
		 *  @extends {Tone}
		 *  @param {Function} callback The callback to invoke with the event.
		 *  @param {Time} interval The time between successive callback calls. 
		 */
	    Tone.Loop = function () {
	        var options = Tone.defaults(arguments, [
	            'callback',
	            'interval'
	        ], Tone.Loop);
	        Tone.call(this);
	        /**
			 *  The event which produces the callbacks
			 */
	        this._event = new Tone.Event({
	            'callback': this._tick.bind(this),
	            'loop': true,
	            'loopEnd': options.interval,
	            'playbackRate': options.playbackRate,
	            'probability': options.probability
	        });
	        /**
			 *  The callback to invoke with the next event in the pattern
			 *  @type {Function}
			 */
	        this.callback = options.callback;
	        //set the iterations
	        this.iterations = options.iterations;
	    };
	    Tone.extend(Tone.Loop);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.Loop.defaults = {
	        'interval': '4n',
	        'callback': Tone.noOp,
	        'playbackRate': 1,
	        'iterations': Infinity,
	        'probability': true,
	        'mute': false
	    };
	    /**
		 *  Start the loop at the specified time along the Transport's
		 *  timeline.
		 *  @param  {TimelinePosition=}  time  When to start the Loop.
		 *  @return  {Tone.Loop}  this
		 */
	    Tone.Loop.prototype.start = function (time) {
	        this._event.start(time);
	        return this;
	    };
	    /**
		 *  Stop the loop at the given time.
		 *  @param  {TimelinePosition=}  time  When to stop the Arpeggio
		 *  @return  {Tone.Loop}  this
		 */
	    Tone.Loop.prototype.stop = function (time) {
	        this._event.stop(time);
	        return this;
	    };
	    /**
		 *  Cancel all scheduled events greater than or equal to the given time
		 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
		 *  @return  {Tone.Loop}  this
		 */
	    Tone.Loop.prototype.cancel = function (time) {
	        this._event.cancel(time);
	        return this;
	    };
	    /**
		 *  Internal function called when the notes should be called
		 *  @param  {Number}  time  The time the event occurs
		 *  @private
		 */
	    Tone.Loop.prototype._tick = function (time) {
	        this.callback(time);
	    };
	    /**
		 *  The state of the Loop, either started or stopped.
		 *  @memberOf Tone.Loop#
		 *  @type {String}
		 *  @name state
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'state', {
	        get: function () {
	            return this._event.state;
	        }
	    });
	    /**
		 *  The progress of the loop as a value between 0-1. 0, when
		 *  the loop is stopped or done iterating. 
		 *  @memberOf Tone.Loop#
		 *  @type {NormalRange}
		 *  @name progress
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'progress', {
	        get: function () {
	            return this._event.progress;
	        }
	    });
	    /**
		 *  The time between successive callbacks. 
		 *  @example
		 * loop.interval = "8n"; //loop every 8n
		 *  @memberOf Tone.Loop#
		 *  @type {Time}
		 *  @name interval
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'interval', {
	        get: function () {
	            return this._event.loopEnd;
	        },
	        set: function (interval) {
	            this._event.loopEnd = interval;
	        }
	    });
	    /**
		 *  The playback rate of the loop. The normal playback rate is 1 (no change). 
		 *  A `playbackRate` of 2 would be twice as fast. 
		 *  @memberOf Tone.Loop#
		 *  @type {Time}
		 *  @name playbackRate
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'playbackRate', {
	        get: function () {
	            return this._event.playbackRate;
	        },
	        set: function (rate) {
	            this._event.playbackRate = rate;
	        }
	    });
	    /**
		 *  Random variation +/-0.01s to the scheduled time. 
		 *  Or give it a time value which it will randomize by.
		 *  @type {Boolean|Time}
		 *  @memberOf Tone.Loop#
		 *  @name humanize
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'humanize', {
	        get: function () {
	            return this._event.humanize;
	        },
	        set: function (variation) {
	            this._event.humanize = variation;
	        }
	    });
	    /**
		 *  The probably of the callback being invoked.
		 *  @memberOf Tone.Loop#
		 *  @type {NormalRange}
		 *  @name probability
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'probability', {
	        get: function () {
	            return this._event.probability;
	        },
	        set: function (prob) {
	            this._event.probability = prob;
	        }
	    });
	    /**
		 *  Muting the Loop means that no callbacks are invoked.
		 *  @memberOf Tone.Loop#
		 *  @type {Boolean}
		 *  @name mute
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'mute', {
	        get: function () {
	            return this._event.mute;
	        },
	        set: function (mute) {
	            this._event.mute = mute;
	        }
	    });
	    /**
		 *  The number of iterations of the loop. The default
		 *  value is Infinity (loop forever).
		 *  @memberOf Tone.Loop#
		 *  @type {Positive}
		 *  @name iterations
		 */
	    Object.defineProperty(Tone.Loop.prototype, 'iterations', {
	        get: function () {
	            if (this._event.loop === true) {
	                return Infinity;
	            } else {
	                return this._event.loop;
	            }
	        },
	        set: function (iters) {
	            if (iters === Infinity) {
	                this._event.loop = true;
	            } else {
	                this._event.loop = iters;
	            }
	        }
	    });
	    /**
		 *  Clean up
		 *  @return  {Tone.Loop}  this
		 */
	    Tone.Loop.prototype.dispose = function () {
	        this._event.dispose();
	        this._event = null;
	        this.callback = null;
	    };
	    return Tone.Loop;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.Part is a collection Tone.Events which can be
		 *         started/stopped and looped as a single unit.
		 *
		 *  @extends {Tone.Event}
		 *  @param {Function} callback The callback to invoke on each event
		 *  @param {Array} events the array of events
		 *  @example
		 * var part = new Tone.Part(function(time, note){
		 * 	//the notes given as the second element in the array
		 * 	//will be passed in as the second argument
		 * 	synth.triggerAttackRelease(note, "8n", time);
		 * }, [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
		 *  @example
		 * //use an array of objects as long as the object has a "time" attribute
		 * var part = new Tone.Part(function(time, value){
		 * 	//the value is an object which contains both the note and the velocity
		 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
		 * }, [{"time" : 0, "note" : "C3", "velocity": 0.9},
		 * 	   {"time" : "0:2", "note" : "C4", "velocity": 0.5}
		 * ]).start(0);
		 */
	    Tone.Part = function () {
	        var options = Tone.defaults(arguments, [
	            'callback',
	            'events'
	        ], Tone.Part);
	        Tone.Event.call(this, options);
	        /**
			 *  An array of Objects.
			 *  @type  {Array}
			 *  @private
			 */
	        this._events = [];
	        //add the events
	        for (var i = 0; i < options.events.length; i++) {
	            if (Array.isArray(options.events[i])) {
	                this.add(options.events[i][0], options.events[i][1]);
	            } else {
	                this.add(options.events[i]);
	            }
	        }
	    };
	    Tone.extend(Tone.Part, Tone.Event);
	    /**
		 *  The default values
		 *  @type  {Object}
		 *  @const
		 */
	    Tone.Part.defaults = {
	        'callback': Tone.noOp,
	        'loop': false,
	        'loopEnd': '1m',
	        'loopStart': 0,
	        'playbackRate': 1,
	        'probability': 1,
	        'humanize': false,
	        'mute': false,
	        'events': []
	    };
	    /**
		 *  Start the part at the given time.
		 *  @param  {TransportTime}  time    When to start the part.
		 *  @param  {Time=}  offset  The offset from the start of the part
		 *                           to begin playing at.
		 *  @return  {Tone.Part}  this
		 */
	    Tone.Part.prototype.start = function (time, offset) {
	        var ticks = this.toTicks(time);
	        if (this._state.getValueAtTime(ticks) !== Tone.State.Started) {
	            if (this._loop) {
	                offset = Tone.defaultArg(offset, this._loopStart);
	            } else {
	                offset = Tone.defaultArg(offset, 0);
	            }
	            offset = this.toTicks(offset);
	            this._state.add({
	                'state': Tone.State.Started,
	                'time': ticks,
	                'offset': offset
	            });
	            this._forEach(function (event) {
	                this._startNote(event, ticks, offset);
	            });
	        }
	        return this;
	    };
	    /**
		 *  Start the event in the given event at the correct time given
		 *  the ticks and offset and looping.
		 *  @param  {Tone.Event}  event
		 *  @param  {Ticks}  ticks
		 *  @param  {Ticks}  offset
		 *  @private
		 */
	    Tone.Part.prototype._startNote = function (event, ticks, offset) {
	        ticks -= offset;
	        if (this._loop) {
	            if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
	                if (event.startOffset < offset) {
	                    //start it on the next loop
	                    ticks += this._getLoopDuration();
	                }
	                event.start(Tone.Ticks(ticks));
	            } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
	                event.loop = false;
	                event.start(Tone.Ticks(ticks));
	            }
	        } else if (event.startOffset >= offset) {
	            event.start(Tone.Ticks(ticks));
	        }
	    };
	    /**
		 *  The start from the scheduled start time
		 *  @type {Ticks}
		 *  @memberOf Tone.Part#
		 *  @name startOffset
		 *  @private
		 */
	    Object.defineProperty(Tone.Part.prototype, 'startOffset', {
	        get: function () {
	            return this._startOffset;
	        },
	        set: function (offset) {
	            this._startOffset = offset;
	            this._forEach(function (event) {
	                event.startOffset += this._startOffset;
	            });
	        }
	    });
	    /**
		 *  Stop the part at the given time.
		 *  @param  {TimelinePosition}  time  When to stop the part.
		 *  @return  {Tone.Part}  this
		 */
	    Tone.Part.prototype.stop = function (time) {
	        var ticks = this.toTicks(time);
	        this._state.cancel(ticks);
	        this._state.setStateAtTime(Tone.State.Stopped, ticks);
	        this._forEach(function (event) {
	            event.stop(time);
	        });
	        return this;
	    };
	    /**
		 *  Get/Set an Event's value at the given time.
		 *  If a value is passed in and no event exists at
		 *  the given time, one will be created with that value.
		 *  If two events are at the same time, the first one will
		 *  be returned.
		 *  @example
		 * part.at("1m"); //returns the part at the first measure
		 *
		 * part.at("2m", "C2"); //set the value at "2m" to C2.
		 * //if an event didn't exist at that time, it will be created.
		 *  @param {TransportTime} time The time of the event to get or set.
		 *  @param {*=} value If a value is passed in, the value of the
		 *                    event at the given time will be set to it.
		 *  @return {Tone.Event} the event at the time
		 */
	    Tone.Part.prototype.at = function (time, value) {
	        time = Tone.TransportTime(time);
	        var tickTime = Tone.Ticks(1).toSeconds();
	        for (var i = 0; i < this._events.length; i++) {
	            var event = this._events[i];
	            if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {
	                if (Tone.isDefined(value)) {
	                    event.value = value;
	                }
	                return event;
	            }
	        }
	        //if there was no event at that time, create one
	        if (Tone.isDefined(value)) {
	            this.add(time, value);
	            //return the new event
	            return this._events[this._events.length - 1];
	        } else {
	            return null;
	        }
	    };
	    /**
		 *  Add a an event to the part.
		 *  @param {Time} time The time the note should start.
		 *                            If an object is passed in, it should
		 *                            have a 'time' attribute and the rest
		 *                            of the object will be used as the 'value'.
		 *  @param  {Tone.Event|*}  value
		 *  @returns {Tone.Part} this
		 *  @example
		 * part.add("1m", "C#+11");
		 */
	    Tone.Part.prototype.add = function (time, value) {
	        //extract the parameters
	        if (time.hasOwnProperty('time')) {
	            value = time;
	            time = value.time;
	        }
	        time = this.toTicks(time);
	        var event;
	        if (value instanceof Tone.Event) {
	            event = value;
	            event.callback = this._tick.bind(this);
	        } else {
	            event = new Tone.Event({
	                'callback': this._tick.bind(this),
	                'value': value
	            });
	        }
	        //the start offset
	        event.startOffset = time;
	        //initialize the values
	        event.set({
	            'loopEnd': this.loopEnd,
	            'loopStart': this.loopStart,
	            'loop': this.loop,
	            'humanize': this.humanize,
	            'playbackRate': this.playbackRate,
	            'probability': this.probability
	        });
	        this._events.push(event);
	        //start the note if it should be played right now
	        this._restartEvent(event);
	        return this;
	    };
	    /**
		 *  Restart the given event
		 *  @param  {Tone.Event}  event
		 *  @private
		 */
	    Tone.Part.prototype._restartEvent = function (event) {
	        this._state.forEach(function (stateEvent) {
	            if (stateEvent.state === Tone.State.Started) {
	                this._startNote(event, stateEvent.time, stateEvent.offset);
	            } else {
	                //stop the note
	                event.stop(Tone.Ticks(stateEvent.time));
	            }
	        }.bind(this));
	    };
	    /**
		 *  Remove an event from the part. Will recursively iterate
		 *  into nested parts to find the event.
		 *  @param {Time} time The time of the event
		 *  @param {*} value Optionally select only a specific event value
		 *  @return  {Tone.Part}  this
		 */
	    Tone.Part.prototype.remove = function (time, value) {
	        //extract the parameters
	        if (time.hasOwnProperty('time')) {
	            value = time;
	            time = value.time;
	        }
	        time = this.toTicks(time);
	        for (var i = this._events.length - 1; i >= 0; i--) {
	            var event = this._events[i];
	            if (event instanceof Tone.Part) {
	                event.remove(time, value);
	            } else if (event.startOffset === time) {
	                if (Tone.isUndef(value) || Tone.isDefined(value) && event.value === value) {
	                    this._events.splice(i, 1);
	                    event.dispose();
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Remove all of the notes from the group.
		 *  @return  {Tone.Part}  this
		 */
	    Tone.Part.prototype.removeAll = function () {
	        this._forEach(function (event) {
	            event.dispose();
	        });
	        this._events = [];
	        return this;
	    };
	    /**
		 *  Cancel scheduled state change events: i.e. "start" and "stop".
		 *  @param {TimelinePosition} after The time after which to cancel the scheduled events.
		 *  @return  {Tone.Part}  this
		 */
	    Tone.Part.prototype.cancel = function (after) {
	        this._forEach(function (event) {
	            event.cancel(after);
	        });
	        this._state.cancel(this.toTicks(after));
	        return this;
	    };
	    /**
		 *  Iterate over all of the events
		 *  @param {Function} callback
		 *  @param {Object} ctx The context
		 *  @private
		 */
	    Tone.Part.prototype._forEach = function (callback, ctx) {
	        if (this._events) {
	            ctx = Tone.defaultArg(ctx, this);
	            for (var i = this._events.length - 1; i >= 0; i--) {
	                var e = this._events[i];
	                if (e instanceof Tone.Part) {
	                    e._forEach(callback, ctx);
	                } else {
	                    callback.call(ctx, e);
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 *  Set the attribute of all of the events
		 *  @param  {String}  attr  the attribute to set
		 *  @param  {*}  value      The value to set it to
		 *  @private
		 */
	    Tone.Part.prototype._setAll = function (attr, value) {
	        this._forEach(function (event) {
	            event[attr] = value;
	        });
	    };
	    /**
		 *  Internal tick method
		 *  @param  {Number}  time  The time of the event in seconds
		 *  @private
		 */
	    Tone.Part.prototype._tick = function (time, value) {
	        if (!this.mute) {
	            this.callback(time, value);
	        }
	    };
	    /**
		 *  Determine if the event should be currently looping
		 *  given the loop boundries of this Part.
		 *  @param  {Tone.Event}  event  The event to test
		 *  @private
		 */
	    Tone.Part.prototype._testLoopBoundries = function (event) {
	        if (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd) {
	            event.cancel(0);
	        } else if (event.state === Tone.State.Stopped) {
	            //reschedule it if it's stopped
	            this._restartEvent(event);
	        }
	    };
	    /**
		 *  The probability of the notes being triggered.
		 *  @memberOf Tone.Part#
		 *  @type {NormalRange}
		 *  @name probability
		 */
	    Object.defineProperty(Tone.Part.prototype, 'probability', {
	        get: function () {
	            return this._probability;
	        },
	        set: function (prob) {
	            this._probability = prob;
	            this._setAll('probability', prob);
	        }
	    });
	    /**
		 *  If set to true, will apply small random variation
		 *  to the callback time. If the value is given as a time, it will randomize
		 *  by that amount.
		 *  @example
		 * event.humanize = true;
		 *  @type {Boolean|Time}
		 *  @name humanize
		 */
	    Object.defineProperty(Tone.Part.prototype, 'humanize', {
	        get: function () {
	            return this._humanize;
	        },
	        set: function (variation) {
	            this._humanize = variation;
	            this._setAll('humanize', variation);
	        }
	    });
	    /**
		 *  If the part should loop or not
		 *  between Tone.Part.loopStart and
		 *  Tone.Part.loopEnd. An integer
		 *  value corresponds to the number of
		 *  loops the Part does after it starts.
		 *  @memberOf Tone.Part#
		 *  @type {Boolean|Positive}
		 *  @name loop
		 *  @example
		 * //loop the part 8 times
		 * part.loop = 8;
		 */
	    Object.defineProperty(Tone.Part.prototype, 'loop', {
	        get: function () {
	            return this._loop;
	        },
	        set: function (loop) {
	            this._loop = loop;
	            this._forEach(function (event) {
	                event._loopStart = this._loopStart;
	                event._loopEnd = this._loopEnd;
	                event.loop = loop;
	                this._testLoopBoundries(event);
	            });
	        }
	    });
	    /**
		 *  The loopEnd point determines when it will
		 *  loop if Tone.Part.loop is true.
		 *  @memberOf Tone.Part#
		 *  @type {Time}
		 *  @name loopEnd
		 */
	    Object.defineProperty(Tone.Part.prototype, 'loopEnd', {
	        get: function () {
	            return Tone.Ticks(this._loopEnd).toSeconds();
	        },
	        set: function (loopEnd) {
	            this._loopEnd = this.toTicks(loopEnd);
	            if (this._loop) {
	                this._forEach(function (event) {
	                    event.loopEnd = loopEnd;
	                    this._testLoopBoundries(event);
	                });
	            }
	        }
	    });
	    /**
		 *  The loopStart point determines when it will
		 *  loop if Tone.Part.loop is true.
		 *  @memberOf Tone.Part#
		 *  @type {Time}
		 *  @name loopStart
		 */
	    Object.defineProperty(Tone.Part.prototype, 'loopStart', {
	        get: function () {
	            return Tone.Ticks(this._loopStart).toSeconds();
	        },
	        set: function (loopStart) {
	            this._loopStart = this.toTicks(loopStart);
	            if (this._loop) {
	                this._forEach(function (event) {
	                    event.loopStart = this.loopStart;
	                    this._testLoopBoundries(event);
	                });
	            }
	        }
	    });
	    /**
		 * 	The playback rate of the part
		 *  @memberOf Tone.Part#
		 *  @type {Positive}
		 *  @name playbackRate
		 */
	    Object.defineProperty(Tone.Part.prototype, 'playbackRate', {
	        get: function () {
	            return this._playbackRate;
	        },
	        set: function (rate) {
	            this._playbackRate = rate;
	            this._setAll('playbackRate', rate);
	        }
	    });
	    /**
		 * 	The number of scheduled notes in the part.
		 *  @memberOf Tone.Part#
		 *  @type {Positive}
		 *  @name length
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Part.prototype, 'length', {
	        get: function () {
	            return this._events.length;
	        }
	    });
	    /**
		 *  Clean up
		 *  @return  {Tone.Part}  this
		 */
	    Tone.Part.prototype.dispose = function () {
	        this.removeAll();
	        this._state.dispose();
	        this._state = null;
	        this.callback = null;
	        this._events = null;
	        return this;
	    };
	    return Tone.Part;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Pattern arpeggiates between the given notes
		 *         in a number of patterns. See Tone.CtrlPattern for
		 *         a full list of patterns.
		 *  @example
		 * var pattern = new Tone.Pattern(function(time, note){
		 *   //the order of the notes passed in depends on the pattern
		 * }, ["C2", "D4", "E5", "A6"], "upDown");
		 *  @extends {Tone.Loop}
		 *  @param {Function} callback The callback to invoke with the
		 *                             event.
		 *  @param {Array} values The values to arpeggiate over.
		 */
	    Tone.Pattern = function () {
	        var options = Tone.defaults(arguments, [
	            'callback',
	            'values',
	            'pattern'
	        ], Tone.Pattern);
	        Tone.Loop.call(this, options);
	        /**
			 *  The pattern manager
			 *  @type {Tone.CtrlPattern}
			 *  @private
			 */
	        this._pattern = new Tone.CtrlPattern({
	            'values': options.values,
	            'type': options.pattern,
	            'index': options.index
	        });
	    };
	    Tone.extend(Tone.Pattern, Tone.Loop);
	    /**
		 *  The defaults
		 *  @const
		 *  @type  {Object}
		 */
	    Tone.Pattern.defaults = {
	        'pattern': Tone.CtrlPattern.Type.Up,
	        'callback': Tone.noOp,
	        'values': []
	    };
	    /**
		 *  Internal function called when the notes should be called
		 *  @param  {Number}  time  The time the event occurs
		 *  @private
		 */
	    Tone.Pattern.prototype._tick = function (time) {
	        this.callback(time, this._pattern.value);
	        this._pattern.next();
	    };
	    /**
		 *  The current index in the values array.
		 *  @memberOf Tone.Pattern#
		 *  @type {Positive}
		 *  @name index
		 */
	    Object.defineProperty(Tone.Pattern.prototype, 'index', {
	        get: function () {
	            return this._pattern.index;
	        },
	        set: function (i) {
	            this._pattern.index = i;
	        }
	    });
	    /**
		 *  The array of events.
		 *  @memberOf Tone.Pattern#
		 *  @type {Array}
		 *  @name values
		 */
	    Object.defineProperty(Tone.Pattern.prototype, 'values', {
	        get: function () {
	            return this._pattern.values;
	        },
	        set: function (vals) {
	            this._pattern.values = vals;
	        }
	    });
	    /**
		 *  The current value of the pattern.
		 *  @memberOf Tone.Pattern#
		 *  @type {*}
		 *  @name value
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Pattern.prototype, 'value', {
	        get: function () {
	            return this._pattern.value;
	        }
	    });
	    /**
		 *  The pattern type. See Tone.CtrlPattern for the full list of patterns.
		 *  @memberOf Tone.Pattern#
		 *  @type {String}
		 *  @name pattern
		 */
	    Object.defineProperty(Tone.Pattern.prototype, 'pattern', {
	        get: function () {
	            return this._pattern.type;
	        },
	        set: function (pattern) {
	            this._pattern.type = pattern;
	        }
	    });
	    /**
		 *  Clean up
		 *  @return  {Tone.Pattern}  this
		 */
	    Tone.Pattern.prototype.dispose = function () {
	        Tone.Loop.prototype.dispose.call(this);
	        this._pattern.dispose();
	        this._pattern = null;
	    };
	    return Tone.Pattern;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class A sequence is an alternate notation of a part. Instead
		 *         of passing in an array of [time, event] pairs, pass
		 *         in an array of events which will be spaced at the
		 *         given subdivision. Sub-arrays will subdivide that beat
		 *         by the number of items are in the array.
		 *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
		 *  @param  {Function}  callback  The callback to invoke with every note
		 *  @param  {Array}    events  The sequence
		 *  @param  {Time} subdivision  The subdivision between which events are placed.
		 *  @extends {Tone.Part}
		 *  @example
		 * var seq = new Tone.Sequence(function(time, note){
		 * 	console.log(note);
		 * //straight quater notes
		 * }, ["C4", "E4", "G4", "A4"], "4n");
		 *  @example
		 * var seq = new Tone.Sequence(function(time, note){
		 * 	console.log(note);
		 * //subdivisions are given as subarrays
		 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]);
		 */
	    Tone.Sequence = function () {
	        var options = Tone.defaults(arguments, [
	            'callback',
	            'events',
	            'subdivision'
	        ], Tone.Sequence);
	        //remove the events
	        var events = options.events;
	        delete options.events;
	        Tone.Part.call(this, options);
	        /**
			 *  The subdivison of each note
			 *  @type  {Ticks}
			 *  @private
			 */
	        this._subdivision = this.toTicks(options.subdivision);
	        //if no time was passed in, the loop end is the end of the cycle
	        if (Tone.isUndef(options.loopEnd) && Tone.isDefined(events)) {
	            this._loopEnd = events.length * this._subdivision;
	        }
	        //defaults to looping
	        this._loop = true;
	        //add all of the events
	        if (Tone.isDefined(events)) {
	            for (var i = 0; i < events.length; i++) {
	                this.add(i, events[i]);
	            }
	        }
	    };
	    Tone.extend(Tone.Sequence, Tone.Part);
	    /**
		 *  The default values.
		 *  @type  {Object}
		 */
	    Tone.Sequence.defaults = { 'subdivision': '4n' };
	    /**
		 *  The subdivision of the sequence. This can only be
		 *  set in the constructor. The subdivision is the
		 *  interval between successive steps.
		 *  @type {Time}
		 *  @memberOf Tone.Sequence#
		 *  @name subdivision
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.Sequence.prototype, 'subdivision', {
	        get: function () {
	            return Tone.Ticks(this._subdivision).toSeconds();
	        }
	    });
	    /**
		 *  Get/Set an index of the sequence. If the index contains a subarray,
		 *  a Tone.Sequence representing that sub-array will be returned.
		 *  @example
		 * var sequence = new Tone.Sequence(playNote, ["E4", "C4", "F#4", ["A4", "Bb3"]])
		 * sequence.at(0)// => returns "E4"
		 * //set a value
		 * sequence.at(0, "G3");
		 * //get a nested sequence
		 * sequence.at(3).at(1)// => returns "Bb3"
		 * @param {Positive} index The index to get or set
		 * @param {*} value Optionally pass in the value to set at the given index.
		 */
	    Tone.Sequence.prototype.at = function (index, value) {
	        //if the value is an array,
	        if (Tone.isArray(value)) {
	            //remove the current event at that index
	            this.remove(index);
	        }
	        //call the parent's method
	        return Tone.Part.prototype.at.call(this, this._indexTime(index), value);
	    };
	    /**
		 *  Add an event at an index, if there's already something
		 *  at that index, overwrite it. If `value` is an array,
		 *  it will be parsed as a subsequence.
		 *  @param {Number} index The index to add the event to
		 *  @param {*} value The value to add at that index
		 *  @returns {Tone.Sequence} this
		 */
	    Tone.Sequence.prototype.add = function (index, value) {
	        if (value === null) {
	            return this;
	        }
	        if (Tone.isArray(value)) {
	            //make a subsequence and add that to the sequence
	            var subSubdivision = Math.round(this._subdivision / value.length);
	            value = new Tone.Sequence(this._tick.bind(this), value, Tone.Ticks(subSubdivision));
	        }
	        Tone.Part.prototype.add.call(this, this._indexTime(index), value);
	        return this;
	    };
	    /**
		 *  Remove a value from the sequence by index
		 *  @param {Number} index The index of the event to remove
		 *  @returns {Tone.Sequence} this
		 */
	    Tone.Sequence.prototype.remove = function (index, value) {
	        Tone.Part.prototype.remove.call(this, this._indexTime(index), value);
	        return this;
	    };
	    /**
		 *  Get the time of the index given the Sequence's subdivision
		 *  @param  {Number}  index
		 *  @return  {Time}  The time of that index
		 *  @private
		 */
	    Tone.Sequence.prototype._indexTime = function (index) {
	        if (index instanceof Tone.TransportTime) {
	            return index;
	        } else {
	            return Tone.Ticks(index * this._subdivision + this.startOffset).toSeconds();
	        }
	    };
	    /**
		 *  Clean up.
		 *  @return {Tone.Sequence} this
		 */
	    Tone.Sequence.prototype.dispose = function () {
	        Tone.Part.prototype.dispose.call(this);
	        return this;
	    };
	    return Tone.Sequence;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,
		 *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is
		 *         a square and only odd-numbered harmonics are present. At all other widths
		 *         even-numbered harmonics are present. Read more
		 *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {Frequency} [frequency] The frequency of the oscillator
		 *  @param {NormalRange} [width] The width of the pulse
		 *  @example
		 * var pulse = new Tone.PulseOscillator("E5", 0.4).toMaster().start();
		 */
	    Tone.PulseOscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'width'
	        ], Tone.Oscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  The width of the pulse.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.width = new Tone.Signal(options.width, Tone.Type.NormalRange);
	        /**
			 *  gate the width amount
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._widthGate = new Tone.Gain();
	        /**
			 *  the sawtooth oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */
	        this._sawtooth = new Tone.Oscillator({
	            frequency: options.frequency,
	            detune: options.detune,
	            type: 'sawtooth',
	            phase: options.phase
	        });
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this._sawtooth.frequency;
	        /**
			 *  The detune in cents.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = this._sawtooth.detune;
	        /**
			 *  Threshold the signal to turn it into a square
			 *  @type {Tone.WaveShaper}
			 *  @private
			 */
	        this._thresh = new Tone.WaveShaper(function (val) {
	            if (val < 0) {
	                return -1;
	            } else {
	                return 1;
	            }
	        });
	        //connections
	        this._sawtooth.chain(this._thresh, this.output);
	        this.width.chain(this._widthGate, this._thresh);
	        this._readOnly([
	            'width',
	            'frequency',
	            'detune'
	        ]);
	    };
	    Tone.extend(Tone.PulseOscillator, Tone.Source);
	    /**
		 *  The default parameters.
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.PulseOscillator.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'phase': 0,
	        'width': 0.2
	    };
	    /**
		 *  start the oscillator
		 *  @param  {Time} time
		 *  @private
		 */
	    Tone.PulseOscillator.prototype._start = function (time) {
	        time = this.toSeconds(time);
	        this._sawtooth.start(time);
	        this._widthGate.gain.setValueAtTime(1, time);
	    };
	    /**
		 *  stop the oscillator
		 *  @param  {Time} time
		 *  @private
		 */
	    Tone.PulseOscillator.prototype._stop = function (time) {
	        time = this.toSeconds(time);
	        this._sawtooth.stop(time);
	        //the width is still connected to the output.
	        //that needs to be stopped also
	        this._widthGate.gain.setValueAtTime(0, time);
	    };
	    /**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.PulseOscillator.prototype.restart = function (time) {
	        this._sawtooth.restart(time);
	    };
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.PulseOscillator#
		 * @type {Degrees}
		 * @name phase
		 */
	    Object.defineProperty(Tone.PulseOscillator.prototype, 'phase', {
	        get: function () {
	            return this._sawtooth.phase;
	        },
	        set: function (phase) {
	            this._sawtooth.phase = phase;
	        }
	    });
	    /**
		 * The type of the oscillator. Always returns "pulse".
		 * @readOnly
		 * @memberOf Tone.PulseOscillator#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.PulseOscillator.prototype, 'type', {
	        get: function () {
	            return 'pulse';
	        }
	    });
	    /**
		 * The partials of the waveform. Cannot set partials for this waveform type
		 * @memberOf Tone.PulseOscillator#
		 * @type {Array}
		 * @name partials
		 * @private
		 */
	    Object.defineProperty(Tone.PulseOscillator.prototype, 'partials', {
	        get: function () {
	            return [];
	        }
	    });
	    /**
		 *  Clean up method.
		 *  @return {Tone.PulseOscillator} this
		 */
	    Tone.PulseOscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this._sawtooth.dispose();
	        this._sawtooth = null;
	        this._writable([
	            'width',
	            'frequency',
	            'detune'
	        ]);
	        this.width.dispose();
	        this.width = null;
	        this._widthGate.dispose();
	        this._widthGate = null;
	        this._thresh.dispose();
	        this._thresh = null;
	        this.frequency = null;
	        this.detune = null;
	        return this;
	    };
	    return Tone.PulseOscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator
		 *         at the modulationFrequency. This has the effect of continuously
		 *         changing the timbre of the oscillator by altering the harmonics
		 *         generated.
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.
		 *  @example
		 *  var pwm = new Tone.PWMOscillator("Ab3", 0.3).toMaster().start();
		 */
	    Tone.PWMOscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'modulationFrequency'
	        ], Tone.PWMOscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  the pulse oscillator
			 *  @type {Tone.PulseOscillator}
			 *  @private
			 */
	        this._pulse = new Tone.PulseOscillator(options.modulationFrequency);
	        //change the pulse oscillator type
	        this._pulse._sawtooth.type = 'sine';
	        /**
			 *  the modulator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */
	        this._modulator = new Tone.Oscillator({
	            'frequency': options.frequency,
	            'detune': options.detune,
	            'phase': options.phase
	        });
	        /**
			 *  Scale the oscillator so it doesn't go silent
			 *  at the extreme values.
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._scale = new Tone.Multiply(2);
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this._modulator.frequency;
	        /**
			 *  The detune of the oscillator.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = this._modulator.detune;
	        /**
			 *  The modulation rate of the oscillator.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.modulationFrequency = this._pulse.frequency;
	        //connections
	        this._modulator.chain(this._scale, this._pulse.width);
	        this._pulse.connect(this.output);
	        this._readOnly([
	            'modulationFrequency',
	            'frequency',
	            'detune'
	        ]);
	    };
	    Tone.extend(Tone.PWMOscillator, Tone.Source);
	    /**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */
	    Tone.PWMOscillator.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'phase': 0,
	        'modulationFrequency': 0.4
	    };
	    /**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */
	    Tone.PWMOscillator.prototype._start = function (time) {
	        time = this.toSeconds(time);
	        this._modulator.start(time);
	        this._pulse.start(time);
	    };
	    /**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.PWMOscillator.prototype._stop = function (time) {
	        time = this.toSeconds(time);
	        this._modulator.stop(time);
	        this._pulse.stop(time);
	    };
	    /**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.PWMOscillator.prototype.restart = function (time) {
	        this._modulator.restart(time);
	        this._pulse.restart(time);
	    };
	    /**
		 * The type of the oscillator. Always returns "pwm".
		 * @readOnly
		 * @memberOf Tone.PWMOscillator#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.PWMOscillator.prototype, 'type', {
	        get: function () {
	            return 'pwm';
	        }
	    });
	    /**
		 * The partials of the waveform. Cannot set partials for this waveform type
		 * @memberOf Tone.PWMOscillator#
		 * @type {Array}
		 * @name partials
		 * @private
		 */
	    Object.defineProperty(Tone.PWMOscillator.prototype, 'partials', {
	        get: function () {
	            return [];
	        }
	    });
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.PWMOscillator#
		 * @type {number}
		 * @name phase
		 */
	    Object.defineProperty(Tone.PWMOscillator.prototype, 'phase', {
	        get: function () {
	            return this._modulator.phase;
	        },
	        set: function (phase) {
	            this._modulator.phase = phase;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return {Tone.PWMOscillator} this
		 */
	    Tone.PWMOscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this._pulse.dispose();
	        this._pulse = null;
	        this._scale.dispose();
	        this._scale = null;
	        this._modulator.dispose();
	        this._modulator = null;
	        this._writable([
	            'modulationFrequency',
	            'frequency',
	            'detune'
	        ]);
	        this.frequency = null;
	        this.detune = null;
	        this.modulationFrequency = null;
	        return this;
	    };
	    return Tone.PWMOscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.FMOscillator
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {String} type The type of the carrier oscillator.
		 *  @param {String} modulationType The type of the modulator oscillator.
		 *  @example
		 * //a sine oscillator frequency-modulated by a square wave
		 * var fmOsc = new Tone.FMOscillator("Ab3", "sine", "square").toMaster().start();
		 */
	    Tone.FMOscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type',
	            'modulationType'
	        ], Tone.FMOscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  The carrier oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */
	        this._carrier = new Tone.Oscillator(options.frequency, options.type);
	        /**
			 *  The oscillator's frequency
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = this._carrier.detune;
	        this.detune.value = options.detune;
	        /**
			 *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the
			 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the
			 *  modulating signal (ma) -- as in ma/mf.
			 *	@type {Positive}
			 *	@signal
			 */
	        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
	        this.modulationIndex.units = Tone.Type.Positive;
	        /**
			 *  The modulating oscillator
			 *  @type  {Tone.Oscillator}
			 *  @private
			 */
	        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
	        /**
			 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
			 *  A harmonicity of 1 gives both oscillators the same frequency.
			 *  Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch the modulator an octave below carrier
			 * synth.harmonicity.value = 0.5;
			 */
	        this.harmonicity = new Tone.Multiply(options.harmonicity);
	        this.harmonicity.units = Tone.Type.Positive;
	        /**
			 *  the node where the modulation happens
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._modulationNode = new Tone.Gain(0);
	        //connections
	        this.frequency.connect(this._carrier.frequency);
	        this.frequency.chain(this.harmonicity, this._modulator.frequency);
	        this.frequency.chain(this.modulationIndex, this._modulationNode);
	        this._modulator.connect(this._modulationNode.gain);
	        this._modulationNode.connect(this._carrier.frequency);
	        this._carrier.connect(this.output);
	        this.detune.connect(this._modulator.detune);
	        this.phase = options.phase;
	        this._readOnly([
	            'modulationIndex',
	            'frequency',
	            'detune',
	            'harmonicity'
	        ]);
	    };
	    Tone.extend(Tone.FMOscillator, Tone.Source);
	    /**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */
	    Tone.FMOscillator.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'phase': 0,
	        'modulationIndex': 2,
	        'modulationType': 'square',
	        'harmonicity': 1
	    };
	    /**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */
	    Tone.FMOscillator.prototype._start = function (time) {
	        this._modulator.start(time);
	        this._carrier.start(time);
	    };
	    /**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.FMOscillator.prototype._stop = function (time) {
	        this._modulator.stop(time);
	        this._carrier.stop(time);
	    };
	    /**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.FMOscillator.prototype.restart = function (time) {
	        this._modulator.restart(time);
	        this._carrier.restart(time);
	    };
	    /**
		 * The type of the carrier oscillator
		 * @memberOf Tone.FMOscillator#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.FMOscillator.prototype, 'type', {
	        get: function () {
	            return this._carrier.type;
	        },
	        set: function (type) {
	            this._carrier.type = type;
	        }
	    });
	    /**
		 * The type of the modulator oscillator
		 * @memberOf Tone.FMOscillator#
		 * @type {String}
		 * @name modulationType
		 */
	    Object.defineProperty(Tone.FMOscillator.prototype, 'modulationType', {
	        get: function () {
	            return this._modulator.type;
	        },
	        set: function (type) {
	            this._modulator.type = type;
	        }
	    });
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.FMOscillator#
		 * @type {number}
		 * @name phase
		 */
	    Object.defineProperty(Tone.FMOscillator.prototype, 'phase', {
	        get: function () {
	            return this._carrier.phase;
	        },
	        set: function (phase) {
	            this._carrier.phase = phase;
	            this._modulator.phase = phase;
	        }
	    });
	    /**
		 * The partials of the carrier waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.FMOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */
	    Object.defineProperty(Tone.FMOscillator.prototype, 'partials', {
	        get: function () {
	            return this._carrier.partials;
	        },
	        set: function (partials) {
	            this._carrier.partials = partials;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return {Tone.FMOscillator} this
		 */
	    Tone.FMOscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this._writable([
	            'modulationIndex',
	            'frequency',
	            'detune',
	            'harmonicity'
	        ]);
	        this.frequency.dispose();
	        this.frequency = null;
	        this.detune = null;
	        this.harmonicity.dispose();
	        this.harmonicity = null;
	        this._carrier.dispose();
	        this._carrier = null;
	        this._modulator.dispose();
	        this._modulator = null;
	        this._modulationNode.dispose();
	        this._modulationNode = null;
	        this.modulationIndex.dispose();
	        this.modulationIndex = null;
	        return this;
	    };
	    return Tone.FMOscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.AMOscillator
		 *
		 *  @extends {Tone.Oscillator}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {String} type The type of the carrier oscillator.
		 *  @param {String} modulationType The type of the modulator oscillator.
		 *  @example
		 * //a sine oscillator frequency-modulated by a square wave
		 * var fmOsc = new Tone.AMOscillator("Ab3", "sine", "square").toMaster().start();
		 */
	    Tone.AMOscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type',
	            'modulationType'
	        ], Tone.AMOscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  The carrier oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */
	        this._carrier = new Tone.Oscillator(options.frequency, options.type);
	        /**
			 *  The oscillator's frequency
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this._carrier.frequency;
	        /**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = this._carrier.detune;
	        this.detune.value = options.detune;
	        /**
			 *  The modulating oscillator
			 *  @type  {Tone.Oscillator}
			 *  @private
			 */
	        this._modulator = new Tone.Oscillator(options.frequency, options.modulationType);
	        /**
			 *  convert the -1,1 output to 0,1
			 *  @type {Tone.AudioToGain}
			 *  @private
			 */
	        this._modulationScale = new Tone.AudioToGain();
	        /**
			 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
			 *  A harmonicity of 1 gives both oscillators the same frequency.
			 *  Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch the modulator an octave below carrier
			 * synth.harmonicity.value = 0.5;
			 */
	        this.harmonicity = new Tone.Multiply(options.harmonicity);
	        this.harmonicity.units = Tone.Type.Positive;
	        /**
			 *  the node where the modulation happens
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._modulationNode = new Tone.Gain(0);
	        //connections
	        this.frequency.chain(this.harmonicity, this._modulator.frequency);
	        this.detune.connect(this._modulator.detune);
	        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
	        this._carrier.chain(this._modulationNode, this.output);
	        this.phase = options.phase;
	        this._readOnly([
	            'frequency',
	            'detune',
	            'harmonicity'
	        ]);
	    };
	    Tone.extend(Tone.AMOscillator, Tone.Oscillator);
	    /**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */
	    Tone.AMOscillator.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'phase': 0,
	        'modulationType': 'square',
	        'harmonicity': 1
	    };
	    /**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */
	    Tone.AMOscillator.prototype._start = function (time) {
	        this._modulator.start(time);
	        this._carrier.start(time);
	    };
	    /**
		 *  stop the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.AMOscillator.prototype._stop = function (time) {
	        this._modulator.stop(time);
	        this._carrier.stop(time);
	    };
	    /**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.AMOscillator.prototype.restart = function (time) {
	        this._modulator.restart(time);
	        this._carrier.restart(time);
	    };
	    /**
		 * The type of the carrier oscillator
		 * @memberOf Tone.AMOscillator#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.AMOscillator.prototype, 'type', {
	        get: function () {
	            return this._carrier.type;
	        },
	        set: function (type) {
	            this._carrier.type = type;
	        }
	    });
	    /**
		 * The type of the modulator oscillator
		 * @memberOf Tone.AMOscillator#
		 * @type {string}
		 * @name modulationType
		 */
	    Object.defineProperty(Tone.AMOscillator.prototype, 'modulationType', {
	        get: function () {
	            return this._modulator.type;
	        },
	        set: function (type) {
	            this._modulator.type = type;
	        }
	    });
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.AMOscillator#
		 * @type {number}
		 * @name phase
		 */
	    Object.defineProperty(Tone.AMOscillator.prototype, 'phase', {
	        get: function () {
	            return this._carrier.phase;
	        },
	        set: function (phase) {
	            this._carrier.phase = phase;
	            this._modulator.phase = phase;
	        }
	    });
	    /**
		 * The partials of the carrier waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.AMOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */
	    Object.defineProperty(Tone.AMOscillator.prototype, 'partials', {
	        get: function () {
	            return this._carrier.partials;
	        },
	        set: function (partials) {
	            this._carrier.partials = partials;
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return {Tone.AMOscillator} this
		 */
	    Tone.AMOscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'detune',
	            'harmonicity'
	        ]);
	        this.frequency = null;
	        this.detune = null;
	        this.harmonicity.dispose();
	        this.harmonicity = null;
	        this._carrier.dispose();
	        this._carrier = null;
	        this._modulator.dispose();
	        this._modulator = null;
	        this._modulationNode.dispose();
	        this._modulationNode = null;
	        this._modulationScale.dispose();
	        this._modulationScale = null;
	        return this;
	    };
	    return Tone.AMOscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.FatOscillator
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The starting frequency of the oscillator.
		 *  @param {String} type The type of the carrier oscillator.
		 *  @param {String} modulationType The type of the modulator oscillator.
		 *  @example
		 * //a sine oscillator frequency-modulated by a square wave
		 * var fmOsc = new Tone.FatOscillator("Ab3", "sine", "square").toMaster().start();
		 */
	    Tone.FatOscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type',
	            'spread'
	        ], Tone.FatOscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  The oscillator's frequency
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The detune control signal.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
	        /**
			 *  The array of oscillators
			 *  @type {Array}
			 *  @private
			 */
	        this._oscillators = [];
	        /**
			 *  The total spread of the oscillators
			 *  @type  {Cents}
			 *  @private
			 */
	        this._spread = options.spread;
	        /**
			 *  The type of the oscillator
			 *  @type {String}
			 *  @private
			 */
	        this._type = options.type;
	        /**
			 *  The phase of the oscillators
			 *  @type {Degrees}
			 *  @private
			 */
	        this._phase = options.phase;
	        /**
			 *  The partials array
			 *  @type {Array}
			 *  @private
			 */
	        this._partials = Tone.defaultArg(options.partials, []);
	        //set the count initially
	        this.count = options.count;
	        this._readOnly([
	            'frequency',
	            'detune'
	        ]);
	    };
	    Tone.extend(Tone.FatOscillator, Tone.Source);
	    /**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */
	    Tone.FatOscillator.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'phase': 0,
	        'spread': 20,
	        'count': 3,
	        'type': 'sawtooth'
	    };
	    /**
		 *  start the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */
	    Tone.FatOscillator.prototype._start = function (time) {
	        time = this.toSeconds(time);
	        this._forEach(function (osc) {
	            osc.start(time);
	        });
	    };
	    /**
		 *  stop the oscillator
		 *  @param  {Time} [time=now]
		 *  @private
		 */
	    Tone.FatOscillator.prototype._stop = function (time) {
	        time = this.toSeconds(time);
	        this._forEach(function (osc) {
	            osc.stop(time);
	        });
	    };
	    /**
		 *  restart the oscillator
		 *  @param  {Time} time (optional) timing parameter
		 *  @private
		 */
	    Tone.FatOscillator.prototype.restart = function (time) {
	        time = this.toSeconds(time);
	        this._forEach(function (osc) {
	            osc.restart(time);
	        });
	    };
	    /**
		 *  Iterate over all of the oscillators
		 *  @param  {Function}  iterator  The iterator function
		 *  @private
		 */
	    Tone.FatOscillator.prototype._forEach = function (iterator) {
	        for (var i = 0; i < this._oscillators.length; i++) {
	            iterator.call(this, this._oscillators[i], i);
	        }
	    };
	    /**
		 * The type of the carrier oscillator
		 * @memberOf Tone.FatOscillator#
		 * @type {string}
		 * @name type
		 */
	    Object.defineProperty(Tone.FatOscillator.prototype, 'type', {
	        get: function () {
	            return this._type;
	        },
	        set: function (type) {
	            this._type = type;
	            this._forEach(function (osc) {
	                osc.type = type;
	            });
	        }
	    });
	    /**
		 * The detune spread between the oscillators. If "count" is
		 * set to 3 oscillators and the "spread" is set to 40,
		 * the three oscillators would be detuned like this: [-20, 0, 20]
		 * for a total detune spread of 40 cents.
		 * @memberOf Tone.FatOscillator#
		 * @type {Cents}
		 * @name spread
		 */
	    Object.defineProperty(Tone.FatOscillator.prototype, 'spread', {
	        get: function () {
	            return this._spread;
	        },
	        set: function (spread) {
	            this._spread = spread;
	            if (this._oscillators.length > 1) {
	                var start = -spread / 2;
	                var step = spread / (this._oscillators.length - 1);
	                this._forEach(function (osc, i) {
	                    osc.detune.value = start + step * i;
	                });
	            }
	        }
	    });
	    /**
		 * The number of detuned oscillators
		 * @memberOf Tone.FatOscillator#
		 * @type {Number}
		 * @name count
		 */
	    Object.defineProperty(Tone.FatOscillator.prototype, 'count', {
	        get: function () {
	            return this._oscillators.length;
	        },
	        set: function (count) {
	            count = Math.max(count, 1);
	            if (this._oscillators.length !== count) {
	                // var partials = this.partials;
	                // var type = this.type;
	                //dispose the previous oscillators
	                this._forEach(function (osc) {
	                    osc.dispose();
	                });
	                this._oscillators = [];
	                for (var i = 0; i < count; i++) {
	                    var osc = new Tone.Oscillator();
	                    if (this.type === Tone.Oscillator.Type.Custom) {
	                        osc.partials = this._partials;
	                    } else {
	                        osc.type = this._type;
	                    }
	                    osc.phase = this._phase;
	                    osc.volume.value = -6 - count * 1.1;
	                    this.frequency.connect(osc.frequency);
	                    this.detune.connect(osc.detune);
	                    osc.connect(this.output);
	                    this._oscillators[i] = osc;
	                }
	                //set the spread
	                this.spread = this._spread;
	                if (this.state === Tone.State.Started) {
	                    this._forEach(function (osc) {
	                        osc.start();
	                    });
	                }
	            }
	        }
	    });
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.FatOscillator#
		 * @type {Number}
		 * @name phase
		 */
	    Object.defineProperty(Tone.FatOscillator.prototype, 'phase', {
	        get: function () {
	            return this._phase;
	        },
	        set: function (phase) {
	            this._phase = phase;
	            this._forEach(function (osc) {
	                osc.phase = phase;
	            });
	        }
	    });
	    /**
		 * The partials of the carrier waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * @memberOf Tone.FatOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */
	    Object.defineProperty(Tone.FatOscillator.prototype, 'partials', {
	        get: function () {
	            return this._partials;
	        },
	        set: function (partials) {
	            this._partials = partials;
	            this._type = Tone.Oscillator.Type.Custom;
	            this._forEach(function (osc) {
	                osc.partials = partials;
	            });
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return {Tone.FatOscillator} this
		 */
	    Tone.FatOscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'detune'
	        ]);
	        this.frequency.dispose();
	        this.frequency = null;
	        this.detune.dispose();
	        this.detune = null;
	        this._forEach(function (osc) {
	            osc.dispose();
	        });
	        this._oscillators = null;
	        this._partials = null;
	        return this;
	    };
	    return Tone.FatOscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,
		 *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator
		 *         into one class. The oscillator class can be changed by setting the `type`.
		 *         `omniOsc.type = "pwm"` will set it to the Tone.PWMOscillator. Prefixing
		 *         any of the basic types ("sine", "square4", etc.) with "fm", "am", or "fat"
		 *         will use the FMOscillator, AMOscillator or FatOscillator respectively.
		 *         For example: `omniOsc.type = "fatsawtooth"` will create set the oscillator
		 *         to a FatOscillator of type "sawtooth".
		 *
		 *  @extends {Tone.Source}
		 *  @constructor
		 *  @param {Frequency} frequency The initial frequency of the oscillator.
		 *  @param {String} type The type of the oscillator.
		 *  @example
		 *  var omniOsc = new Tone.OmniOscillator("C#4", "pwm");
		 */
	    Tone.OmniOscillator = function () {
	        var options = Tone.defaults(arguments, [
	            'frequency',
	            'type'
	        ], Tone.OmniOscillator);
	        Tone.Source.call(this, options);
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The detune control
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
	        /**
			 *  the type of the oscillator source
			 *  @type {String}
			 *  @private
			 */
	        this._sourceType = undefined;
	        /**
			 *  the oscillator
			 *  @type {Tone.Oscillator}
			 *  @private
			 */
	        this._oscillator = null;
	        //set the oscillator
	        this.type = options.type;
	        this._readOnly([
	            'frequency',
	            'detune'
	        ]);
	        //set the options
	        this.set(options);
	    };
	    Tone.extend(Tone.OmniOscillator, Tone.Source);
	    /**
		 *  default values
		 *  @static
		 *  @type {Object}
		 *  @const
		 */
	    Tone.OmniOscillator.defaults = {
	        'frequency': 440,
	        'detune': 0,
	        'type': 'sine',
	        'phase': 0
	    };
	    /**
		 *  @enum {String}
		 *  @private
		 */
	    var OmniOscType = {
	        Pulse: 'PulseOscillator',
	        PWM: 'PWMOscillator',
	        Osc: 'Oscillator',
	        FM: 'FMOscillator',
	        AM: 'AMOscillator',
	        Fat: 'FatOscillator'
	    };
	    /**
		 *  start the oscillator
		 *  @param {Time} [time=now] the time to start the oscillator
		 *  @private
		 */
	    Tone.OmniOscillator.prototype._start = function (time) {
	        this._oscillator.start(time);
	    };
	    /**
		 *  start the oscillator
		 *  @param {Time} [time=now] the time to start the oscillator
		 *  @private
		 */
	    Tone.OmniOscillator.prototype._stop = function (time) {
	        this._oscillator.stop(time);
	    };
	    Tone.OmniOscillator.prototype.restart = function (time) {
	        this._oscillator.restart(time);
	    };
	    /**
		 * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
		 * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
		 * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
		 * oscillator's class are accessible when the oscillator is set to that type, but throws an error
		 * when it's not.
		 *
		 * @memberOf Tone.OmniOscillator#
		 * @type {String}
		 * @name type
		 * @example
		 * omniOsc.type = "pwm";
		 * //modulationFrequency is parameter which is available
		 * //only when the type is "pwm".
		 * omniOsc.modulationFrequency.value = 0.5;
		 * @example
		 * //an square wave frequency modulated by a sawtooth
		 * omniOsc.type = "fmsquare";
		 * omniOsc.modulationType = "sawtooth";
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'type', {
	        get: function () {
	            var prefix = '';
	            if (this._sourceType === OmniOscType.FM) {
	                prefix = 'fm';
	            } else if (this._sourceType === OmniOscType.AM) {
	                prefix = 'am';
	            } else if (this._sourceType === OmniOscType.Fat) {
	                prefix = 'fat';
	            }
	            return prefix + this._oscillator.type;
	        },
	        set: function (type) {
	            if (type.substr(0, 2) === 'fm') {
	                this._createNewOscillator(OmniOscType.FM);
	                this._oscillator.type = type.substr(2);
	            } else if (type.substr(0, 2) === 'am') {
	                this._createNewOscillator(OmniOscType.AM);
	                this._oscillator.type = type.substr(2);
	            } else if (type.substr(0, 3) === 'fat') {
	                this._createNewOscillator(OmniOscType.Fat);
	                this._oscillator.type = type.substr(3);
	            } else if (type === 'pwm') {
	                this._createNewOscillator(OmniOscType.PWM);
	            } else if (type === 'pulse') {
	                this._createNewOscillator(OmniOscType.Pulse);
	            } else {
	                this._createNewOscillator(OmniOscType.Osc);
	                this._oscillator.type = type;
	            }
	        }
	    });
	    /**
		 * The partials of the waveform. A partial represents
		 * the amplitude at a harmonic. The first harmonic is the
		 * fundamental frequency, the second is the octave and so on
		 * following the harmonic series.
		 * Setting this value will automatically set the type to "custom".
		 * The value is an empty array when the type is not "custom".
		 * This is not available on "pwm" and "pulse" oscillator types.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Array}
		 * @name partials
		 * @example
		 * osc.partials = [1, 0.2, 0.01];
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'partials', {
	        get: function () {
	            return this._oscillator.partials;
	        },
	        set: function (partials) {
	            this._oscillator.partials = partials;
	        }
	    });
	    /**
		 *  Set a member/attribute of the oscillator.
		 *  @param {Object|String} params
		 *  @param {number=} value
		 *  @param {Time=} rampTime
		 *  @returns {Tone.OmniOscillator} this
		 */
	    Tone.OmniOscillator.prototype.set = function (params, value) {
	        //make sure the type is set first
	        if (params === 'type') {
	            this.type = value;
	        } else if (Tone.isObject(params) && params.hasOwnProperty('type')) {
	            this.type = params.type;
	        }
	        //then set the rest
	        Tone.prototype.set.apply(this, arguments);
	        return this;
	    };
	    /**
		 *  connect the oscillator to the frequency and detune signals
		 *  @private
		 */
	    Tone.OmniOscillator.prototype._createNewOscillator = function (oscType) {
	        if (oscType !== this._sourceType) {
	            this._sourceType = oscType;
	            var OscillatorConstructor = Tone[oscType];
	            //short delay to avoid clicks on the change
	            var now = this.now();
	            if (this._oscillator !== null) {
	                var oldOsc = this._oscillator;
	                oldOsc.stop(now);
	                //dispose the old one
	                this.context.setTimeout(function () {
	                    oldOsc.dispose();
	                    oldOsc = null;
	                }, this.blockTime);
	            }
	            this._oscillator = new OscillatorConstructor();
	            this.frequency.connect(this._oscillator.frequency);
	            this.detune.connect(this._oscillator.detune);
	            this._oscillator.connect(this.output);
	            if (this.state === Tone.State.Started) {
	                this._oscillator.start(now);
	            }
	        }
	    };
	    /**
		 * The phase of the oscillator in degrees.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Degrees}
		 * @name phase
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'phase', {
	        get: function () {
	            return this._oscillator.phase;
	        },
	        set: function (phase) {
	            this._oscillator.phase = phase;
	        }
	    });
	    /**
		 * The width of the oscillator (only if the oscillator is set to "pulse")
		 * @memberOf Tone.OmniOscillator#
		 * @type {NormalRange}
		 * @signal
		 * @name width
		 * @example
		 * var omniOsc = new Tone.OmniOscillator(440, "pulse");
		 * //can access the width attribute only if type === "pulse"
		 * omniOsc.width.value = 0.2;
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'width', {
	        get: function () {
	            if (this._sourceType === OmniOscType.Pulse) {
	                return this._oscillator.width;
	            }
	        }
	    });
	    /**
		 * The number of detuned oscillators
		 * @memberOf Tone.OmniOscillator#
		 * @type {Number}
		 * @name count
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'count', {
	        get: function () {
	            if (this._sourceType === OmniOscType.Fat) {
	                return this._oscillator.count;
	            }
	        },
	        set: function (count) {
	            if (this._sourceType === OmniOscType.Fat) {
	                this._oscillator.count = count;
	            }
	        }
	    });
	    /**
		 * The detune spread between the oscillators. If "count" is
		 * set to 3 oscillators and the "spread" is set to 40,
		 * the three oscillators would be detuned like this: [-20, 0, 20]
		 * for a total detune spread of 40 cents. See Tone.FatOscillator
		 * for more info.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Cents}
		 * @name spread
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'spread', {
	        get: function () {
	            if (this._sourceType === OmniOscType.Fat) {
	                return this._oscillator.spread;
	            }
	        },
	        set: function (spread) {
	            if (this._sourceType === OmniOscType.Fat) {
	                this._oscillator.spread = spread;
	            }
	        }
	    });
	    /**
		 * The type of the modulator oscillator. Only if the oscillator
		 * is set to "am" or "fm" types. see. Tone.AMOscillator or Tone.FMOscillator
		 * for more info.
		 * @memberOf Tone.OmniOscillator#
		 * @type {String}
		 * @name modulationType
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationType', {
	        get: function () {
	            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
	                return this._oscillator.modulationType;
	            }
	        },
	        set: function (mType) {
	            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
	                this._oscillator.modulationType = mType;
	            }
	        }
	    });
	    /**
		 * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the
		 * ratio of the frequency of the modulating signal (mf) to the amplitude of the
		 * modulating signal (ma) -- as in ma/mf.
		 * See Tone.FMOscillator for more info.
		 * @type {Positive}
		 * @signal
		 * @name modulationIndex
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationIndex', {
	        get: function () {
	            if (this._sourceType === OmniOscType.FM) {
	                return this._oscillator.modulationIndex;
	            }
	        }
	    });
	    /**
		 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
		 *  A harmonicity of 1 gives both oscillators the same frequency.
		 *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator
		 *  for more info.
		 *  @memberOf Tone.OmniOscillator#
		 *  @signal
		 *  @type {Positive}
		 *  @name harmonicity
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'harmonicity', {
	        get: function () {
	            if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
	                return this._oscillator.harmonicity;
	            }
	        }
	    });
	    /**
		 * The modulationFrequency Signal of the oscillator
		 * (only if the oscillator type is set to pwm). See
		 * Tone.PWMOscillator for more info.
		 * @memberOf Tone.OmniOscillator#
		 * @type {Frequency}
		 * @signal
		 * @name modulationFrequency
		 * @example
		 * var omniOsc = new Tone.OmniOscillator(440, "pwm");
		 * //can access the modulationFrequency attribute only if type === "pwm"
		 * omniOsc.modulationFrequency.value = 0.2;
		 */
	    Object.defineProperty(Tone.OmniOscillator.prototype, 'modulationFrequency', {
	        get: function () {
	            if (this._sourceType === OmniOscType.PWM) {
	                return this._oscillator.modulationFrequency;
	            }
	        }
	    });
	    /**
		 *  Clean up.
		 *  @return {Tone.OmniOscillator} this
		 */
	    Tone.OmniOscillator.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'detune'
	        ]);
	        this.detune.dispose();
	        this.detune = null;
	        this.frequency.dispose();
	        this.frequency = null;
	        this._oscillator.dispose();
	        this._oscillator = null;
	        this._sourceType = null;
	        return this;
	    };
	    return Tone.OmniOscillator;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Base-class for all instruments
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 */
	    Tone.Instrument = function (options) {
	        //get the defaults
	        options = Tone.defaultArg(options, Tone.Instrument.defaults);
	        Tone.AudioNode.call(this);
	        /**
			 *  The output and volume triming node
			 *  @type  {Tone.Volume}
			 *  @private
			 */
	        this._volume = this.output = new Tone.Volume(options.volume);
	        /**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * source.volume.value = -6;
			 */
	        this.volume = this._volume.volume;
	        this._readOnly('volume');
	        /**
			 * Keep track of all events scheduled to the transport
			 * when the instrument is 'synced'
			 * @type {Array<Number>}
			 * @private
			 */
	        this._scheduledEvents = [];
	    };
	    Tone.extend(Tone.Instrument, Tone.AudioNode);
	    /**
		 *  the default attributes
		 *  @type {object}
		 */
	    Tone.Instrument.defaults = {
	        /** the volume of the output in decibels */
	        'volume': 0
	    };
	    /**
		 *  @abstract
		 *  @param {string|number} note the note to trigger
		 *  @param {Time} [time=now] the time to trigger the ntoe
		 *  @param {number} [velocity=1] the velocity to trigger the note
		 */
	    Tone.Instrument.prototype.triggerAttack = Tone.noOp;
	    /**
		 *  @abstract
		 *  @param {Time} [time=now] when to trigger the release
		 */
	    Tone.Instrument.prototype.triggerRelease = Tone.noOp;
	    /**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * instrument.sync()
		 * //schedule 3 notes when the transport first starts
		 * instrument.triggerAttackRelease('C4', '8n', 0)
		 * instrument.triggerAttackRelease('E4', '8n', '8n')
		 * instrument.triggerAttackRelease('G4', '8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */
	    Tone.Instrument.prototype.sync = function () {
	        this._syncMethod('triggerAttack', 1);
	        this._syncMethod('triggerRelease', 0);
	        return this;
	    };
	    /**
		 * Wrap the given method so that it can be synchronized
		 * @param {String} method Which method to wrap and sync
		 * @param  {Number} timePosition What position the time argument appears in
		 * @private
		 */
	    Tone.Instrument.prototype._syncMethod = function (method, timePosition) {
	        var originalMethod = this['_original_' + method] = this[method];
	        this[method] = function () {
	            var args = Array.prototype.slice.call(arguments);
	            var time = args[timePosition];
	            var id = Tone.Transport.schedule(function (t) {
	                args[timePosition] = t;
	                originalMethod.apply(this, args);
	            }.bind(this), time);
	            this._scheduledEvents.push(id);
	        }.bind(this);
	    };
	    /**
		 * Unsync the instrument from the Transport
		 * @returns {Tone.Instrument} this
		 */
	    Tone.Instrument.prototype.unsync = function () {
	        this._scheduledEvents.forEach(function (id) {
	            Tone.Transport.clear(id);
	        });
	        this._scheduledEvents = [];
	        if (this._original_triggerAttack) {
	            this.triggerAttack = this._original_triggerAttack;
	            this.triggerRelease = this._original_triggerRelease;
	        }
	        return this;
	    };
	    /**
		 *  Trigger the attack and then the release after the duration.
		 *  @param  {Frequency} note     The note to trigger.
		 *  @param  {Time} duration How long the note should be held for before
		 *                          triggering the release. This value must be greater than 0.
		 *  @param {Time} [time=now]  When the note should be triggered.
		 *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.
		 *  @returns {Tone.Instrument} this
		 *  @example
		 * //trigger "C4" for the duration of an 8th note
		 * synth.triggerAttackRelease("C4", "8n");
		 */
	    Tone.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {
	        time = this.toSeconds(time);
	        duration = this.toSeconds(duration);
	        this.triggerAttack(note, time, velocity);
	        this.triggerRelease(time + duration);
	        return this;
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.Instrument} this
		 */
	    Tone.Instrument.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._volume.dispose();
	        this._volume = null;
	        this._writable(['volume']);
	        this.volume = null;
	        this.unsync();
	        this._scheduledEvents = null;
	        return this;
	    };
	    return Tone.Instrument;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  This is an abstract base class for other monophonic instruments to 
		 *          extend. IMPORTANT: It does not make any sound on its own and
		 *          shouldn't be directly instantiated.
		 *
		 *  @constructor
		 *  @abstract
		 *  @extends {Tone.Instrument}
		 */
	    Tone.Monophonic = function (options) {
	        //get the defaults
	        options = Tone.defaultArg(options, Tone.Monophonic.defaults);
	        Tone.Instrument.call(this, options);
	        /**
			 *  The glide time between notes. 
			 *  @type {Time}
			 */
	        this.portamento = options.portamento;
	    };
	    Tone.extend(Tone.Monophonic, Tone.Instrument);
	    /**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Monophonic.defaults = { 'portamento': 0 };
	    /**
		 *  Trigger the attack of the note optionally with a given velocity. 
		 *  
		 *  
		 *  @param  {Frequency} note     The note to trigger.
		 *  @param  {Time} [time=now]     When the note should start.
		 *  @param  {number} [velocity=1] velocity The velocity scaler 
		 *                                determines how "loud" the note 
		 *                                will be triggered.
		 *  @returns {Tone.Monophonic} this
		 *  @example
		 * synth.triggerAttack("C4");
		 *  @example
		 * //trigger the note a half second from now at half velocity
		 * synth.triggerAttack("C4", "+0.5", 0.5);
		 */
	    Tone.Monophonic.prototype.triggerAttack = function (note, time, velocity) {
	        time = this.toSeconds(time);
	        this._triggerEnvelopeAttack(time, velocity);
	        this.setNote(note, time);
	        return this;
	    };
	    /**
		 *  Trigger the release portion of the envelope
		 *  @param  {Time} [time=now] If no time is given, the release happens immediatly
		 *  @returns {Tone.Monophonic} this
		 *  @example
		 * synth.triggerRelease();
		 */
	    Tone.Monophonic.prototype.triggerRelease = function (time) {
	        time = this.toSeconds(time);
	        this._triggerEnvelopeRelease(time);
	        return this;
	    };
	    /**
		 *  override this method with the actual method
		 *  @abstract
		 *  @private
		 */
	    Tone.Monophonic.prototype._triggerEnvelopeAttack = function () {
	    };
	    /**
		 *  override this method with the actual method
		 *  @abstract
		 *  @private
		 */
	    Tone.Monophonic.prototype._triggerEnvelopeRelease = function () {
	    };
	    /**
		 *  Get the level of the output at the given time. Measures
		 *  the envelope(s) value at the time. 
		 *  @param {Time} time The time to query the envelope value
		 *  @return {NormalRange} The output level between 0-1
		 */
	    Tone.Monophonic.prototype.getLevelAtTime = function (time) {
	        time = this.toSeconds(time);
	        return this.envelope.getValueAtTime(time);
	    };
	    /**
		 *  Set the note at the given time. If no time is given, the note
		 *  will set immediately. 
		 *  @param {Frequency} note The note to change to.
		 *  @param  {Time} [time=now] The time when the note should be set. 
		 *  @returns {Tone.Monophonic} this
		 * @example
		 * //change to F#6 in one quarter note from now.
		 * synth.setNote("F#6", "+4n");
		 * @example
		 * //change to Bb4 right now
		 * synth.setNote("Bb4");
		 */
	    Tone.Monophonic.prototype.setNote = function (note, time) {
	        time = this.toSeconds(time);
	        if (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {
	            var portTime = this.toSeconds(this.portamento);
	            this.frequency.exponentialRampTo(note, portTime, time);
	        } else {
	            this.frequency.setValueAtTime(note, time);
	        }
	        return this;
	    };
	    return Tone.Monophonic;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator
		 *          routed through a Tone.AmplitudeEnvelope.
		 *          <img src="https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var synth = new Tone.Synth().toMaster();
		 * synth.triggerAttackRelease("C4", "8n");
		 */
	    Tone.Synth = function (options) {
	        //get the defaults
	        options = Tone.defaultArg(options, Tone.Synth.defaults);
	        Tone.Monophonic.call(this, options);
	        /**
			 *  The oscillator.
			 *  @type {Tone.OmniOscillator}
			 */
	        this.oscillator = new Tone.OmniOscillator(options.oscillator);
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this.oscillator.frequency;
	        /**
			 *  The detune control.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = this.oscillator.detune;
	        /**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */
	        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
	        //connect the oscillators to the output
	        this.oscillator.chain(this.envelope, this.output);
	        this._readOnly([
	            'oscillator',
	            'frequency',
	            'detune',
	            'envelope'
	        ]);
	    };
	    Tone.extend(Tone.Synth, Tone.Monophonic);
	    /**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.Synth.defaults = {
	        'oscillator': { 'type': 'triangle' },
	        'envelope': {
	            'attack': 0.005,
	            'decay': 0.1,
	            'sustain': 0.3,
	            'release': 1
	        }
	    };
	    /**
		 *  start the attack portion of the envelope
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {number} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.Synth} this
		 *  @private
		 */
	    Tone.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {
	        //the envelopes
	        this.envelope.triggerAttack(time, velocity);
	        this.oscillator.start(time);
	        //if there is no release portion, stop the oscillator
	        if (this.envelope.sustain === 0) {
	            this.oscillator.stop(time + this.envelope.attack + this.envelope.decay);
	        }
	        return this;
	    };
	    /**
		 *  start the release portion of the envelope
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.Synth} this
		 *  @private
		 */
	    Tone.Synth.prototype._triggerEnvelopeRelease = function (time) {
	        time = this.toSeconds(time);
	        this.envelope.triggerRelease(time);
	        this.oscillator.stop(time + this.envelope.release);
	        return this;
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.Synth} this
		 */
	    Tone.Synth.prototype.dispose = function () {
	        Tone.Monophonic.prototype.dispose.call(this);
	        this._writable([
	            'oscillator',
	            'frequency',
	            'detune',
	            'envelope'
	        ]);
	        this.oscillator.dispose();
	        this.oscillator = null;
	        this.envelope.dispose();
	        this.envelope = null;
	        this.frequency = null;
	        this.detune = null;
	        return this;
	    };
	    return Tone.Synth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  AMSynth uses the output of one Tone.Synth to modulate the
		 *          amplitude of another Tone.Synth. The harmonicity (the ratio between
		 *          the two signals) affects the timbre of the output signal greatly.
		 *          Read more about Amplitude Modulation Synthesis on
		 *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).
		 *          <img src="https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                            see defaults below
		 *  @example
		 * var synth = new Tone.AMSynth().toMaster();
		 * synth.triggerAttackRelease("C4", "4n");
		 */
	    Tone.AMSynth = function (options) {
	        options = Tone.defaultArg(options, Tone.AMSynth.defaults);
	        Tone.Monophonic.call(this, options);
	        /**
			 *  The carrier voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */
	        this._carrier = new Tone.Synth();
	        this._carrier.volume.value = -10;
	        /**
			 *  The carrier's oscillator
			 *  @type {Tone.Oscillator}
			 */
	        this.oscillator = this._carrier.oscillator;
	        /**
			 *  The carrier's envelope
			 *  @type {Tone.AmplitudeEnvelope}
			 */
	        this.envelope = this._carrier.envelope.set(options.envelope);
	        /**
			 *  The modulator voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */
	        this._modulator = new Tone.Synth();
	        this._modulator.volume.value = -10;
	        /**
			 *  The modulator's oscillator which is applied
			 *  to the amplitude of the oscillator
			 *  @type {Tone.Oscillator}
			 */
	        this.modulation = this._modulator.oscillator.set(options.modulation);
	        /**
			 *  The modulator's envelope
			 *  @type {Tone.AmplitudeEnvelope}
			 */
	        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
	        /**
			 *  The frequency.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
	        /**
			 *  The detune in cents
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
	        /**
			 *  Harmonicity is the ratio between the two voices. A harmonicity of
			 *  1 is no change. Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch voice1 an octave below voice0
			 * synth.harmonicity.value = 0.5;
			 */
	        this.harmonicity = new Tone.Multiply(options.harmonicity);
	        this.harmonicity.units = Tone.Type.Positive;
	        /**
			 *  convert the -1,1 output to 0,1
			 *  @type {Tone.AudioToGain}
			 *  @private
			 */
	        this._modulationScale = new Tone.AudioToGain();
	        /**
			 *  the node where the modulation happens
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._modulationNode = new Tone.Gain();
	        //control the two voices frequency
	        this.frequency.connect(this._carrier.frequency);
	        this.frequency.chain(this.harmonicity, this._modulator.frequency);
	        this.detune.fan(this._carrier.detune, this._modulator.detune);
	        this._modulator.chain(this._modulationScale, this._modulationNode.gain);
	        this._carrier.chain(this._modulationNode, this.output);
	        this._readOnly([
	            'frequency',
	            'harmonicity',
	            'oscillator',
	            'envelope',
	            'modulation',
	            'modulationEnvelope',
	            'detune'
	        ]);
	    };
	    Tone.extend(Tone.AMSynth, Tone.Monophonic);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.AMSynth.defaults = {
	        'harmonicity': 3,
	        'detune': 0,
	        'oscillator': { 'type': 'sine' },
	        'envelope': {
	            'attack': 0.01,
	            'decay': 0.01,
	            'sustain': 1,
	            'release': 0.5
	        },
	        'modulation': { 'type': 'square' },
	        'modulationEnvelope': {
	            'attack': 0.5,
	            'decay': 0,
	            'sustain': 1,
	            'release': 0.5
	        }
	    };
	    /**
		 *  trigger the attack portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will occur
		 *  @param {NormalRange} [velocity=1] the velocity of the note
		 *  @private
		 *  @returns {Tone.AMSynth} this
		 */
	    Tone.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
	        //the port glide
	        time = this.toSeconds(time);
	        //the envelopes
	        this._carrier._triggerEnvelopeAttack(time, velocity);
	        this._modulator._triggerEnvelopeAttack(time);
	        return this;
	    };
	    /**
		 *  trigger the release portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will release
		 *  @private
		 *  @returns {Tone.AMSynth} this
		 */
	    Tone.AMSynth.prototype._triggerEnvelopeRelease = function (time) {
	        this._carrier._triggerEnvelopeRelease(time);
	        this._modulator._triggerEnvelopeRelease(time);
	        return this;
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.AMSynth} this
		 */
	    Tone.AMSynth.prototype.dispose = function () {
	        Tone.Monophonic.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'harmonicity',
	            'oscillator',
	            'envelope',
	            'modulation',
	            'modulationEnvelope',
	            'detune'
	        ]);
	        this._carrier.dispose();
	        this._carrier = null;
	        this._modulator.dispose();
	        this._modulator = null;
	        this.frequency.dispose();
	        this.frequency = null;
	        this.detune.dispose();
	        this.detune = null;
	        this.harmonicity.dispose();
	        this.harmonicity = null;
	        this._modulationScale.dispose();
	        this._modulationScale = null;
	        this._modulationNode.dispose();
	        this._modulationNode = null;
	        this.oscillator = null;
	        this.envelope = null;
	        this.modulationEnvelope = null;
	        this.modulation = null;
	        return this;
	    };
	    return Tone.AMSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.
		 *          The amplitude of the Tone.Oscillator and the cutoff frequency of the
		 *          Tone.Filter are controlled by Tone.Envelopes.
		 *          <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var synth = new Tone.MonoSynth({
		 * 	"oscillator" : {
		 * 		"type" : "square"
		 *  },
		 *  "envelope" : {
		 *  	"attack" : 0.1
		 *  }
		 * }).toMaster();
		 * synth.triggerAttackRelease("C4", "8n");
		 */
	    Tone.MonoSynth = function (options) {
	        //get the defaults
	        options = Tone.defaultArg(options, Tone.MonoSynth.defaults);
	        Tone.Monophonic.call(this, options);
	        /**
			 *  The oscillator.
			 *  @type {Tone.OmniOscillator}
			 */
	        this.oscillator = new Tone.OmniOscillator(options.oscillator);
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = this.oscillator.frequency;
	        /**
			 *  The detune control.
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = this.oscillator.detune;
	        /**
			 *  The filter.
			 *  @type {Tone.Filter}
			 */
	        this.filter = new Tone.Filter(options.filter);
	        /**
			 *  The filter envelope.
			 *  @type {Tone.FrequencyEnvelope}
			 */
	        this.filterEnvelope = new Tone.FrequencyEnvelope(options.filterEnvelope);
	        /**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */
	        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
	        //connect the oscillators to the output
	        this.oscillator.chain(this.filter, this.envelope, this.output);
	        //connect the filter envelope
	        this.filterEnvelope.connect(this.filter.frequency);
	        this._readOnly([
	            'oscillator',
	            'frequency',
	            'detune',
	            'filter',
	            'filterEnvelope',
	            'envelope'
	        ]);
	    };
	    Tone.extend(Tone.MonoSynth, Tone.Monophonic);
	    /**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.MonoSynth.defaults = {
	        'frequency': 'C4',
	        'detune': 0,
	        'oscillator': { 'type': 'square' },
	        'filter': {
	            'Q': 6,
	            'type': 'lowpass',
	            'rolloff': -24
	        },
	        'envelope': {
	            'attack': 0.005,
	            'decay': 0.1,
	            'sustain': 0.9,
	            'release': 1
	        },
	        'filterEnvelope': {
	            'attack': 0.06,
	            'decay': 0.2,
	            'sustain': 0.5,
	            'release': 2,
	            'baseFrequency': 200,
	            'octaves': 7,
	            'exponent': 2
	        }
	    };
	    /**
		 *  start the attack portion of the envelope
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.MonoSynth} this
		 *  @private
		 */
	    Tone.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
	        time = this.toSeconds(time);
	        //the envelopes
	        this.envelope.triggerAttack(time, velocity);
	        this.filterEnvelope.triggerAttack(time);
	        this.oscillator.start(time);
	        if (this.envelope.sustain === 0) {
	            this.oscillator.stop(time + this.envelope.attack + this.envelope.decay);
	        }
	        return this;
	    };
	    /**
		 *  start the release portion of the envelope
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.MonoSynth} this
		 *  @private
		 */
	    Tone.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {
	        this.envelope.triggerRelease(time);
	        this.filterEnvelope.triggerRelease(time);
	        this.oscillator.stop(time + this.envelope.release);
	        return this;
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.MonoSynth} this
		 */
	    Tone.MonoSynth.prototype.dispose = function () {
	        Tone.Monophonic.prototype.dispose.call(this);
	        this._writable([
	            'oscillator',
	            'frequency',
	            'detune',
	            'filter',
	            'filterEnvelope',
	            'envelope'
	        ]);
	        this.oscillator.dispose();
	        this.oscillator = null;
	        this.envelope.dispose();
	        this.envelope = null;
	        this.filterEnvelope.dispose();
	        this.filterEnvelope = null;
	        this.filter.dispose();
	        this.filter = null;
	        this.frequency = null;
	        this.detune = null;
	        return this;
	    };
	    return Tone.MonoSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.DuoSynth is a monophonic synth composed of two
		 *          MonoSynths run in parallel with control over the
		 *          frequency ratio between the two voices and vibrato effect.
		 *          <img src="https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var duoSynth = new Tone.DuoSynth().toMaster();
		 * duoSynth.triggerAttackRelease("C4", "2n");
		 */
	    Tone.DuoSynth = function (options) {
	        options = Tone.defaultArg(options, Tone.DuoSynth.defaults);
	        Tone.Monophonic.call(this, options);
	        /**
			 *  the first voice
			 *  @type {Tone.MonoSynth}
			 */
	        this.voice0 = new Tone.MonoSynth(options.voice0);
	        this.voice0.volume.value = -10;
	        /**
			 *  the second voice
			 *  @type {Tone.MonoSynth}
			 */
	        this.voice1 = new Tone.MonoSynth(options.voice1);
	        this.voice1.volume.value = -10;
	        /**
			 *  The vibrato LFO.
			 *  @type {Tone.LFO}
			 *  @private
			 */
	        this._vibrato = new Tone.LFO(options.vibratoRate, -50, 50);
	        this._vibrato.start();
	        /**
			 * the vibrato frequency
			 * @type {Frequency}
			 * @signal
			 */
	        this.vibratoRate = this._vibrato.frequency;
	        /**
			 *  the vibrato gain
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._vibratoGain = new Tone.Gain(options.vibratoAmount, Tone.Type.Positive);
	        /**
			 * The amount of vibrato
			 * @type {Positive}
			 * @signal
			 */
	        this.vibratoAmount = this._vibratoGain.gain;
	        /**
			 *  the frequency control
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
	        /**
			 *  Harmonicity is the ratio between the two voices. A harmonicity of
			 *  1 is no change. Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch voice1 an octave below voice0
			 * duoSynth.harmonicity.value = 0.5;
			 */
	        this.harmonicity = new Tone.Multiply(options.harmonicity);
	        this.harmonicity.units = Tone.Type.Positive;
	        //control the two voices frequency
	        this.frequency.connect(this.voice0.frequency);
	        this.frequency.chain(this.harmonicity, this.voice1.frequency);
	        this._vibrato.connect(this._vibratoGain);
	        this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);
	        this.voice0.connect(this.output);
	        this.voice1.connect(this.output);
	        this._readOnly([
	            'voice0',
	            'voice1',
	            'frequency',
	            'vibratoAmount',
	            'vibratoRate'
	        ]);
	    };
	    Tone.extend(Tone.DuoSynth, Tone.Monophonic);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.DuoSynth.defaults = {
	        'vibratoAmount': 0.5,
	        'vibratoRate': 5,
	        'harmonicity': 1.5,
	        'voice0': {
	            'volume': -10,
	            'portamento': 0,
	            'oscillator': { 'type': 'sine' },
	            'filterEnvelope': {
	                'attack': 0.01,
	                'decay': 0,
	                'sustain': 1,
	                'release': 0.5
	            },
	            'envelope': {
	                'attack': 0.01,
	                'decay': 0,
	                'sustain': 1,
	                'release': 0.5
	            }
	        },
	        'voice1': {
	            'volume': -10,
	            'portamento': 0,
	            'oscillator': { 'type': 'sine' },
	            'filterEnvelope': {
	                'attack': 0.01,
	                'decay': 0,
	                'sustain': 1,
	                'release': 0.5
	            },
	            'envelope': {
	                'attack': 0.01,
	                'decay': 0,
	                'sustain': 1,
	                'release': 0.5
	            }
	        }
	    };
	    /**
		 *  start the attack portion of the envelopes
		 *
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.DuoSynth} this
		 *  @private
		 */
	    Tone.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
	        time = this.toSeconds(time);
	        this.voice0._triggerEnvelopeAttack(time, velocity);
	        this.voice1._triggerEnvelopeAttack(time, velocity);
	        return this;
	    };
	    /**
		 *  start the release portion of the envelopes
		 *
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.DuoSynth} this
		 *  @private
		 */
	    Tone.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {
	        this.voice0._triggerEnvelopeRelease(time);
	        this.voice1._triggerEnvelopeRelease(time);
	        return this;
	    };
	    /**
		 *  Get the level of the output at the given time. Measures
		 *  the envelope(s) value at the time. 
		 *  @param {Time} time The time to query the envelope value
		 *  @return {NormalRange} The output level between 0-1
		 */
	    Tone.DuoSynth.prototype.getLevelAtTime = function (time) {
	        return (this.voice0.getLevelAtTime(time) + this.voice1.getLevelAtTime(time)) / 2;
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.DuoSynth} this
		 */
	    Tone.DuoSynth.prototype.dispose = function () {
	        Tone.Monophonic.prototype.dispose.call(this);
	        this._writable([
	            'voice0',
	            'voice1',
	            'frequency',
	            'vibratoAmount',
	            'vibratoRate'
	        ]);
	        this.voice0.dispose();
	        this.voice0 = null;
	        this.voice1.dispose();
	        this.voice1 = null;
	        this.frequency.dispose();
	        this.frequency = null;
	        this._vibratoGain.dispose();
	        this._vibratoGain = null;
	        this._vibrato = null;
	        this.harmonicity.dispose();
	        this.harmonicity = null;
	        this.vibratoAmount.dispose();
	        this.vibratoAmount = null;
	        this.vibratoRate = null;
	        return this;
	    };
	    return Tone.DuoSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
		 *          the frequency of a second Tone.Synth. A lot of spectral content
		 *          can be explored using the modulationIndex parameter. Read more about
		 *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).
		 *          <img src="https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462">
		 *
		 *  @constructor
		 *  @extends {Tone.Monophonic}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var fmSynth = new Tone.FMSynth().toMaster();
		 * fmSynth.triggerAttackRelease("C5", "4n");
		 */
	    Tone.FMSynth = function (options) {
	        options = Tone.defaultArg(options, Tone.FMSynth.defaults);
	        Tone.Monophonic.call(this, options);
	        /**
			 *  The carrier voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */
	        this._carrier = new Tone.Synth(options.carrier);
	        this._carrier.volume.value = -10;
	        /**
			 *  The carrier's oscillator
			 *  @type {Tone.Oscillator}
			 */
	        this.oscillator = this._carrier.oscillator;
	        /**
			 *  The carrier's envelope
			 *  @type {Tone.Oscillator}
			 */
	        this.envelope = this._carrier.envelope.set(options.envelope);
	        /**
			 *  The modulator voice.
			 *  @type {Tone.Synth}
			 *  @private
			 */
	        this._modulator = new Tone.Synth(options.modulator);
	        this._modulator.volume.value = -10;
	        /**
			 *  The modulator's oscillator which is applied
			 *  to the amplitude of the oscillator
			 *  @type {Tone.Oscillator}
			 */
	        this.modulation = this._modulator.oscillator.set(options.modulation);
	        /**
			 *  The modulator's envelope
			 *  @type {Tone.Oscillator}
			 */
	        this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
	        /**
			 *  The frequency control.
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(440, Tone.Type.Frequency);
	        /**
			 *  The detune in cents
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
	        /**
			 *  Harmonicity is the ratio between the two voices. A harmonicity of
			 *  1 is no change. Harmonicity = 2 means a change of an octave.
			 *  @type {Positive}
			 *  @signal
			 *  @example
			 * //pitch voice1 an octave below voice0
			 * synth.harmonicity.value = 0.5;
			 */
	        this.harmonicity = new Tone.Multiply(options.harmonicity);
	        this.harmonicity.units = Tone.Type.Positive;
	        /**
			 *  The modulation index which essentially the depth or amount of the modulation. It is the
			 *  ratio of the frequency of the modulating signal (mf) to the amplitude of the
			 *  modulating signal (ma) -- as in ma/mf.
			 *	@type {Positive}
			 *	@signal
			 */
	        this.modulationIndex = new Tone.Multiply(options.modulationIndex);
	        this.modulationIndex.units = Tone.Type.Positive;
	        /**
			 *  the node where the modulation happens
			 *  @type {GainNode}
			 *  @private
			 */
	        this._modulationNode = new Tone.Gain(0);
	        //control the two voices frequency
	        this.frequency.connect(this._carrier.frequency);
	        this.frequency.chain(this.harmonicity, this._modulator.frequency);
	        this.frequency.chain(this.modulationIndex, this._modulationNode);
	        this.detune.fan(this._carrier.detune, this._modulator.detune);
	        this._modulator.connect(this._modulationNode.gain);
	        this._modulationNode.connect(this._carrier.frequency);
	        this._carrier.connect(this.output);
	        this._readOnly([
	            'frequency',
	            'harmonicity',
	            'modulationIndex',
	            'oscillator',
	            'envelope',
	            'modulation',
	            'modulationEnvelope',
	            'detune'
	        ]);
	    };
	    Tone.extend(Tone.FMSynth, Tone.Monophonic);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.FMSynth.defaults = {
	        'harmonicity': 3,
	        'modulationIndex': 10,
	        'detune': 0,
	        'oscillator': { 'type': 'sine' },
	        'envelope': {
	            'attack': 0.01,
	            'decay': 0.01,
	            'sustain': 1,
	            'release': 0.5
	        },
	        'modulation': { 'type': 'square' },
	        'modulationEnvelope': {
	            'attack': 0.5,
	            'decay': 0,
	            'sustain': 1,
	            'release': 0.5
	        }
	    };
	    /**
		 * 	trigger the attack portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will occur
		 *  @param {number} [velocity=1] the velocity of the note
		 *  @returns {Tone.FMSynth} this
		 *  @private
		 */
	    Tone.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
	        time = this.toSeconds(time);
	        //the envelopes
	        this._carrier._triggerEnvelopeAttack(time, velocity);
	        this._modulator._triggerEnvelopeAttack(time);
	        return this;
	    };
	    /**
		 *  trigger the release portion of the note
		 *
		 *  @param  {Time} [time=now] the time the note will release
		 *  @returns {Tone.FMSynth} this
		 *  @private
		 */
	    Tone.FMSynth.prototype._triggerEnvelopeRelease = function (time) {
	        time = this.toSeconds(time);
	        this._carrier._triggerEnvelopeRelease(time);
	        this._modulator._triggerEnvelopeRelease(time);
	        return this;
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.FMSynth} this
		 */
	    Tone.FMSynth.prototype.dispose = function () {
	        Tone.Monophonic.prototype.dispose.call(this);
	        this._writable([
	            'frequency',
	            'harmonicity',
	            'modulationIndex',
	            'oscillator',
	            'envelope',
	            'modulation',
	            'modulationEnvelope',
	            'detune'
	        ]);
	        this._carrier.dispose();
	        this._carrier = null;
	        this._modulator.dispose();
	        this._modulator = null;
	        this.frequency.dispose();
	        this.frequency = null;
	        this.detune.dispose();
	        this.detune = null;
	        this.modulationIndex.dispose();
	        this.modulationIndex = null;
	        this.harmonicity.dispose();
	        this.harmonicity = null;
	        this._modulationNode.dispose();
	        this._modulationNode = null;
	        this.oscillator = null;
	        this.envelope = null;
	        this.modulationEnvelope = null;
	        this.modulation = null;
	        return this;
	    };
	    return Tone.FMSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator
		 *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator
		 *          is routed through a Tone.AmplitudeEnvelope to the output. The drum
		 *          quality of the sound comes from the frequency envelope applied
		 *          during Tone.MembraneSynth.triggerAttack(note). The frequency envelope
		 *          starts at <code>note * .octaves</code> and ramps to <code>note</code>
		 *          over the duration of <code>.pitchDecay</code>.
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 *  @example
		 * var synth = new Tone.MembraneSynth().toMaster();
		 * synth.triggerAttackRelease("C2", "8n");
		 */
	    Tone.MembraneSynth = function (options) {
	        options = Tone.defaultArg(options, Tone.MembraneSynth.defaults);
	        Tone.Instrument.call(this, options);
	        /**
			 *  The oscillator.
			 *  @type {Tone.OmniOscillator}
			 */
	        this.oscillator = new Tone.OmniOscillator(options.oscillator);
	        /**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */
	        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
	        /**
			 *  The number of octaves the pitch envelope ramps.
			 *  @type {Positive}
			 */
	        this.octaves = options.octaves;
	        /**
			 *  The amount of time the frequency envelope takes.
			 *  @type {Time}
			 */
	        this.pitchDecay = options.pitchDecay;
	        this.oscillator.chain(this.envelope, this.output);
	        this._readOnly([
	            'oscillator',
	            'envelope'
	        ]);
	    };
	    Tone.extend(Tone.MembraneSynth, Tone.Instrument);
	    /**
		 *  @static
		 *  @type {Object}
		 */
	    Tone.MembraneSynth.defaults = {
	        'pitchDecay': 0.05,
	        'octaves': 10,
	        'oscillator': { 'type': 'sine' },
	        'envelope': {
	            'attack': 0.001,
	            'decay': 0.4,
	            'sustain': 0.01,
	            'release': 1.4,
	            'attackCurve': 'exponential'
	        }
	    };
	    /**
		 *  Trigger the note at the given time with the given velocity.
		 *
		 *  @param  {Frequency} note     the note
		 *  @param  {Time} [time=now]     the time, if not given is now
		 *  @param  {number} [velocity=1] velocity defaults to 1
		 *  @returns {Tone.MembraneSynth} this
		 *  @example
		 *  kick.triggerAttack(60);
		 */
	    Tone.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {
	        time = this.toSeconds(time);
	        note = this.toFrequency(note);
	        var maxNote = note * this.octaves;
	        this.oscillator.frequency.setValueAtTime(maxNote, time);
	        this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));
	        this.envelope.triggerAttack(time, velocity);
	        this.oscillator.start(time);
	        return this;
	    };
	    /**
		 *  Trigger the release portion of the note.
		 *
		 *  @param  {Time} [time=now] the time the note will release
		 *  @returns {Tone.MembraneSynth} this
		 */
	    Tone.MembraneSynth.prototype.triggerRelease = function (time) {
	        time = this.toSeconds(time);
	        this.envelope.triggerRelease(time);
	        this.oscillator.stop(time + this.envelope.release);
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.MembraneSynth} this
		 */
	    Tone.MembraneSynth.prototype.dispose = function () {
	        Tone.Instrument.prototype.dispose.call(this);
	        this._writable([
	            'oscillator',
	            'envelope'
	        ]);
	        this.oscillator.dispose();
	        this.oscillator = null;
	        this.envelope.dispose();
	        this.envelope = null;
	        return this;
	    };
	    return Tone.MembraneSynth;
	});
	Module(function (Tone) {
	    /**
		 *  Inharmonic ratio of frequencies based on the Roland TR-808
		 *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
		 *  @private
		 *  @static
		 *  @type {Array}
		 */
	    var inharmRatios = [
	        1,
	        1.483,
	        1.932,
	        2.546,
	        2.63,
	        3.897
	    ];
	    /**
		 *  @class  A highly inharmonic and spectrally complex source with a highpass filter
		 *          and amplitude envelope which is good for making metalophone sounds. Based
		 *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
		 *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] The options availble for the synth
		 *                             see defaults below
		 */
	    Tone.MetalSynth = function (options) {
	        options = Tone.defaultArg(options, Tone.MetalSynth.defaults);
	        Tone.Instrument.call(this, options);
	        /**
			 *  The frequency of the cymbal
			 *  @type  {Frequency}
			 *  @signal
			 */
	        this.frequency = new Tone.Signal(options.frequency, Tone.Type.Frequency);
	        /**
			 *  The array of FMOscillators
			 *  @type  {Array}
			 *  @private
			 */
	        this._oscillators = [];
	        /**
			 *  The frequency multipliers
			 *  @type {Array}
			 *  @private
			 */
	        this._freqMultipliers = [];
	        /**
			 *  The amplitude for the body
			 *  @type {Tone.Gain}
			 *  @private
			 */
	        this._amplitue = new Tone.Gain(0).connect(this.output);
	        /**
			 *  highpass the output
			 *  @type {Tone.Filter}
			 *  @private
			 */
	        this._highpass = new Tone.Filter({
	            'type': 'highpass',
	            'Q': -3.0102999566398125
	        }).connect(this._amplitue);
	        /**
			 *  The number of octaves the highpass
			 *  filter frequency ramps
			 *  @type {Number}
			 *  @private
			 */
	        this._octaves = options.octaves;
	        /**
			 *  Scale the body envelope
			 *  for the bandpass
			 *  @type {Tone.Scale}
			 *  @private
			 */
	        this._filterFreqScaler = new Tone.Scale(options.resonance, 7000);
	        /**
			 *  The envelope which is connected both to the
			 *  amplitude and highpass filter's cutoff frequency
			 *  @type  {Tone.Envelope}
			 */
	        this.envelope = new Tone.Envelope({
	            'attack': options.envelope.attack,
	            'attackCurve': 'linear',
	            'decay': options.envelope.decay,
	            'sustain': 0,
	            'release': options.envelope.release
	        }).chain(this._filterFreqScaler, this._highpass.frequency);
	        this.envelope.connect(this._amplitue.gain);
	        for (var i = 0; i < inharmRatios.length; i++) {
	            var osc = new Tone.FMOscillator({
	                'type': 'square',
	                'modulationType': 'square',
	                'harmonicity': options.harmonicity,
	                'modulationIndex': options.modulationIndex
	            });
	            osc.connect(this._highpass);
	            this._oscillators[i] = osc;
	            var mult = new Tone.Multiply(inharmRatios[i]);
	            this._freqMultipliers[i] = mult;
	            this.frequency.chain(mult, osc.frequency);
	        }
	        //set the octaves
	        this.octaves = options.octaves;
	    };
	    Tone.extend(Tone.MetalSynth, Tone.Instrument);
	    /**
		 *  default values
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.MetalSynth.defaults = {
	        'frequency': 200,
	        'envelope': {
	            'attack': 0.001,
	            'decay': 1.4,
	            'release': 0.2
	        },
	        'harmonicity': 5.1,
	        'modulationIndex': 32,
	        'resonance': 4000,
	        'octaves': 1.5
	    };
	    /**
		 *  Trigger the attack.
		 *  @param  {Time}  time      When the attack should be triggered.
		 *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.
		 *  @return  {Tone.MetalSynth}  this
		 */
	    Tone.MetalSynth.prototype.triggerAttack = function (time, vel) {
	        time = this.toSeconds(time);
	        vel = Tone.defaultArg(vel, 1);
	        this.envelope.triggerAttack(time, vel);
	        this._oscillators.forEach(function (osc) {
	            osc.start(time);
	        });
	        //if the sustain is 0, stop the oscillator as well
	        if (this.envelope.sustain === 0) {
	            this._oscillators.forEach(function (osc) {
	                osc.stop(time + this.envelope.attack + this.envelope.decay);
	            }.bind(this));
	        }
	        return this;
	    };
	    /**
		 *  Trigger the release of the envelope.
		 *  @param  {Time}  time      When the release should be triggered.
		 *  @return  {Tone.MetalSynth}  this
		 */
	    Tone.MetalSynth.prototype.triggerRelease = function (time) {
	        time = this.toSeconds(time);
	        this.envelope.triggerRelease(time);
	        this._oscillators.forEach(function (osc) {
	            osc.stop(time + this.envelope.release);
	        }.bind(this));
	        return this;
	    };
	    /**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */
	    Tone.MetalSynth.prototype.sync = function () {
	        this._syncMethod('triggerAttack', 0);
	        this._syncMethod('triggerRelease', 0);
	        return this;
	    };
	    /**
		 *  Trigger the attack and release of the envelope after the given
		 *  duration.
		 *  @param  {Time}  duration  The duration before triggering the release
		 *  @param  {Time}  time      When the attack should be triggered.
		 *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.
		 *  @return  {Tone.MetalSynth}  this
		 */
	    Tone.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
	        time = this.toSeconds(time);
	        duration = this.toSeconds(duration);
	        this.triggerAttack(time, velocity);
	        this.triggerRelease(time + duration);
	        return this;
	    };
	    /**
		 *  The modulationIndex of the oscillators which make up the source.
		 *  see Tone.FMOscillator.modulationIndex
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Positive}
		 *  @name  modulationIndex
		 */
	    Object.defineProperty(Tone.MetalSynth.prototype, 'modulationIndex', {
	        get: function () {
	            return this._oscillators[0].modulationIndex.value;
	        },
	        set: function (val) {
	            for (var i = 0; i < this._oscillators.length; i++) {
	                this._oscillators[i].modulationIndex.value = val;
	            }
	        }
	    });
	    /**
		 *  The harmonicity of the oscillators which make up the source.
		 *  see Tone.FMOscillator.harmonicity
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Positive}
		 *  @name  harmonicity
		 */
	    Object.defineProperty(Tone.MetalSynth.prototype, 'harmonicity', {
	        get: function () {
	            return this._oscillators[0].harmonicity.value;
	        },
	        set: function (val) {
	            for (var i = 0; i < this._oscillators.length; i++) {
	                this._oscillators[i].harmonicity.value = val;
	            }
	        }
	    });
	    /**
		 *  The frequency of the highpass filter attached to the envelope
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Frequency}
		 *  @name  resonance
		 */
	    Object.defineProperty(Tone.MetalSynth.prototype, 'resonance', {
	        get: function () {
	            return this._filterFreqScaler.min;
	        },
	        set: function (val) {
	            this._filterFreqScaler.min = val;
	            this.octaves = this._octaves;
	        }
	    });
	    /**
		 *  The number of octaves above the "resonance" frequency
		 *  that the filter ramps during the attack/decay envelope
		 *  @memberOf Tone.MetalSynth#
		 *  @type {Number}
		 *  @name  octaves
		 */
	    Object.defineProperty(Tone.MetalSynth.prototype, 'octaves', {
	        get: function () {
	            return this._octaves;
	        },
	        set: function (octs) {
	            this._octaves = octs;
	            this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);
	        }
	    });
	    /**
		 *  Clean up
		 *  @returns {Tone.MetalSynth} this
		 */
	    Tone.MetalSynth.prototype.dispose = function () {
	        Tone.Instrument.prototype.dispose.call(this);
	        for (var i = 0; i < this._oscillators.length; i++) {
	            this._oscillators[i].dispose();
	            this._freqMultipliers[i].dispose();
	        }
	        this._oscillators = null;
	        this._freqMultipliers = null;
	        this.frequency.dispose();
	        this.frequency = null;
	        this._filterFreqScaler.dispose();
	        this._filterFreqScaler = null;
	        this._amplitue.dispose();
	        this._amplitue = null;
	        this.envelope.dispose();
	        this.envelope = null;
	        this._highpass.dispose();
	        this._highpass = null;
	    };
	    return Tone.MetalSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter),
		 *          and two envelopes (Tone.Envelop). One envelope controls the amplitude
		 *          of the noise and the other is controls the cutoff frequency of the filter.
		 *          <img src="https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242">
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] the options available for the synth
		 *                          see defaults below
		 * @example
		 * var noiseSynth = new Tone.NoiseSynth().toMaster();
		 * noiseSynth.triggerAttackRelease("8n");
		 */
	    Tone.NoiseSynth = function (options) {
	        //get the defaults
	        options = Tone.defaultArg(options, Tone.NoiseSynth.defaults);
	        Tone.Instrument.call(this, options);
	        /**
			 *  The noise source.
			 *  @type {Tone.Noise}
			 *  @example
			 * noiseSynth.set("noise.type", "brown");
			 */
	        this.noise = new Tone.Noise();
	        /**
			 *  The amplitude envelope.
			 *  @type {Tone.AmplitudeEnvelope}
			 */
	        this.envelope = new Tone.AmplitudeEnvelope(options.envelope);
	        //connect the noise to the output
	        this.noise.chain(this.envelope, this.output);
	        this._readOnly([
	            'noise',
	            'envelope'
	        ]);
	    };
	    Tone.extend(Tone.NoiseSynth, Tone.Instrument);
	    /**
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.NoiseSynth.defaults = {
	        'noise': { 'type': 'white' },
	        'envelope': {
	            'attack': 0.005,
	            'decay': 0.1,
	            'sustain': 0
	        }
	    };
	    /**
		 *  Start the attack portion of the envelopes. Unlike other
		 *  instruments, Tone.NoiseSynth doesn't have a note.
		 *  @param {Time} [time=now] the time the attack should start
		 *  @param {number} [velocity=1] the velocity of the note (0-1)
		 *  @returns {Tone.NoiseSynth} this
		 *  @example
		 * noiseSynth.triggerAttack();
		 */
	    Tone.NoiseSynth.prototype.triggerAttack = function (time, velocity) {
	        //the envelopes
	        this.envelope.triggerAttack(time, velocity);
	        //start the noise
	        this.noise.start(time);
	        if (this.envelope.sustain === 0) {
	            this.noise.stop(time = this.envelope.attack + this.envelope.decay);
	        }
	        return this;
	    };
	    /**
		 *  Start the release portion of the envelopes.
		 *  @param {Time} [time=now] the time the release should start
		 *  @returns {Tone.NoiseSynth} this
		 */
	    Tone.NoiseSynth.prototype.triggerRelease = function (time) {
	        this.envelope.triggerRelease(time);
	        this.noise.stop(time + this.envelope.release);
	        return this;
	    };
	    /**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */
	    Tone.NoiseSynth.prototype.sync = function () {
	        this._syncMethod('triggerAttack', 0);
	        this._syncMethod('triggerRelease', 0);
	        return this;
	    };
	    /**
		 *  Trigger the attack and then the release.
		 *  @param  {Time} duration the duration of the note
		 *  @param  {Time} [time=now]     the time of the attack
		 *  @param  {number} [velocity=1] the velocity
		 *  @returns {Tone.NoiseSynth} this
		 */
	    Tone.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
	        time = this.toSeconds(time);
	        duration = this.toSeconds(duration);
	        this.triggerAttack(time, velocity);
	        this.triggerRelease(time + duration);
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.NoiseSynth} this
		 */
	    Tone.NoiseSynth.prototype.dispose = function () {
	        Tone.Instrument.prototype.dispose.call(this);
	        this._writable([
	            'noise',
	            'envelope'
	        ]);
	        this.noise.dispose();
	        this.noise = null;
	        this.envelope.dispose();
	        this.envelope = null;
	        return this;
	    };
	    return Tone.NoiseSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Karplus-String string synthesis. Often out of tune.
		 *         Will change when the AudioWorkerNode is available across
		 *         browsers.
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {Object} [options] see the defaults
		 *  @example
		 * var plucky = new Tone.PluckSynth().toMaster();
		 * plucky.triggerAttack("C4");
		 */
	    Tone.PluckSynth = function (options) {
	        options = Tone.defaultArg(options, Tone.PluckSynth.defaults);
	        Tone.Instrument.call(this, options);
	        /**
			 *  @type {Tone.Noise}
			 *  @private
			 */
	        this._noise = new Tone.Noise('pink');
	        /**
			 *  The amount of noise at the attack.
			 *  Nominal range of [0.1, 20]
			 *  @type {number}
			 */
	        this.attackNoise = options.attackNoise;
	        /**
			 *  the LFCF
			 *  @type {Tone.LowpassCombFilter}
			 *  @private
			 */
	        this._lfcf = new Tone.LowpassCombFilter({
	            'resonance': options.resonance,
	            'dampening': options.dampening
	        });
	        /**
			 *  The resonance control.
			 *  @type {NormalRange}
			 *  @signal
			 */
	        this.resonance = this._lfcf.resonance;
	        /**
			 *  The dampening control. i.e. the lowpass filter frequency of the comb filter
			 *  @type {Frequency}
			 *  @signal
			 */
	        this.dampening = this._lfcf.dampening;
	        //connections
	        this._noise.connect(this._lfcf);
	        this._lfcf.connect(this.output);
	        this._readOnly([
	            'resonance',
	            'dampening'
	        ]);
	    };
	    Tone.extend(Tone.PluckSynth, Tone.Instrument);
	    /**
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.PluckSynth.defaults = {
	        'attackNoise': 1,
	        'dampening': 4000,
	        'resonance': 0.7
	    };
	    /**
		 *  Trigger the note.
		 *  @param {Frequency} note The note to trigger.
		 *  @param {Time} [time=now] When the note should be triggered.
		 *  @returns {Tone.PluckSynth} this
		 */
	    Tone.PluckSynth.prototype.triggerAttack = function (note, time) {
	        note = this.toFrequency(note);
	        time = this.toSeconds(time);
	        var delayAmount = 1 / note;
	        this._lfcf.delayTime.setValueAtTime(delayAmount, time);
	        this._noise.start(time);
	        this._noise.stop(time + delayAmount * this.attackNoise);
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.PluckSynth} this
		 */
	    Tone.PluckSynth.prototype.dispose = function () {
	        Tone.Instrument.prototype.dispose.call(this);
	        this._noise.dispose();
	        this._lfcf.dispose();
	        this._noise = null;
	        this._lfcf = null;
	        this._writable([
	            'resonance',
	            'dampening'
	        ]);
	        this.dampening = null;
	        this.resonance = null;
	        return this;
	    };
	    return Tone.PluckSynth;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.PolySynth handles voice creation and allocation for any
		 *          instruments passed in as the second paramter. PolySynth is
		 *          not a synthesizer by itself, it merely manages voices of
		 *          one of the other types of synths, allowing any of the
		 *          monophonic synthesizers to be polyphonic.
		 *
		 *  @constructor
		 *  @extends {Tone.Instrument}
		 *  @param {number|Object} [polyphony=4] The number of voices to create
		 *  @param {function} [voice=Tone.Synth] The constructor of the voices
		 *                                            uses Tone.Synth by default.
		 *  @example
		 * //a polysynth composed of 6 Voices of Synth
		 * var synth = new Tone.PolySynth(6, Tone.Synth).toMaster();
		 * //set the attributes using the set interface
		 * synth.set("detune", -1200);
		 * //play a chord
		 * synth.triggerAttackRelease(["C4", "E4", "A4"], "4n");
		 */
	    Tone.PolySynth = function () {
	        var options = Tone.defaults(arguments, [
	            'polyphony',
	            'voice'
	        ], Tone.PolySynth);
	        Tone.Instrument.call(this, options);
	        options = Tone.defaultArg(options, Tone.Instrument.defaults);
	        //max polyphony
	        options.polyphony = Math.min(Tone.PolySynth.MAX_POLYPHONY, options.polyphony);
	        /**
			 *  the array of voices
			 *  @type {Array}
			 */
	        this.voices = new Array(options.polyphony);
	        /**
			 *  The queue of voices with data about last trigger
			 *  and the triggered note
			 *  @private
			 *  @type {Array}
			 */
	        this._triggers = new Array(options.polyphony);
	        /**
			 *  The detune in cents
			 *  @type {Cents}
			 *  @signal
			 */
	        this.detune = new Tone.Signal(options.detune, Tone.Type.Cents);
	        this._readOnly('detune');
	        //create the voices
	        for (var i = 0; i < options.polyphony; i++) {
	            var v = new options.voice(arguments[2], arguments[3]);
	            if (!(v instanceof Tone.Monophonic)) {
	                throw new Error('Synth constructor must be instance of Tone.Monophonic');
	            }
	            this.voices[i] = v;
	            v.connect(this.output);
	            if (v.hasOwnProperty('detune')) {
	                this.detune.connect(v.detune);
	            }
	            this._triggers[i] = {
	                release: -1,
	                note: null,
	                voice: v
	            };
	        }
	    };
	    Tone.extend(Tone.PolySynth, Tone.Instrument);
	    /**
		 *  the defaults
		 *  @const
		 *  @static
		 *  @type {Object}
		 */
	    Tone.PolySynth.defaults = {
	        'polyphony': 4,
	        'volume': 0,
	        'detune': 0,
	        'voice': Tone.Synth
	    };
	    /**
		 *  Trigger the attack portion of the note
		 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
		 *                                  Frequency or an array of frequencies.
		 *  @param  {Time} [time=now]  The start time of the note.
		 *  @param {number} [velocity=1] The velocity of the note.
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * //trigger a chord immediately with a velocity of 0.2
		 * poly.triggerAttack(["Ab3", "C4", "F5"], undefined, 0.2);
		 */
	    Tone.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {
	        if (!Array.isArray(notes)) {
	            notes = [notes];
	        }
	        time = this.toSeconds(time);
	        for (var i = 0; i < notes.length; i++) {
	            var val = notes[i];
	            //trigger the oldest voice
	            var oldest = this._triggers[0];
	            for (var j = 1; j < this._triggers.length; j++) {
	                if (this._triggers[j].release < oldest.release) {
	                    oldest = this._triggers[j];
	                }
	            }
	            oldest.release = Infinity;
	            oldest.note = JSON.stringify(val);
	            oldest.voice.triggerAttack(val, time, velocity);
	        }
	        return this;
	    };
	    /**
		 *  Trigger the attack and release after the specified duration
		 *
		 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
		 *                                  Frequency or an array of frequencies.
		 *  @param  {Time} duration the duration of the note
		 *  @param  {Time} [time=now]     if no time is given, defaults to now
		 *  @param  {number} [velocity=1] the velocity of the attack (0-1)
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * //trigger a chord for a duration of a half note
		 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], "2n");
		 *  @example
		 * //can pass in an array of durations as well
		 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], ["2n", "4n", "4n"]);
		 */
	    Tone.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {
	        time = this.toSeconds(time);
	        this.triggerAttack(notes, time, velocity);
	        if (Tone.isArray(duration) && Tone.isArray(notes)) {
	            for (var i = 0; i < notes.length; i++) {
	                var d = duration[Math.min(i, duration.length - 1)];
	                this.triggerRelease(notes[i], time + this.toSeconds(d));
	            }
	        } else {
	            this.triggerRelease(notes, time + this.toSeconds(duration));
	        }
	        return this;
	    };
	    /**
		 *  Trigger the release of the note. Unlike monophonic instruments,
		 *  a note (or array of notes) needs to be passed in as the first argument.
		 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
		 *                                  Frequency or an array of frequencies.
		 *  @param  {Time} [time=now]  When the release will be triggered.
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * poly.triggerRelease(["Ab3", "C4", "F5"], "+2n");
		 */
	    Tone.PolySynth.prototype.triggerRelease = function (notes, time) {
	        if (!Array.isArray(notes)) {
	            notes = [notes];
	        }
	        time = this.toSeconds(time);
	        for (var i = 0; i < notes.length; i++) {
	            //get the voice
	            var stringified = JSON.stringify(notes[i]);
	            for (var v = 0; v < this._triggers.length; v++) {
	                var desc = this._triggers[v];
	                if (desc.note === stringified && desc.release > time) {
	                    desc.voice.triggerRelease(time);
	                    desc.release = time;
	                }
	            }
	        }
	        return this;
	    };
	    /**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */
	    Tone.PolySynth.prototype.sync = function () {
	        this._syncMethod('triggerAttack', 1);
	        this._syncMethod('triggerRelease', 1);
	        return this;
	    };
	    /**
		 *  Set a member/attribute of the voices.
		 *  @param {Object|string} params
		 *  @param {number=} value
		 *  @param {Time=} rampTime
		 *  @returns {Tone.PolySynth} this
		 *  @example
		 * poly.set({
		 * 	"filter" : {
		 * 		"type" : "highpass"
		 * 	},
		 * 	"envelope" : {
		 * 		"attack" : 0.25
		 * 	}
		 * });
		 */
	    Tone.PolySynth.prototype.set = function (params, value, rampTime) {
	        for (var i = 0; i < this.voices.length; i++) {
	            this.voices[i].set(params, value, rampTime);
	        }
	        return this;
	    };
	    /**
		 *  Get the synth's attributes. Given no arguments get
		 *  will return all available object properties and their corresponding
		 *  values. Pass in a single attribute to retrieve or an array
		 *  of attributes. The attribute strings can also include a "."
		 *  to access deeper properties.
		 *  @param {Array=} params the parameters to get, otherwise will return
		 *  					   all available.
		 */
	    Tone.PolySynth.prototype.get = function (params) {
	        return this.voices[0].get(params);
	    };
	    /**
		 *  Trigger the release portion of all the currently active voices.
		 *  @param {Time} [time=now] When the notes should be released.
		 *  @return {Tone.PolySynth} this
		 */
	    Tone.PolySynth.prototype.releaseAll = function (time) {
	        time = this.toSeconds(time);
	        for (var i = 0; i < this._triggers.length; i++) {
	            var desc = this._triggers[i];
	            if (desc.release > time) {
	                desc.release = time;
	                desc.voice.triggerRelease(time);
	            }
	        }
	        return this;
	    };
	    /**
		 *  Clean up.
		 *  @returns {Tone.PolySynth} this
		 */
	    Tone.PolySynth.prototype.dispose = function () {
	        Tone.Instrument.prototype.dispose.call(this);
	        for (var i = 0; i < this.voices.length; i++) {
	            this.voices[i].dispose();
	            this.voices[i] = null;
	        }
	        this._writable('detune');
	        this.detune.dispose();
	        this.detune = null;
	        this.voices = null;
	        this._triggers = null;
	        return this;
	    };
	    /**
		 *  The maximum number of notes that can be allocated
		 *  to a polysynth.
		 *  @type  {Number}
		 *  @static
		 */
	    Tone.PolySynth.MAX_POLYPHONY = 20;
	    return Tone.PolySynth;
	});
	Module(function (Tone) {
	    /**
		 * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.
		 *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).
		 * @param {Object} samples An object of samples mapping either Midi
		 *                         Note Numbers or Scientific Pitch Notation
		 *                         to the url of that sample.
		 * @param {Function=} onload The callback to invoke when all of the samples are loaded.
		 * @param {String=} baseUrl The root URL of all of the samples, which is prepended to all the URLs.
		 * @example
		 * var sampler = new Tone.Sampler({
		 * 	"C3" : "path/to/C3.mp3",
		 * 	"D#3" : "path/to/Dsharp3.mp3",
		 * 	"F#3" : "path/to/Fsharp3.mp3",
		 * 	"A3" : "path/to/A3.mp3",
		 * }, function(){
		 * 	//sampler will repitch the closest sample
		 * 	sampler.triggerAttack("D3")
		 * })
		 * @extends {Tone.Instrument}
		 */
	    Tone.Sampler = function (urls) {
	        // shift arguments over one. Those are the remainder of the options
	        var args = Array.prototype.slice.call(arguments);
	        args.shift();
	        var options = Tone.defaults(args, [
	            'onload',
	            'baseUrl'
	        ], Tone.Sampler);
	        Tone.Instrument.call(this, options);
	        var urlMap = {};
	        for (var note in urls) {
	            if (Tone.isNote(note)) {
	                //convert the note name to MIDI
	                var mid = Tone.Frequency(note).toMidi();
	                urlMap[mid] = urls[note];
	            } else if (!isNaN(parseFloat(note))) {
	                //otherwise if it's numbers assume it's midi
	                urlMap[note] = urls[note];
	            } else {
	                throw new Error('Tone.Sampler: url keys must be the note\'s pitch');
	            }
	        }
	        /**
			 * The stored and loaded buffers
			 * @type {Tone.Buffers}
			 * @private
			 */
	        this._buffers = new Tone.Buffers(urlMap, options.onload, options.baseUrl);
	        /**
			 * The object of all currently playing BufferSources
			 * @type {Object}
			 * @private
			 */
	        this._activeSources = {};
	        /**
			 * The envelope applied to the beginning of the sample.
			 * @type {Time}
			 */
	        this.attack = options.attack;
	        /**
			 * The envelope applied to the end of the envelope.
			 * @type {Time}
			 */
	        this.release = options.release;
	    };
	    Tone.extend(Tone.Sampler, Tone.Instrument);
	    /**
		 * The defaults
		 * @const
		 * @type {Object}
		 */
	    Tone.Sampler.defaults = {
	        attack: 0,
	        release: 0.1,
	        onload: Tone.noOp,
	        baseUrl: ''
	    };
	    /**
		 * Returns the difference in steps between the given midi note at the closets sample.
		 * @param  {Midi} midi
		 * @return {Interval}
		 * @private
		 */
	    Tone.Sampler.prototype._findClosest = function (midi) {
	        //searches within 8 octaves of the given midi note
	        var MAX_INTERVAL = 96;
	        var interval = 0;
	        while (interval < MAX_INTERVAL) {
	            // check above and below
	            if (this._buffers.has(midi + interval)) {
	                return -interval;
	            } else if (this._buffers.has(midi - interval)) {
	                return interval;
	            }
	            interval++;
	        }
	        return null;
	    };
	    /**
		 * @param  {Frequency} note     The note to play
		 * @param  {Time=} time     When to play the note
		 * @param  {NormalRange=} velocity The velocity to play the sample back.
		 * @return {Tone.Sampler}          this
		 */
	    Tone.Sampler.prototype.triggerAttack = function (note, time, velocity) {
	        var midi = Tone.Frequency(note).toMidi();
	        // find the closest note pitch
	        var difference = this._findClosest(midi);
	        if (difference !== null) {
	            var closestNote = midi - difference;
	            var buffer = this._buffers.get(closestNote);
	            // play that note
	            var source = new Tone.BufferSource({
	                'buffer': buffer,
	                'playbackRate': Tone.intervalToFrequencyRatio(difference),
	                'fadeIn': this.attack,
	                'fadeOut': this.release,
	                'curve': 'exponential'
	            }).connect(this.output);
	            source.start(time, 0, buffer.duration, velocity);
	            // add it to the active sources
	            if (!Tone.isArray(this._activeSources[midi])) {
	                this._activeSources[midi] = [];
	            }
	            this._activeSources[midi].push({
	                note: midi,
	                source: source
	            });
	        }
	        return this;
	    };
	    /**
		 * @param  {Frequency} note     The note to release.
		 * @param  {Time=} time     	When to release the note.
		 * @return {Tone.Sampler}	this
		 */
	    Tone.Sampler.prototype.triggerRelease = function (note, time) {
	        var midi = Tone.Frequency(note).toMidi();
	        // find the note
	        if (this._activeSources[midi] && this._activeSources[midi].length) {
	            var source = this._activeSources[midi].shift().source;
	            time = this.toSeconds(time);
	            source.stop(time + this.release, this.release);
	        }
	        return this;
	    };
	    /**
		 * Release all currently active notes.
		 * @param  {Time=} time     	When to release the notes.
		 * @return {Tone.Sampler}	this
		 */
	    Tone.Sampler.prototype.releaseAll = function (time) {
	        time = this.toSeconds(time);
	        for (var note in this._activeSources) {
	            var sources = this._activeSources[note];
	            while (sources.length) {
	                var source = sources.shift().source;
	                source.stop(time + this.release, this.release);
	            }
	        }
	        return this;
	    };
	    /**
		 * Sync the instrument to the Transport. All subsequent calls of
		 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
		 * will be scheduled along the transport.
		 * @example
		 * synth.sync()
		 * //schedule 3 notes when the transport first starts
		 * synth.triggerAttackRelease('8n', 0)
		 * synth.triggerAttackRelease('8n', '8n')
		 * synth.triggerAttackRelease('8n', '4n')
		 * //start the transport to hear the notes
		 * Transport.start()
		 * @returns {Tone.Instrument} this
		 */
	    Tone.Sampler.prototype.sync = function () {
	        this._syncMethod('triggerAttack', 1);
	        this._syncMethod('triggerRelease', 1);
	        return this;
	    };
	    /**
		 * Invoke the attack phase, then after the duration, invoke the release.
		 * @param  {Frequency} note     The note to play
		 * @param  {Time} duration The time the note should be held
		 * @param  {Time=} time     When to start the attack
		 * @param  {NormalRange} [velocity=1] The velocity of the attack
		 * @return {Tone.Sampler}          this
		 */
	    Tone.Sampler.prototype.triggerAttackRelease = function (note, duration, time, velocity) {
	        time = this.toSeconds(time);
	        duration = this.toSeconds(duration);
	        this.triggerAttack(note, time, velocity);
	        this.triggerRelease(note, time + duration);
	        return this;
	    };
	    /**
		 *  Add a note to the sampler.
		 *  @param  {Note|Midi}   note      The buffer's pitch.
		 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,
		 *                                                 or a buffer which will be added
		 *                                                 with the given name.
		 *  @param  {Function=}  callback  The callback to invoke
		 *                                 when the url is loaded.
		 */
	    Tone.Sampler.prototype.add = function (note, url, callback) {
	        if (Tone.isNote(note)) {
	            //convert the note name to MIDI
	            var mid = Tone.Frequency(note).toMidi();
	            this._buffers.add(mid, url, callback);
	        } else if (!isNaN(parseFloat(note))) {
	            //otherwise if it's numbers assume it's midi
	            this._buffers.add(note, url, callback);
	        } else {
	            throw new Error('Tone.Sampler: note must be the note\'s pitch. Instead got ' + note);
	        }
	    };
	    /**
		 * If the buffers are loaded or not
		 * @memberOf Tone.Sampler#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Sampler.prototype, 'loaded', {
	        get: function () {
	            return this._buffers.loaded;
	        }
	    });
	    /**
		 * Clean up
		 * @return {Tone.Sampler} this
		 */
	    Tone.Sampler.prototype.dispose = function () {
	        Tone.Instrument.prototype.dispose.call(this);
	        this._buffers.dispose();
	        this._buffers = null;
	        for (var midi in this._activeSources) {
	            this._activeSources[midi].forEach(function (event) {
	                event.source.dispose();
	            });
	        }
	        this._activeSources = null;
	        return this;
	    };
	    return Tone.Sampler;
	});
	Module(function (Tone) {
	    if (Tone.supported) {
	        if (!OscillatorNode.prototype.setPeriodicWave) {
	            OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;
	        }
	        if (!AudioContext.prototype.createPeriodicWave) {
	            AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
	        }
	    }
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. 
		 *         See also Tone.AudioToGain. 
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @example
		 * var g2a = new Tone.GainToAudio();
		 */
	    Tone.GainToAudio = function () {
	        Tone.SignalBase.call(this);
	        /**
			 *  @type {WaveShaperNode}
			 *  @private
			 */
	        this._norm = this.input = this.output = new Tone.WaveShaper(function (x) {
	            return Math.abs(x) * 2 - 1;
	        });
	    };
	    Tone.extend(Tone.GainToAudio, Tone.SignalBase);
	    /**
		 *  clean up
		 *  @returns {Tone.GainToAudio} this
		 */
	    Tone.GainToAudio.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._norm.dispose();
	        this._norm = null;
	        return this;
	    };
	    return Tone.GainToAudio;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]
		 *
		 *  @extends {Tone.SignalBase}
		 *  @constructor
		 *  @param {number} inputMin the min input value
		 *  @param {number} inputMax the max input value
		 *  @example
		 * var norm = new Tone.Normalize(2, 4);
		 * var sig = new Tone.Signal(3).connect(norm);
		 * //output of norm is 0.5. 
		 */
	    Tone.Normalize = function (inputMin, inputMax) {
	        Tone.SignalBase.call(this);
	        /**
			 *  the min input value
			 *  @type {number}
			 *  @private
			 */
	        this._inputMin = Tone.defaultArg(inputMin, 0);
	        /**
			 *  the max input value
			 *  @type {number}
			 *  @private
			 */
	        this._inputMax = Tone.defaultArg(inputMax, 1);
	        /**
			 *  subtract the min from the input
			 *  @type {Tone.Add}
			 *  @private
			 */
	        this._sub = this.input = new Tone.Add(0);
	        /**
			 *  divide by the difference between the input and output
			 *  @type {Tone.Multiply}
			 *  @private
			 */
	        this._div = this.output = new Tone.Multiply(1);
	        this._sub.connect(this._div);
	        this._setRange();
	    };
	    Tone.extend(Tone.Normalize, Tone.SignalBase);
	    /**
		 * The minimum value the input signal will reach.
		 * @memberOf Tone.Normalize#
		 * @type {number}
		 * @name min
		 */
	    Object.defineProperty(Tone.Normalize.prototype, 'min', {
	        get: function () {
	            return this._inputMin;
	        },
	        set: function (min) {
	            this._inputMin = min;
	            this._setRange();
	        }
	    });
	    /**
		 * The maximum value the input signal will reach.
		 * @memberOf Tone.Normalize#
		 * @type {number}
		 * @name max
		 */
	    Object.defineProperty(Tone.Normalize.prototype, 'max', {
	        get: function () {
	            return this._inputMax;
	        },
	        set: function (max) {
	            this._inputMax = max;
	            this._setRange();
	        }
	    });
	    /**
		 *  set the values
		 *  @private
		 */
	    Tone.Normalize.prototype._setRange = function () {
	        this._sub.value = -this._inputMin;
	        this._div.value = 1 / (this._inputMax - this._inputMin);
	    };
	    /**
		 *  clean up
		 *  @returns {Tone.Normalize} this
		 */
	    Tone.Normalize.prototype.dispose = function () {
	        Tone.SignalBase.prototype.dispose.call(this);
	        this._sub.dispose();
	        this._sub = null;
	        this._div.dispose();
	        this._div = null;
	        return this;
	    };
	    return Tone.Normalize;
	});
	Module(function (Tone) {
	    /**
		 * @class Tone.TransportTimelineSignal extends Tone.Signal, but adds the ability to synchronize the signal to the signal to the Tone.Transport
		 * @extends {Tone.Signal}
		 */
	    Tone.TransportTimelineSignal = function () {
	        Tone.Signal.apply(this, arguments);
	        /**
			 * The real signal output
			 * @type {Tone.Signal}
			 * @private
			 */
	        this.output = this._outputSig = new Tone.Signal(this._initialValue);
	        /**
			 * Keep track of the last value. (small optimization)
			 * @private
			 * @type {Number}
			 */
	        this._lastVal = this.value;
	        /**
			 * The event id of the tick update loop
			 * @private
			 * @type {Number}
			 */
	        this._synced = Tone.Transport.scheduleRepeat(this._onTick.bind(this), '1i');
	        /**
			 * A bound version of the anchor value methods
			 * @type {Function}
			 * @private
			 */
	        this._bindAnchorValue = this._anchorValue.bind(this);
	        Tone.Transport.on('start stop pause', this._bindAnchorValue);
	        this._events.memory = Infinity;
	    };
	    Tone.extend(Tone.TransportTimelineSignal, Tone.Signal);
	    /**
		 * Callback which is invoked every tick.
		 * @private
		 * @param  {Number} time
		 * @return {Tone.TransportTimelineSignal}      this
		 */
	    Tone.TransportTimelineSignal.prototype._onTick = function (time) {
	        var val = this.getValueAtTime(Tone.Transport.seconds);
	        if (this._lastVal !== val) {
	            this._lastVal = val;
	            //approximate ramp curves with linear ramps
	            this._outputSig.linearRampToValueAtTime(val, time);
	        }
	    };
	    /**
		 * Anchor the value at the start and stop of the Transport
		 * @param  {Number} time The time of the event
		 * @return {Tone.TransportTimelineSignal}      this
		 * @private
		 */
	    Tone.TransportTimelineSignal.prototype._anchorValue = function (time) {
	        var val = this.getValueAtTime(Tone.Transport.seconds);
	        this._lastVal = val;
	        this._outputSig.cancelScheduledValues(time);
	        this._outputSig.setValueAtTime(val, time);
	        return this;
	    };
	    /**
		 *  Get the scheduled value at the given time. This will
		 *  return the unconverted (raw) value.
		 *  @param  {TransportTime}  time  The time in seconds.
		 *  @return  {Number}  The scheduled value at the given time.
		 */
	    Tone.TransportTimelineSignal.prototype.getValueAtTime = function (time) {
	        time = Tone.TransportTime(time);
	        return Tone.Signal.prototype.getValueAtTime.call(this, time);
	    };
	    /**
		 * Set the output of the signal at the given time
		 * @param  {Number} value The value to change to at the given time
		 * @param  {TransportTime} time  The time to change the signal
		 * @return {Tone.TransportTimelineSignal}       this
		 */
	    Tone.TransportTimelineSignal.prototype.setValueAtTime = function (value, time) {
	        time = Tone.TransportTime(time);
	        Tone.Signal.prototype.setValueAtTime.call(this, value, time);
	        return this;
	    };
	    /**
		 * Linear ramp to the given value from the previous scheduled point to the given value
		 * @param  {Number} value The value to change to at the given time
		 * @param  {TransportTime} time  The time to change the signal
		 * @return {Tone.TransportTimelineSignal}       this
		 */
	    Tone.TransportTimelineSignal.prototype.linearRampToValueAtTime = function (value, time) {
	        time = Tone.TransportTime(time);
	        Tone.Signal.prototype.linearRampToValueAtTime.call(this, value, time);
	        return this;
	    };
	    /**
		 * Exponential ramp to the given value from the previous scheduled point to the given value
		 * @param  {Number} value The value to change to at the given time
		 * @param  {TransportTime} time  The time to change the signal
		 * @return {Tone.TransportTimelineSignal}       this
		 */
	    Tone.TransportTimelineSignal.prototype.exponentialRampToValueAtTime = function (value, time) {
	        time = Tone.TransportTime(time);
	        Tone.Signal.prototype.exponentialRampToValueAtTime.call(this, value, time);
	        return this;
	    };
	    /**
		 *  Start exponentially approaching the target value at the given time with
		 *  a rate having the given time constant.
		 *  @param {number} value
		 *  @param {TransportTime} startTime
		 *  @param {number} timeConstant
		 * @return {Tone.TransportTimelineSignal}       this
		 */
	    Tone.TransportTimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
	        startTime = Tone.TransportTime(startTime);
	        Tone.Signal.prototype.setTargetAtTime.call(this, value, startTime, timeConstant);
	        return this;
	    };
	    /**
		 *  Cancels all scheduled parameter changes with times greater than or
		 *  equal to startTime.
		 *  @param  {TransportTime} startTime
		 *  @returns {Tone.Param} this
		 */
	    Tone.TransportTimelineSignal.prototype.cancelScheduledValues = function (startTime) {
	        startTime = Tone.TransportTime(startTime);
	        Tone.Signal.prototype.cancelScheduledValues.call(this, startTime);
	        return this;
	    };
	    /**
		 *  Set an array of arbitrary values starting at the given time for the given duration.
		 *  @param {Float32Array} values
		 *  @param {Time} startTime
		 *  @param {Time} duration
		 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
		 *  @returns {Tone.Signal} this
		 */
	    Tone.TransportTimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
	        startTime = Tone.TransportTime(startTime);
	        duration = Tone.TransportTime(duration);
	        Tone.Signal.prototype.setValueCurveAtTime.call(this, values, startTime, duration, scaling);
	        return this;
	    };
	    /**
		 *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except
		 *  it holds the automated value at time until the next automated event.
		 *  @param  {Time} time
		 *  @returns {Tone.TransportTimelineSignal} this
		 */
	    Tone.TransportTimelineSignal.prototype.cancelAndHoldAtTime = function (time) {
	        return Tone.Signal.prototype.cancelAndHoldAtTime.call(this, Tone.TransportTime(time));
	    };
	    /**
		 * Dispose and disconnect
		 * @return {Tone.TransportTimelineSignal} this
		 */
	    Tone.TransportTimelineSignal.prototype.dispose = function () {
	        Tone.Transport.clear(this._synced);
	        Tone.Transport.off('start stop pause', this._syncedCallback);
	        this._events.cancel(0);
	        Tone.Signal.prototype.dispose.call(this);
	        this._outputSig.dispose();
	        this._outputSig = null;
	    };
	    return Tone.TransportTimelineSignal;
	});
	Module(function (Tone) {
	    /**
		 * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
		 *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the
		 *        amount of time each small chunk of audio is played for and the overlap is the
		 *        amount of crossfading transition time between successive grains.
		 * @extends {Tone.Source}
		 * @param {String|Tone.Buffer} url	The url to load, or the Tone.Buffer to play.
		 * @param {Function=} callback The callback to invoke after the url is loaded.
		 */
	    Tone.GrainPlayer = function () {
	        var options = Tone.defaults(arguments, [
	            'url',
	            'onload'
	        ], Tone.GrainPlayer);
	        Tone.Source.call(this, options);
	        /**
			 *  The audio buffer belonging to the player.
			 *  @type  {Tone.Buffer}
			 */
	        this.buffer = new Tone.Buffer(options.url, options.onload);
	        /**
			 *  Create a repeating tick to schedule
			 *  the grains.
			 *  @type  {Tone.Clock}
			 *  @private
			 */
	        this._clock = new Tone.Clock(this._tick.bind(this), options.grainSize);
	        /**
			 *  @type  {Number}
			 *  @private
			 */
	        this._loopStart = 0;
	        /**
			 *  @type  {Number}
			 *  @private
			 */
	        this._loopEnd = 0;
	        /**
			 * All of the currently playing BufferSources
			 * @type {Array}
			 * @private
			 */
	        this._activeSources = [];
	        /**
			 *  @type  {Number}
			 *  @private
			 */
	        this._playbackRate = options.playbackRate;
	        /**
			 *  @type  {Number}
			 *  @private
			 */
	        this._grainSize = options.grainSize;
	        /**
			 *  @private
			 *  @type {Number}
			 */
	        this._overlap = options.overlap;
	        /**
			 *  Adjust the pitch independently of the playbackRate.
			 *  @type  {Cents}
			 */
	        this.detune = options.detune;
	        //setup
	        this.overlap = options.overlap;
	        this.loop = options.loop;
	        this.playbackRate = options.playbackRate;
	        this.grainSize = options.grainSize;
	        this.loopStart = options.loopStart;
	        this.loopEnd = options.loopEnd;
	        this.reverse = options.reverse;
	        this._clock.on('stop', this._onstop.bind(this));
	    };
	    Tone.extend(Tone.GrainPlayer, Tone.Source);
	    /**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.GrainPlayer.defaults = {
	        'onload': Tone.noOp,
	        'overlap': 0.1,
	        'grainSize': 0.2,
	        'playbackRate': 1,
	        'detune': 0,
	        'loop': false,
	        'loopStart': 0,
	        'loopEnd': 0,
	        'reverse': false
	    };
	    /**
		 *  Play the buffer at the given startTime. Optionally add an offset
		 *  and/or duration which will play the buffer from a position
		 *  within the buffer for the given duration.
		 *
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @returns {Tone.GrainPlayer} this
		 *  @memberOf Tone.GrainPlayer#
		 *  @method start
		 *  @name start
		 */
	    /**
		 *  Internal start method
		 *  @param {Time} time
		 *  @param {Time} offset
		 *  @private
		 */
	    Tone.GrainPlayer.prototype._start = function (time, offset, duration) {
	        offset = Tone.defaultArg(offset, 0);
	        offset = this.toSeconds(offset);
	        time = this.toSeconds(time);
	        this._offset = offset;
	        this._clock.start(time);
	        if (duration) {
	            this.stop(time + this.toSeconds(duration));
	        }
	    };
	    /**
		 *  Internal start method
		 *  @param {Time} time
		 *  @private
		 */
	    Tone.GrainPlayer.prototype._stop = function (time) {
	        this._clock.stop(time);
	    };
	    /**
		 * Invoked when the clock is stopped
		 * @param  {Number} time
		 * @private
		 */
	    Tone.GrainPlayer.prototype._onstop = function (time) {
	        //stop the players
	        this._activeSources.forEach(function (source) {
	            source.stop(time, 0);
	        });
	    };
	    /**
		 *  Invoked on each clock tick. scheduled a new
		 *  grain at this time.
		 *  @param  {Time}  time
		 *  @private
		 */
	    Tone.GrainPlayer.prototype._tick = function (time) {
	        var fadeIn = this._offset < this._overlap ? 0 : this._overlap;
	        var source = new Tone.BufferSource({
	            'buffer': this.buffer,
	            'fadeIn': fadeIn,
	            'fadeOut': this._overlap,
	            'loop': this.loop,
	            'loopStart': this._loopStart,
	            'loopEnd': this._loopEnd,
	            'playbackRate': Tone.intervalToFrequencyRatio(this.detune / 100)
	        }).connect(this.output);
	        source.start(time, this._offset);
	        this._offset += this.grainSize;
	        source.stop(time + this.grainSize);
	        //add it to the active sources
	        this._activeSources.push(source);
	        //remove it when it's done
	        source.onended = function () {
	            var index = this._activeSources.indexOf(source);
	            if (index !== -1) {
	                this._activeSources.splice(index, 1);
	            }
	        }.bind(this);
	    };
	    /**
		 *  Jump to a specific time and play it.
		 *  @param  {Time}  offset  The offset to jump to.
		 *  @param {Time=} time When to make the jump.
		 *  @return  {Tone.GrainPlayer}  this
		 */
	    Tone.GrainPlayer.prototype.seek = function (offset, time) {
	        this._offset = this.toSeconds(offset);
	        this._tick(this.toSeconds(time));
	        return this;
	    };
	    /**
		 * The playback rate of the sample
		 * @memberOf Tone.GrainPlayer#
		 * @type {Positive}
		 * @name playbackRate
		 */
	    Object.defineProperty(Tone.GrainPlayer.prototype, 'playbackRate', {
	        get: function () {
	            return this._playbackRate;
	        },
	        set: function (rate) {
	            this._playbackRate = rate;
	            this.grainSize = this._grainSize;
	        }
	    });
	    /**
		 * The loop start time.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name loopStart
		 */
	    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopStart', {
	        get: function () {
	            return this._loopStart;
	        },
	        set: function (time) {
	            this._loopStart = this.toSeconds(time);
	        }
	    });
	    /**
		 * The loop end time.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name loopEnd
		 */
	    Object.defineProperty(Tone.GrainPlayer.prototype, 'loopEnd', {
	        get: function () {
	            return this._loopEnd;
	        },
	        set: function (time) {
	            this._loopEnd = this.toSeconds(time);
	        }
	    });
	    /**
		 * The direction the buffer should play in
		 * @memberOf Tone.GrainPlayer#
		 * @type {boolean}
		 * @name reverse
		 */
	    Object.defineProperty(Tone.GrainPlayer.prototype, 'reverse', {
	        get: function () {
	            return this.buffer.reverse;
	        },
	        set: function (rev) {
	            this.buffer.reverse = rev;
	        }
	    });
	    /**
		 * The size of each chunk of audio that the
		 * buffer is chopped into and played back at.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name grainSize
		 */
	    Object.defineProperty(Tone.GrainPlayer.prototype, 'grainSize', {
	        get: function () {
	            return this._grainSize;
	        },
	        set: function (size) {
	            this._grainSize = this.toSeconds(size);
	            this._clock.frequency.value = this._playbackRate / this._grainSize;
	        }
	    });
	    /**
		 * This is the duration of the cross-fade between
		 * sucessive grains.
		 * @memberOf Tone.GrainPlayer#
		 * @type {Time}
		 * @name overlap
		 */
	    Object.defineProperty(Tone.GrainPlayer.prototype, 'overlap', {
	        get: function () {
	            return this._overlap;
	        },
	        set: function (time) {
	            this._overlap = this.toSeconds(time);
	        }
	    });
	    /**
		 * Clean up
		 * @return {Tone.GrainPlayer} this
		 */
	    Tone.GrainPlayer.prototype.dispose = function () {
	        Tone.Source.prototype.dispose.call(this);
	        this.buffer.dispose();
	        this.buffer = null;
	        this._clock.dispose();
	        this._clock = null;
	        this._activeSources.forEach(function (source) {
	            source.dispose();
	        });
	        this._activeSources = null;
	        return this;
	    };
	    return Tone.GrainPlayer;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Player is an audio file player with start, loop, and stop functions.
		 *
		 *  @constructor
		 *  @extends {Tone.Source}
		 *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from
		 *                                  which to load the AudioBuffer
		 *  @param {Function=} onload The function to invoke when the buffer is loaded.
		 *                            Recommended to use Tone.Buffer.on('load') instead.
		 *  @example
		 * var player = new Tone.Player("./path/to/sample.mp3").toMaster();
		 * //play as soon as the buffer is loaded
		 * player.autostart = true;
		 */
	    Tone.Player = function (url) {
	        var options;
	        if (url instanceof Tone.Buffer && url.loaded) {
	            url = url.get();
	            options = Tone.Player.defaults;
	        } else {
	            options = Tone.defaults(arguments, [
	                'url',
	                'onload'
	            ], Tone.Player);
	        }
	        Tone.Source.call(this, options);
	        /**
			 *  If the file should play as soon
			 *  as the buffer is loaded.
			 *  @type {Boolean}
			 *  @example
			 * //will play as soon as it's loaded
			 * var player = new Tone.Player({
			 * 	"url" : "./path/to/sample.mp3",
			 * 	"autostart" : true,
			 * }).toMaster();
			 */
	        this.autostart = options.autostart;
	        /**
			 *  the buffer
			 *  @private
			 *  @type {Tone.Buffer}
			 */
	        this._buffer = new Tone.Buffer({
	            'url': options.url,
	            'onload': this._onload.bind(this, options.onload),
	            'reverse': options.reverse
	        });
	        if (url instanceof AudioBuffer) {
	            this._buffer.set(url);
	        }
	        /**
			 *  if the buffer should loop once it's over
			 *  @type {Boolean}
			 *  @private
			 */
	        this._loop = options.loop;
	        /**
			 *  if 'loop' is true, the loop will start at this position
			 *  @type {Time}
			 *  @private
			 */
	        this._loopStart = options.loopStart;
	        /**
			 *  if 'loop' is true, the loop will end at this position
			 *  @type {Time}
			 *  @private
			 */
	        this._loopEnd = options.loopEnd;
	        /**
			 *  the playback rate
			 *  @private
			 *  @type {Number}
			 */
	        this._playbackRate = options.playbackRate;
	        /**
			 *  All of the active buffer source nodes
			 *  @type {Array<Tone.BufferSource>}
			 *  @private
			 */
	        this._activeSources = [];
	        /**
			 *  The elapsed time counter.
			 *  @type {Tone.TickSource}
			 *  @private
			 */
	        this._elapsedTime = new Tone.TickSource(options.playbackRate);
	        /**
			 *  The fadeIn time of the amplitude envelope.
			 *  @type {Time}
			 */
	        this.fadeIn = options.fadeIn;
	        /**
			 *  The fadeOut time of the amplitude envelope.
			 *  @type {Time}
			 */
	        this.fadeOut = options.fadeOut;
	    };
	    Tone.extend(Tone.Player, Tone.Source);
	    /**
		 *  the default parameters
		 *  @static
		 *  @const
		 *  @type {Object}
		 */
	    Tone.Player.defaults = {
	        'onload': Tone.noOp,
	        'playbackRate': 1,
	        'loop': false,
	        'autostart': false,
	        'loopStart': 0,
	        'loopEnd': 0,
	        'retrigger': false,
	        'reverse': false,
	        'fadeIn': 0,
	        'fadeOut': 0
	    };
	    /**
		 *  Load the audio file as an audio buffer.
		 *  Decodes the audio asynchronously and invokes
		 *  the callback once the audio buffer loads.
		 *  Note: this does not need to be called if a url
		 *  was passed in to the constructor. Only use this
		 *  if you want to manually load a new url.
		 * @param {string} url The url of the buffer to load.
		 *                     Filetype support depends on the
		 *                     browser.
		 *  @param  {Function=} callback The function to invoke once
		 *                               the sample is loaded.
		 *  @returns {Promise}
		 */
	    Tone.Player.prototype.load = function (url, callback) {
	        return this._buffer.load(url, this._onload.bind(this, callback));
	    };
	    /**
		 * Internal callback when the buffer is loaded.
		 * @private
		 */
	    Tone.Player.prototype._onload = function (callback) {
	        callback = Tone.defaultArg(callback, Tone.noOp);
	        callback(this);
	        if (this.autostart) {
	            this.start();
	        }
	    };
	    /**
		 * Internal callback when the buffer is done playing.
		 * @private
		 */
	    Tone.Player.prototype._onSourceEnd = function (source) {
	        var index = this._activeSources.indexOf(source);
	        this._activeSources.splice(index, 1);
	    };
	    /**
		 *  Play the buffer at the given startTime. Optionally add an offset
		 *  and/or duration which will play the buffer from a position
		 *  within the buffer for the given duration.
		 *
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @returns {Tone.Player} this
		 *  @memberOf Tone.Player#
		 *  @method start
		 *  @name start
		 */
	    /**
		 *  Internal start method
		 *  @private
		 */
	    Tone.Player.prototype._start = function (startTime, offset, duration) {
	        //if it's a loop the default offset is the loopstart point
	        if (this._loop) {
	            offset = Tone.defaultArg(offset, this._loopStart);
	        } else {
	            //otherwise the default offset is 0
	            offset = Tone.defaultArg(offset, 0);
	        }
	        //compute the values in seconds
	        offset = this.toSeconds(offset);
	        var computedDuration = Tone.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));
	        computedDuration = this.toSeconds(computedDuration);
	        startTime = this.toSeconds(startTime);
	        //start the elapsed time counter
	        this._elapsedTime.start(startTime, offset);
	        //make the source
	        var source = new Tone.BufferSource({
	            'buffer': this._buffer,
	            'loop': this._loop,
	            'loopStart': this._loopStart,
	            'loopEnd': this._loopEnd,
	            'onended': this._onSourceEnd.bind(this),
	            'playbackRate': this._playbackRate,
	            'fadeIn': this.fadeIn,
	            'fadeOut': this.fadeOut
	        }).connect(this.output);
	        //set the looping properties
	        if (!this._loop && !this._synced) {
	            //if it's not looping, set the state change at the end of the sample
	            this._state.setStateAtTime(Tone.State.Stopped, startTime + computedDuration / this._playbackRate);
	        }
	        //add it to the array of active sources
	        this._activeSources.push(source);
	        //start it
	        if (this._loop && Tone.isUndef(duration)) {
	            source.start(startTime, offset);
	        } else {
	            source.start(startTime, offset, computedDuration);
	        }
	        return this;
	    };
	    /**
		 *  Stop playback.
		 *  @private
		 *  @param  {Time} [time=now]
		 *  @returns {Tone.Player} this
		 */
	    Tone.Player.prototype._stop = function (time) {
	        time = this.toSeconds(time);
	        this._elapsedTime.stop(time);
	        this._activeSources.forEach(function (source) {
	            source.stop(time);
	        });
	        return this;
	    };
	    /**
		 * Stop and then restart the player from the beginning (or offset)
		 *  @param  {Time} [startTime=now] When the player should start.
		 *  @param  {Time} [offset=0] The offset from the beginning of the sample
		 *                                 to start at.
		 *  @param  {Time=} duration How long the sample should play. If no duration
		 *                                is given, it will default to the full length
		 *                                of the sample (minus any offset)
		 *  @returns {Tone.Player} this
		 */
	    Tone.Player.prototype.restart = function (time, offset, duration) {
	        this._stop(time);
	        this._start(time, offset, duration);
	        return this;
	    };
	    /**
		 *  Seek to a specific time in the player's buffer. If the
		 *  source is no longer playing at that time, it will stop.
		 *  If you seek to a time that
		 *  @param {Time} offset The time to seek to.
		 *  @param {Time=} time The time for the seek event to occur.
		 *  @return {Tone.Player} this
		 *  @example
		 * source.start(0.2);
		 * source.stop(0.4);
		 */
	    Tone.Player.prototype.seek = function (offset, time) {
	        time = this.toSeconds(time);
	        if (this._state.getValueAtTime(time) === Tone.State.Started) {
	            offset = this.toSeconds(offset);
	            // if it's currently playing, stop it
	            this._stop(time);
	            //restart it at the given time
	            this._start(time, offset);
	        }
	        return this;
	    };
	    /**
		 *  Set the loop start and end. Will only loop if loop is
		 *  set to true.
		 *  @param {Time} loopStart The loop end time
		 *  @param {Time} loopEnd The loop end time
		 *  @returns {Tone.Player} this
		 *  @example
		 * //loop 0.1 seconds of the file.
		 * player.setLoopPoints(0.2, 0.3);
		 * player.loop = true;
		 */
	    Tone.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {
	        this.loopStart = loopStart;
	        this.loopEnd = loopEnd;
	        return this;
	    };
	    /**
		 * If loop is true, the loop will start at this position.
		 * @memberOf Tone.Player#
		 * @type {Time}
		 * @name loopStart
		 */
	    Object.defineProperty(Tone.Player.prototype, 'loopStart', {
	        get: function () {
	            return this._loopStart;
	        },
	        set: function (loopStart) {
	            this._loopStart = loopStart;
	            //get the current source
	            this._activeSources.forEach(function (source) {
	                source.loopStart = loopStart;
	            });
	        }
	    });
	    /**
		 * If loop is true, the loop will end at this position.
		 * @memberOf Tone.Player#
		 * @type {Time}
		 * @name loopEnd
		 */
	    Object.defineProperty(Tone.Player.prototype, 'loopEnd', {
	        get: function () {
	            return this._loopEnd;
	        },
	        set: function (loopEnd) {
	            this._loopEnd = loopEnd;
	            //get the current source
	            this._activeSources.forEach(function (source) {
	                source.loopEnd = loopEnd;
	            });
	        }
	    });
	    /**
		 * The audio buffer belonging to the player.
		 * @memberOf Tone.Player#
		 * @type {Tone.Buffer}
		 * @name buffer
		 */
	    Object.defineProperty(Tone.Player.prototype, 'buffer', {
	        get: function () {
	            return this._buffer;
	        },
	        set: function (buffer) {
	            this._buffer.set(buffer);
	        }
	    });
	    /**
		 * If the buffer should loop once it's over.
		 * @memberOf Tone.Player#
		 * @type {Boolean}
		 * @name loop
		 */
	    Object.defineProperty(Tone.Player.prototype, 'loop', {
	        get: function () {
	            return this._loop;
	        },
	        set: function (loop) {
	            //if no change, do nothing
	            if (this._loop === loop) {
	                return;
	            }
	            this._loop = loop;
	            var now = this.now();
	            if (!loop) {
	                //stop the playback on the next cycle
	                this._stopAtNextIteration(now);
	            } else {
	                //remove the next stopEvent
	                var stopEvent = this._state.getNextState(Tone.State.Stopped, now);
	                if (stopEvent) {
	                    this._activeSources.forEach(function (source) {
	                        source.loop = loop;
	                    });
	                    this._state.cancel(stopEvent.time);
	                    this._elapsedTime.cancel(stopEvent.time);
	                }
	            }
	        }
	    });
	    /**
		 *  Schedules a stop event at the next full iteration. Used
		 *  for scheduling stop when the loop state or playbackRate changes
		 *  @param  {Number}  now  The current time
		 *  @private
		 */
	    Tone.Player.prototype._stopAtNextIteration = function (now) {
	        if (this._state.getValueAtTime(now) === Tone.State.Started) {
	            var nextStop = this._state.getNextState(Tone.State.Stopped, now);
	            var position = this._elapsedTime.getTicksAtTime(now);
	            var iterations = Math.max(Math.ceil(position / this.buffer.duration), 1);
	            var stopTime = this._elapsedTime.getTimeOfTick(iterations * this.buffer.duration, nextStop ? nextStop.time - this.sampleTime : Infinity);
	            this.stop(stopTime);
	        }
	    };
	    /**
		 * The playback speed. 1 is normal speed. This is not a signal because
		 * Safari and iOS currently don't support playbackRate as a signal.
		 * @memberOf Tone.Player#
		 * @type {Number}
		 * @name playbackRate
		 */
	    Object.defineProperty(Tone.Player.prototype, 'playbackRate', {
	        get: function () {
	            return this._playbackRate;
	        },
	        set: function (rate) {
	            this._playbackRate = rate;
	            var now = this.now();
	            this._elapsedTime.frequency.setValueAtTime(rate, now);
	            //if it's not looping
	            if (!this._loop) {
	                this._stopAtNextIteration(now);
	            }
	            //set all the sources
	            this._activeSources.forEach(function (source) {
	                source.playbackRate.setValueAtTime(rate, now);
	            });
	        }
	    });
	    /**
		 * The current playback position of the buffer. 
		 * @memberOf Tone.Player#
		 * @type {Number}
		 * @name position
		 */
	    Object.defineProperty(Tone.Player.prototype, 'position', {
	        get: function () {
	            var now = this.now();
	            if (this._state.getValueAtTime(now) === Tone.State.Started && this.loaded) {
	                var duration = this.buffer.duration;
	                var position = this._elapsedTime.getTicksAtTime(now);
	                return position % duration;
	            } else {
	                return 0;
	            }
	        }
	    });
	    /**
		 * The direction the buffer should play in
		 * @memberOf Tone.Player#
		 * @type {Boolean}
		 * @name reverse
		 */
	    Object.defineProperty(Tone.Player.prototype, 'reverse', {
	        get: function () {
	            return this._buffer.reverse;
	        },
	        set: function (rev) {
	            this._buffer.reverse = rev;
	        }
	    });
	    /**
		 * If all the buffer is loaded
		 * @memberOf Tone.Player#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Player.prototype, 'loaded', {
	        get: function () {
	            return this._buffer.loaded;
	        }
	    });
	    /**
		 *  Dispose and disconnect.
		 *  @return {Tone.Player} this
		 */
	    Tone.Player.prototype.dispose = function () {
	        //disconnect all of the players
	        this._activeSources.forEach(function (source) {
	            source.dispose();
	        });
	        this._activeSources = null;
	        Tone.Source.prototype.dispose.call(this);
	        this._buffer.dispose();
	        this._buffer = null;
	        this._elapsedTime.dispose();
	        this._elapsedTime = null;
	        return this;
	    };
	    return Tone.Player;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Object} urls An object mapping a name to a url.
		 *  @param {function=} onload The function to invoke when all buffers are loaded.
		 */
	    Tone.Players = function (urls) {
	        var args = Array.prototype.slice.call(arguments);
	        args.shift();
	        var options = Tone.defaults(args, ['onload'], Tone.Players);
	        Tone.call(this);
	        /**
			 *  The output volume node
			 *  @type  {Tone.Volume}
			 *  @private
			 */
	        this._volume = this.output = new Tone.Volume(options.volume);
	        /**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * source.volume.value = -6;
			 */
	        this.volume = this._volume.volume;
	        this._readOnly('volume');
	        //make the output explicitly stereo
	        this._volume.output.output.channelCount = 2;
	        this._volume.output.output.channelCountMode = 'explicit';
	        //mute initially
	        this.mute = options.mute;
	        /**
			 * The container of all of the players
			 * @type {Object}
			 * @private
			 */
	        this._players = {};
	        /**
			 * The loading count
			 * @type {Number}
			 * @private
			 */
	        this._loadingCount = 0;
	        /**
			 * private holder of the fadeIn time
			 * @type {Time}
			 * @private
			 */
	        this._fadeIn = options.fadeIn;
	        /**
			 * private holder of the fadeOut time
			 * @type {Time}
			 * @private
			 */
	        this._fadeOut = options.fadeOut;
	        //add all of the players
	        for (var name in urls) {
	            this._loadingCount++;
	            this.add(name, urls[name], this._bufferLoaded.bind(this, options.onload));
	        }
	    };
	    Tone.extend(Tone.Players, Tone.AudioNode);
	    /**
		 * The default values
		 * @type {Object}
		 */
	    Tone.Players.defaults = {
	        'volume': 0,
	        'mute': false,
	        'onload': Tone.noOp,
	        'fadeIn': 0,
	        'fadeOut': 0
	    };
	    /**
		 *  A buffer was loaded. decrement the counter.
		 *  @param  {Function}  callback
		 *  @private
		 */
	    Tone.Players.prototype._bufferLoaded = function (callback) {
	        this._loadingCount--;
	        if (this._loadingCount === 0 && callback) {
	            callback(this);
	        }
	    };
	    /**
		 * Mute the output.
		 * @memberOf Tone.Source#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * source.mute = true;
		 */
	    Object.defineProperty(Tone.Players.prototype, 'mute', {
	        get: function () {
	            return this._volume.mute;
	        },
	        set: function (mute) {
	            this._volume.mute = mute;
	        }
	    });
	    /**
		 * The fadeIn time of the amplitude envelope.
		 * @memberOf Tone.Source#
		 * @type {Time}
		 * @name fadeIn
		 */
	    Object.defineProperty(Tone.Players.prototype, 'fadeIn', {
	        get: function () {
	            return this._fadeIn;
	        },
	        set: function (fadeIn) {
	            this._fadeIn = fadeIn;
	            this._forEach(function (player) {
	                player.fadeIn = fadeIn;
	            });
	        }
	    });
	    /**
		 * The fadeOut time of the amplitude envelope.
		 * @memberOf Tone.Source#
		 * @type {Time}
		 * @name fadeOut
		 */
	    Object.defineProperty(Tone.Players.prototype, 'fadeOut', {
	        get: function () {
	            return this._fadeOut;
	        },
	        set: function (fadeOut) {
	            this._fadeOut = fadeOut;
	            this._forEach(function (player) {
	                player.fadeOut = fadeOut;
	            });
	        }
	    });
	    /**
		 * The state of the players object. Returns "started" if any of the players are playing.
		 * @memberOf Tone.Players#
		 * @type {String}
		 * @name state
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Players.prototype, 'state', {
	        get: function () {
	            var playing = false;
	            this._forEach(function (player) {
	                playing = playing || player.state === Tone.State.Started;
	            });
	            return playing ? Tone.State.Started : Tone.State.Stopped;
	        }
	    });
	    /**
		 *  True if the buffers object has a buffer by that name.
		 *  @param  {String|Number}  name  The key or index of the
		 *                                 buffer.
		 *  @return  {Boolean}
		 */
	    Tone.Players.prototype.has = function (name) {
	        return this._players.hasOwnProperty(name);
	    };
	    /**
		 *  Get a player by name.
		 *  @param  {String}  name  The players name as defined in
		 *                          the constructor object or `add` method.
		 *  @return  {Tone.Player}
		 */
	    Tone.Players.prototype.get = function (name) {
	        if (this.has(name)) {
	            return this._players[name];
	        } else {
	            throw new Error('Tone.Players: no player named ' + name);
	        }
	    };
	    /**
		 * Iterate over all of the players
		 * @param  {Function} callback
		 * @return {Tone.Players}            this
		 * @private
		 */
	    Tone.Players.prototype._forEach = function (callback) {
	        for (var playerName in this._players) {
	            callback(this._players[playerName], playerName);
	        }
	        return this;
	    };
	    /**
		 * If all the buffers are loaded or not
		 * @memberOf Tone.Players#
		 * @type {Boolean}
		 * @name loaded
		 * @readOnly
		 */
	    Object.defineProperty(Tone.Players.prototype, 'loaded', {
	        get: function () {
	            var isLoaded = true;
	            this._forEach(function (player) {
	                isLoaded = isLoaded && player.loaded;
	            });
	            return isLoaded;
	        }
	    });
	    /**
		 *  Add a player by name and url to the Players
		 *  @param  {String}    name      A unique name to give the player
		 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,
		 *                                                 or a buffer which will be added
		 *                                                 with the given name.
		 *  @param  {Function=}  callback  The callback to invoke
		 *                                 when the url is loaded.
		 */
	    Tone.Players.prototype.add = function (name, url, callback) {
	        this._players[name] = new Tone.Player(url, callback).connect(this.output);
	        this._players[name].fadeIn = this._fadeIn;
	        this._players[name].fadeOut = this._fadeOut;
	        return this;
	    };
	    /**
		 * Stop all of the players at the given time
		 * @param {Time} time The time to stop all of the players.
		 * @return {Tone.Players} this
		 */
	    Tone.Players.prototype.stopAll = function (time) {
	        this._forEach(function (player) {
	            player.stop(time);
	        });
	    };
	    /**
		 *  Dispose and disconnect.
		 *  @return {Tone.Players} this
		 */
	    Tone.Players.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this._volume.dispose();
	        this._volume = null;
	        this._writable('volume');
	        this.volume = null;
	        this.output = null;
	        this._forEach(function (player) {
	            player.dispose();
	        });
	        this._players = null;
	        return this;
	    };
	    return Tone.Players;
	});
	Module(function (Tone) {
	    
	    /**
		 *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up
		 *          and external microphone or audio input. Check
		 *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)
		 *          to see which browsers are supported. Access to an external input
		 *          is limited to secure (HTTPS) connections.
		 *
		 *  @constructor
		 *  @extends {Tone.AudioNode}
		 *  @param {Decibels=} volume The level of the input
		 *  @example
		 * //list the inputs and open the third one
		 * var motu = new Tone.UserMedia();
		 *
		 * //opening the input asks the user to activate their mic
		 * motu.open().then(function(){
		 * 	//promise resolves when input is available
		 * });
		 */
	    Tone.UserMedia = function () {
	        var options = Tone.defaults(arguments, ['volume'], Tone.UserMedia);
	        Tone.AudioNode.call(this);
	        /**
			 *  The MediaStreamNode
			 *  @type {MediaStreamAudioSourceNode}
			 *  @private
			 */
	        this._mediaStream = null;
	        /**
			 *  The media stream created by getUserMedia.
			 *  @type {LocalMediaStream}
			 *  @private
			 */
	        this._stream = null;
	        /**
			 *  The open device
			 *  @type  {MediaDeviceInfo}
			 *  @private
			 */
	        this._device = null;
	        /**
			 *  The output volume node
			 *  @type  {Tone.Volume}
			 *  @private
			 */
	        this._volume = this.output = new Tone.Volume(options.volume);
	        /**
			 * The volume of the output in decibels.
			 * @type {Decibels}
			 * @signal
			 * @example
			 * input.volume.value = -6;
			 */
	        this.volume = this._volume.volume;
	        this._readOnly('volume');
	        this.mute = options.mute;
	    };
	    Tone.extend(Tone.UserMedia, Tone.AudioNode);
	    /**
		 * the default parameters
		 * @type {Object}
		 */
	    Tone.UserMedia.defaults = {
	        'volume': 0,
	        'mute': false
	    };
	    /**
		 *  Open the media stream. If a string is passed in, it is assumed
		 *  to be the label or id of the stream, if a number is passed in,
		 *  it is the input number of the stream.
		 *  @param  {String|Number} [labelOrId="default"] The label or id of the audio input media device.
		 *                                                With no argument, the default stream is opened.
		 *  @return {Promise} The promise is resolved when the stream is open.
		 */
	    Tone.UserMedia.prototype.open = function (labelOrId) {
	        return Tone.UserMedia.enumerateDevices().then(function (devices) {
	            var device;
	            if (Tone.isNumber(labelOrId)) {
	                device = devices[labelOrId];
	            } else {
	                device = devices.find(function (device) {
	                    return device.label === labelOrId || device.deviceId === labelOrId;
	                });
	                //didn't find a matching device
	                if (!device && devices.length > 0) {
	                    device = devices[0];
	                } else if (!device && Tone.isDefined(labelOrId)) {
	                    throw new Error('Tone.UserMedia: no matching device: ' + labelOrId);
	                }
	            }
	            this._device = device;
	            //do getUserMedia
	            var constraints = {
	                audio: {
	                    'echoCancellation': false,
	                    'sampleRate': this.context.sampleRate
	                }
	            };
	            if (device) {
	                constraints.audio.deviceId = device.deviceId;
	            }
	            return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
	                //start a new source only if the previous one is closed
	                if (!this._stream) {
	                    this._stream = stream;
	                    //Wrap a MediaStreamSourceNode around the live input stream.
	                    this._mediaStream = this.context.createMediaStreamSource(stream);
	                    //Connect the MediaStreamSourceNode to a gate gain node
	                    this._mediaStream.connect(this.output);
	                }
	                return this;
	            }.bind(this));
	        }.bind(this));
	    };
	    /**
		 *  Close the media stream
		 *  @return {Tone.UserMedia} this
		 */
	    Tone.UserMedia.prototype.close = function () {
	        if (this._stream) {
	            this._stream.getAudioTracks().forEach(function (track) {
	                track.stop();
	            });
	            this._stream = null;
	            //remove the old media stream
	            this._mediaStream.disconnect();
	            this._mediaStream = null;
	        }
	        this._device = null;
	        return this;
	    };
	    /**
		 *  Returns a promise which resolves with the list of audio input devices available.
		 *  @return {Promise} The promise that is resolved with the devices
		 *  @static
		 *  @example
		 * Tone.UserMedia.enumerateDevices().then(function(devices){
		 * 	console.log(devices)
		 * })
		 */
	    Tone.UserMedia.enumerateDevices = function () {
	        return navigator.mediaDevices.enumerateDevices().then(function (devices) {
	            return devices.filter(function (device) {
	                return device.kind === 'audioinput';
	            });
	        });
	    };
	    /**
		 *  Returns the playback state of the source, "started" when the microphone is open
		 *  and "stopped" when the mic is closed.
		 *  @type {Tone.State}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name state
		 */
	    Object.defineProperty(Tone.UserMedia.prototype, 'state', {
	        get: function () {
	            return this._stream && this._stream.active ? Tone.State.Started : Tone.State.Stopped;
	        }
	    });
	    /**
		 * 	Returns an identifier for the represented device that is
		 * 	persisted across sessions. It is un-guessable by other applications and
		 * 	unique to the origin of the calling application. It is reset when the
		 * 	user clears cookies (for Private Browsing, a different identifier is
		 * 	used that is not persisted across sessions). Returns undefined when the
		 * 	device is not open.
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name deviceId
		 */
	    Object.defineProperty(Tone.UserMedia.prototype, 'deviceId', {
	        get: function () {
	            if (this._device) {
	                return this._device.deviceId;
	            }
	        }
	    });
	    /**
		 * 	Returns a group identifier. Two devices have the
		 * 	same group identifier if they belong to the same physical device.
		 * 	Returns undefined when the device is not open.
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name groupId
		 */
	    Object.defineProperty(Tone.UserMedia.prototype, 'groupId', {
	        get: function () {
	            if (this._device) {
	                return this._device.groupId;
	            }
	        }
	    });
	    /**
		 * 	Returns a label describing this device (for example "Built-in Microphone").
		 * 	Returns undefined when the device is not open or label is not available
		 * 	because of permissions.
		 *  @type {String}
		 *  @readOnly
		 *  @memberOf Tone.UserMedia#
		 *  @name groupId
		 */
	    Object.defineProperty(Tone.UserMedia.prototype, 'label', {
	        get: function () {
	            if (this._device) {
	                return this._device.label;
	            }
	        }
	    });
	    /**
		 * Mute the output.
		 * @memberOf Tone.UserMedia#
		 * @type {boolean}
		 * @name mute
		 * @example
		 * //mute the output
		 * userMedia.mute = true;
		 */
	    Object.defineProperty(Tone.UserMedia.prototype, 'mute', {
	        get: function () {
	            return this._volume.mute;
	        },
	        set: function (mute) {
	            this._volume.mute = mute;
	        }
	    });
	    /**
		 * Clean up.
		 * @return {Tone.UserMedia} this
		 */
	    Tone.UserMedia.prototype.dispose = function () {
	        Tone.AudioNode.prototype.dispose.call(this);
	        this.close();
	        this._writable('volume');
	        this._volume.dispose();
	        this._volume = null;
	        this.volume = null;
	        return this;
	    };
	    /**
		 *  If getUserMedia is supported by the browser.
		 *  @type  {Boolean}
		 *  @memberOf Tone.UserMedia#
		 *  @name supported
		 *  @static
		 *  @readOnly
		 */
	    Object.defineProperty(Tone.UserMedia, 'supported', {
	        get: function () {
	            return Tone.isDefined(navigator.mediaDevices) && Tone.isFunction(navigator.mediaDevices.getUserMedia);
	        }
	    });
	    return Tone.UserMedia;
	});
	Module(function (Tone) {
	    /**
		 *  @class Tone.Midi is a primitive type for encoding Time values.
		 *         Tone.Midi can be constructed with or without the `new` keyword. Tone.Midi can be passed
		 *         into the parameter of any method which takes time as an argument.
		 *  @constructor
		 *  @extends {Tone.Frequency}
		 *  @param  {String|Number}  val    The time value.
		 *  @param  {String=}  units  The units of the value.
		 *  @example
		 * var t = Tone.Midi("4n");//a quarter note
		 */
	    Tone.Midi = function (val, units) {
	        if (this instanceof Tone.Midi) {
	            Tone.Frequency.call(this, val, units);
	        } else {
	            return new Tone.Midi(val, units);
	        }
	    };
	    Tone.extend(Tone.Midi, Tone.Frequency);
	    /**
		 *  The default units if none are given.
		 *  @type {String}
		 *  @private
		 */
	    Tone.Midi.prototype._defaultUnits = 'midi';
	    /**
		 *  Returns the value of a frequency in the current units
		 *  @param {Frequency} freq
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Midi.prototype._frequencyToUnits = function (freq) {
	        return Tone.Frequency.ftom(Tone.Frequency.prototype._frequencyToUnits.call(this, freq));
	    };
	    /**
		 *  Returns the value of a tick in the current time units
		 *  @param {Ticks} ticks
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Midi.prototype._ticksToUnits = function (ticks) {
	        return Tone.Frequency.ftom(Tone.Frequency.prototype._ticksToUnits.call(this, ticks));
	    };
	    /**
		 *  Return the value of the beats in the current units
		 *  @param {Number} beats
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Midi.prototype._beatsToUnits = function (beats) {
	        return Tone.Frequency.ftom(Tone.Frequency.prototype._beatsToUnits.call(this, beats));
	    };
	    /**
		 *  Returns the value of a second in the current units
		 *  @param {Seconds} seconds
		 *  @return  {Number}
		 *  @private
		 */
	    Tone.Midi.prototype._secondsToUnits = function (seconds) {
	        return Tone.Frequency.ftom(Tone.Frequency.prototype._secondsToUnits.call(this, seconds));
	    };
	    /**
		 *  Return the value of the frequency as a MIDI note
		 *  @return  {MIDI}
		 *  @example
		 * Tone.Midi(60).toMidi(); //60
		 */
	    Tone.Midi.prototype.toMidi = function () {
	        return this.valueOf();
	    };
	    /**
		 *  Return the value of the frequency as a MIDI note
		 *  @return  {MIDI}
		 *  @example
		 * Tone.Midi(60).toMidi(); //60
		 */
	    Tone.Midi.prototype.toFrequency = function () {
	        return Tone.Frequency.mtof(this.toMidi());
	    };
	    /**
		 *  Transposes the frequency by the given number of semitones.
		 *  @param  {Interval}  interval
		 *  @return  {Tone.Frequency} A new transposed frequency
		 *  @example
		 * Tone.Frequency("A4").transpose(3); //"C5"
		 */
	    Tone.Midi.prototype.transpose = function (interval) {
	        return new this.constructor(this.toMidi() + interval);
	    };
	    return Tone.Midi;
	});
	
	return Tone;
}));
// end js/tone.js
// start js/cgl_wireframes.js
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/libs/cgl/wireframes/cgl_wireframecube.js


class WireframeCube
{
    constructor(_cgl)
    {
        this.cgl = _cgl;
        this.geom = new CGL.Geometry("marker");
        this.geom.setPointVertices(
            [
                // frontal
                -1, -1, 1,
                1, -1, 1,

                1, 1, 1,
                -1, 1, 1,

                -1, -1, -1,
                1, -1, -1,

                -1, 1, -1,
                1, 1, -1,

                // vertical lines
                1, -1, -1,
                1, 1, -1,

                -1, 1, -1,
                -1, -1, -1,

                1, 1, 1,
                1, -1, 1,

                -1, 1, 1,
                -1, -1, 1,

                // horizontal lines
                1, 1, -1,
                1, 1, 1,

                -1, 1, -1,
                -1, 1, 1,

                1, -1, 1,
                1, -1, -1,

                -1, -1, 1,
                -1, -1, -1,
            ]
        );

        this.mesh = new CGL.Mesh(this.cgl, this.geom, this.cgl.gl.LINES);
        this.mesh.setGeom(this.geom);

        this.colorShader = new CGL.UniColorShader(this.cgl);
        this.colorShader.setColor([0, 1, 1, 1]);

        this._vScale = vec3.create();
    }

    render(_scaleX, _scaleY, _scaleZ)
    {
        this.cgl.pushModelMatrix();
        this.cgl.pushShader(this.colorShader.shader);
        this.cgl.pushDepthTest(false);

        if (_scaleX == undefined) _scaleX = 1.0;
        if (_scaleY == undefined) _scaleY = _scaleX;
        if (_scaleZ == undefined) _scaleZ = _scaleX;


        // vec3.set(this._vScale, _scaleX || 1, _scaleY || _scaleX || 1, _scaleZ || _scaleX || 1);
        vec3.set(this._vScale, _scaleX, _scaleY, _scaleZ);
        mat4.scale(this.cgl.mvMatrix, this.cgl.mvMatrix, this._vScale);

        this.mesh.render(this.cgl.getShader());

        this.cgl.popDepthTest();
        this.cgl.popShader();
        this.cgl.popModelMatrix();
    }
}

;// CONCATENATED MODULE: ./src/libs/cgl/wireframes/cgl_wireframerect.js


class WireframeRect
{
    constructor(_cgl)
    {
        this.cgl = _cgl;
        this.geom = new CGL.Geometry("marker");

        const fr = -1.0;
        const to = 1.0;

        this.geom.setPointVertices(
            [
                fr, fr, 0,
                to, fr, 0,

                to, fr, 0,
                to, to, 0,

                to, to, 0,
                fr, to, 0,

                fr, to, 0,
                fr, fr, 0,
            ]
        );

        this.mesh = new CGL.Mesh(this.cgl, this.geom, this.cgl.gl.LINES);
        this.mesh.setGeom(this.geom);

        this.colorShader = new CGL.UniColorShader(this.cgl);
        this.colorShader.setColor([0, 1, 1, 1]);

        this._vScale = vec3.create();
    }

    render(_scaleX, _scaleY, _scaleZ)
    {
        this.cgl.pushModelMatrix();
        this.cgl.pushShader(this.colorShader.shader);
        this.cgl.pushDepthTest(false);

        vec3.set(this._vScale, _scaleX || 1, _scaleY || _scaleX || 1, _scaleZ || _scaleX || 1);
        mat4.scale(this.cgl.mvMatrix, this.cgl.mvMatrix, this._vScale);

        this.mesh.render(this.cgl.getShader());

        this.cgl.popDepthTest();
        this.cgl.popShader();
        this.cgl.popModelMatrix();
    }
}

;// CONCATENATED MODULE: ./src/libs/cgl/wireframes/index.js




CGL.WireframeCube = WireframeCube;
CGL.WireframeRect = WireframeRect;

((this.CGL = this.CGL || {}).COREMODULES = this.CGL.COREMODULES || {}).Wireframes = __webpack_exports__.Wireframes;
/******/ })()
;// end js/cgl_wireframes.js
// start js/cgl_copytexture.js
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

;// CONCATENATED MODULE: ./src/libs/cgl/copytexture/cgl_copytexture.js
class CopyTexture
{
    constructor(cgl, name, options)
    {
        this.cgl = cgl;

        this._options = options;
        this.fb = null;

        let shader = options.shader;

        this._useDefaultShader = true;
        if (options.shader) this._useDefaultShader = false;

        options.numRenderBuffers = options.numRenderBuffers || 1;

        if (!shader)
        {
            shader = ""
                .endl() + "IN vec2 texCoord;";

            for (let i = 0; i < options.numRenderBuffers; i++)
            {
                shader = shader.endl() + "UNI sampler2D tex" + i + ";".endl();
            }

            shader = shader
                .endl() + "void main()"
                .endl() + "{";

            if (options.numRenderBuffers == 1)
            {
                shader = shader.endl() + "    outColor= texture(tex0,texCoord);".endl();
            }

            else
                for (let i = 0; i < options.numRenderBuffers; i++)
                {
                    shader = shader.endl() + "outColor" + i + " = texture(tex" + i + ",texCoord);".endl();
                }

            shader = shader.endl() + "}";
        }

        const verts = options.vertexShader || ""
            .endl() + "IN vec3 vPosition;"
            .endl() + "IN vec2 attrTexCoord;"

            .endl() + "OUT vec2 texCoord;"

            .endl() + "void main()"
            .endl() + "{"
            .endl() + "   texCoord=attrTexCoord;"
            .endl() + "   gl_Position = vec4(vPosition,  1.0);"
            .endl() + "}";

        this.bgShader = new CGL.Shader(cgl, "corelib copytexture " + name);
        this.bgShader.setSource(verts, shader);

        if (!options.vertexShader)
            this.bgShader.ignoreMissingUniforms = true;

        new CGL.Uniform(this.bgShader, "t", "tex", 0);
        new CGL.Uniform(this.bgShader, "t", "tex1", 1);
        new CGL.Uniform(this.bgShader, "t", "tex2", 2);
        new CGL.Uniform(this.bgShader, "t", "tex3", 3);

        this.mesh = CABLES.CGL.MESHES.getSimpleRect(this.cgl, "texEffectRect");
    }

    setSize(w, h)
    {
        this._options.width = w;
        this._options.height = h;
    }

    copy(tex, tex1, tex2, tex3, tex4)
    {
        const cgl = this.cgl;
        if (!tex) tex = CGL.Texture.getEmptyTexture(this.cgl);
        let
            w = this._options.width || tex.width,
            h = this._options.height || tex.height;

        if (this.fb)
        {
            if (w <= 0)w = 8;
            if (h <= 0)h = 8;
            if (this.fb.getWidth() != w || this.fb.getHeight() != h) this.fb.setSize(w, h);
        }
        else
        {
            let filter = CGL.Texture.FILTER_LINEAR;
            let wrap = CGL.Texture.WRAP_CLAMP_TO_EDGE;

            if (this._options.isFloatingPointTexture)filter = CGL.Texture.FILTER_NEAREST;

            if (this._options.hasOwnProperty("filter"))filter = this._options.filter;
            if (this._options.hasOwnProperty("wrap"))wrap = this._options.wrap;

            const options =
                {
                    "isFloatingPointTexture": this._options.isFloatingPointTexture,
                    "pixelFormat": this._options.pixelFormat,
                    "numRenderBuffers": this._options.numRenderBuffers || 1,
                    "filter": filter,
                    "wrap": wrap,
                };

            if (cgl.glVersion == 1) this.fb = new CGL.Framebuffer(cgl, w, h, options);
            else this.fb = new CGL.Framebuffer2(cgl, w, h, options);
        }

        cgl.tempData.renderOffscreen = true;
        this.fb.renderStart(cgl);

        cgl.setTexture(0, tex.tex);
        if (tex1) cgl.setTexture(1, tex1.tex);
        if (tex2) cgl.setTexture(2, tex2.tex);
        if (tex3) cgl.setTexture(3, tex3.tex);
        if (tex4) cgl.setTexture(4, tex4.tex);

        cgl.pushShader(this.bgShader);
        this.mesh.render(this.bgShader);
        cgl.popShader();

        this.fb.renderEnd();
        cgl.tempData.renderOffscreen = false;

        return this.fb.getTextureColor();
    }

    dispose()
    {
        if (this.fb) this.fb.dispose();
        if (this.bgShader) this.bgShader.dispose();
        if (this.mesh) this.mesh.dispose();
    }
}



;// CONCATENATED MODULE: ./src/libs/cgl/copytexture/index.js


CGL.CopyTexture = CopyTexture;

((this.CGL = this.CGL || {}).COREMODULES = this.CGL.COREMODULES || {}).Copytexture = __webpack_exports__.Copytexture;
/******/ })()
;// end js/cgl_copytexture.js
// start js/vargetset.js
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
const VarSetOpWrapper = class
{
    constructor(op, type, valuePort, varNamePort, triggerPort, nextPort)
    {
        this._valuePort = valuePort;
        this._varNamePort = varNamePort;
        this._op = op;
        this._type = type;
        this._typeId = -1;
        this._triggerPort = triggerPort;
        this._nextPort = nextPort;

        this._var = null;

        this._btnCreate = op.inTriggerButton("Create new variable");
        this._btnCreate.setUiAttribs({ "hidePort": true });
        this._btnCreate.onTriggered = this._createVar.bind(this);

        this._helper = op.inUiTriggerButtons("", ["Rename"]);
        this._helper.setUiAttribs({ "hidePort": true });
        this._helper.onTriggered = (which) => { if (which == "Rename") CABLES.CMD.PATCH.renameVariable(op.varName.get()); };

        this._op.setPortGroup("Variable", [this._helper, this._varNamePort, this._btnCreate]);

        varNamePort.setUiAttribs({ "_variableSelect": true });
        this._op.on("uiParamPanel", this._updateVarNamesDropdown.bind(this));

        // this._op.patch.addEventListener("variableDeleted", this._updateVarNamesDropdown.bind(this));
        this._op.patch.addEventListener("variablesChanged", this._updateName.bind(this));
        this._op.patch.addEventListener("variableRename", this._renameVar.bind(this));

        this._varNamePort.onChange = this._updateName.bind(this);

        this._isTexture = this._valuePort.uiAttribs.objType === "texture";

        this._valuePort.changeAlways = true;

        if (this._triggerPort)
        {
            this._triggerPort.onTriggered = () =>
            {
                this._setVarValue(true);
            };
        }
        else
        {
            this._valuePort.onChange = this._setVarValue.bind(this);
        }

        this._op.init = () =>
        {
            this._updateName();
            if (!this._triggerPort) this._setVarValue();
            this._updateErrorUi();
        };

        if (type == "array") this._typeId = CABLES.Port.TYPE_ARRAY;
        else if (type == "object") this._typeId = CABLES.Port.TYPE_OBJECT;
        else if (type == "string") this._typeId = CABLES.Port.TYPE_STRING;
        else if (type == "texture") this._typeId = CABLES.Port.TYPE_TEXTURE;
        else this._typeId = CABLES.Port.TYPE_VALUE;

    }

    _updateErrorUi()
    {
        if (CABLES.UI)
        {
            if (!this._varNamePort.get()) this._op.setUiError("novarname", "no variable selected");
            else
            {
                if (this._op.hasUiErrors)
                    this._op.setUiError("novarname", null);
            }
        }
    }

    _updateName()
    {
        this._var = null;
        const varname = this._varNamePort.get();
        this._op.setTitle("var set");
        this._op.setUiAttrib({ "extendTitle": "#" + varname });

        this._updateErrorUi();

        const vari = this._op.patch.getVar(varname);
        if (vari && !vari.type) vari.type = this._type;

        if (!this._op.patch.hasVar(varname) && varname != 0 && !this._triggerPort)
        {
            this._setVarValue(); // this should not be done!!!, its kept because of compatibility anxiety
        }
        if (!this._op.patch.hasVar(varname) && varname != 0 && this._triggerPort)
        {
            if (this._type == "string") this._op.patch.setVarValue(varname, "");
            else if (this._type == "number") this._op.patch.setVarValue(varname, "");
            else this._op.patch.setVarValue(varname, null);
        }

        if (this._op.isCurrentUiOp())
        {
            this._updateVarNamesDropdown();
            this._op.refreshParams();
        }
        this._updateDisplay();
        this._op.patch.emitEvent("opVariableNameChanged", this._op, this._varNamePort.get());
    }

    _createVar()
    {
        CABLES.CMD.PATCH.createVariable(this._op, this._type, () => { this._updateName(); });
    }

    _updateDisplay()
    {
        this._valuePort.setUiAttribs({ "greyout": !this._varNamePort.get() });
    }

    _updateVarNamesDropdown()
    {
        if (CABLES.UI && CABLES.UI.loaded && CABLES.UI.loaded)
        {
            const perf = gui.uiProfiler.start("[vars] _updateVarNamesDropdown");

            const varnames = [];
            const vars = this._op.patch.getVars();
            for (const i in vars) if (vars[i].type == this._type && i != "0") varnames.push(i);
            this._varNamePort.uiAttribs.values = varnames;

            perf.finish();
        }
    }

    _renameVar(oldname, newname)
    {
        if (oldname != this._varNamePort.get()) return;
        this._varNamePort.set(newname);
        this._updateName();
    }

    _setVarValue(triggered)
    {
        const v = this._valuePort.get();
        if (!this._var)
        {
            const name = this._varNamePort.get();
            if (!name) return;
            this._op.patch.setVarValue(name, v);
            this._var = this._op.patch.getVar(name);
        }

        if (this._typeId == CABLES.Port.TYPE_VALUE || this._typeId == CABLES.Port.TYPE_STRING)
        {
            this._var.setValue(v);
        }
        else
        if (this._typeId == CABLES.Port.TYPE_ARRAY)
        {
            this._arr = [];
            CABLES.copyArray(v, this._arr);
            this._var.setValue(this._arr);
        }
        else
        {
            if (this._typeId == CABLES.Port.TYPE_OBJECT)
            {
                if (this._isTexture)
                    this._var.setValue(CGL.Texture.getEmptyTexture(this._op.patch.cgl));
                else
                    this._var.setValue(null);

                if (v && v.tex && v._cgl && !this._isTexture) this._op.setUiError("texobj", "Dont use object variables for textures, use varSetTexture");
                else this._op.setUiError("texobj", null);
            }
            this._var.setValue(v);
        }

        if (triggered && this._nextPort) this._nextPort.trigger();
    }
};

const VarGetOpWrapper = class
{
    constructor(op, type, varnamePort, valueOutPort)
    {
        this._op = op;
        this._type = type;
        this._varnamePort = varnamePort;
        this._variable = null;
        this._valueOutPort = valueOutPort;
        this._listenerId = null;
        this._typeId = 0;

        if (type == "array") this._typeId = CABLES.Port.TYPE_ARRAY;
        else if (type == "object") this._typeId = CABLES.Port.TYPE_OBJECT;
        else if (type == "texture") this._typeId = CABLES.Port.TYPE_TEXTURE;
        else if (type == "string") this._typeId = CABLES.Port.TYPE_STRING;
        else this._typeId = CABLES.Port.TYPE_VALUE;

        if (valueOutPort) this._isTexture = valueOutPort.uiAttribs.objType === "texture";

        this._op.on("uiParamPanel", this._updateVarNamesDropdown.bind(this));
        this._op.on("uiErrorChange", this._updateTitle.bind(this));

        this._op.patch.on("variableRename", this._renameVar.bind(this));
        this._op.patch.on("variableDeleted", (oldname) =>
        {
            if (this._op.isCurrentUiOp()) this._op.refreshParams();
        });

        varnamePort.setUiAttribs({ "_variableSelect": true });
        varnamePort.setUiAttribs({ "_variableSelectGet": true });

        this._varnamePort.onChange = this._changeVar.bind(this);
        this._op.patch.addEventListener("variablesChanged", this._init.bind(this));

        this._op.onDelete = () =>
        {
            if (this._variable && this._listenerId) this._variable.off(this._listenerId);
        };

        this._op.init = () =>
        {
            this._init();
        };
    }

    get variable()
    {
        return this._variable;
    }

    _changeVar()
    {
        if (this._variable && this._listenerId)
        {
            this._variable.off(this._listenerId);
        }
        this._init();
    }

    _renameVar(oldname, newname)
    {
        if (oldname != this._varnamePort.get()) return;
        this._varnamePort.set(newname);
        this._updateVarNamesDropdown();
        this._updateTitle();
        this._listenerId = this._variable.on("change", this._setValueOut.bind(this));
    }

    _updateVarNamesDropdown()
    {
        if (CABLES.UI && CABLES.UI.loaded)
        {
            const varnames = [];
            const vars = this._op.patch.getVars();
            for (const i in vars)
                if (vars[i].type == this._type && i != "0")
                    varnames.push(i);

            this._op.varName.uiAttribs.values = varnames;
        }
    }

    _setValueOut(v)
    {
        if (this._valueOutPort)
            if (this._typeId == CABLES.Port.TYPE_NUMBER || this._typeId == CABLES.Port.TYPE_STRING)
                this._valueOutPort.set(v);
            else
            if (this._typeId == CABLES.Port.TYPE_ARRAY || this._typeId == CABLES.Port.TYPE_OBJECT || this._isTexture)
                this._valueOutPort.setRef(v);
            else
                console.log("unkown type?"); // remove type checks when sure

    }

    _updateTitle()
    {
        if (this._variable)
        {
            this._op.setUiError("unknownvar", null);
            this._op.setTitle("var get");
            this._op.setUiAttrib({ "extendTitle": "#" + this._varnamePort.get() });
            if (this._valueOutPort) this._setValueOut(this._variable.getValue());
        }
        else
        {
            this._op.setUiError("unknownvar", "unknown variable! - there is no setVariable with this name (" + this._varnamePort.get() + ")");
            this._op.setUiAttrib({ "extendTitle": "#invalid" });
            if (this._valueOutPort) this._setValueOut(0);
        }
    }

    _init()
    {
        this._updateVarNamesDropdown();

        if (this._variable && this._listenerId) this._variable.off(this._listenerId);
        this._variable = this._op.patch.getVar(this._op.varName.get());
        if (this._variable) this._listenerId = this._variable.on("change", this._setValueOut.bind(this));

        this._updateTitle();

        this._op.patch.emitEvent("opVariableNameChanged", this._op, this._varnamePort.get());
    }

};

CABLES.VarSetOpWrapper = VarSetOpWrapper;
CABLES.VarGetOpWrapper = VarGetOpWrapper;

((this.CABLES = this.CABLES || {}).COREMODULES = this.CABLES.COREMODULES || {}).Vargetset = __webpack_exports__.Cables;
/******/ })()
;// end js/vargetset.js
// start js/interactionneededbutton.js
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};

const InterActionNeededButton = class
{
    constructor()
    {
        this.patch = null;
        this.fsElement = null;
        this.callbacks = {};
    }

    add(patch, reason, cb)
    {
        this.patch = patch;
        this.callbacks[reason] = cb;
        this.show();
    }

    remove(reason)
    {
        delete this.callbacks[reason];

        if (Object.keys(this.callbacks).length == 0)
        {
            if (this.fsElement) this.fsElement.remove();
            this.fsElement = null;
        }
    }

    show()
    {
        if (!this.fsElement)
        {
            this.fsElement = document.createElement("div");

            const container = this.patch.cgl.canvas.parentElement;
            if (container)container.appendChild(this.fsElement);

            this.fsElement.addEventListener("pointerdown", (e) =>
            {
                for (const i in this.callbacks) this.callbacks[i]();
            });
        }

        this.fsElement.style.padding = "10px";
        this.fsElement.style.position = "absolute";
        this.fsElement.style.right = "20px";
        this.fsElement.style.bottom = "20px";
        this.fsElement.style.width = "24px";
        this.fsElement.style.height = "24px";
        this.fsElement.style.cursor = "pointer";
        this.fsElement.style["border-radius"] = "40px";
        this.fsElement.style.background = "#444";
        this.fsElement.style["z-index"] = "9999";
        this.fsElement.style.display = "block";
        // this.fsElement.dataset.opid = op.id;
        this.fsElement.innerHTML = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"1.5\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-volume-2\"><polygon points=\"11 5 6 9 2 9 2 15 6 15 11 19 11 5\"></polygon><path d=\"M19.07 4.93a10 10 0 0 1 0 14.14M15.54 8.46a5 5 0 0 1 0 7.07\"></path></svg>";
    }
};

CABLES.interActionNeededButton = CABLES.interActionNeededButton || new InterActionNeededButton();

((this.CABLES = this.CABLES || {}).COREMODULES = this.CABLES.COREMODULES || {}).Interactionneededbutton = __webpack_exports__.Cables;
/******/ })()
;// end js/interactionneededbutton.js
// start js/subpatchop.js
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
const SubPatchOp = class
{
    constructor(op, options)
    {
        options = options || {};
        this._op = op;

        op.patchId = op.addInPort(new CABLES.Port(op, "patchId", CABLES.OP_PORT_TYPE_STRING, { "display": "readonly", "hidePort": true, "hideParam": true }));

        op.setUiAttribs({ "subPatchOp": { "version": 2 } });

        if (op.uiAttribs.parentOfSubpatch)
        {
            op.patchId.set(op.uiAttribs.parentOfSubpatch);
        }
        else
        {
            if (options.subId) op.patchId.set(options.subId);
            else op.patchId.set(CABLES.generateUUID());
        }

        op.patchId.onChange = () =>
        {
            if (options.subId) op.patchId.value = options.subId;
        };

        op.init = () =>
        {
            op.setStorage({ "subPatchVer": 2 });
        };

        op.loadDependencies = (p, next) =>
        {
            if (CABLES.UI)
            {
                gui.serverOps.loadProjectDependencies(p, () =>
                {
                    if (next)next();
                });
            }
            else
            if (next)next();
        };

        op.on("delete", () =>
        {
            if (op.patch.clearSubPatchCache)op.patch.clearSubPatchCache(this.patchId);
            const ops = op.patch.ops;
            for (let i = ops.length - 1; i >= 0; i--)
                if (ops[i] && ops[i].uiAttribs && ops[i].uiAttribs.subPatch == op.patchId.get())
                    op.patch.deleteOp(ops[i].id);
        });

        this._op.isExposableSubpatchOp = () =>
        {
            return true;
        };
    }

    get patchId()
    {
        return this._op.patchId.get();
    }
};

CABLES.SubPatchOp = SubPatchOp;

((this.CABLES = this.CABLES || {}).COREMODULES = this.CABLES.COREMODULES || {}).Subpatchop = __webpack_exports__.Cables;
/******/ })()
;// end js/subpatchop.js
// start js/mespeak.js
/*
	meSpeak-front	v.2.0.7
	based on speak.js, https://github.com/kripken/speak.js
	eSpeak and other code here are under the GNU GPL.
	meSpeak (Modular eSpeak) is a mod of 'speak.js' by N.Landsteiner (2011-2020), www.masswerk.at
	official project page: https://www.masswerk.at/mespeak
*/
var meSpeak=(function(){"use strict";var coreName='mespeak-core.js',eSpeakDir='/espeak',unloading=false,speakQueue=[],deferredLoaders=[],voicesLoaded={},workerCallbacks={},defaultVoice='',AudioAPI=null,canPlay=false,playbackVolume=1,audioPool={},webSoundPool={},audioContext=null,masterOutput=null,masterGain=null,audioAnalyser=null,wsUseTimeout=false,wsStartFromCallback=false,isMobile=(typeof navigator!=='undefined'&&navigator.userAgent&&(/(Mobile|iPhone|iPad|iPod|Android|iOS)/i).test(navigator.userAgent)),isSafari=(typeof navigator!=='undefined'&&navigator.userAgent&&(/Safari/).test(navigator.userAgent)),hasWorker=(!isMobile&&typeof window!=='undefined'&&typeof window.Worker!=='undefined'),audioUnlocked=false,coreReady=false,baseUrl,worker;if(typeof navigator!=='undefined'&&navigator.userAgent){if(navigator.userAgent.indexOf('Chrome')!==-1){if(parseInt(navigator.userAgent.replace(/^.*?\bChrome\/([0-9]+).*$/,'$1'),10)>=32){wsUseTimeout=wsStartFromCallback=true;}}
else if(navigator.userAgent.match(/\bVersion\/[0-9]+\.[0-9\.]+ (Mobile\/\w+ )?Safari\//)){if(parseInt(navigator.userAgent.replace(/^.*?\bVersion\/([0-9]+).*$/,'$1'),10)>=9){wsStartFromCallback=true;}}}
function loadCore(){if(!baseUrl){if(document.currentScript){baseUrl=document.currentScript.src.replace(/[^\/]+$/,'');}
else{var scripts=document.getElementsByTagName('script');baseUrl=scripts[scripts.length-1].src.replace(/[^\/]+$/,'');}}
if(baseUrl){if(hasWorker){worker=new Worker(baseUrl+coreName);worker.onmessage=coreReceiver;}
else{var nodes=document.getElementsByTagName('head');if(!nodes||!nodes.length)nodes=document.getElementsByTagName('head');if(nodes&&nodes.length){var script=document.createElement('script');script.src=baseUrl+coreName;script.onload=coreLoaded;nodes[0].appendChild(script);}}
return true;}
else{if(self.console)console.error('MeSpeak: Failed to determine current script path.');return false;}}
function coreReceiver(event){var msgType=event.data.rsp,jobId=event.data.jobId;switch(msgType){case'ready':try{var t=new ArrayBuffer(1);worker.postMessage({'job':'test','jobId':0,'test':t},[t]);if(!t.byteLength)worker.postMessage({'job':'useTransferables','jobId':0,'args':true});}
catch(e){}
coreLoaded();break;case'configLoaded':if(workerCallbacks[jobId])workerCallbacks[jobId](event.data.success,event.data.message);break;case'voiceLoaded':if(workerCallbacks[jobId])workerCallbacks[jobId](event.data.success,event.data.message);break;case'wav':if(workerCallbacks[jobId])workerCallbacks[jobId](event.data.audiodata);break;}
if(workerCallbacks[jobId])delete workerCallbacks[jobId];}
function sendWorkerJob(obj,jobId,callback){if(typeof callback==='function'){if(!jobId)jobId=getJobId();workerCallbacks[String(jobId)]=callback;}
else{jobId=0;}
if(typeof obj.jobId==='undefined')obj.jobId=String(jobId);worker.postMessage(obj);}
function coreLoaded(){coreReady=true;for(var i=0,l=deferredLoaders.length;i<l;i++){var loader=deferredLoaders[i];loader.job.apply(null,loader.args);}
deferredLoaders.length=0;}
function executeQueuedCalls(){if(defaultVoice){for(var i=0,l=speakQueue.length;i<l;i++){var args=speakQueue[i];if(args[4]){speakMultipart(args[0],args[1],args[2],args[3]);}
else{speak(args[0],args[1],args[2],args[3]);}}
speakQueue.length=0;}}
function resetQueue(){speakQueue.length=0;}
function speak(text,args,callback,id){if(typeof args!=='object'||!args)args={};if(!canPlay&&!args.rawdata){if(self.console)console.warn('meSpeak: Can\'t play; No audio support.');return 0;}
if(!id)id=getJobId();if(!coreReady||!defaultVoice){if(self.console)console.log('No voice module loaded, deferring call.');if(args.rawdata){return id;}
else{speakQueue.push([text,args,callback,id,false]);return id;}}
if(args&&args.voice&&!voicesLoaded[args.voice]){if(self.console)console.log('Voice '+args.voice+' not available. Using default voice: '+defaultVoice);args.voice=defaultVoice;}
var varg=(args.voice)?String(args.voice):(args.v)?String(args.v):defaultVoice;if(varg.indexOf('mb/mb-')==0)varg=varg.substring(3);if(args.variant)varg+='+'+String(args.variant).replace(/\+/g,'');var argstack=['-w','wav.wav','-a',(typeof args.amplitude!=='undefined')?String(args.amplitude):(typeof args.a!=='undefined')?String(args.a):'100','-g',(typeof args.wordgap!=='undefined')?String(args.wordgap):(typeof args.g!=='undefined')?String(args.g):'0','-p',(typeof args.pitch!=='undefined')?String(args.pitch):(typeof args.p!=='undefined')?String(args.p):'50','-s',(typeof args.speed!=='undefined')?String(args.speed):(typeof args.s!=='undefined')?String(args.s):'175','-b',args.utf16?'4':(typeof args.b!=='undefined')?String(args.b):'1','-v',varg];var a=args.linebreak||args.l;if(a)argstack.push('-l',String(a));a=args.capitals||args.k;if(a)argstack.push('-k',String(a));a=args.nostop||args.z;if(a)argstack.push('-z');if(typeof args.punct!=='undefined'){if(typeof args.punct==='string'){if(args.punct.length){argstack.push('--punct="'+String(args.punct).replace(/([\\"'])/g,'\\$1')+'"');}
else{argstack.push('--punct');}}
else if(args.punct){argstack.push('--punct');}}
a=args.ssml||args.m||args.markup;if(a)argstack.push('-m');argstack.push('--path='+eSpeakDir,String(text));if(args.log&&self.console)console.log('executing espeak '+argstack.join(' '));if(typeof callback!=='function')callback=null;if(!callback&&typeof args.callback=='function')callback=args.callback;if(!args.rawdata&&AudioAPI){if(!audioContext)audioContext=new AudioAPI();if(audioContext.state==='suspended')audioContext.resume();}
if(hasWorker){sendWorkerJob({'job':'speak','args':argstack},id,function(stream){resolveUtterance(stream,id,args.rawdata,args.volume,args.pan||0,callback);});}
else{resolveUtterance(meSpeakCore.speak(argstack),id,args.rawdata,args.volume,args.pan||0,callback);}
return id;}
function resolveUtterance(stream,id,rawdata,volume,pan,callback){if(stream){if(rawdata){if(callback)callback(true,id,exportStream(stream,rawdata));}
else{playSound(stream,volume,callback,id,pan);}}
else if(callback){callback(false,id);}}
function exportStream(stream,format){switch(String(format).toLowerCase()){case'array':return Array.from?Array.from(new Uint8Array(stream)):Array.prototype.slice.call(new Uint8Array(stream));case'base64':return encode64(stream);case'data-url':case'data-uri':case'dataurl':case'datauri':case'mime':return'data:audio/x-wav;base64,'+encode64(new Uint8Array(stream));default:return stream;}}
function encode64(data){var BASE='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',PAD='=',ret='',leftchar=0,leftbits=0,l=Object.prototype.toString.call(data)==='[object Array]'?data.length:data.byteLength;for(var i=0;i<l;i++){leftchar=(leftchar<<8)|data[i];leftbits+=8;while(leftbits>=6){var curr=(leftchar>>(leftbits-6))&0x3f;leftbits-=6;ret+=BASE[curr];}}
if(leftbits==2){ret+=BASE[(leftchar&3)<<4];ret+=PAD+PAD;}else if(leftbits==4){ret+=BASE[(leftchar&0xf)<<2];ret+=PAD;}
return ret;}
function speakMultipart(parts,args,callback,id){if(typeof args!=='object'||!args)args={};if(!canPlay&&!args.rawdata){if(self.console)console.warn('meSpeak: Can\'t play; No audio support.');return 0;}
var failed=false;if(typeof callback!=='function')callback=null;if(!callback&&typeof args.callback=='function')callback=args.callback;if(Object.prototype.toString.call(parts)!='[object Array]'||!parts.length){if(self.console)console.warn('meSpeak.speakMultipart: First argument must be an array of objects.');failed=true;}
if(!failed){for(var i=0,l=parts.length;i<l;i++){if(typeof parts[i]!='object'){if(self.console)console.warn('meSpeak.speakMultipart: First argument must be an array of objects (part #'+i+').');failed=true;break;}}}
if(failed){if(callback)callback(false,id||0);return 0;}
if(!id)id=getJobId();if(!coreReady||!defaultVoice){if(self.console)console.log('No voice module loaded, deferring call.');if(args.rawdata){return null;}
else{speakQueue.push([parts,args,callback,id,true]);return id;}}
var stackLength=parts.length,streams={},jobIds=[];for(var i=0;i<stackLength;i++)jobIds.push(getJobId());for(var i=0;i<parts.length;i++){var n,part=parts[i]||{},opts={};for(n in args)opts[n]=args[n];for(n in part)opts[n]=part[n];opts.rawdata='array';opts.callback=null;speak(part.text,opts,function(success,jobId,stream){if(success)streams[jobId]=stream;if(--stackLength===0){var wav,sampleLength=0,first=true;for(var i=0;i<jobIds.length;i++){var buffer=streams[jobIds[i]];if(buffer){sampleLength+=readBytes(buffer,40,4);if(first){wav=buffer;first=false;}
else{wav=wav.concat(buffer.slice(44));}}}
streams=buffer=null;writeBytes(wav,4,4,sampleLength);writeBytes(wav,40,4,sampleLength);var outStream=new ArrayBuffer(wav.length);new Uint8Array(outStream).set(wav);resolveUtterance(outStream,id,args.rawdata,args.volume,args.pan||0,callback);}},jobIds[i]);}
return id;}
function writeBytes(f,p,n,value){while(n){f[p++]=value&0xff;value=value>>8;n--;}}
function readBytes(f,p,n){var value=0,shft=0;while(n){value|=f[p++]<<shft;shft+=8;n--;}
return value;}
function getJobId(){var n,s;while(!n||audioPool[s]||webSoundPool[s]||workerCallbacks[s]){n=Math.floor(Math.random()*Math.pow(2,32));s=n.toString();}
return n;}
function playSound(stream,relVolume,callback,_id,pan){if(callback&&(typeof callback!=='function'))callback=null;if(!_id)_id=getJobId();var streamType=Object.prototype.toString.call(stream);if(!(streamType=='[object Array]'||streamType=='[object ArrayBuffer]'||streamType=='[object String]')){if(self.console)console.log('meSpeak: Can\'t play, not an Array, or ArrayBuffer, or base64-String: '+streamType);if(callback)callback(false,_id||0);return 0;}
if(typeof relVolume!=='undefined'){relVolume=parseFloat(relVolume);if(isNaN(relVolume)||relVolume<0||relVolume>1)relVolume=undefined;}
if(AudioAPI){if(streamType=='[object String]'){if(stream.indexOf('data:audio/x-wav;base64,',0)==0)stream=stream.substring(24);stream=stream.replace(/=+$/,'');if(stream.match(/[^A-Za-z0-9\+\/]/)){if(self.console)console.log('meSpeak: Can\'t play, not a proper base64-String.');if(callback)callback(false,_id||0);return 0;}
stream=decodeBase64ToArray(stream);if(!stream.length){if(self.console)console.log('meSpeak: Can\'t play, empty sound data.');if(callback)callback(false,_id||0);return 0;}
streamType='[object Array]';}
var buffer;if(streamType=='[object Array]'){var buffer=new ArrayBuffer(stream.length);new Uint8Array(buffer).set(stream);}
else{buffer=stream;}
return playWebSound(buffer,relVolume,callback,_id,pan);}
else if(canPlay){var isDataUrl=false;if(streamType=='[object String]'){if(stream.indexOf('data:audio/x-wav;base64,',0)<0){if(stream.match(/[^A-Za-z0-9\+\/]/)){if(self.console)console.log('meSpeak: Can\'t play, not a proper base64-String.');if(callback)callback(false,_id||0);return 0;}
stream='data:audio/x-wav;base64,'+stream;}
isDataUrl=true;}
else if(streamType=='[object ArrayBuffer]'){stream=new Uint8Array(stream);}
return(new AudioPlayback(stream,relVolume,isDataUrl,callback,_id).started)?_id:0;}
else{if(self.console)console.log('meSpeak: Can\'t play; No audio support.');if(callback)callback(false,_id||0);return 0;}}
function stopSound(){var id,i,k,kl,l,item,n,stopped=0;if(arguments.length>0){for(i=0,l=arguments.length;i<l;i++){n=parseInt(arguments[i]);if(n&&!isNaN(n)){id=n.toString();if(audioPool[id]){audioPool[id].stop();stopped++;}
else if(webSoundPool[id]){stopWebSound(webSoundPool[id]);stopped++;}
else{for(k=0,kl=speakQueue.length;k<kl;k++){item=speakQueue[i];if(item[3].string===id){if(!unloading&&typeof item[2]=='function')item[2](false);speakQueue.splice(k,1);stopped++;break;}}}}}}
else{for(id in audioPool){audioPool[id].stop();stopped++;}
for(id in webSoundPool){stopWebSound(webSoundPool[id]);stopped++;}
for(i=0,l=speakQueue.length;i<l;i++){item=speakQueue[i];if(!unloading&&typeof item[2]=='function')item[2](false);stopped++;}
speakQueue.length=0;}
return stopped;}
function setVolume(vol){var id,i,l,n,v;v=parseFloat(vol);if(!isNaN(v)&&v>=0&&v<=1&&v!=playbackVolume){if(arguments.length==1)playbackVolume=v;if(AudioAPI){if(arguments.length>1){for(i=0,l=arguments.length;i<l;i++){n=parseInt(arguments[i]);if(n&&!isNaN(n)){id=n.toString();if(webSoundPool[id])setWebSoundVolume(webSoundPool[id],v);}}}
else if(masterGain){masterGain.gain.value=playbackVolume;}}
else if(canPlay){if(arguments.length>1){for(i=0,l=arguments.length;i<l;i++){n=parseInt(arguments[i]);if(n&&!isNaN(n)){id=n.toString();if(audioPool[id])audioPool[id].setVolume(v);}}}
else{for(id in audioPool)audioPool[id].adjustVolume();}}}
return vol;}
function getVolume(){if(arguments.length){var n=parseInt(arguments[0]);if(n&&!isNaN(n)){var id=n.toString();if(webSoundPool[id])return webSoundPool[id].relVolume;if(audioPool[id])return audioPool[id].relVolume;}
return undefined;}
else{return playbackVolume;}}
function resolveAudioApi(){if(self.AudioContext){AudioAPI=self.AudioContext;canPlay=true;return;}
else{var vendors=['webkit','moz','o','ms'];for(var i=0;i<vendors.length;i++){var api=self[vendors[i]+'AudioContext'];if(api){AudioAPI=api;canPlay=true;return;}}}
if(!AudioAPI){var audioElement=document.createElement('audio');if(audioElement&&audioElement.canPlayType&&(audioElement.canPlayType('audio/wav')||audioElement.canPlayType('audio/x-wav'))){canPlay=true;}
else{canPlay=false;if(self.console)console.log('meSpeak: Muted. No support for HTMLAudioElement with MIME "audio/x-wav" dected.');}}}
function canPlaybackWav(){return canPlay;}
function AudioPlayback(stream,relVolume,isDataUrl,callback,id){this.relVolume=relVolume;this.audio=null;this.id=String(id);this.callback=(typeof callback=='function')?callback:null;this.playing=false;this.started=false;this.play(stream,isDataUrl);}
AudioPlayback.prototype={play:function(stream,isDataUrl){try{audioPool[this.id]=this;this.audio=document.createElement('audio');this.adjustVolume();var that=this;this.audio.addEventListener('ended',function(){that.remove();},false);this.audio.addEventListener('canplaythrough',function(){that.audio.play();that.playing=true;},false);if(isDataUrl){this.audio.src=stream;}
else{this.audio.src='data:audio/x-wav;base64,'+encode64(stream);}
this.audio.load();this.started=true;}
catch(e){if(self.console)console.log('meSpeak: HTMLAudioElement Exception: '+e.message);this.started=false;this.remove();}},adjustVolume:function(){this.audio.volume=(typeof this.relVolume!=='undefined')?this.relVolume*playbackVolume:playbackVolume;},setVolume:function(v){this.relVolume=v;this.adjustVolume();},remove:function(stopped){if(this.id)delete audioPool[this.id];if(this.callback){var f=this.callback;this.callback=null;var id=this.id||0;if(!unloading)f(!stopped,id);}},stop:function(){try{if(this.playing)this.audio.pause();}
catch(e){}
this.remove(true);}};function playWebSound(stream,volume,callback,id,pan){try{var source,gainNode,timer,relVolume,sid=String(id);if(!audioContext){audioContext=new AudioAPI();}
else if(audioContext.closed){audioContext=new AudioAPI();audioAnalyser=masterOutput=masterGain=null;}
if(!masterGain){masterGain=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode();masterGain.connect(audioContext.destination);masterGain.gain.value=playbackVolume;if(!masterOutput)masterOutput=masterGain;}
source=audioContext.createBufferSource();relVolume=parseFloat(volume);if(typeof relVolume==='undefined'||isNaN(relVolume)||relVolume<0||relVolume>1)relVolume=1;gainNode=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode();gainNode.gain.value=relVolume;if(pan&&!isNaN(pan)){try{var splitter=audioContext.createChannelSplitter(2),merger=audioContext.createChannelMerger(2),left=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode(),right=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode(),ratio=Math.max(-1,Math.min(1,parseFloat(pan))),mixer=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode();mixer.channelCount=2;mixer.channelCountMode='explicit';mixer.channelInterpretation='speakers';left.gain.value=ratio<0?1:1-ratio;right.gain.value=ratio>0?1:1+ratio;mixer.connect(splitter);splitter.connect(left,0);splitter.connect(right,1);left.connect(merger,0,0);right.connect(merger,0,1);merger.connect(gainNode);source.connect(mixer);}
catch(e){source.connect(gainNode);}}
else{source.connect(gainNode);}
if(audioAnalyser)gainNode.connect(audioAnalyser);gainNode.connect(masterOutput);audioContext.decodeAudioData(stream,function(audioData){var f=function(){webSoundEndHandler(source,gainNode,callback,true,id);};if(wsUseTimeout||typeof source.onended==='undefined'){var duration=audioData.duration;timer=setTimeout(f,duration?Math.ceil(duration*1000):10);}
else{source.onended=f;}
source.buffer=audioData;if(wsStartFromCallback){if(source.start){source.start(0);}
else{source.noteOn(0);}}},function(err){console.log('meSpeak: Web Audio Decoding Error: '+((typeof err=='object')?err.message:err));if(timer)clearTimeout(timer);if(source)source.disconnect();if(gainNode)gainNode.disconnect();if(webSoundPool[sid])delete webSoundPool[sid];if(!unloading&&typeof callback=='function')callback(false,id);return 0;});webSoundPool[sid]={'source':source,'gainNode':gainNode,'callback':callback,'id':id,'relVolume':relVolume,'timer':timer};if(!wsStartFromCallback){if(source.start){source.start(0);}
else{source.noteOn(0);}}
return id;}
catch(e){if(self.console)console.log('meSpeak: Web Audio Exception: '+e.message);if(timer){clearTimeout(timer);timer=0;}
webSoundEndHandler(source,gainNode,callback,false,id);return 0;}}
function webSoundEndHandler(source,gainNode,callback,success,id){var sid=String(id);if(sid&&webSoundPool[sid]&&webSoundPool[sid].timer)clearTimeout(webSoundPool[sid].timer);if(!unloading&&typeof callback=='function')callback(success,id);var f=function(){if(source){if(typeof source.onended!=='undefined')source.onended=null;source.disconnect();}
if(gainNode)gainNode.disconnect();if(sid&&webSoundPool[sid])delete webSoundPool[sid];};if(!success){f();}
else{setTimeout(f,500);}}
function stopWebSound(obj){try{if(obj.source.stop){obj.source.stop(0);}
else{obj.sourcesource.noteOff(0);}}
catch(e){}
webSoundEndHandler(obj.source,obj.gainNode,obj.callback,false,obj.id);}
function setFilter(){var biquadProps=['frequency','Q','gain','detune'],compressorProps=['threshold','knee','ratio','reduction','attack','release'];if(!AudioAPI)return;if(!audioContext){audioContext=new AudioAPI();}
else if(audioContext.closed){audioContext=new AudioAPI();audioAnalyser=masterOutput=masterGain=null;}
var inputNode,outputNode;for(var i=0;i<arguments.length;i++){var data=arguments[i];if(Object.prototype.toString.call(data)!=='[object Object]'){if(self.console)console.warn('meSpeak.setFilter(): argument must be an object, ignoring argument '+i+'.');continue;}
var filter,type=String(data.type).toLowerCase();switch(type){case'lowpass':case'highpass':case'bandpass':case'lowshelf':case'highshelf':case'peaking':case'notch':case'allpass':try{filter=audioContext.createBiquadFilter();filter.type=type;for(var j=0;j<biquadProps.length;j++){var p=biquadProps[j];try{if(!isNaN(data[p]))filter[p].value=data[p];}
catch(e2){if(self.console)console.warn('meSpeak.setFilter(), filter-type: "'+type+'", parameter: "'+p+'": '+e2.message);};}}
catch(e1){if(self.console)console.warn('meSpeak.setFilter(): Failed to create filter "'+type+'", '+e1.message);};break;case'dynamicscompressor':case'compressor':try{filter=audioContext.createDynamicsCompressor();for(var j=0;j<compressorProps.length;j++){var p=compressorProps[j];try{if(!isNaN(data[p]))filter[p].value=data[p];}
catch(e2){if(self.console)console.warn('meSpeak.setFilter(), filter-type: "'+type+'", parameter: "'+p+'": '+e2.message);};}
break;}
catch(e1){if(self.console)console.warn('meSpeak.setFilter(): Failed to create filter "'+type+'", '+e1.message);};default:if(self.console)console.warn('meSpeak.setFilter(): unknown filter type "'+type+'".');filter=null;break;}
if(filter){if(!inputNode){inputNode=filter;}
else{inputNode.connect(filter);}
outputNode=filter;}}
if(outputNode){if(!masterGain){masterGain=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode();masterGain.connect(audioContext.destination);masterGain.gain.value=playbackVolume;}
outputNode.connect(masterGain);masterOutput=inputNode;}
else{masterOutput=masterGain;}}
function getAudioAnalyser(){if(!AudioAPI)return;if(!audioContext){audioContext=new AudioAPI();}
else if(audioContext.closed){audioContext=new AudioAPI();audioAnalyser=masterOutput=masterGain=null;}
audioAnalyser=audioContext.createAnalyser();return audioAnalyser;}
function setWebSoundVolume(obj,v){obj.gainNode.gain.value=v;obj.relVolume=v;}
function setDefaultVoice(voice){if(voice){if(!coreReady){deferredLoaders.push({'job':setDefaultVoice,'args':[voice]});}
else if(voicesLoaded[voice]){defaultVoice=voice;}}}
function getDefaultVoice(){return defaultVoice;}
function getRelFileUrl(url){if((/^(\/|https?:|ftps?:|file:)/i).test(url))return url;else{var baseParts=(/^(https?|ftps?|file)(\:\/\/)([^\/]*\/)(.*)$/i).exec(baseUrl),basePath=baseParts[4].split('/'),filePath=url.split('/');for(var i=0;i<filePath.length;i++){var p=filePath[i];if(p==='.')continue;if(p==='..'){basePath.pop();}
else{basePath.push(p);}}
return baseParts[1]+baseParts[2]+baseParts[3]+basePath.join('/');}}
function loadVoice(url,callback){if(url&&typeof url==='string'){if(coreReady){var handler=function(success,msg){if(success)onVoiceLoaded(msg);if(typeof callback==='function')callback(success,msg);};if((/^[\w\-]+(\/[\w\-]+)?$/).test(url)){url='voices/'+url+'.json';}
url=getRelFileUrl(url);if(hasWorker){sendWorkerJob({'job':'loadVoice','args':[url]},0,handler);}
else{meSpeakCore.loadVoice(url,handler);}}
else{deferredLoaders.push({'job':loadVoice,'args':[url,callback]});}}}
function loadConfig(url){}
function loadCustomConfig(url,callback){if(url&&typeof url==='string'){if(coreReady){var handler=function(success,msg){if(success)onConfigLoaded(msg);if(typeof callback==='function')callback(success,msg);};url=getRelFileUrl(url);if(hasWorker){sendWorkerJob({'job':'loadConfig','args':[url]},0,handler);}
else{meSpeakCore.loadConfig(url,handler);}}
else{deferredLoaders.push({'job':loadCustomConfig,'args':[url,callback]});}}}
function onConfigLoaded(voiceId){if(voiceId){voicesLoaded[voiceId]=true;setDefaultVoice(voiceId);}}
function onVoiceLoaded(voiceId){if(voiceId){voicesLoaded[voiceId]=true;setDefaultVoice(voiceId);executeQueuedCalls();}}
function isVoiceLoaded(voice){return voicesLoaded[voice]?true:false;}
function isConfigLoaded(){return true;}
function getRunMode(){return hasWorker?'worker':'instance';}
function restartWithInstance(){speakQueue.length=deferredLoaders.length=0;voicesLoaded={};workerCallbacks={};defaultVoice='';stopSound();audioPool={};webSoundPool={};playbackVolume=1;if(hasWorker){if(worker)worker.terminate();worker=null;hasWorker=coreReady=false;loadCore();}}
function unloadHandler(event){unloading=true;stopSound();audioPool={};webSoundPool={};workerCallbacks={};if(worker)worker.terminate();}
function unlockAudio(event){event.returnValue=true;if(audioUnlocked)return;if(AudioAPI){try{if(!audioContext)audioContext=new AudioAPI();if(audioContext.state==='suspended')audioContext.resume();var gain=(audioContext.createGain)?audioContext.createGain():audioContext.createGainNode();}
catch(e){}}
audioUnlocked=true;self.removeEventListener('touchstart',unlockAudio);self.removeEventListener('mousedown',unlockAudio);}
loadCore();resolveAudioApi();window.addEventListener('unload',unloadHandler,false);if(isMobile&&typeof self.ontouchstart!==undefined)self.addEventListener('touchstart',unlockAudio,{'passive':true,'capture':true});else if(isSafari)self.addEventListener('mousedown',unlockAudio,true);return{'speak':speak,'speakMultipart':speakMultipart,'loadConfig':loadConfig,'loadVoice':loadVoice,'loadCustomConfig':loadCustomConfig,'setDefaultVoice':setDefaultVoice,'getDefaultVoice':getDefaultVoice,'setVolume':setVolume,'getVolume':getVolume,'play':playSound,'isConfigLoaded':isConfigLoaded,'isVoiceLoaded':isVoiceLoaded,'resetQueue':resetQueue,'canPlay':canPlaybackWav,'stop':stopSound,'setFilter':setFilter,'getRunMode':getRunMode,'restartWithInstance':restartWithInstance,'getAudioAnalyser':getAudioAnalyser,'unlockAudio':unlockAudio};})();// end js/mespeak.js
// start js/mespeak-core.js
/*
	meSpeak-core  v.2.0.7
	based on speak.js, https://github.com/kripken/speak.js
	eSpeak and other code here are under the GNU GPL.
	meSpeak (Modular eSpeak) is a mod of 'speak.js' by N.Landsteiner (2011-2020), www.masswerk.at
	official project page: https://www.masswerk.at/mespeak
*/
var meSpeakCore=(function(){"use strict";function ESpeak(){function Tk(a){Dj(a+":\n"+Error().stack);throw"Assertion: "+a;}function Zp(a,b){a||Tk("Assertion failed: "+b)}function Nt(b,m,f){"*"===f[f.length-1]&&(f="i32");switch(f){case"i1":h[b]=m;break;case"i8":h[b]=m;break;case"i16":t[b>>1]=m;break;case"i32":a[b>>2]=m;break;case"i64":a[b>>2]=m;break;case"float":q[b>>2]=m;break;case"double":q[b>>2]=m;break;default:Tk("invalid type for setValue: "+f)}}function e(a,b,f){var d,i;"number"===typeof a?(d=!0,i=a):(d=!1,i=a.length);for(var f=[Qd,Gb.stackAlloc,Gb.staticAlloc]["undefined"===typeof f?c:f](Math.max(i,1)),g="string"===typeof b?b:null,j=0,h;j<i;){var e=d?0:a[j];"function"===typeof e&&(e=Gb.getFunctionIndex(e));h=g||b[j];0===h?j++:(Nt(f+j,e,h),j+=Gb.getNativeTypeSize(h))}return f}function Ye(a){for(var b="",f=0,d,i=String.fromCharCode(0);;){d=String.fromCharCode(l[a+f]);if(d==i)break;b+=d;f+=1}return b}function Ot(){for(;0<$p.length;){var a=$p.pop(),b=a.func;"number"===typeof b&&(b=Bi[b]);b("undefined"===typeof a.arg?null:a.arg)}JH.vprint()}
function Pt(a,b){return Ej?Array.prototype.slice.call(h.subarray(a,a+b)):h.slice(a,a+b)}function $(a){for(var b=0;h[a+b];)b++;return b}function Qt(a,b){var f=$(a);b&&f++;var d=Pt(a,f);b&&(d[f-1]=0);return d}function Je(a,b){for(var f=[],d=0;d<a.length;){var i=a.charCodeAt(d);255<i&&(i&=255);f.push(i);d+=1}b||f.push(0);return f}function Fj(a,b){return 0<=a?a:32>=b?2*Math.abs(1<<b-1)+a:Math.pow(2,b)+a}function Rt(a,b){if(0>=a)return a;var f=32>=b?Math.abs(1<<b-1):Math.pow(2,b-1);if(a>=f&&(32>=b||a>f))a=-2*f+a;return a}function N(b){N.ret||(N.ret=e([0],"i32",c));return a[N.ret>>2]=b}function Qd(a){var b=nf;nf+=a;nf=4*Math.ceil(nf/4);return b}function Gj(a,b,f){var d=H.streams[a];if(d){if(d.isWrite){if(0>f)return N(T.EINVAL),-1;if(d.object.isDevice){if(d.object.output){for(var i=0;i<f;i++)try{d.object.output(h[b+i])}catch(g){return N(T.EIO),-1}d.object.timestamp=Date.now();return i}N(T.ENXIO);return-1}i=d.position;a=H.streams[a];if(!a||a.object.isDevice)N(T.EBADF),b=-1;else if(a.isWrite)if(a.object.isFolder)N(T.EISDIR),b=-1;else if(0>f||0>i)N(T.EINVAL),b=-1;else{for(var j=a.object.contents;j.length<i;)j.push(0);for(var e=0;e<f;e++)j[i+e]=h[b+e];a.object.timestamp=Date.now();b=e}else N(T.EACCES),b=-1;-1!=b&&(d.position+=b);return b}N(T.EACCES);return-1}N(T.EBADF);return-1}function Nd(a,b,f,d){f*=b;if(0==f)return 0;a=Gj(d,a,f);return-1==a?(H.streams[d]&&(H.streams[d].error=!0),-1):Math.floor(a/b)}function St(b,m){for(var f=b,d=0,i=function(b){var f;f="float"===b||"double"===b?q[m+d>>2]:a[m+d>>2];d+=Gb.getNativeFieldSize(b);return Number(f)},g=[],j,e;;){var c=f;j=h[f];if(0===j)break;e=h[f+1];if(37==j){var k=!1,l=!1,r=!1,s=!1;a:for(;;){switch(e){case 43:k=!0;break;case 45:l=!0;break;case 35:r=!0;break;case 48:if(s)break a;else{s=!0;break}default:break a}f++;e=h[f+1]}var L=0;if(42==e)L=i("i32"),f++,e=h[f+1];else for(;48<=e&&57>=e;)L=10*L+(e-48),f++,e=h[f+1];var t=!1;if(46==e){var p=0,t=!0;f++;e=h[f+1];if(42==e)p=i("i32"),f++;else for(;;){e=h[f+1];if(48>e||57<e)break;p=10*p+(e-48);f++}e=h[f+1]}else p=6;var u;switch(String.fromCharCode(e)){case"h":e=h[f+2];104==e?(f++,u=1):u=2;break;case"l":e=h[f+2];108==e?(f++,u=8):u=4;break;case"L":case"q":case"j":u=8;break;case"z":case"t":case"I":u=4;break;default:u=void 0}"undefined"!==typeof u&&f++;e=h[f+1];if(-1!="diuoxXp".split("").indexOf(String.fromCharCode(e))){c=100==e||105==e;u=u||4;j=i("i"+8*u);if(4>=u){var z=Math.pow(256,u)-1;j=(c?Rt:Fj)(j&z,8*u)}var z=Math.abs(j),C,c="";if(100==e||105==e)C=Rt(j,8*u,1).toString(10);else if(117==e)C=Fj(j,8*u,1).toString(10),j=Math.abs(j);else if(111==e)C=(r?"0":"")+z.toString(8);else if(120==e||88==e){c=r?"0x":"";if(0>j){j=-j;C=(z-1).toString(16);r=[];for(z=0;z<C.length;z++)r.push((15-parseInt(C[z],16)).toString(16));for(C=r.join("");C.length<2*u;)C="f"+C}else C=z.toString(16);88==e&&(c=c.toUpperCase(),C=C.toUpperCase())}else 112==e&&(0===z?C="(nil)":(c="0x",C=z.toString(16)));if(t)for(;C.length<p;)C="0"+C;for(k&&(c=0>j?"-"+c:"+"+c);c.length+C.length<L;)l?C+=" ":s?C="0"+C:c=" "+c;C=c+C;C.split("").forEach(function(a){g.push(a.charCodeAt(0))})}else if(-1!="fFeEgG".split("").indexOf(String.fromCharCode(e))){j=i(4===u?"float":"double");if(isNaN(j))C="nan",s=!1;else if(isFinite(j)){t=!1;u=Math.min(p,20);if(103==e||71==e)t=!0,p=p||1,u=parseInt(j.toExponential(u).split("e")[1],10),p>u&&-4<=u?(e=(103==e?"f":"F").charCodeAt(0),p-=u+1):(e=(103==e?"e":"E").charCodeAt(0),p--),u=Math.min(p,20);if(101==e||69==e)C=j.toExponential(u),/[eE][-+]\d$/.test(C)&&(C=C.slice(0,-1)+"0"+C.slice(-1));else if(102==e||70==e)C=j.toFixed(u);c=C.split("e");if(t&&!r)for(;1<c[0].length&&-1!=c[0].indexOf(".")&&("0"==c[0].slice(-1)||"."==c[0].slice(-1));)c[0]=c[0].slice(0,-1);else for(r&&-1==C.indexOf(".")&&(c[0]+=".");p>u++;)c[0]+="0";C=c[0]+(1<c.length?"e"+c[1]:"");69==e&&(C=C.toUpperCase());k&&0<=j&&(C="+"+C)}else C=(0>j?"-":"")+"inf",s=!1;for(;C.length<L;)C=l?C+" ":s&&("-"==C[0]||"+"==C[0])?C[0]+"0"+C.slice(1):(s?"0":" ")+C;97>e&&(C=C.toUpperCase());C.split("").forEach(function(a){g.push(a.charCodeAt(0))})}else if(115==e){(k=i("i8*"))?(k=Qt(k),t&&k.length>p&&(k=k.slice(0,p))):k=Je("(null)",!0);if(!l)for(;k.length<L--;)g.push(32);g=g.concat(k);if(l)for(;k.length<L--;)g.push(32)}else if(99==e){for(l&&g.push(i("i8"));0<--L;)g.push(32);l||g.push(i("i8"))}else if(110==e)l=i("i32*"),a[l>>2]=g.length;else if(37==e)g.push(j);else for(z=c;z<f+2;z++)g.push(h[z]);f+=2}else g.push(j),f+=1}return g}function Ea(a,b,f){f=St(b,f);b=Gb.stackSave();a=Nd(e(f,"i8",y),1,f.length,a);Gb.stackRestore(b);return a}function fa(a,b){var f=0;do{var d,i,g;d=b+f;i=a+f;for(g=d+1;d<g;)h[i++]=h[d++];f++}while(0!=h[b+f-1]);return a}function Rd(a,b,f,d){f=St(f,d);b="undefined"===typeof b?f.length:Math.min(f.length,b-1);for(d=0;d<b;d++)h[a+d]=f[d];h[a+d]=0;return f.length}function U(a,b,f){return Rd(a,void 0,b,f)}function xc(a,b){var f=Fj(a&255);h[xc.ret]=f;return-1==Gj(b,xc.ret,1)?(b in H.streams&&(H.streams[b].error=!0),-1):f}function zb(b,m,f){var d=0;a:{for(var m=Ye(m),i=0,g=0,j=0,i=0;i<m.length&&!(0>=e);i++){var e=h[b+d++];if(0>=e)break;if("%"===m[i]){i++;for(var c=i;48<=m[i].charCodeAt(0)&&57>=m[i].charCodeAt(0);)i++;var k;i!=c&&(k=parseInt(m.slice(c,i),10));c=m[i];i++;for(var l=0,r=[];(l<k||isNaN(k))&&0<e;)if("d"===c&&48<=e&&57>=e||"x"===c&&(48<=e&&57>=e||97<=e&&102>=e||65<=e&&70>=e)||"s"===c&&(i>=m.length||e!==m[i].charCodeAt(0)))r.push(String.fromCharCode(e)),e=h[b+d++],l++;else break;if(0===r.length){b=0;break a}r=r.join("");l=a[f+j>>2];j+=Gb.getNativeFieldSize("void*");switch(c){case"d":a[l>>2]=parseInt(r,10);break;case"x":a[l>>2]=parseInt(r,16);break;case"s":c=Je(r);for(r=0;r<c.length;r++)h[l+r]=c[r]}g++}else if(m[i].charCodeAt(0)!==e)break}b=g}return b}function Zg(a){Ot();throw"exit("+a+") called, at "+Error().stack;}function Qc(a){return a in{32:0,9:0,10:0,11:0,12:0,13:0}}function Ke(a){for(var b;(b=h[a])&&Qc(b);)a++;if(!b||!(48<=b&&57>=b))return 0;for(var f=a;(b=h[f])&&48<=b&&57>=b;)f++;return Math.floor(Number(Ye(a).substr(0,f-a)))}function Tt(b,m,f){var d=a[f>>2],i=m&3,f=0!=i,i=1!=i,g=Boolean(m&512),j=Boolean(m&2048),h=Boolean(m&1024),e=Boolean(m&8),b=H.analyzePath(Ye(b));if(!b.parentExists)return N(b.error),-1;if(m=b.object||null){if(g&&j)return N(T.EEXIST),-1;if((f||g||h)&&m.isFolder)return N(T.EISDIR),-1;if(i&&!m.read||f&&!m.write)return N(T.EACCES),-1;if(h&&!m.isDevice)m.contents=[];else if(!H.forceLoadFile(m))return N(T.EIO),-1;b=b.path}else{if(!g)return N(T.ENOENT),-1;if(!b.parentObject.write)return N(T.EACCES),-1;m=H.createDataFile(b.parentObject,b.name,[],d&256,d&128);b=b.parentPath+"/"+b.name}d=H.streams.length;if(m.isFolder){f=0;Uk&&(f=Qd(Uk.__size__));var i=[],c;for(c in m.contents)i.push(c);H.streams[d]={path:b,object:m,position:-2,isRead:!0,isWrite:!1,isAppend:!1,error:!1,eof:!1,ungotten:[],contents:i,currentEntry:f}}else H.streams[d]={path:b,object:m,position:0,isRead:i,isWrite:f,isAppend:e,error:!1,eof:!1,ungotten:[]};return d}function pe(a,b){var f,b=Ye(b);if("r"==b[0])f=-1!=b.indexOf("+")?2:0;else if("w"==b[0])f=-1!=b.indexOf("+")?2:1,f|=1536;else if("a"==b[0])f=-1!=b.indexOf("+")?2:1,f|=512,f|=8;else return N(T.EINVAL),0;f=Tt(a,f,e([511,0,0,0],"i32",y));return-1==f?0:f}function la(b,m,f){var d,i,f=b+f;i=m;0>i&&(i+=256);for(i=i+(i<<8)+(i<<16)+16777216*i;0!==b%4&&b<f;)h[b++]=m;b>>=2;for(d=f>>2;b<d;)a[b++]=i;for(b<<=2;b<f;)h[b++]=m}function mc(a){if(H.streams[a])return delete H.streams[a],0;N(T.EBADF);return-1}function Sd(a){H.streams[a]||N(T.EBADF);return mc(a)}function Ut(a){var b=function(a){a in H.streams&&H.streams[a].object.output&&H.streams[a].object.output(null)};try{if(0===a)for(var f in H.streams)b(f);else b(a);return 0}catch(d){return N(T.EIO),-1}}function Vk(a){if(a in H.streams)return a=H.streams[a],a.object.isDevice?(N(T.ESPIPE),-1):a.position;N(T.EBADF);return-1}function Vt(a,b,f){if(H.streams[a]&&!H.streams[a].isDevice){a=H.streams[a];1===f?b+=a.position:2===f&&(b+=a.object.contents.length);if(0>b)return N(T.EINVAL),-1;a.ungotten=[];return a.position=b}N(T.EBADF);return-1}function Wk(a,b,f){if(-1==Vt(a,b,f))return-1;H.streams[a].eof=!1;return 0}function aq(a,b,f){for(var d=0;d<f;){var i=h[a+d],g=h[b+d];if(i==g&&0==i)break;if(0==i)return-1;if(0==g)return 1;if(i==g)d++;else return i>g?1:-1}return 0}function nb(a,b){return aq(a,b,Wt)}function Xk(){Xk.ret||(Xk.ret=e([0],"i8",bq));return Xk.ret}function Yk(a){if(0===a)return 0;a=Ye(a);if(!Td.hasOwnProperty(a))return 0;Yk.ret=e(Je(Td[a]),"i8",bq);return Yk.ret}function md(a,b){var f=$(a),d=0;do{var i,g,j;i=b+d;g=a+f+d;for(j=i+1;i<j;)h[g++]=h[i++];d++}while(0!=h[b+d-1]);return a}function KH(a,b,f,d){var i=H.streams[a];if(!i||i.object.isDevice)return N(T.EBADF),-1;if(i.isRead){if(i.object.isFolder)return N(T.EISDIR),-1;if(0>f||0>d)return N(T.EINVAL),-1;for(a=0;i.ungotten.length&&0<f;)h[b++]=i.ungotten.pop(),f--,a++;for(var i=i.object.contents,f=Math.min(i.length-d,f),g=0;g<f;g++)h[b+g]=i[d+g],a++;return a}N(T.EACCES);return-1}function Ci(a,b,f){var d=H.streams[a];if(d){if(d.isRead){if(0>f)return N(T.EINVAL),-1;if(d.object.isDevice){if(d.object.input){for(a=0;d.ungotten.length&&0<f;)h[b++]=d.ungotten.pop(),f--,a++;for(var i=0;i<f;i++){try{var g=d.object.input()}catch(j){return N(T.EIO),-1}if(null===g||"undefined"===typeof g)break;a++;h[b+i]=g}return a}N(T.ENXIO);return-1}g=d.ungotten.length;a=KH(a,b,f,d.position);-1!=a&&(d.position+=d.ungotten.length-g+a);return a}N(T.EACCES);return-1}N(T.EBADF);return-1}function Di(a){if(!(a in H.streams))return-1;var b=H.streams[a];if(b.eof||b.error)return-1;a=Ci(a,Di.ret,1);return 0==a?(b.eof=!0,-1):-1==a?(b.error=!0,-1):h[Di.ret]}function jn(a,b,f){if(!(f in H.streams))return 0;var d=H.streams[f];if(d.error||d.eof)return 0;for(var i,g=0;g<b-1&&10!=i;g++){i=Di(f);if(-1==i){if(d.error)return 0;if(d.eof)break}h[a+g]=i}h[a+
g]=0;return a}function Xt(a,b){var f=Ye(a),d=Ye(b),f=f.search(d);return 0<=f?a+f:0}function $b(a,b,f){for(var d=0;d<f;d++){var i=h[a+d],g=h[b+d];if(i!=g)return i>g?1:-1}return 0}function Zk(b,m,f){var d;d=m+f;if(b%4==m%4&&8<f){for(;0!==m%4&&m<d;)h[b++]=h[m++];m>>=2;b>>=2;for(f=d>>2;m<f;)a[b++]=a[m++];m<<=2;b<<=2}for(;m<d;)h[b++]=h[m++]}function so(a,b,f,d){if(!(0==b||0==f)){for(var d=Bi[d],i=[],g=0;g<b;g++)i.push(g);i.sort(function(b,i){return d(a+b*f,a+i*f)});var j=Qd(b*f);Zk(j,a,b*f);for(g=0;g<b;g++)i[g]!=g&&Zk(a+g*f,j+i[g]*f,f)}}function LH(a){a=H.analyzePath(Ye(a));if(!a.parentExists||!a.exists)return N(a.error),-1;if(a.object.isFolder)return N(T.EISDIR),-1;if(a.object.write)return delete a.parentObject.contents[a.name],0;N(T.EACCES);return-1}function MH(a){a=H.analyzePath(Ye(a));if(!a.parentExists||!a.exists)return N(a.error),-1;if(!a.object.write||a.isRoot)return N(T.EACCES),-1;if(a.object.isFolder){for(var b in a.object.contents)return N(T.ENOTEMPTY),-1;if(a.path==H.currentPath)return N(T.EBUSY),-1;delete a.parentObject.contents[a.name];return 0}N(T.ENOTDIR);return-1}function Yt(a){var b=LH(a);-1==b&&(b=MH(a));return b}function cq(a){return 48<=a&&57>=a||97<=a&&122>=a||65<=a&&90>=a||192<=a&&214>=a||223<=a&&246>=a||216<=a&&222>=a||248<=a&&255>=a}function $g(a,b){a--;do{a++;var f=h[a];if(f==b)return a}while(f);return 0}function fm(a,b,f,d){f*=b;if(0==f)return 0;a=Ci(d,a,f);d=H.streams[d];if(-1==a)return d&&(d.error=!0),-1;a<f&&(d.eof=!0);return Math.floor(a/b)}function $k(a){return 65<=a&&90>a||192<=a&&214>=a||216<=a&&222>=a?a-65+97:a}function dq(a){return 97<=a&&122>=a||65<=a&&90>=a||192<=a&&214>=a||223<=a&&246>=a||216<=a&&222>=a||248<=a&&255>=a}function ah(a,b){if(!b)return 0;var f=Qd(b);a&&Zk(f,a,b);return f}function Zt(){N(T.EPERM);return-1}function Ud(a){Ud.buffer||(Ud.buffer=Qd(256));var b=Ud.buffer;if(a in eq)if(255<eq[a].length)N(T.ERANGE);else{for(var a=eq[a],f=0;f<a.length;f++)h[b+f]=a.charCodeAt(f);h[b+f]=0}else N(T.EINVAL);return Ud.buffer}function $t(a,b,f){for(var b=Fj(b),d=0;d<f;d++){if(h[a]==b)return a;a++}return 0}function al(b,m,f){if(!(b in H.streams))return N(T.EBADF),-1;b=H.streams[b];switch(m){case 0:m=a[f>>2];if(0>m)return N(T.EINVAL),-1;var f={},d;for(d in b)f[d]=b[d];m in H.streams&&(m=H.streams.length);H.streams[m]=f;return m;case 1:case 2:return 0;case 3:return d=0,b.isRead&&b.isWrite?d=2:!b.isRead&&b.isWrite?d=1:b.isRead&&!b.isWrite&&(d=0),b.isAppend&&(d|=8),d;case 4:return m=a[f>>2],b.isAppend=Boolean(m|8),0;case 7:case 20:return m=a[f>>2],t[m+
NH.l_type>>1]=3,0;case 8:case 9:case 21:case 22:return 0;case 6:case 5:return N(T.EINVAL),-1;default:return N(T.EINVAL),-1}}function fq(a,b){if(0>b)return N(T.EBADF),-1;if(a===b&&H.streams[a])return a;mc(b);return al(a,0,e([b,0,0,0],"i32",y))}function gq(){N(T.ENOSYS);return-1}function OH(a){a=H.absolutePath(Ye(a));if(null===a)return N(T.ENOENT),0;var b=H.findObject(a);if(null===b)return 0;if(b.isFolder){if(!b.read)return N(T.EACCES),0}else return N(T.ENOTDIR),0;var f=H.streams.length,d=[],i;for(i in b.contents)d.push(i);H.streams[f]={path:a,object:b,position:-2,isRead:!0,isWrite:!1,isAppend:!1,error:!1,eof:!1,ungotten:[],contents:d,currentEntry:Qd(Uk.__size__)};return f}function Jf(b){if(!H.streams[b]||!H.streams[b].object.isFolder)return N(T.EBADF),0;Jf.result||(Jf.result=Qd(4));var m=H.streams[b].currentEntry,f=Jf.result;if(!H.streams[b]||!H.streams[b].object.isFolder)N(T.EBADF);else{var d=H.streams[b],i=d.position,g=0,j;for(j in d.contents)g++;if(-2>i||i>=g)a[f>>2]=0;else{-2===i?(i=".",j=1):-1===i?(i="..",j=1):(i=d.contents[i],j=d.object.contents[i].inodeNumber);d.position++;g=Uk;a[m+g.d_ino>>2]=j;a[m+g.d_off>>2]=d.position;a[m+g.d_reclen>>2]=i.length+1;for(j=0;j<i.length;j++)h[m+g.d_name+j]=i.charCodeAt(j);h[m+g.d_name+j]=0;h[m+g.d_type]=d.object.isDevice?2:d.object.isFolder?4:"undefined"!==typeof d.object.link?10:8;a[f>>2]=m}}return 0===a[Jf.result>>2]?0:H.streams[b].currentEntry}function gm(a,b){var f=Qd(a*b);la(f,0,a*b);return f}function au(){to=(1103515245*to+12345)%4294967296;return to&2147483647}
function of(b){var m=s;s+=80;la(m,0,80);var f;b=H.findObject(Ye(b),void 0);if(null===b||!H.forceLoadFile(b))b=-1;else{var d=PH;a[m+d.st_nlink>>2]=1;a[m+d.st_uid>>2]=0;a[m+d.st_gid>>2]=0;a[m+d.st_blksize>>2]=4096;a[m+d.st_ino>>2]=b.inodeNumber;var i=Math.floor(b.timestamp/1E3);if("undefined"===typeof d.st_atime){d.st_atime=d.st_atim.tv_sec;d.st_mtime=d.st_mtim.tv_sec;d.st_ctime=d.st_ctim.tv_sec;var g=1E3*(b.timestamp%1E3);a[m+d.st_atim.tv_nsec>>2]=g;a[m+d.st_mtim.tv_nsec>>2]=g;a[m+d.st_ctim.tv_nsec>>2]=g}a[m+d.st_atime>>2]=i;a[m+d.st_mtime>>2]=i;a[m+d.st_ctime>>2]=i;var j=0,h=i=0,e=g=0;b.isDevice?(g=e=b.inodeNumber,i=h=0,j=8192):(g=1,e=0,b.isFolder?(i=4096,h=1,j=16384):(j=b.contents||b.link,i=j.length,h=Math.ceil(j.length/4096),j="undefined"===typeof b.link?32768:40960));a[m+d.st_dev>>2]=g;a[m+d.st_rdev>>2]=e;a[m+d.st_size>>2]=i;a[m+d.st_blocks>>2]=h;b.read&&(j|=365);b.write&&(j|=146);a[m+d.st_mode>>2]=j;b=0}b=0!=(b|0)?1:2;1==b?f=0:2==b&&(b=16384==(a[(m+12&4294967295)>>2]&61440|0)?3:4,3==b?f=-2:4==b&&(f=a[(m+36&4294967295)>>2]));s=m;return f}function uo(b){b=Qd(b);1==(0==(b|0)?1:2)&&Nd(hq&4294967295,22,1,a[(a[lb>>2]+12&4294967295)>>2]);return b}function bu(b){1==(2==(b|0)?1:2)&&(a[vo>>2]=1)}function cu(F,m){var f,d=null,i;i=du&4294967295;var g;g=eu&4294967295;var j,c,n,k,w=s;la(s,0,4);s+=4;s=4*Math.ceil(s/4);var r,Ze=s;la(s,0,4);s+=4;s=4*Math.ceil(s/4);var L,Yg,p,u,z,C,E,B,Cc=s;la(s,0,24);s+=24;var D=s=4*Math.ceil(s/4);la(s,0,200);s+=200;var K=s=4*Math.ceil(s/4);la(s,0,40);s+=40;var I=s=4*Math.ceil(s/4);la(s,0,40);s+=40;s=4*Math.ceil(s/4);var iq;k=n=c=j=0;a[w>>2]=0;L=175;u=100;E=C=z=0;B=50;h[K&4294967295]=0;h[Hj&4294967295]=0;h[I&4294967295]=0;h[bh&4294967295]=0;h[D&4294967295]=0;a[kn>>2]=0;a[Hd>>2]=0;a[Ei>>2]=0;a[wo>>2]=0;a[lr>>2]=1;a[mr>>2]=1;a[$e>>2]=0;a[Le>>2]=a[(a[lb>>2]+8&4294967295)>>2];var X=fu(F,m,xo&4294967295,af&4294967295,w);r=X;f=-1==(X|0)?43:1;a:do if(1==f){var nr=D&4294967295,R=K&4294967295,G=K&4294967295,Pb=r,d=1;for(;;){var S=1==d?Pb:cb,Y=a[yo>>2];p=Y;98==S?(d=2,f=3):104==S?(d=2,f=5):107==S?(d=2,f=6):120==S?(d=2,f=7):88==S?(d=2,f=8):109==S?(d=2,f=9):112==S?(d=2,f=10):113==S?(d=2,f=12):102==S?(d=2,f=13):108==S?(d=2,f=14):97==S?(d=2,f=15):115==S?(d=2,f=16):103==S?(d=2,f=17):118==S?(d=2,f=18):119==S?(d=2,f=19):122==S?(d=2,f=20):256==S?(d=2,f=21):261==S?(d=2,f=22):257==S?(d=2,f=23):258==S?(d=2,f=23):259==S?(d=2,f=26):260==S?(d=2,f=32):262==S?(d=2,f=33):263==S?(d=2,f=36):264==S?(d=2,f=37):265==S?(d=2,f=40):266==S?(d=2,f=41):(d=2,f=42);c:do if(42==f){Zg(0);f=38;break c}else if(3==f){a[$e>>2]=2;if(!(1==(zb(p,Lh&4294967295,e([Ze,0,0,0],["i32*",0,0,0],y))|0)&4>=(a[Ze>>2]|0))){f=38;break c}a[$e>>2]=a[Ze>>2];f=38;break c}else if(5==f){jq(a[(m&4294967295)>>2],k);var na=e([a[zo>>2],0,0,0,wd&4294967295,0,0,0,i,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y);Ea(a[Ao>>2],gu&4294967295,na);Zg(0);f=38;break c}else if(6==f){var H=Ke(p);a[bl>>2]=H;f=38;break c}else if(7==f){a[Hd>>2]=1;f=38;break c}else if(8==f){a[Hd>>2]=2;f=38;break c}else if(9==f){a[Bo>>2]=1;f=38;break c}else if(10==f){B=Ke(p);if(!(99<(B|0))){f=38;break c}B=99;f=38;break c}else if(12==f){a[hm>>2]=1;f=38;break c}else if(13==f){Af(nr,p,200);f=38;break c}else if(14==f){a[Ze>>2]=0;var P=Ke(p);a[Ze>>2]=P;a[kn>>2]=a[Ze>>2];f=38;break c}else if(15==f){u=Ke(p);f=38;break c}else if(16==f){L=Ke(p);f=38;break c}else if(17==f){z=Ke(p);f=38;break c}else if(18==f){Af(R,p,40);f=38;break c}else if(19==f){a[Ei>>2]=1;Af(bh&4294967295,p,200);f=38;break c}else if(20==f){a[lr>>2]=0;f=38;break c}else if(21==f){C=1;f=38;break c}else if(22==f){a[Ei>>2]=1;var N,Kf,ia,Z;N=Co&4294967295;Kf=bh&4294967295;for(ia=N+7;N<ia;)h[Kf++]=h[N++];f=38;break c}else if(23==f){f=0!=(Y|0)?24:25;24==f&&Af(G,p,40);E=r;f=38;break c}else if(26==f){a[Fi>>2]=1;if(0==(p|0)){f=38;break c}Yg=0;for(d=27;;){if(!(60>((30==d?aa:0)|0))){f=31;break}var T=(b=h[p+Yg&4294967295],128<=b?b-256:b);a[(ln+4*Yg&4294967295)>>2]=T;if(0==(T|0)){f=31;break}var aa=Yg+1&4294967295;Yg=aa;d=30;f=28}a[(ln+236&4294967295)>>2]=0;a[Fi>>2]=2;f=38;break c}else if(32==f){jq(a[(m&4294967295)>>2],k);var QH=a[(a[lb>>2]+8&4294967295)>>2],RH=p,bb=s;s+=36;la(bb,0,36);var Va=void 0,ma=void 0,ja=void 0,ya=void 0,va=void 0,wa=void 0,Ij=void 0,dc=void 0,Ia=void 0,ba=bb,ta=void 0,qb=bb+12,ma=QH,ja=RH,Va=0!=(ja|0)?1:3;e:do if(1==Va){if(0==((b=h[ja&4294967295],128<=b?b-256:b)|0)){Va=3;break e}a[(qb+4&4294967295)>>2]=ja;h[qb+13&4294967295]=0;h[qb+12&4294967295]=0;a[(qb&4294967295)>>2]=0;mn(qb);ta=cl&4294967295;Va=4;break e}while(0);3==Va&&(mn(0),ta=cl&4294967295);Nd(hu&4294967295,64,1,ma);var ya=0,ob=a[(ta+4*ya&4294967295)>>2],dc=ob,Va=0!=(ob|0)?5:15;e:do if(5==Va){var Ra=ba&4294967295,Sa=ba&4294967295;for(;;){Ij=0;va=a[(dc+4&4294967295)>>2];Va=0!=((b=h[va],128<=b?b-256:b)|0)?7:14;g:do if(7==Va)for(;;){wa=$(va+1&4294967295);Ia=va+1&4294967295;Va=0==(l[dc+13&4294967295]&255|0)?8:9;if(8==Va){var ac,iu,kq;ac=Mr&4294967295;iu=Ra;for(kq=ac+4;ac<kq;)h[iu++]=h[ac++]}else 9==Va&&U(Ra,ju&4294967295,e([l[dc+13&4294967295]&255,0,0,0],["i32",0,0,0],y));var qa=ma,Va=0==(Ij|0)?11:12;if(11==Va){var cc=(b=h[va&4294967295],128<=b?b-256:b),SH=Ia,Q=(b=h[ku+(l[dc+12&4294967295]&255)&4294967295],128<=b?b-256:b);Ea(qa,lu&4294967295,e([cc,0,0,0,SH,0,0,0,Sa,0,0,0,Q,0,0,0,a[(dc&4294967295)>>2],0,0,0,a[(dc+8&4294967295)>>2],0,0,0],["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y))}else if(12==Va){var za=Ia,Kb=(b=h[va&4294967295],128<=b?b-256:b);Ea(qa,mu&4294967295,e([za,0,0,0,Kb,0,0,0],["i8*",0,0,0,"i32",0,0,0],y))}Ij=Ij+1&4294967295;va=va+(wa+2&4294967295)&4294967295;if(0!=((b=h[va],128<=b?b-256:b)|0))Va=7;else{Va=14;break g}}while(0);xc(10,ma);var ya=ya+1&4294967295,Ga=a[(ta+4*ya&4294967295)>>2],dc=Ga;if(0!=(Ga|0))Va=6;else{Va=15;break e}}}while(0);s=bb;Zg(0);var Qb=p,d=32;f=33;break c}else if(36==f){k=p;f=38;break c}else if(37==f){var gc=pe(p,lq&4294967295);a[Le>>2]=gc;if(0!=(gc|0)){f=38;break c}Ea(a[(a[lb>>2]+12&4294967295)>>2],nu&4294967295,e([p,0,0,0],["i8*",0,0,0],y));a[Le>>2]=a[(a[lb>>2]+12&4294967295)>>2];f=38;break c}else if(40==f){a[Do>>2]=16;f=38;break c}else if(41==f){a[Hd>>2]=3;f=38;break c}while(0);if(33==f)if(f=0==((32==d?Qb:Y)|0)?34:35,34==f)a[Gi>>2]=30;else if(35==f){var hb=Ke(p);a[Gi>>2]=hb}var cb=fu(F,m,xo&4294967295,af&4294967295,w);r=cb;if(-1==(cb|0)){d=38;f=43;break a}else d=38,f=2}}while(0);jq(a[(m&4294967295)>>2],k);var ga,ka;ga=0==(Xk(2,ou&4294967295)|0)?1:3;b:do if(1==ga){if(0!=(Xk(2,pu&4294967295)|0))break b;Xk(2,bf&4294967295)}while(0);var Aa,rb,Ba,Dc;rb=0;Aa=0==(rb|0)?1:2;1==Aa&&(rb=60);a[Ya>>2]=0;a[Eo>>2]=22050;a[Jb>>2]=22050;a[mq>>2]=134217728/(a[Jb>>2]|0)|0;a[nn>>2]=(64*a[Jb>>2]&4294967295|0)/22050|0;a[ch>>2]=0;a[Hi>>2]=0;a[Ii>>2]=2147483647;a[(v+52&4294967295)>>2]=32;a[(v+60&4294967295)>>2]=100;Ba=0;b:for(;;){a[(Ub+4*Ba&4294967295)>>2]=a[(Nr+4*Ba&4294967295)>>2];var ua=Ba+1&4294967295;Ba=ua;if(!(15>(ua|0)))break b}a[Ji>>2]=(rb*a[Jb>>2]&4294967295|0)/12800|0;Aa=128<(a[Ji>>2]|0)?5:6;5==Aa&&(a[Ji>>2]=128);a[Fo>>2]=(a[Ji>>2]|0)/2|0;Aa=22050!=(a[Jb>>2]|0)?7:9;b:do if(7==Aa){Ba=0;if(!((Ba|0)<(a[Ji>>2]|0)))break b;for(;;)if(Dc=127*(1-Go(6.283185307*(Ba|0)/(a[Ji>>2]|0))),h[Ho+Ba&4294967295]=(Dc|0)&255,Ba=Ba+1&4294967295,(Ba|0)<(a[Ji>>2]|0))Aa=8;else break b}while(0);a[Ki>>2]=Io&4294967295;var hc;a[eg>>2]=0;a[(x&4294967295)>>2]=1;a[(x+8&4294967295)>>2]=22050;a[(x+20&4294967295)>>2]=1;a[(x+184&4294967295)>>2]=a[(nq+4*a[(x+20&4294967295)>>2]&4294967295)>>2];a[(x+172&4294967295)>>2]=qu&4294967295;a[(x+160&4294967295)>>2]=100;q[(x+164&4294967295)>>2]=3;a[(x+28&4294967295)>>2]=(10*a[(x+8&4294967295)>>2]&4294967295|0)/1E3|0;a[(x+4&4294967295)>>2]=0;a[(x+24&4294967295)>>2]=20;Jo(2);for(hc=0;;){var Xa=(b=t[(ru+2*hc&4294967295)>>1],32768<=b?b-65536:b);a[((sb+8&4294967295)+4*hc&4294967295)>>2]=Xa;var ha=(b=t[(su+2*hc&4294967295)>>1],32768<=b?b-65536:b);a[((sb+48&4294967295)+4*hc&4294967295)>>2]=ha;var A=(b=t[(tu+2*hc&4294967295)>>1],32768<=b?b-65536:b);a[((sb+88&4294967295)+4*hc&4294967295)>>2]=A;var mb=(b=t[(uu+2*hc&4294967295)>>1],32768<=b?b-65536:b);a[((sb+128&4294967295)+4*hc&4294967295)>>2]=mb;var ic=hc+1&4294967295;hc=ic;if(!(9>=(ic|0)))break}a[(sb+
248&4294967295)>>2]=89;a[(sb&4294967295)>>2]=1E3;a[(sb+4&4294967295)>>2]=59;a[(sb+168&4294967295)>>2]=0;a[(sb+172&4294967295)>>2]=40;a[(sb+176&4294967295)>>2]=0;a[(sb+180&4294967295)>>2]=0;a[(sb+184&4294967295)>>2]=50;a[(sb+188&4294967295)>>2]=0;a[(sb+192&4294967295)>>2]=0;a[(sb+196&4294967295)>>2]=0;a[(sb+200&4294967295)>>2]=62;var sa=s;s+=4;la(sa,0,4);var Wa,Ko,jb,Ja,ca,Ab,Lb,ec;Ab=1;var Bb=Lo(a[on>>2],vu&4294967295,0);a[on>>2]=Bb;Wa=0==(Bb|0)?1:2;if(1==Wa)Ko=-1;else if(2==Wa){var Ha=Lo(a[im>>2],wu&4294967295,0);a[im>>2]=Ha;Wa=0==(Ha|0)?3:4;if(3==Wa)Ko=-1;else if(4==Wa){var vb=Lo(a[Jj>>2],xu&4294967295,0);a[Jj>>2]=vb;Wa=0==(vb|0)?5:6;if(5==Wa)Ko=-1;else if(6==Wa){var da=Lo(a[jm>>2],yu&4294967295,sa);a[jm>>2]=da;Wa=0==(da|0)?7:8;if(7==Wa)Ko=-1;else if(8==Wa){a[Kj>>2]=a[Jj>>2];a[oq>>2]=Math.floor((Ma[sa>>2]>>>0)/68);jb=ca=0;b:for(;;){ca=((l[a[Kj>>2]+jb&4294967295]&255)<<(8*jb&4294967295))+ca&4294967295;var $c=jb+1&4294967295;jb=$c;if(!(4>($c|0)))break b}Wa=83200!=(ca|0)?11:12;11==Wa&&(Ab=ca);Lb=a[on>>2];a[Lj>>2]=l[Lb&4294967295]&255;Lb=Lb+4&4294967295;jb=0;Wa=(jb|0)<(a[Lj>>2]|0)?13:14;b:do if(13==Wa)for(;;){Ja=l[Lb&4294967295]&255;a[((Me+48*jb&4294967295)+36&4294967295)>>2]=l[Lb&4294967295]&255;a[((Me+48*jb&4294967295)+40&4294967295)>>2]=l[Lb+1&4294967295]&255;ec=Lb;a[((Me+48*jb&4294967295)+44&4294967295)>>2]=a[(ec+4&4294967295)>>2];Lb=Lb+8&4294967295;var ng=Me+48*jb&-1,Vb,Db,nc,ab;Vb=Lb;Db=ng;nc=Vb+32;if(Db%4==Vb%4){for(;0!==Vb%4&&Vb<nc;)h[Db++]=h[Vb++];Vb>>=2;Db>>=2;for(ab=nc>>2;Vb<ab;)a[Db++]=a[Vb++];Vb<<=2;Db<<=2}for(;Vb<nc;)h[Db++]=h[Vb++];Lb=Lb+32&4294967295;a[((Me+48*jb&4294967295)+32&4294967295)>>2]=Lb;Lb=Lb+(16*Ja&4294967295)&4294967295;jb=jb+1&4294967295;if((jb|0)<(a[Lj>>2]|0))Wa=13;else break b}while(0);Wa=(a[pn>>2]|0)>=(a[Lj>>2]|0)?15:16;15==Wa&&(a[pn>>2]=0);Ko=Ab}}}}var Ua=Ko;s=sa;ga=1!=(Ua|0)?4:7;if(4==ga){var db=a[(a[lb>>2]+12&4294967295)>>2];ga=-1==(Ua|0)?5:6;5==ga?(Nd(zu&4294967295,27,1,db),Zg(1)):6==ga&&Ea(db,Au&4294967295,e([Ua,0,0,0,83200,0,0,0,wd&4294967295,0,0,0],["i32",0,0,0,"i32",0,0,0,"i8*",0,0,0],y))}var Hb=s;s+=364;la(Hb,0,364);var Ib,Wb,ea=Hb+160,Mb,kb=Hb+164;Wb=a[pq>>2]=0;b:for(;;){a[((nd+16*Wb&4294967295)+12&4294967295)>>2]=0;a[((nd+16*Wb&4294967295)+8&4294967295)>>2]=0;var Ca=Wb+1&4294967295;Wb=Ca;if(!(4>(Ca|0)))break b}U(Hb&4294967295,Mo&4294967295,e([wd&4294967295,0,0,0,47,0,0,0,Bu&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));var eb=pe(Hb&4294967295,Mh&4294967295);Ib=0==(eb|0)?17:3;b:do if(3==Ib){var xb=Hb&4294967295;if(0==(jn(xb,160,eb)|0))break b;var Eb=Hb&4294967295,oc=Hb&4294967295,fb=Hb+4&4294967295,TH=kb&4294967295,tb=kb&4294967295,ub=Hb&4294967295,Sb=Hb+5&4294967295,Gb=Hb&4294967295,UH=Hb+10&4294967295,pa=Hb&4294967295,qe=Hb+10&4294967295,Oc=kb&4294967295,Zb=kb&4294967295,Jc=kb&4294967295;for(;;){Ib=47==((b=h[Eb],128<=b?b-256:b)|0)?6:7;d:do if(7==Ib)if(Ib=0==($b(oc,Cu&4294967295,3)|0)?8:10,8==Ib){if(2!=(zb(fb,Du&4294967295,e([pq,0,0,0,TH,0,0,0],["i32*",0,0,0,"i8*",0,0,0],y))|0))break d;var kc=pe(tb,lq&4294967295);a[Li>>2]=kc}else if(10==Ib)if(Ib=0==($b(ub,No&4294967295,4)|0)?11:12,11==Ib)Eu(Sb,Oo&4294967295);else if(12==Ib)if(Ib=0==($b(Gb,Fu&4294967295,9)|0)?13:14,13==Ib)zb(UH,Lh&4294967295,e([Gu,0,0,0],["i32*",0,0,0],y));else if(14==Ib){if(0!=($b(pa,Hu&4294967295,9)|0))break d;Wb=zb(qe,Iu&4294967295,e([ea,0,0,0,Oc,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));if(2!=(Wb|0))break d;var VH=(b=h[ea],128<=b?b-256:b);a[(nd+16*a[km>>2]&-1)>>2]=VH;var xe=$(Zb)+1&4294967295;Mb=uo(xe);fa(Mb,Jc);a[((nd+16*a[km>>2]&4294967295)+
12&4294967295)>>2]=Mb;var wb=a[km>>2];a[km>>2]=wb+1&4294967295;a[((nd+16*wb&4294967295)+4&4294967295)>>2]=0}while(0);if(0!=(jn(xb,160,eb)|0))Ib=5;else break b}}while(0);s=Hb;Po(0);a[Nh>>2]=0;a[lm>>2]=0;a[Uc>>2]=0;a[dh>>2]=-1;for(ka=0;;){a[((dl+4&4294967295)+4*ka&4294967295)>>2]=a[(Qo+4*ka&4294967295)>>2];var pc=ka+1&4294967295;ka=pc;if(!(15>(pc|0)))break}f=0!=(E|0)?44:45;if(44==f){el(K&4294967295,5);var Or=Mi&4294967295,WH=E&1,Pa=s;s+=724;la(Pa,0,724);var yc,Cd,Vc,Wc,Ju=Pa+196,xd=Pa+364,Rc=Pa+532;Wc=Cd=0;a[pb>>2]=0;a[mm>>2]=0;var Kc,cf,Ku,Ne;Kc=nm&4294967295;cf=Kc+26;Ne=0;0>Ne&&(Ne+=256);for(Ne=Ne+(Ne<<8)+(Ne<<16)+16777216*Ne;0!==Kc%4&&Kc<cf;)h[Kc++]=0;Kc>>=2;for(Ku=cf>>2;Kc<Ku;)a[Kc++]=Ne;for(Kc<<=2;Kc<cf;)h[Kc++]=0;a[Ro>>2]=WH&1;yc=0==(Cd|0)?1:2;1==yc&&(Cd=bf&4294967295);a[Ta>>2]=0;yc=3;3==yc&&(a[Ta>>2]=a[(a[lb>>2]+12&4294967295)>>2]);U(Rc&4294967295,Lu&4294967295,e([Cd,0,0,0,Or,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));U(Pa&4294967295,Mu&4294967295,e([Rc&4294967295,0,0,0],["i8*",0,0,0],y));var mc=pe(Pa&4294967295,Mh&4294967295);Vc=mc;yc=0==(mc|0)?5:9;b:do if(5==yc){U(Pa&4294967295,Nu&4294967295,e([Rc&4294967295,0,0,0],["i8*",0,0,0],y));var Lc=So(Pa&4294967295,Mh&4294967295);Vc=Lc;if(0!=(Lc|0)){yc=9;break b}yc=8;7==yc&&fa(0,Pa&4294967295);yc=17;break b}while(0);if(9==yc){U(Ju&4294967295,To&4294967295,e([wd&4294967295,0,0,0,47,0,0,0,Or,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));var Za=So(Ju&4294967295,Ou&4294967295);yc=0==(Za|0)?10:13;if(10==yc)yc=12,11==yc&&fa(0,Pa&4294967295);else if(13==yc){U(xd&4294967295,Pu&4294967295,e([wd&4294967295,0,0,0,47,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));Oh(Za,1024);Oh(Za,Wc);var md=s;s+=4;la(md,0,4);var yd,O,gb;O=0;b:for(;;){var fd=a[(Mj+4*O&4294967295)>>2];gb=fd;yd=0!=(fd|0)?2:3;c:do if(2==yd)for(;;){var or,od,Bd;or=gb;od=md;for(Bd=or+4;or<Bd;)h[od++]=h[or++];var pd=a[md>>2];gb=pd;if(0!=(pd|0))yd=2;else break c}while(0);a[(Mj+4*O&4294967295)>>2]=0;a[(qn+4*O&4294967295)>>2]=0;var Ec=O+1&4294967295;O=Ec;if(!(1024>(Ec|0)))break b}s=md;Ea(a[Ta>>2],Qu&4294967295,e([Me+48*a[pn>>2]&-1,0,0,0],["i8*",0,0,0],y));Ni(Rc&4294967295,Ru&4294967295);var Tb=Rc&4294967295;yc=0!=(a[((a[Rb>>2]&4294967295)+260&4294967295)>>2]|0)?14:15;14==yc?(Ni(Tb,qq&4294967295),Ni(Rc&4294967295,Uo&4294967295)):15==yc&&(Ni(Tb,Uo&4294967295),Ni(Rc&4294967295,qq&4294967295));Ni(Rc&4294967295,Su&4294967295);var fl=s;s+=4;la(fl,0,4);var Vd,qc,ad;qc=0;b:for(;;){a[fl>>2]=a[(Mj+4*qc&4294967295)>>2];var XH=Vk(Za);a[(qn+4*qc&4294967295)>>2]=XH;Vd=0!=(a[fl>>2]|0)?2:3;c:do if(2==Vd)for(;;){ad=(b=h[a[fl>>2]+4&4294967295],128<=b?b-256:b);Nd(a[fl>>2]+4&4294967295,ad,1,Za);var Qc,Oi,Ed;Qc=a[fl>>2];Oi=fl;for(Ed=Qc+4;Qc<Ed;)h[Oi++]=h[Qc++];if(0!=(a[fl>>2]|0))Vd=2;else break c}while(0);xc(0,Za);var Tu=qc+1&4294967295;qc=Tu;if(!(1024>(Tu|0)))break b}s=fl;Wc=Vk(Za);Ea(a[Ta>>2],rq&4294967295,e([Pa&4294967295,0,0,0],["i8*",0,0,0],y));var bd=Vc,Wd=xd&4294967295,gd=s;s+=11876;la(gd,0,11876);var Ka,vc=null,lc,Od,qd,ge,Ph,Qh=gd+4,Pd,td=gd+8,Bc,pr=gd+12,Vo,Xb,Rd=gd+16,Ld=gd+516,Oe,Yc,pf=gd+8516,sq,qf,Xc;Yc=Oe=Vo=Pd=a[Qh>>2]=0;a[rc>>2]=0;h[Dd&4294967295]=0;var Ud=So(Wd,tq&4294967295);Ph=Ud;Ka=0==(Ud|0)?2:1;if(2!=Ka&&1==Ka){var De=Rd&4294967295,jf=Ld&4294967295;b:for(;;){a[rc>>2]=a[rc>>2]+1&4294967295;var Ee=jn(De,500,bd);Xb=Ee;Ka=0!=(Ee|0)?4:10;c:do if(4==Ka){var Jd=Xt(Xb,Wo&4294967295);Od=Jd;Ka=0!=(Jd|0)?5:6;5==Ka&&(h[Od]=0);var lf=Xb;13==((b=h[lf&4294967295],128<=b?b-256:b)|0)?(vc=6,Ka=7):(vc=6,Ka=8);if(7==Ka){var be=Xb+1&4294967295;Xb=be;vc=7}if(0==((6==vc?lf:be)|0))break c;if(46==((b=h[Xb&4294967295],128<=b?b-256:b)|0))break c;var Uu=Vo;if(1==Uu)Ka=44;else if(2==Uu)Ka=47;else continue b;if(44==Ka){var kf=Xb,Pe=s;s+=244;la(Pe,0,244);var Qa=void 0,Fd=void 0,hd=void 0,he=void 0,Id=void 0,og=void 0,cd=void 0,Kd=void 0,pg=Pe+4,wc=void 0,qg=Pe+8,sg=Pe+88,ce=Pe+240;a[pg>>2]=2;wc=0;h[qg&4294967295]=0;h[gl&4294967295]=0;h[Rh&4294967295]=0;h[Sh&4294967295]=0;h[eh&4294967295]=0;h[Pi&4294967295]=0;Id=qg&4294967295;hd=0;Qa=0==(wc|0)?1:13;d:do if(1==Qa){var wf=qg&4294967295,We=qg&4294967295,Ye=qg&4294967295,of=qg&4294967295,Ue=qg&4294967295,Vf=qg&4294967295,Wf=qg&4294967295;e:for(;;){var Gd=l[kf+hd&4294967295],he=Gd,Tc=Gd&255;if(41==Tc)Qa=3;else if(40==Tc)Qa=4;else if(10==Tc){Qa=6;break e}else if(13==Tc){Qa=6;break e}else if(0==Tc){Qa=6;break e}else Qa=9==Tc?7:32==Tc?7:63==Tc?8:11;f:do if(11==Qa){var Xe=he,Ie=Id,Id=Ie+1&4294967295;h[Ie]=Xe}else if(3==Qa)h[Id]=0,a[pg>>2]=1,Xo(wf,pg),Id=We;else if(4==Qa){h[Id]=0;a[pg>>2]=2;Xo(Ye,pg);a[pg>>2]=3;Id=of;if(32!=((b=h[kf+(hd+1&4294967295)&4294967295],128<=b?b-256:b)|0))break f;Ea(a[Ta>>2],Vu&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y));a[pb>>2]=a[pb>>2]+1&4294967295}else if(7==Qa)h[Id]=0,Xo(Vf,pg),Id=Wf;else if(8==Qa)if(Qa=2==(a[pg>>2]|0)?9:10,9==Qa)a[pg>>2]=0;else if(10==Qa){var oe=he,Gf=Id,Id=Gf+1&4294967295;h[Gf]=oe}while(0);var tf=wc,hd=hd+1&4294967295;if(0==(tf|0))Qa=2;else break d}h[Id]=0;Xo(Ue,pg);wc=1;hd=hd+1&4294967295}while(0);Qa=0==(nb(eh&4294967295,Wu&4294967295)|0)?14:15;14==Qa&&fa(eh&4294967295,Dd&4294967295);Qa=0==((b=h[eh&4294967295],128<=b?b-256:b)|0)?16:19;if(16==Qa)Qa=0!=((b=h[Sh&4294967295],128<=b?b-256:b)|0)?17:18,17==Qa&&(Ea(a[Ta>>2],Xu&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295),Fd=0;else if(19==Qa){Yo(Pi&4294967295,qg&4294967295,ce&4294967295);Qa=0!=(l[ce&4294967295]&255|0)?20:21;20==Qa&&(Ea(a[Ta>>2],Yu&4294967295,e([a[rc>>2],0,0,0,l[ce&4294967295]&255,0,0,0,kf,0,0,0],["i32",0,0,0,"i32",0,0,0,"i8*",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295);fa(sg&4294967295,qg&4294967295);var cd=$(qg&4294967295)+1&4294967295,Xf=$(Dd&4294967295),Qa=0<(Xf|0)?22:26;d:do if(22==Qa){if(0==($b(eh&4294967295,Dd&4294967295,Xf)|0))break d;sc(Pe,eh&4294967295);Qa=57==((b=h[Dd&4294967295],128<=b?b-256:b)|0)?24:25;if(24==Qa&&0!=(uq(a[Pe>>2])|0))break d;Ea(a[Ta>>2],Zu&4294967295,e([a[rc>>2],0,0,0,eh&4294967295,0,0,0,Dd&4294967295,0,0,0],["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));a[pb>>2]=a[pb>>2]+1&4294967295}while(0);fa(sg+cd&4294967295,eh&4294967295);var Lg=$(eh&4294967295),cd=cd+Lg&4294967295,Qa=0!=(a[Ro>>2]|0)?27:28;27==Qa&&(h[sg+cd&4294967295]=9,h[sg+(cd+1&4294967295)&4294967295]=(a[rc>>2]|0)%255+1&255,h[sg+(cd+2&4294967295)&4294967295]=((a[rc>>2]|0)/255|0)+1&255,cd=cd+3&4294967295);Qa=0!=((b=h[gl&4294967295],128<=b?b-256:b)|0)?29:35;if(29==Qa)if(hd=-1,Qa=33==((b=h[gl&4294967295],128<=b?b-256:b)|0)?30:31,30==Qa?hd=Ke(gl+1&4294967295)+32&4294967295:31==Qa&&(hd=Ke(gl&4294967295)),Qa=0<(hd|0)&255>(hd|0)?33:34,33==Qa){var Fe=cd,cd=Fe+1&4294967295;h[sg+Fe&4294967295]=5;var Sg=hd&255,we=cd,cd=we+1&4294967295;h[sg+we&4294967295]=Sg}else 34==Qa&&(Ea(a[Ta>>2],$u&4294967295,e([a[rc>>2],0,0,0,hd,0,0,0],["i32",0,0,0,"i32",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295);Qa=0!=((b=h[Rh&4294967295],128<=b?b-256:b)|0)?36:41;d:do if(36==Qa){Kd=0;Qa=32==((b=h[Rh&4294967295],128<=b?b-256:b)|0)?37:38;37==Qa?(he=8,Kd=1):38==Qa&&(he=1);var nf=he,vq=cd,cd=vq+1&4294967295;h[sg+vq&4294967295]=nf;hd=$(Rh&4294967295)-1&4294967295;if(!((hd|0)>=(Kd|0)))break d;for(;;){var ae=h[Rh+hd&4294967295],Rf=cd,cd=Rf+1&4294967295;h[sg+Rf&4294967295]=ae;hd=hd-1&4294967295;if((hd|0)>=(Kd|0))Qa=40;else break d}}while(0);Qa=0!=((b=h[Sh&4294967295],128<=b?b-256:b)|0)?42:43;42==Qa&&(U(sg+cd&4294967295,Zo&4294967295,e([2,0,0,0,Sh&4294967295,0,0,0],["i32",0,0,0,"i8*",0,0,0],y)),cd=($(Sh&4294967295)+1&4294967295)+cd&4294967295);var Jg=cd,cd=Jg+1&4294967295;h[sg+Jg&4294967295]=0;var og=Qd(cd),Kg=cd,df=void 0,Qe=void 0,vf=void 0,me=void 0,df=sg&4294967295,Qe=og,vf=df+Kg;if(Qe%4==df%4&&8<Kg){for(;0!==df%4&&df<vf;)h[Qe++]=h[df++];df>>=2;Qe>>=2;for(me=vf>>2;df<me;)a[Qe++]=a[df++];df<<=2;Qe<<=2}for(;df<vf;)h[Qe++]=h[df++];Fd=og}var Bf=Fd;s=Pe;lc=Bf;if(0==(lc|0))continue b;if(!(2E3>(a[Qh>>2]|0)))continue b;var Qi=lc,de=a[Qh>>2];a[Qh>>2]=de+1&4294967295;a[(Ld+4*de&4294967295)>>2]=Qi;continue b}else if(47==Ka){Xc=Xb;qf=sq=0;var Eh=(b=h[Xc],128<=b?b-256:b);Ka=0!=(ye(Eh)|0)?48:49;d:do if(48==Ka)for(;;){Xc=Xc+1&4294967295;var ne=(b=h[Xc],128<=b?b-256:b);if(0!=(ye(ne)|0))Ka=48;else break d}while(0);qd=0;Ka=32<(l[Xc]&255|0)?50:51;d:do if(50==Ka)for(;;){var Fg=sc(gd,Xc);Xc=Xc+Fg&4294967295;sq=sq+(a[gd>>2]<<qd)&4294967295;qd=qd+16&4294967295;if(32<(l[Xc]&255|0))Ka=50;else break d}while(0);var Gg=(b=h[Xc],128<=b?b-256:b);Ka=0!=(ye(Gg)|0)?52:53;d:do if(52==Ka)for(;;){Xc=Xc+1&4294967295;var Hf=(b=h[Xc],128<=b?b-256:b);if(0!=(ye(Hf)|0))Ka=52;else break d}while(0);qd=0;Ka=32<(l[Xc]&255|0)?54:55;d:do if(54==Ka)for(;;){var Tf=sc(gd,Xc);Xc=Xc+Tf&4294967295;qf=qf+(a[gd>>2]<<qd)&4294967295;qd=qd+16&4294967295;if(32<(l[Xc]&255|0))Ka=54;else break d}while(0);if(0==(sq|0))continue b;Oh(Za,sq);Oh(Za,qf);continue b}}while(0);Ka=0<(a[Qh>>2]|0)?11:12;if(11==Ka){fa(pf+28*Oe&-1,Dd&4294967295);a[((pf+28*Oe&4294967295)+24&4294967295)>>2]=a[om>>2];var Yf=Vk(Ph);a[((pf+28*Oe&4294967295)+16&4294967295)>>2]=Yf;var jd=Ph,Ve=a[Qh>>2],mf=jf,$f=s;s+=512;la($f,0,512);var Lf=void 0,If=void 0,Th=void 0,ld=void 0,zf=void 0,Je=void 0,Td=void 0,Ff=void 0,ji=void 0,Hg=void 0,If=Dd&4294967295,fg=void 0,mg=void 0,Sf=void 0,fh=void 0,fg=$f&4294967295,mg=fg+512,fh=0;0>fh&&(fh+=256);for(fh=fh+(fh<<8)+(fh<<16)+16777216*fh;0!==fg%4&&fg<mg;)h[fg++]=0;fg>>=2;for(Sf=mg>>2;fg<Sf;)a[fg++]=fh;for(fg<<=2;fg<mg;)h[fg++]=0;Je=$(If);Hg=bf&4294967295;so(mf,Ve,4,4);Lf=0==(nb(If,av&4294967295)|0)?1:2;1==Lf&&(Je=0);Th=0;Lf=(Th|0)<(Ve|0)?3:11;c:do if(3==Lf)for(;;){var Td=a[(mf+4*Th&4294967295)>>2],ld=$(Td)+1&4294967295,ji=Td+ld&4294967295,Ff=ji+Je&4294967295,zf=$(Ff),ni=$f+2*(l[Ff&4294967295]&255)&4294967295;t[ni>>1]=t[ni>>1]+1&65535;Lf=0!=((b=h[Hg&4294967295],128<=b?b-256:b)|0)?4:6;e:do if(4==Lf){if(0!=(nb(Td,Hg)|0)){Lf=6;break e}Nd(Ff,zf,1,jd);xc(0,jd);Lf=10;break e}while(0);if(6==Lf){Lf=(Th|0)<(Ve-1&4294967295|0)?7:9;e:do if(7==Lf){if(0!=(nb(Td,a[(mf+4*(Th+1&4294967295)&4294967295)>>2])|0))break e;Hg=a[(mf+4*Th&4294967295)>>2];xc(4,jd)}while(0);Nd(Ff,zf,1,jd);xc(3,jd);Nd(Td,ld,1,jd)}Th=Th+1&4294967295;if((Th|0)<(Ve|0))Lf=3;else break c}while(0);s=$f;var uh=Vk(Ph);a[((pf+28*Oe&4294967295)+20&4294967295)>>2]=uh-a[((pf+28*Oe&4294967295)+16&4294967295)>>2]&4294967295;Oe=Oe+1&4294967295;Pd=Pd+a[Qh>>2]&4294967295}a[Qh>>2]=0;Ka=2==(Vo|0)?13:14;13==Ka&&(Nd(Qh,1,4,Za),Vo=0);if(0==(Xb|0))break b;var Ng=0==($b(Xb,bv&4294967295,2)|0),Zf=Xb;Ka=Ng?16:17;if(16==Ka){var Og=Zf+2&4294967295,Ge=Za,ag=s;s+=1E3;la(ag,0,1E3);var zd=void 0,Ri=null,ef=void 0,si=void 0,yf=void 0,ud=void 0,Fb=void 0,$g=void 0,tc=void 0,ue=ag+800,tc=0,ef=Og,zd=0!=(10>((b=h[ef&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?1:2;c:do if(1==zd){if(0==(10>((b=h[ef+1&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){zd=2;break c}yf=Ke(ef&4294967295);zd=26<=(yf|0)?5:4;if(5==zd){Ea(a[Ta>>2],cv&4294967295,e([a[rc>>2],0,0,0,25,0,0,0],["i32",0,0,0,"i32",0,0,0],y));a[pb>>2]=a[pb>>2]+1&4294967295;zd=26;break c}else if(4==zd){var Uh=(b=h[ef],128<=b?b-256:b),zd=0!=(ye(Uh)|0)^1?6:7;d:do if(6==zd)for(;;){var ef=ef+1&4294967295,gk=(b=h[ef],128<=b?b-256:b);if(0!=(ye(gk)|0)^1)zd=6;else break d}while(0);xc(6,Ge);xc(18,Ge);xc(yf+65&4294967295,Ge);zd=0!=((b=h[nm+yf&4294967295],128<=b?b-256:b)|0)?8:9;8==zd&&(Ea(a[Ta>>2],dv&4294967295,e([a[rc>>2],0,0,0,yf,0,0,0],["i32",0,0,0,"i32",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295);h[nm+yf&4294967295]=1;Fb=0;Ri=9;d:for(;;){if(!(200>((18==Ri?Bh:0)|0)))break d;var ik=(b=h[ef],128<=b?b-256:b),rh=0!=(ye(ik)|0),Uf=ef;rh?(Ri=11,zd=12):(Ri=11,zd=13);e:do if(12==zd)for(;;){var ef=(12==Ri?jj:Uf)+1&4294967295,mk=(b=h[ef],128<=b?b-256:b),nk=0!=(ye(mk)|0),jj=ef;if(nk)zd=Ri=12;else{Ri=12;break e}}while(0);if(0==((b=h[11==Ri?Uf:jj],128<=b?b-256:b)|0))break d;var kj=ef,si=kj;for(a[(ag+4*Fb&4294967295)>>2]=kj;;){var ok=32<((b=h[ef],128<=b?b-256:b)&255|0),uf=ef,ef=uf+1&4294967295;if(!ok)break}h[uf]=0;$g=ef-si&4294967295;zd=($g|0)>(tc|0)?17:18;17==zd&&(tc=$g);var Si=$g&255,Mg=Fb,Fb=Mg+1&4294967295;h[ue+Mg&4294967295]=Si;var Bh=Fb,Ri=18}zd=1<(tc|0)?20:25;d:do if(20==zd)for(;;){ud=0;zd=(ud|0)<(Fb|0)?21:24;f:do if(21==zd)for(;;)if(zd=((b=h[ue+ud&4294967295],128<=b?b-256:b)|0)==(tc|0)?22:23,22==zd&&Nd(a[(ag+4*ud&4294967295)>>2],1,tc,Ge),ud=ud+1&4294967295,(ud|0)<(Fb|0))zd=21;else break f;while(0);var Qg=tc-1&4294967295,tc=Qg;if(1<(Qg|0))zd=20;else break d}while(0);xc(7,Ge);zd=26;break c}}while(0);2==zd&&(Ea(a[Ta>>2],ev&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295);s=ag}else if(17==Ka){Ka=0==($b(Zf,fv&4294967295,8)|0)?18:20;c:do if(18==Ka){Vo=2;xc(6,Za);xc(20,Za);if(0==(Vk(Za)&3|0))break c;for(;;)if(xc(0,Za),0!=(Vk(Za)&3|0))Ka=19;else break c}while(0);if(0!=($b(Xb,gv&4294967295,6)|0))continue b;Vo=1;Od=Xb+6&4294967295;c:for(;;){Ka=32==(l[Od&4294967295]&255|0)?24:23;if(23==Ka&&9!=(l[Od&4294967295]&255|0))break c;Od=Od+1&4294967295}qd=0;c:for(;;){if(!(32<(l[Od]&255|0)))break c;if(!(12>(qd|0)))break c;var Rg=Od;Od=Rg+1&4294967295;var xk=h[Rg],sj=qd;qd=sj+1&4294967295;h[Dd+sj&4294967295]=xk}h[Dd+qd&4294967295]=0;a[om>>2]=0;Ka=1==(zb(Dd&4294967295,hv&4294967295,e([pr,0,0,0],["i32*",0,0,0],y))|0)?30:33;c:do if(30==Ka){Od=Dd&4294967295;Ka=256<Ma[pr>>2]>>>0?31:32;if(31==Ka){var Ak=Ma[pr>>2]>>>8&255,wj=Od;Od=wj+1&4294967295;h[wj]=Ak}var Ck=a[pr>>2]&255,Kh=Od;Od=Kh+1&4294967295;h[Kh]=Ck;h[Od]=0;Ka=37;break c}else if(33==Ka){if(!(0<(a[(a[Rb>>2]+964&4294967295)>>2]|0))){Ka=37;break c}sc(td,Dd&4294967295);var Vg=a[td>>2]-a[(a[Rb>>2]+964&4294967295)>>2]&4294967295;qd=Vg;if(!(0<=(Vg|0))){Ka=37;break c}if(!(128>(qd|0))){Ka=37;break c}var Wg=qd+1&4294967295;a[om>>2]=Wg;vc=36;Ka=38;break c}while(0);if(37==Ka)var Ai=a[om>>2],vc=37;if(0!=((37==vc?Ai:Wg)|0))continue b;if(!(2<$(Dd&4294967295)>>>0))continue b;Ka=2>(sc(gd,Dd&4294967295)|0)?41:42;41==Ka&&(Ea(a[Ta>>2],iv&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295);h[Dd+2&4294967295]=0}}Sd(Ph);so(pf&4294967295,Oe,28,2);var ah=pe(Wd,gh&4294967295);Ph=ah;Ka=0==(ah|0)?58:59;if(58!=Ka&&59==Ka){Bc=$o&4294967295;ge=0;Ka=(ge|0)<(Oe|0)?60:70;b:do if(60==Ka)for(;;){Wk(Ph,a[((pf+28*ge&4294967295)+16&4294967295)>>2],0);Ka=0!=(nb(pf+28*ge&-1,Bc)|0)?61:67;if(61==Ka){Ka=0<(ge|0)?62:63;62==Ka&&xc(7,Za);xc(6,Za);Ka=0!=(a[((pf+28*ge&4294967295)+24&4294967295)>>2]|0)?64:65;if(64==Ka)Yc=Yc+1&4294967295,xc(1,Za),xc(a[((pf+
28*ge&4294967295)+24&4294967295)>>2],Za);else if(65==Ka){var ej=Za,Eg=pf+28*ge&-1;Bc=Eg;Gj(ej,Eg,$(Eg))}xc(0,Za)}var mi=a[((pf+28*ge&4294967295)+20&4294967295)>>2];qd=mi;Ka=0<(mi|0)?68:69;d:do if(68==Ka)for(;;){var Ti=Di(Ph);a[gd>>2]=Ti;xc(a[gd>>2],Za);var lk=qd-1&4294967295;qd=lk;if(0<(lk|0))Ka=68;else break d}while(0);ge=ge+1&4294967295;if((ge|0)<(Oe|0))Ka=60;else break b}while(0);xc(7,Za);xc(0,Za);Sd(Ph);Yt(Wd);Ea(a[Ta>>2],jv&4294967295,e([Pd,0,0,0,Oe,0,0,0,Yc,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0],y))}}s=gd;Sd(Vc);Wk(Za,4,0);Oh(Za,Wc);Sd(Za);ap(a[Rb>>2],Or,0)}}s=Pa;Zg(0)}f=0==((b=h[K&4294967295],128<=b?b-256:b)|0)?46:47;if(46==f){var wh=K&4294967295;N=hh&4294967295;Kf=wh;for(ia=N+8;N<ia;)h[Kf++]=h[N++]}var Dh=K&4294967295,Nj=s;s+=24;la(Nj,0,24);var ie,Pg,uk,Oj;Af(rn&4294967295,Dh,60);sn(rn&4294967295,0);Oj=Vh&4294967295;var Mf,rf,Nb,Cf;Mf=Nj;rf=Mf+24;Cf=0;0>Cf&&(Cf+=256);for(Cf=Cf+(Cf<<8)+(Cf<<16)+16777216*Cf;0!==Mf%4&&Mf<rf;)h[Mf++]=0;Mf>>=2;for(Nb=rf>>2;Mf<Nb;)a[Mf++]=Cf;for(Mf<<=2;Mf<rf;)h[Mf++]=0;a[(Nj&4294967295)>>2]=Dh;ie=0!=(el(rn&4294967295,1)|0)?1:4;b:do if(1==ie)ie=0!=((b=h[Oj&4294967295],128<=b?b-256:b)|0)?2:3,2==ie&&el(Oj,2),wq(a[M>>2]),Po(Nj),Pg=0;else if(4==ie){ie=0==(a[ff>>2]|0)?5:6;5==ie&&mn(0);var ih=tn(gg&4294967295,rn&4294967295);uk=ih;ie=0!=(ih|0)?7:11;c:do if(7==ie){if(0==(el(a[(uk+8&4294967295)>>2],0)|0)){ie=11;break c}ie=0!=((b=h[Oj&4294967295],128<=b?b-256:b)|0)?9:10;9==ie&&el(Oj,2);wq(a[M>>2]);Po(Nj);Pg=0;break b}while(0);Pg=-1}while(0);var ri=Pg;s=Nj;f=0!=(ri|0)?48:50;a:do if(48==f){var hg;Kf=Cc;ia=Kf+24;hg=0;0>hg&&(hg+=256);for(hg=hg+(hg<<8)+(hg<<16)+16777216*hg;0!==Kf%4&&Kf<ia;)h[Kf++]=0;Kf>>=2;for(Z=ia>>2;Kf<Z;)a[Kf++]=hg;for(Kf<<=2;Kf<ia;)h[Kf++]=0;a[(Cc+4&4294967295)>>2]=K&4294967295;var wk;var Pj=Cc,rj=s;s+=4;la(rj,0,4);var tj=void 0,Pr=void 0,vj=void 0,Ui=void 0,Bk=rj,vj=Pj,Ui=kv(vj,Bk),tj=0==(a[Bk>>2]|0)?1:2;1==tj?Pr=2:2==tj&&(lv(Ui,0),wq(a[M>>2]),Po(vj),Pr=0);var hl=Pr;s=rj;wk=hl;if(0==(wk|0)){f=50;break a}Ea(a[(a[lb>>2]+12&4294967295)>>2],mv&4294967295,e([g,0,0,0,K&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));Zg(2)}while(0);Vi(1,L,0);Vi(2,u,0);Vi(6,a[bl>>2],0);Vi(5,a[Fi>>2],0);Vi(7,z,0);f=50!=(B|0)?51:52;51==f&&Vi(3,B,0);wq(a[M>>2]);f=0==((b=h[D&4294967295],128<=b?b-256:b)|0)?53:59;a:do if(53==f){var Dk=C;f=(a[un>>2]|0)<(F|0)?54:57;if(54==f)if(f=0==(Dk|0)?56:55,56==f)n=a[(m+4*a[un>>2]&4294967295)>>2];else{if(55==f){var ui=a[(a[lb>>2]+4&4294967295)>>2];c=ui;d=55;f=61;break a}}else if(57==f){var yi=a[(a[lb>>2]+4&4294967295)>>2];c=yi;if(0==(Dk|0))d=57;else{d=57;f=61;break a}a[kn>>2]=-1}var Qj=c,d=60}else if(59==f){var zi=pe(D&4294967295,Mh&4294967295);c=zi;d=59}while(0);f=0==((60==d?Qj:55==d?ui:57==d?yi:zi)|0)?62:64;a:do if(62==f){if(0!=(n|0)){f=64;break a}Ea(a[(a[lb>>2]+12&4294967295)>>2],nv&4294967295,e([g,0,0,0,D&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));Zg(1)}while(0);f=0!=(a[Ei>>2]|0)|0!=(a[hm>>2]|0)?65:79;a:do if(65==f){var Jh=a[Jb>>2];f=0!=(a[hm>>2]|0)?66:67;b:do if(66==f)bp(0,Jh),a[Ei>>2]=1;else if(67==f)if(a[Gi>>2]=(60*Jh&4294967295)*a[Gi>>2]&4294967295,f=0!=(a[Gi>>2]|0)?68:71,68==f){var Ug;c:{var Xg=bh&4294967295,Bi=Xg+$(Xg);do{if(46==h[Bi]){Ug=Bi;break c}Bi--}while(Bi>=Xg);Ug=0}iq=Ug;if(0==(iq|0)){f=73;break b}var Ci=$(bh&4294967295);if(!(4>=(((bh&4294967295)+Ci&4294967295)-iq&4294967295|0))){f=73;break b}fa(cp&4294967295,iq);h[iq]=0}else if(71==f){if(0==(bp(bh&4294967295,a[Jb>>2])|0)){f=73;break b}Ea(a[(a[lb>>2]+12&4294967295)>>2],ov&4294967295,e([bh&4294967295,0,0,0],["i8*",0,0,0],y));Zg(3)}while(0);pv(0);vn(c,n,0);for(Yg=1;;){var $k;var Jf=s;s+=1236;la(Jf,0,1236);var Wh=void 0,Dg=void 0,hk=void 0,xq=Jf,Al=Jf+1024,ki=xq&4294967295;a[qv>>2]=ki;a[Na>>2]=ki;a[jh>>2]=(xq&4294967295)+1024&4294967295;var li=void 0,hj=void 0,yq=void 0,kk=void 0,sh=void 0,yq=a[Na>>2],Fl=void 0;var Cb=void 0,tg=null,lj=void 0,id=void 0,ug=void 0,zq=void 0;d:for(;;){if(!(Ma[Na>>2]>>>0<Ma[jh>>2]>>>0)){Cb=36;break d}if(0>=(160-dp()&4294967295|0)){Cb=3;break d}var zq=0,id=Fa+16*a[Xh>>2]&-1,ug=a[(id+4&4294967295)>>2],Df=a[(id&4294967295)>>2],Cb=9==Df?11:5==Df?12:6==Df?15:7==Df?16:4==Df?19:3==Df?20:2==Df?21:1==Df?22:10==Df?23:8==Df?25:11==Df?26:12==Df?27:13==Df?28:14==Df?29:15==Df?31:32;e:do if(11==Cb){var pi=ug,xh=a[(id+8&4294967295)>>2],pk=a[(id+12&4294967295)>>2]>>16,yh=a[(id+12&4294967295)>>2]&65535,Aq=void 0;a[(v&4294967295)>>2]=xh;Aq=0==(xh|0)?1:2;1==Aq&&(a[(v&4294967295)>>2]=wn&4294967295);a[(v+8&4294967295)>>2]=0;Aq=0==(pi|0)?3:4;3==Aq?a[(v+12&4294967295)>>2]=0:4==Aq&&(a[(v+12&4294967295)>>2]=2097152/(pi|0)|0);rv(a[Ya>>2],pk,yh,v+16&4294967295,v+20&4294967295);a[(v+4&4294967295)>>2]=(((l[a[(v&4294967295)>>2]&4294967295]&255)*a[(v+20&4294967295)>>2]&4294967295)>>8)+a[(v+16&4294967295)>>2]&4294967295;a[ep>>2]=a[(a[Ya>>2]+68&4294967295)>>2];Cb=32;break e}else if(12==Cb){Cb=0==(a[Ef>>2]|0)?13:14;13==Cb&&(a[Yh>>2]=a[Yh>>2]-ug&4294967295);a[(v+28&4294967295)>>2]=0;a[(v+60&4294967295)>>2]=100;Jo(1);var ra=sv(ug,a[Ef>>2]),zq=ra,tg=14,Cb=33;break e}else if(15==Cb){a[Yh>>2]=a[Rj>>2];a[(v+28&4294967295)>>2]=0;Jo(1);var Fc,ze=a[(id+8&4294967295)>>2],jc=a[(id+12&4294967295)>>2]&255,zh=a[(id+12&4294967295)>>2]>>8,gf=void 0,Ah=void 0,sf=void 0,Ch=void 0,gf=0==(a[Ef>>2]|0)?1:2;1==gf&&(a[fp>>2]=ug,a[Sj>>2]=0);a[Hi>>2]=0;a[ch>>2]=0;f:for(;;){var qi=a[fp>>2];a[fp>>2]=qi-1&4294967295;if(!(0<(qi|0))){gf=17;break f}var qj=Ma[Sj>>2],Nl=qj+1&4294967295,gf=0==(jc|0)?5:6;if(5==gf){var Ch=h[ze+Nl&4294967295],Rm=l[ze+a[Sj>>2]&4294967295]&255,sf=(256*(b=Ch,128<=b?b-256:b)&4294967295)+Rm&4294967295;a[Sj>>2]=a[Sj>>2]+2&4294967295}else 6==gf&&(a[Sj>>2]=Nl,sf=(b=h[ze+qj&4294967295],128<=b?b-256:b)*jc&4294967295);var sf=(a[kh>>2]*a[pm>>2]&4294967295)*sf&4294967295,sf=sf>>10,sf=(zh*sf&4294967295|0)/32|0,Zh=a[Xd>>2];a[Xd>>2]=Zh+1&4294967295;var je=(((b=t[(lh+2*Zh&4294967295)>>1],32768<=b?b-65536:b)*a[Wi>>2]&4294967295)>>8)+sf&4294967295,sf=je,gf=32767<(je|0)?8:9;g:do if(8==gf)sf=32768;else if(9==gf){if(!(-32768>(sf|0)))break g;sf=-32768}while(0);gf=5500<=(a[Xd>>2]|0)?12:13;12==gf&&(a[Xd>>2]=0);h[a[Na>>2]&4294967295]=sf&255;h[a[Na>>2]+
1&4294967295]=sf>>8&255;a[Na>>2]=a[Na>>2]+2&4294967295;var Sm=((3*sf&4294967295|0)/4|0)&65535,tv=a[uc>>2];a[uc>>2]=tv+1&4294967295;t[(lh+2*tv&4294967295)>>1]=Sm;gf=5500<=(a[uc>>2]|0)?14:15;14==gf&&(a[uc>>2]=0);if(Ma[Na>>2]>>>0>=Ma[jh>>2]>>>0){gf=16;break f}else gf=3}17==gf?Ah=0:16==gf&&(Ah=1);zq=Fc=Ah;tg=15;Cb=33;break e}else if(16==Cb){a[(v+36&4294967295)>>2]=a[(id+12&4294967295)>>2]>>8;a[(v+32&4294967295)>>2]=a[(id+12&4294967295)>>2]&255;a[(v+28&4294967295)>>2]=ug&65535;a[(v+44&4294967295)>>2]=ug>>16&65535;Cb=0==(a[(v+32&4294967295)>>2]|0)?17:18;17==Cb&&(a[(v+28&4294967295)>>2]=2*a[(v+28&4294967295)>>2]&4294967295,a[(v+44&4294967295)>>2]=2*a[(v+44&4294967295)>>2]&4294967295);a[(v+40&4294967295)>>2]=0;a[(v+48&4294967295)>>2]=0;a[(v+24&4294967295)>>2]=a[(id+8&4294967295)>>2];Cb=32;break e}else if(19==Cb){a[(v+28&4294967295)>>2]=0;Cb=20;break e}else if(21==Cb){a[(v+28&4294967295)>>2]=0;Cb=22;break e}else if(23==Cb){bu(a[(id+4&4294967295)>>2],a[(id+8&4294967295)>>2],a[(id+12&4294967295)>>2],a[Na>>2]);if(1!=(a[(id+4&4294967295)>>2]|0)){Cb=32;break e}a[uv>>2]=a[(id+8&4294967295)>>2]&16777215;Cb=32;break e}else if(25==Cb){var Ol=ug,il=a[(id+8&4294967295)>>2],YH=a[(id+12&4294967295)>>2],jl=void 0;a[qm>>2]=0;jl=0==(Ol|0)?1:2;1==jl?a[xn>>2]=0:2==jl&&(a[xn>>2]=2097152/(Ol|0)|0);a[(v+52&4294967295)>>2]=(a[kh>>2]*YH&4294967295|0)/16|0;a[(v+56&4294967295)>>2]=((15*a[(v+52&4294967295)>>2]&4294967295)*a[(a[Ya>>2]+104&4294967295)>>2]&4294967295|0)/100|0;a[gp>>2]=il;Cb=32;break e}else if(26==Cb){var yk=a[(id+4&4294967295)>>2],Tj=void 0,Nf=void 0,$h=void 0,qr=void 0,Pl=void 0,Nf=yk,$h=hp&4294967295,qr=Nf+1344;if($h%4==Nf%4){for(;0!==Nf%4&&Nf<qr;)h[$h++]=h[Nf++];Nf>>=2;$h>>=2;for(Pl=qr>>2;Nf<Pl;)a[$h++]=a[Nf++];Nf<<=2;$h<<=2}for(;Nf<qr;)h[$h++]=h[Nf++];a[Ya>>2]=hp;Tj=0==(a[(yk+88&4294967295)>>2]|0)?1:2;1==Tj?a[Ki>>2]=vv&4294967295:2==Tj&&(a[Ki>>2]=Io&4294967295);a[pm>>2]=(26*a[(yk+100&4294967295)>>2]&4294967295|0)/100|0;Tj=11E3>=(a[Jb>>2]|0)?4:5;4==Tj&&(a[pm>>2]=2*a[pm>>2]&4294967295,h[ip]=1);Bq();wv();bu(8,0,a[(a[Ya>>2]+108&4294967295)>>2],a[Na>>2]);Cb=32;break e}else if(27==Cb){Qr(a[(id+4&4294967295)>>2],a[(id+8&4294967295)>>2]);Cb=32;break e}else if(28==Cb){var Ql,Uj=void 0,zk=void 0,rr=void 0,Uj=0!=(a[Ef>>2]|0)?2:1;1==Uj&&(a[Vj>>2]=(ug*a[Jb>>2]&4294967295|0)/1E3|0);rr=(a[jh>>2]-a[Na>>2]&4294967295|0)/2|0;Uj=(rr|0)>(a[Vj>>2]|0)?3:4;3==Uj&&(rr=a[Vj>>2]);var uj=void 0;var rm=void 0,rm=xv(a[Na>>2],2*rr&4294967295);1==(0<(rm|0)?1:2)&&(rm=(rm|0)/2|0);uj=rm;Uj=0>=(uj|0)?5:6;5==Uj?zk=0:6==Uj&&(a[Na>>2]=a[Na>>2]+(2*uj&4294967295)&4294967295,a[Vj>>2]=a[Vj>>2]-uj&4294967295,zk=0!=(a[Vj>>2]|0)?1:0);zq=Ql=zk;tg=28;Cb=33;break e}else if(29==Cb){var Rl=a[(id+4&4294967295)>>2];a[(v+60&4294967295)>>2]=Rl;if(0!=(Rl|0)){Cb=32;break e}a[(v+60&4294967295)>>2]=100;Cb=32;break e}else if(31==Cb){q[sm>>2]=(a[(id+4&4294967295)>>2]|0)/1024;Cb=32;break e}while(0);if(32==Cb)var Wm=zq,tg=32;else if(20==Cb){a[Yh>>2]=a[Rj>>2];var Sl;if(1==(0==(a[Ef>>2]|0)?1:2)){var Ym=ug&65535,kl=a[(id+4&4294967295)>>2]>>16,sr=a[(id+8&4294967295)>>2],Tg=a[(id+12&4294967295)>>2],ig=a[Ya>>2],ke=void 0,Wj=null,Ob=void 0,rd=void 0,vg=void 0,ai=void 0,wg=void 0,tm=void 0;h[jp]=1;a[yn>>2]=kl&255;a[Re>>2]=0;ke=0!=(kl&1024|0)?1:2;1==ke&&(a[Re>>2]=3,a[zn>>2]=a[(yv+4*(kl>>8&3)&4294967295)>>2]);ke=0!=(kl&2048|0)?3:4;3==ke&&(a[Re>>2]=4,a[zn>>2]=a[(zv+4*(kl>>8&3)&4294967295)>>2]);var wi=a[Xh>>2]+1&4294967295,wg=wi,Wj=4;e:for(;;){ke=160<=((11==Wj?An:wi)|0)?6:7;6==ke&&(wg=0);if((wg|0)==(a[V>>2]|0)){ke=12;break e}tm=a[(Fa+16*wg&-1)>>2];if(3==(tm|0)){ke=9;break e}if(6==(tm|0)|5==(tm|0)){ke=12;break e}var An=wg+1&4294967295,wg=An,Wj=11,ke=5}9==ke&&(h[jp]=0);var xi=Ym+32&-64,vg=xi,ke=0==(xi|0)?13:14;13==ke&&(vg=64);a[kp>>2]=a[ch>>2];a[Hi>>2]=a[Hi>>2]+vg&4294967295;var ai=(vg|0)/4|0,xj=7800*(b=t[((ig+144&4294967295)+14&4294967295)>>1],32768<=b?b-65536:b)&4294967295,yj=((256*(b=t[((ig+198&4294967295)+14&4294967295)>>1],32768<=b?b-65536:b)&4294967295)+xj&4294967295)<<8;a[(oa+560&4294967295)>>2]=yj;var zj=9E3*(b=t[((ig+144&4294967295)+
16&4294967295)>>1],32768<=b?b-65536:b)&4294967295,um=((256*(b=t[((ig+198&4294967295)+16&4294967295)>>1],32768<=b?b-65536:b)&4294967295)+zj&4294967295)<<8;a[(oa+640&4294967295)>>2]=um;Ob=0;Wj=14;e:for(;;){ke=7>((14==Wj?0:yl)|0)?16:17;if(16==ke){var Pk=(b=t[((sr+2&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b),Aj=(b=t[((ig+144&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b)*Pk&4294967295,sd=((256*(b=t[((ig+198&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b)&4294967295)+Aj&4294967295)<<8|0;q[((oa+80*Ob&4294967295)+16&4294967295)>>2]=sd;a[(oa+80*Ob&-1)>>2]=q[((oa+80*Ob&4294967295)+16&4294967295)>>2]|0;var Bn=(b=t[((Tg+2&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b),vm=(b=t[((ig+144&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b)*Bn&4294967295,rd=((256*(b=t[((ig+198&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b)&4294967295)+vm&4294967295)<<8|0;q[((oa+80*Ob&4294967295)+48&4294967295)>>2]=16*(rd-q[((oa+80*Ob&4294967295)+16&4294967295)>>2])/(ai|0)}var wm=l[(sr+18&4294967295)+
Ob&4294967295]&255,Sk=(b=t[((ig+162&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b);q[((oa+80*Ob&4294967295)+24&4294967295)>>2]=(64*wm&4294967295)*Sk&4294967295|0;a[((oa+80*Ob&4294967295)+4&4294967295)>>2]=q[((oa+80*Ob&4294967295)+24&4294967295)>>2]|0;var mh=l[(Tg+18&4294967295)+Ob&4294967295]&255,Bj=(b=t[((ig+162&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b),rd=(64*mh&4294967295)*Bj&4294967295|0;q[((oa+80*Ob&4294967295)+56&4294967295)>>2]=64*(rd-q[((oa+80*Ob&4294967295)+24&4294967295)>>2])/(vg|0);ke=5>=(Ob|0)?18:22;f:do if(18==ke){if(!((Ob|0)<=(a[(a[Ya>>2]+84&4294967295)>>2]|0)))break f;var Cj=l[(sr+26&4294967295)+Ob&4294967295]&255,ZH=(b=t[((ig+180&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b);q[((oa+80*Ob&4294967295)+32&4294967295)>>2]=(1024*Cj&4294967295)*ZH&4294967295|0;a[((oa+80*Ob&4294967295)+8&4294967295)>>2]=q[((oa+80*Ob&4294967295)+32&4294967295)>>2]|0;var $H=l[(Tg+26&4294967295)+Ob&4294967295]&255,Tk=(b=t[((ig+180&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b),rd=(1024*$H&4294967295)*Tk&4294967295|0;q[((oa+80*Ob&4294967295)+64&4294967295)>>2]=64*(rd-q[((oa+80*Ob&4294967295)+32&4294967295)>>2])/(vg|0);var Fj=Ob,ke=3>(Ob|0)?20:21;if(20==ke){var Yk=l[(sr+32&4294967295)+Fj&4294967295]&255,Zk=(b=t[((ig+180&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b);q[((oa+80*Ob&4294967295)+40&4294967295)>>2]=(1024*Yk&4294967295)*Zk&4294967295|0;a[((oa+80*Ob&4294967295)+12&4294967295)>>2]=q[((oa+80*Ob&4294967295)+40&4294967295)>>2]|0;var ek=l[(Tg+32&4294967295)+
Ob&4294967295]&255,fk=(b=t[((ig+180&4294967295)+2*Ob&4294967295)>>1],32768<=b?b-65536:b),rd=(1024*ek&4294967295)*fk&4294967295|0;q[((oa+80*Ob&4294967295)+72&4294967295)>>2]=64*(rd-q[((oa+80*Ob&4294967295)+40&4294967295)>>2])/(vg|0)}else 21==ke&&(a[((oa+80*Ob&4294967295)+12&4294967295)>>2]=a[((oa+80*Fj&4294967295)+8&4294967295)>>2])}while(0);var yl=Ob+1&4294967295,Ob=yl;if(8>(yl|0))Wj=22;else break e}}var $a=void 0,Rr=null,tr=void 0,Cn=void 0,bi=void 0,Of=void 0,Se=void 0,Sr=void 0,Xj=void 0,Yj=void 0,xm=void 0,fj=void 0,ll=void 0,ci=void 0,jk=void 0,Bl=void 0,Ig=void 0,Tr=void 0,ml=void 0;e:for(;;){var Dn=a[ch>>2];if(0==(l[jp]&1|0)&(Dn|0)==(a[Hi>>2]|0)){$a=2;break e}$a=0==(Dn&63|0)?4:8;f:do if(4==$a){$a=0==(Dn|0)?5:6;if(5==$a){a[nl>>2]=0;a[Zj>>2]=En&4294967295;var Dl=Av(oa&4294967295,a[(v+4&4294967295)>>2]<<4,En&4294967295,0);a[Fn>>2]=Dl;a[Ae>>2]=((a[(v+60&4294967295)>>2]*a[(v+52&4294967295)>>2]&4294967295)*(a[(v+4&4294967295)>>2]>>8)&4294967295|0)/8E4|0;a[lp>>2]=890/(a[(v+4&4294967295)>>2]>>12|0)|0}else if(6==$a){var Yd=void 0,Xi=null,Gn=void 0,zc=void 0;a[(v+8&4294967295)>>2]=a[(v+8&4294967295)>>2]+a[(v+12&4294967295)>>2]&4294967295;var qh=a[(v+8&4294967295)>>2]>>8,zc=qh,Yd=127<(qh|0)?1:2;1==Yd&&(zc=127);Gn=(l[a[(v&4294967295)>>2]+zc&4294967295]&255)*a[(v+20&4294967295)>>2]&4294967295;a[(v+4&4294967295)>>2]=(Gn>>8)+a[(v+16&4294967295)>>2]&4294967295;a[qm>>2]=a[qm>>2]+a[xn>>2]&4294967295;Yd=23552<=(a[ym>>2]|0)?3:4;3==Yd&&(a[ym>>2]=0);Gn=((l[Bv+(a[ym>>2]>>6)&4294967295]&255)-128&4294967295)*a[ep>>2]&4294967295;a[ym>>2]=a[ym>>2]+a[nn>>2]&4294967295;var gj=a[(v+4&4294967295)>>2]+Gn&4294967295;a[(v+4&4294967295)>>2]=gj;Yd=102400>(gj|0)?5:6;5==Yd&&(a[(v+4&4294967295)>>2]=102400);Yd=(a[ch>>2]|0)==(a[kp>>2]|0)?21:7;h:do if(7==Yd){var ij=zc=0;(ij|0)<=(a[(a[Ya>>2]+84&4294967295)>>2]|0)?(Xi=7,Yd=9):(Xi=7,Yd=8);i:do if(9==Yd)for(;;){var th=(oa+80*zc&4294967295)+16&4294967295;q[th>>2]+=q[((oa+80*zc&4294967295)+48&4294967295)>>2];a[(oa+80*zc&-1)>>2]=q[((oa+80*zc&4294967295)+16&4294967295)>>2]|0;var Km=(oa+80*zc&4294967295)+24&4294967295;q[Km>>2]+=q[((oa+80*zc&4294967295)+56&4294967295)>>2];var Lm=q[((oa+80*zc&4294967295)+24&4294967295)>>2]|0;a[((oa+80*zc&4294967295)+4&4294967295)>>2]=Lm;Yd=0>(Lm|0)?10:11;10==Yd&&(a[((oa+80*zc&4294967295)+4&4294967295)>>2]=0);var oi=(oa+80*zc&4294967295)+32&4294967295;q[oi>>2]+=q[((oa+80*zc&4294967295)+64&4294967295)>>2];a[((oa+80*zc&4294967295)+8&4294967295)>>2]=q[((oa+80*zc&4294967295)+32&4294967295)>>2]|0;var Mm=oa+80*zc&4294967295,Yd=3>(zc|0)?12:13;if(12==Yd){var Nm=(oa+80*zc&4294967295)+40&4294967295;q[Nm>>2]+=q[(Mm+72&4294967295)>>2];a[((oa+80*zc&4294967295)+12&4294967295)>>2]=q[((oa+80*zc&4294967295)+40&4294967295)>>2]|0}else 13==Yd&&(a[((oa+80*zc&4294967295)+12&4294967295)>>2]=a[(Mm+8&4294967295)>>2]);var Om=zc=zc+1&4294967295;if((Om|0)<=(a[(a[Ya>>2]+84&4294967295)>>2]|0))Xi=14,Yd=9;else{Xi=14;Yd=8;break i}}while(0);if(!(8>((7==Xi?ij:Om)|0)))break h;for(var eo=zc,Xi=15;;){Yd=7>((15==Xi?eo:mp)|0)?17:18;if(17==Yd){var vh=(oa+80*zc&4294967295)+16&4294967295;q[vh>>2]+=q[((oa+80*zc&4294967295)+48&4294967295)>>2];a[(oa+80*zc&-1)>>2]=q[((oa+80*zc&4294967295)+16&4294967295)>>2]|0}var mj=(oa+80*zc&4294967295)+24&4294967295;q[mj>>2]+=q[((oa+80*zc&4294967295)+56&4294967295)>>2];var nj=q[((oa+80*zc&4294967295)+24&4294967295)>>2]|0;a[((oa+80*zc&4294967295)+4&4294967295)>>2]=nj;Yd=0>(nj|0)?19:20;19==Yd&&(a[((oa+80*zc&4294967295)+4&4294967295)>>2]=0);var mp=zc+1&4294967295,zc=mp;if(8>(mp|0))Xi=20,Yd=16;else break h}}while(0)}a[np>>2]=(a[(v+4&4294967295)>>2]>>7)*a[mq>>2]&4294967295;a[op>>2]=(a[Jb>>2]|0)/(a[(v+4&4294967295)>>2]>>12|0)|0;a[pp>>2]=a[(v+4&4294967295)>>2]>>11;a[Hn>>2]=a[Fn>>2];a[Zj>>2]=En+1600*a[nl>>2]&-1;a[nl>>2]^=1;var qk=Av(oa&4294967295,a[(v+4&4294967295)>>2]<<4,En+1600*a[nl>>2]&-1,1);a[Fn>>2]=qk;var zm=void 0,ol=void 0,zm=0==(a[(a[Ya>>2]+272&-1)>>2]|0)?5:1;h:do if(1==zm)for(ol=1;;){zm=0!=(a[((a[Ya>>2]+272&4294967295)+4*ol&4294967295)>>2]|0)?3:4;3==zm&&Cv(In+40*ol&4294967295,a[(oa+80*ol&-1)>>2]>>16,a[((a[Ya>>2]+308&4294967295)+4*ol&4294967295)>>2],0);var oj=ol+1&4294967295,ol=oj;if(9>(oj|0))zm=2;else break h}while(0)}else if(8==$a){if(0!=(Dn&7|0))break f;Se=1;for(Rr=9;;){if(!(30>((13==Rr?sk:1)|0))){$a=14;break}if(!((Se|0)<=(a[Fn>>2]|0))){$a=14;break}if(!((Se|0)<=(a[Hn>>2]|0))){$a=14;break}var rk=a[Zj>>2]+4*Se&4294967295;a[rk>>2]=a[rk>>2]+a[(qp+4*Se&4294967295)>>2]&4294967295;var sk=Se+1&4294967295,Se=sk,Rr=13,$a=10}if(!(256>(a[xg>>2]|0)))break f;a[xg>>2]=a[xg>>2]+1&4294967295}while(0);a[ch>>2]=a[ch>>2]+1&4294967295;var Ml=0<(a[Ii>>2]|0);a[Ii>>2]=a[Ii>>2]+a[np>>2]&4294967295;$a=Ml&0>(a[Ii>>2]|0)?17:38;f:do if(17==$a){a[Am>>2]=a[Fo>>2]-((a[op>>2]|0)/2|0)&4294967295;if((a[ch>>2]|0)>(a[Hi>>2]|0)){$a=18;break e}a[Jn>>2]=a[Jn>>2]+1&4294967295;var tk=a[(a[Ya>>2]+84&4294967295)>>2]+1&4294967295,ci=tk,$a=9>(tk|0)?20:21;g:do if(20==$a)for(;;){a[(Kn+4*ci&4294967295)>>2]=(a[(oa+80*ci&-1)>>2]|0)/(16*a[(v+4&4294967295)>>2]&4294967295|0)|0;var pj=ci+1&4294967295,ci=pj;if(9>(pj|0))$a=20;else break g}while(0);a[Ae>>2]=((a[(v+60&4294967295)>>2]*a[(v+52&4294967295)>>2]&4294967295)*(a[(v+4&4294967295)>>2]>>8)&4294967295|0)/8E4|0;$a=0<(a[Re>>2]|0)?22:28;g:do if(22==$a)if($a=3==(a[Re>>2]|0)?23:25,23==$a){if(!((a[Hi>>2]-a[ch>>2]&4294967295|0)<(2*a[op>>2]&4294967295|0)))break g;a[Re>>2]=2;a[Ae>>2]=(a[zn>>2]*a[Ae>>2]&4294967295|0)/256|0}else 25==$a&&($a=4==(a[Re>>2]|0)?26:27,26==$a?(a[Re>>2]=2,a[Ae>>2]=(a[zn>>2]*a[Ae>>2]&4294967295|0)/256|0):27==$a&&(a[Re>>2]=a[Re>>2]-1&4294967295));while(0);$a=0!=(a[gp>>2]|0)?29:32;if(29==$a){var vk=a[qm>>2]>>8,Sr=vk,$a=127<(vk|0)?30:31;30==$a&&(Sr=127);Ig=l[a[gp>>2]+Sr&4294967295]&255;a[Ae>>2]=(Ig*a[Ae>>2]&4294967295|0)/128|0}if(!(8>(a[(a[M>>2]+72&4294967295)>>2]|0)))break f;var ml=l[(Dv+8*a[(a[M>>2]+72&4294967295)>>2]&4294967295)+a[yn>>2]&4294967295]&255,Tr=ml&15,Qm=ml>>4,ml=Qm;if(0==(Qm|0))break f;$a=15==(ml|0)?35:36;if(35==$a)a[Ae>>2]=(Tr*a[Ae>>2]&4294967295|0)/16|0,a[yn>>2]=0;else if(36==$a){if(0!=((a[Jn>>2]|0)%(ml|0)|0))break f;a[Ae>>2]=(Tr*a[Ae>>2]&4294967295|0)/16|0}}while(0);var Cn=a[Ii>>2]>>16&65535,Of=0,Tm=a[Am>>2]+1&4294967295;a[Am>>2]=Tm;$a=0<=(Tm|0)?39:43;f:do if(39==$a){if(!((a[Am>>2]|0)<(a[Ji>>2]|0)))break f;var Um=a[(a[Ya>>2]+84&4294967295)>>2]+1&4294967295,ci=Um,$a=9>(Um|0)?41:42;g:do if(41==$a)for(;;){var bi=(Cn&65535)*a[(Kn+4*ci&4294967295)>>2]&65535,io=(b=t[(Ln+2*((bi&65535)>>5)&4294967295)>>1],32768<=b?b-65536:b),Of=Of+(a[(Mn+4*ci&4294967295)>>2]*io&4294967295)&4294967295,Vm=ci+1&4294967295,ci=Vm;if(9>(Vm|0))$a=41;else{$a=42;break g}}while(0);Of=(l[Ho+a[Am>>2]&4294967295]&255)*((Of|0)/(a[pp>>2]|0)|0)&4294967295}while(0);bi=Cn;Se=1;$a=(Se|0)<=(a[lp>>2]|0)?44:45;f:do if(44==$a)for(;;){var jo=(b=t[(Ln+2*((bi&65535)>>5)&4294967295)>>1],32768<=b?b-65536:b),Of=Of+(a[(a[Zj>>2]+4*Se&4294967295)>>2]*jo&4294967295)&4294967295,bi=(bi&65535)+(Cn&65535)&65535,Se=Se+1&4294967295;if((Se|0)<=(a[lp>>2]|0))$a=44;else break f}while(0);$a=(Se|0)<=(a[Hn>>2]|0)?46:47;f:do if(46==$a)for(;;){var ko=(b=t[(Ln+2*((bi&65535)>>5)&4294967295)>>1],32768<=b?b-65536:b),Of=Of-(a[(a[Zj>>2]+4*Se&4294967295)>>2]*ko&4294967295)&4294967295,bi=(bi&65535)+(Cn&65535)&65535,Se=Se+1&4294967295;if((Se|0)<=(a[Hn>>2]|0))$a=46;else break f}while(0);$a=64!=(a[rp>>2]|0)?48:49;48==$a&&(Of=(Of>>6)*a[rp>>2]&4294967295);$a=0!=(a[(a[Ya>>2]+272&-1)>>2]|0)?50:51;if(50==$a){var sp;for(var Xm=void 0,Nn=void 0,Ik=void 0,Bm=void 0,tp=void 0,Nn=0,Ik=(au()&16383)-8192&4294967295,Bm=1;;){var Jk=a[((a[Ya>>2]+272&4294967295)+4*Bm&4294967295)>>2],tp=Jk,Xm=0!=(Jk|0)?2:3;if(2==Xm){var tp=tp*(a[((oa+80*Bm&4294967295)+4&4294967295)>>2]>>14)&4294967295,La=In+40*Bm&4294967295,vi=void 0,vi=q[(La&4294967295)>>2]*(Ik|0)+q[(La+8&4294967295)>>2]*q[(La+24&4294967295)>>2]+q[(La+16&4294967295)>>2]*q[(La+32&4294967295)>>2];q[(La+32&4294967295)>>2]=q[(La+24&4294967295)>>2];q[(La+24&4294967295)>>2]=vi;Nn=(vi*(tp|0)|0)+Nn&4294967295}var Kk=Bm+1&4294967295,Bm=Kk;if(!(9>(Kk|0)))break}sp=Nn;Of=Of+sp&4294967295}xm=0;$a=(a[(v+40&4294967295)>>2]|0)<(a[(v+28&4294967295)>>2]|0)?52:57;f:do if(52==$a){$a=0==(a[(v+32&4294967295)>>2]|0)?53:54;if(53==$a){var jk=h[a[(v+24&4294967295)>>2]+((a[(v+40&4294967295)>>2]+1&4294967295)+a[(v+48&4294967295)>>2]&4294967295)&4294967295],Lk=l[a[(v+24&4294967295)>>2]+(a[(v+48&4294967295)>>2]+a[(v+40&4294967295)>>2]&4294967295)&4294967295]&255,Bl=(256*(b=jk,128<=b?b-256:b)&4294967295)+Lk&4294967295;a[(v+40&4294967295)>>2]=a[(v+40&4294967295)>>2]+2&4294967295}else if(54==$a){var Mk=a[(v+48&4294967295)>>2],Nk=a[(v+40&4294967295)>>2];a[(v+40&4294967295)>>2]=Nk+1&4294967295;Bl=(b=h[a[(v+24&4294967295)>>2]+(Nk+Mk&4294967295)&4294967295],128<=b?b-256:b)*a[(v+32&4294967295)>>2]&4294967295}xm=(a[(v+56&4294967295)>>2]*Bl&4294967295)>>10;xm=(a[(v+36&4294967295)>>2]*xm&4294967295|0)/32|0;if(!((a[(v+48&4294967295)>>2]+a[(v+40&4294967295)>>2]&4294967295|0)>=(a[(v+44&4294967295)>>2]|0)))break f;a[(v+48&4294967295)>>2]=a[(v+48&4294967295)>>2]-((3*a[(v+44&4294967295)>>2]&4294967295|0)/4|0)&4294967295}while(0);var Yj=(((Of>>8)*a[Ae>>2]&4294967295)>>13)+xm&4294967295,Ok=a[Xd>>2];a[Xd>>2]=Ok+1&4294967295;fj=(b=t[(lh+2*Ok&4294967295)>>1],32768<=b?b-65536:b)*a[Wi>>2]&4294967295;Yj=Yj+(fj>>8)&4294967295;$a=5500<=(a[Xd>>2]|0)?58:59;58==$a&&(a[Xd>>2]=0);var Qk=(a[xg>>2]*Yj&4294967295)>>8,Xj=Qk,$a=32768<=(Qk|0)?60:63;f:do if(60==$a)ll=(8388608/(Yj|0)|0)-1&4294967295,$a=(ll|0)<(a[xg>>2]|0)?61:62,61==$a&&(a[xg>>2]=ll),Xj=(a[xg>>2]*Yj&4294967295)>>8;else if(63==$a){if(!(-32768>=(Xj|0)))break f;ll=(-8388608/(Yj|0)|0)-1&4294967295;$a=(ll|0)<(a[xg>>2]|0)?65:66;65==$a&&(a[xg>>2]=ll);Xj=(a[xg>>2]*Yj&4294967295)>>8}while(0);var am=Xj&255,Rk=a[Na>>2];a[Na>>2]=Rk+1&4294967295;h[Rk]=am;var Dj=Xj>>8&255,Cq=a[Na>>2];a[Na>>2]=Cq+1&4294967295;h[Cq]=Dj;var Ej=Xj&65535,Dq=a[uc>>2];a[uc>>2]=Dq+1&4294967295;t[(lh+2*Dq&4294967295)>>1]=Ej;$a=5500<=(a[uc>>2]|0)?68:69;68==$a&&(a[uc>>2]=0);if(Ma[Na>>2]>>>0>=Ma[jh>>2]>>>0){$a=70;break e}else $a=1}2==$a?tr=0:18==$a?tr=0:70==$a&&(tr=1);Sl=tr;tg=20}else if(22==Cb){a[Yh>>2]=a[Rj>>2];var Uk,pl=ug&65535,Eq=a[Ef>>2],di=a[(id+8&4294967295)>>2],Yi=a[(id+12&4294967295)>>2];if(1==(0==(Eq|0)?1:2)){var On=a[Ya>>2];var Mc=void 0,yg=null,ib=void 0,nh=void 0,ql=void 0,up=void 0,Fq=void 0,Mc=0!=(a[Ya>>2]|0)?1:5;if(1==Mc){Mc=0<(a[(a[Ya>>2]+112&-1)>>2]|0)?2:4;f:do if(2==Mc){if(!(3>=(a[(a[Ya>>2]+112&-1)>>2]|0)))break f;a[(x+20&4294967295)>>2]=a[(a[Ya>>2]+112&-1)>>2];a[(x+184&4294967295)>>2]=a[(nq+4*a[(x+20&4294967295)>>2]&4294967295)>>2]}while(0);a[(x+24&4294967295)>>2]=(a[(a[Ya>>2]+68&4294967295)>>2]|0)/32|0}a[ei>>2]=0;Mc=7;6==Mc&&(a[ei>>2]=1);Mc=8;f:do if(8==Mc){a[ei>>2]=1;var Gq=a[Xh>>2]+1&4294967295,ql=Gq,yg=8;g:for(;;){Mc=160<=((19==yg?Hq:Gq)|0)?10:11;10==Mc&&(ql=0);if((ql|0)==(a[V>>2]|0))break f;up=a[(Fa+16*ql&-1)>>2];if(1==(up|0)){Mc=13;break g}if(6==(up|0)|5==(up|0))break f;var Hq=ql+1&4294967295,ql=Hq,yg=19,Mc=9}a[ei>>2]=0;Fq=a[((Fa+16*ql&4294967295)+8&4294967295)>>2];ib=1;for(yg=13;;){if(!(6>((17==yg?Iq:1)|0)))break f;var fm=(b=t[((Fq+2&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b),al=(b=t[((Yi+2&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b);if((fm|0)!=(al|0)){Mc=16;break}var Iq=ib+1&4294967295,ib=Iq,yg=17,Mc=14}a[ei>>2]=2}while(0);Mc=21;if(21==Mc){ib=1;for(yg=21;;){if(!(6>((25==yg?bo:1)|0))){Mc=26;break}var zg=(b=t[((vp+2&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b),xl=(b=t[((di+2&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b);if((zg|0)!=(xl|0)){Mc=24;break}var bo=ib+1&4294967295,ib=bo,yg=25,Mc=22}24==Mc&&Jo(0);var Zd=void 0,W=void 0,re=void 0,wp=void 0,Zd=Yi,W=vp,re=Zd+64;if(W%4==Zd%4){for(;0!==Zd%4&&Zd<re;)h[W++]=h[Zd++];Zd>>=2;W>>=2;for(wp=re>>2;Zd<wp;)a[W++]=a[Zd++];Zd<<=2;W<<=2}for(;Zd<re;)h[W++]=h[Zd++]}ib=0;yg=27;f:for(;;){Mc=5<=((27==yg?0:Gc)|0)?29:31;g:do if(29==Mc){if(0!=((b=t[(di&4294967295)>>1],32768<=b?b-65536:b)&1|0)){Mc=31;break g}a[(hf+4*ib&4294967295)>>2]=0;q[(Pn+8*ib&4294967295)>>2]=0;q[(Qn+8*ib&4294967295)>>2]=0;Mc=32;break g}while(0);if(31==Mc){var bc=l[(di+39&4294967295)+ib&4294967295]&255;a[(hf+4*ib&4294967295)>>2]=bc;q[(Pn+8*ib&4294967295)>>2]=bc|0;q[(Qn+8*ib&4294967295)>>2]=(64*((l[(Yi+39&4294967295)+ib&4294967295]&255)-a[(hf+4*ib&4294967295)>>2]&4294967295)&4294967295|0)/(pl|0)}var Gc=ib+1&4294967295,ib=Gc;if(10>(Gc|0))yg=32;else break f}a[xp>>2]=pl;ib=1;f:for(;;){var Be=(b=t[((di+2&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b),Hc=((b=t[((On+144&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b)*Be&4294967295|0)/256,Ac=(b=t[((On+198&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b)|0;q[((xa+80*ib&4294967295)+16&4294967295)>>2]=Hc+Ac;a[(xa+80*ib&-1)>>2]=q[((xa+80*ib&4294967295)+16&4294967295)>>2]|0;var Cm=(b=t[((Yi+
2&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b),zl=((b=t[((On+144&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b)*Cm&4294967295|0)/256,rl=(b=t[((On+198&4294967295)+2*ib&4294967295)>>1],32768<=b?b-65536:b)|0,nh=zl+rl;q[((xa+80*ib&4294967295)+48&4294967295)>>2]=64*(nh-q[((xa+80*ib&4294967295)+16&4294967295)>>2])/(pl|0);Mc=4>(ib|0)?35:36;35==Mc&&(q[((xa+80*ib&4294967295)+24&4294967295)>>2]=2*(l[(di+35&4294967295)+ib&4294967295]&255)&4294967295|0,a[((xa+80*ib&4294967295)+4&4294967295)>>2]=q[((xa+80*ib&4294967295)+24&4294967295)>>2]|0,nh=2*(l[(Yi+35&4294967295)+ib&4294967295]&255)&4294967295|0,q[((xa+80*ib&4294967295)+56&4294967295)>>2]=64*(nh-q[((xa+80*ib&4294967295)+24&4294967295)>>2])/(pl|0));var sl=ib+1&4294967295,ib=sl;if(!(6>(sl|0)))break f}q[(xa+16&4294967295)>>2]=2*(l[(di+39&4294967295)+1&4294967295]&255)&4294967295|0;Mc=0==q[(xa+16&4294967295)>>2]?38:39;38==Mc&&(q[(xa+16&4294967295)>>2]=a[(sb+8+36&4294967295)>>2]|0);a[(xa&4294967295)>>2]=q[(xa+16&4294967295)>>2]|0;var $j=2*(l[(Yi+39&4294967295)+1&4294967295]&255)&4294967295|0,nh=$j,Mc=0==$j?40:41;40==Mc&&(nh=a[(sb+8+36&4294967295)>>2]|0);q[(xa+48&4294967295)>>2]=64*(nh-q[(xa+16&4294967295)>>2])/(pl|0);q[(xa+24&4294967295)>>2]=89;a[(xa+4&4294967295)>>2]=89;q[(xa+56&4294967295)>>2]=0;Mc=0!=((b=t[(di&4294967295)>>1],32768<=b?b-65536:b)&1|0)?42:44;f:do if(42==Mc)for(ib=1;;){q[((xa+80*ib&4294967295)+40&4294967295)>>2]=4*(l[(di+56&4294967295)+ib&4294967295]&255)&4294967295|0;a[((xa+80*ib&4294967295)+12&4294967295)>>2]=q[((xa+
80*ib&4294967295)+40&4294967295)>>2]|0;nh=2*(l[(Yi+56&4294967295)+ib&4294967295]&255)&4294967295|0;q[((xa+80*ib&4294967295)+72&4294967295)>>2]=64*(nh-q[((xa+80*ib&4294967295)+40&4294967295)>>2])/(pl|0);q[((xa+80*ib&4294967295)+32&4294967295)>>2]=l[(di+49&4294967295)+ib&4294967295]&255;a[((xa+80*ib&4294967295)+8&4294967295)>>2]=q[((xa+80*ib&4294967295)+32&4294967295)>>2]|0;nh=2*(l[(Yi+49&4294967295)+ib&4294967295]&255)&4294967295|0;q[((xa+80*ib&4294967295)+64&4294967295)>>2]=64*(nh-q[((xa+80*ib&4294967295)+
32&4294967295)>>2])/(pl|0);var Rn=ib+1&4294967295,ib=Rn;if(7>(Rn|0))Mc=43;else break f}while(0)}var jg=void 0;var Te=void 0,fi=void 0,se=void 0,Yb=void 0,Zc=void 0,Te=0==(Eq|0)?1:2;1==Te&&(a[eg>>2]=0);f:for(;;){if(!((a[eg>>2]|0)<(a[xp>>2]|0))){Te=23;break f}a[(sb&4294967295)>>2]=(10*a[(v+4&4294967295)>>2]&4294967295|0)/4096|0;Zc=0;g:for(;;){a[((sb+8&4294967295)+4*Zc&4294967295)>>2]=a[(xa+80*Zc&-1)>>2];Te=4>(Zc|0)?5:6;5==Te&&(a[((sb+48&4294967295)+4*Zc&4294967295)>>2]=a[((xa+80*Zc&4294967295)+4&4294967295)>>2]);var gi=Zc+1&4294967295,Zc=gi;if(!(6>(gi|0)))break g}Zc=1;g:for(;;){a[((sb+88&4294967295)+4*Zc&4294967295)>>2]=0;var Ag=Zc+1&4294967295,Zc=Ag;if(!(7>(Ag|0)))break g}a[(sb+4&4294967295)>>2]=a[(hf&4294967295)>>2];a[(sb+196&4294967295)>>2]=a[(hf+24&4294967295)>>2];a[(sb+184&4294967295)>>2]=a[(hf+28&4294967295)>>2];a[(sb+192&4294967295)>>2]=a[(hf+32&4294967295)>>2];a[(sb+168&4294967295)>>2]=a[(hf+12&4294967295)>>2];a[(sb+176&4294967295)>>2]=a[(hf+36&4294967295)>>2];a[(sb+188&4294967295)>>2]=a[(hf+
16&4294967295)>>2];a[(sb+180&4294967295)>>2]=a[(hf+8&4294967295)>>2];a[(sb+172&4294967295)>>2]=a[(hf+20&4294967295)>>2];se=0;g:for(;;){var Zi=(xa+80*se&4294967295)+16&4294967295;q[Zi>>2]+=q[((xa+80*se&4294967295)+48&4294967295)>>2];a[(xa+80*se&-1)>>2]=q[((xa+80*se&4294967295)+16&4294967295)>>2]|0;var Sn=(xa+80*se&4294967295)+24&4294967295;q[Sn>>2]+=q[((xa+80*se&4294967295)+56&4294967295)>>2];a[((xa+80*se&4294967295)+4&4294967295)>>2]=q[((xa+80*se&4294967295)+24&4294967295)>>2]|0;var tl=(xa+80*se&4294967295)+40&4294967295;q[tl>>2]+=q[((xa+80*se&4294967295)+72&4294967295)>>2];a[((xa+80*se&4294967295)+12&4294967295)>>2]=q[((xa+80*se&4294967295)+40&4294967295)>>2]|0;var oh=(xa+80*se&4294967295)+32&4294967295;q[oh>>2]+=q[((xa+80*se&4294967295)+64&4294967295)>>2];a[((xa+80*se&4294967295)+8&4294967295)>>2]=q[((xa+80*se&4294967295)+32&4294967295)>>2]|0;var Jq=se+1&4294967295,se=Jq;if(!(9>(Jq|0)))break g}Zc=0;g:for(;;){var Kq=Pn+8*Zc&4294967295;q[Kq>>2]+=q[(Qn+8*Zc&4294967295)>>2];a[(hf+4*Zc&4294967295)>>2]=q[(Pn+8*Zc&4294967295)>>2]|0;var ak=Zc+1&4294967295,Zc=ak;if(!(10>(ak|0)))break g}for(Zc=0;;){a[((sb+208&4294967295)+4*Zc&4294967295)>>2]=a[(xa+80*Zc&-1)>>2];Te=4>(Zc|0)?15:16;15==Te&&(a[((sb+248&4294967295)+4*Zc&4294967295)>>2]=a[((xa+80*Zc&4294967295)+4&4294967295)>>2]);var bk=Zc+1&4294967295,Zc=bk;if(!(6>=(bk|0)))break}a[(v+8&4294967295)>>2]=a[(v+8&4294967295)>>2]+a[(v+12&4294967295)>>2]&4294967295;var Lq=a[(v+8&4294967295)>>2]>>8,Zc=Lq,Te=127<(Lq|0)?18:19;18==Te&&(Zc=127);Yb=(l[a[(v&4294967295)>>2]+Zc&4294967295]&255)*a[(v+20&4294967295)>>2]&4294967295;a[(v+4&4294967295)>>2]=(Yb>>8)+a[(v+16&4294967295)>>2]&4294967295;var Mq=a[xp>>2]-a[eg>>2]&4294967295;a[(x+28&4294967295)>>2]=Mq;Te=64<(Mq|0)?20:21;20==Te&&(a[(x+28&4294967295)>>2]=64);var Tn=s;s+=56;la(Tn,0,56);var ul=void 0,Ad=void 0,Un=void 0,Sc=void 0,Ad=sb;a[(x+176&4294967295)>>2]=(a[(Ad&4294967295)>>2]|0)/10|0;a[(Ad+204&4294967295)>>2]=a[(Ad+4&4294967295)>>2]-7&4294967295;ul=0>(a[(Ad+204&4294967295)>>2]|0)?1:2;1==ul&&(a[(Ad+204&4294967295)>>2]=0);var Im=0.05*$i(a[(Ad+168&4294967295)>>2]);q[(x+128&4294967295)>>2]=Im;var Cl=0.25*$i(a[(Ad+184&4294967295)>>2]);q[(x+136&4294967295)>>2]=Cl;var Lp=$i(a[(Ad+196&4294967295)>>2]);q[(x+120&4294967295)>>2]=Lp;var Jm=0.05*$i(a[(Ad+192&4294967295)>>2]);q[(x+104&4294967295)>>2]=Jm;Sc=0;g:for(;;){var Mp=$i(a[((Ad+88&4294967295)+4*Sc&4294967295)>>2]);q[(Tn+8*Sc&4294967295)>>2]=Mp*q[(Ev+8*Sc&4294967295)>>2];var El=Sc+1&4294967295,Sc=El;if(!(6>=(El|0)))break g}Un=a[(Ad+200&4294967295)>>2]-3&4294967295;ul=0>=(Un|0)?5:6;5==ul&&(Un=57);var Np=$i(Un);q[(x+152&4294967295)>>2]=Np/(a[(x+184&4294967295)>>2]|0);Sc=1;g:for(;;){Dm(a[((Ad+8&4294967295)+4*Sc&4294967295)>>2],a[((Ad+48&4294967295)+4*Sc&4294967295)>>2],(x+188&4294967295)+64*Sc&4294967295);ul=5>=(Sc|0)?8:9;8==ul&&(Dm(a[((Ad+208&4294967295)+4*Sc&4294967295)>>2],a[((Ad+248&4294967295)+4*Sc&4294967295)>>2],(x+1468&4294967295)+64*Sc&4294967295),q[(((x+188&4294967295)+64*Sc&4294967295)+40&4294967295)>>2]=(q[((x+1468&4294967295)+64*Sc&-1)>>2]-q[((x+
188&4294967295)+64*Sc&-1)>>2])/64,q[(((x+188&4294967295)+64*Sc&4294967295)+48&4294967295)>>2]=(q[(((x+1468&4294967295)+64*Sc&4294967295)+8&4294967295)>>2]-q[(((x+188&4294967295)+64*Sc&4294967295)+8&4294967295)>>2])/64,q[(((x+188&4294967295)+64*Sc&4294967295)+56&4294967295)>>2]=(q[(((x+1468&4294967295)+64*Sc&4294967295)+16&4294967295)>>2]-q[(((x+188&4294967295)+64*Sc&4294967295)+16&4294967295)>>2])/64);var Nq=Sc+1&4294967295,Sc=Nq;if(!(9>=(Nq|0)))break g}Fv(a[(Ad+8&-1)>>2],a[(Ad+48&-1)>>2],x+188&4294967295);Fv(a[(Ad+208&-1)>>2],a[(Ad+248&-1)>>2],x+1468&4294967295);q[(x+188+40&4294967295)>>2]=(q[(x+1468&4294967295)>>2]-q[(x+188&4294967295)>>2])/64;q[(x+188+48&4294967295)>>2]=(q[(x+1468+8&4294967295)>>2]-q[(x+188+8&4294967295)>>2])/64;q[(x+188+56&4294967295)>>2]=(q[(x+1468+16&4294967295)>>2]-q[(x+188+16&4294967295)>>2])/64;for(Sc=0;;){Dm(a[((Ad+8&4294967295)+4*Sc&4294967295)>>2],a[((Ad+128&4294967295)+4*Sc&4294967295)>>2],(x+188&4294967295)+64*(Sc+10&4294967295)&4294967295);var $d=(x+188&4294967295)+64*(Sc+10&4294967295)&-1;q[$d>>2]*=q[(Tn+8*Sc&4294967295)>>2];var Vn=Sc+1&4294967295,Sc=Vn;if(!(6>=(Vn|0)))break}Dm(0,(a[(x+8&4294967295)>>2]|0)/2|0,x+188+1216&4294967295);s=Tn;if(1==(Gv()|0)){Te=22;break f}else Te=2}f:do if(23==Te){Te=0<(a[ei>>2]|0)?24:26;g:do if(24==Te){a[(x+180&4294967295)>>2]=64;a[ei>>2]=0;a[eg>>2]=a[eg>>2]-64&4294967295;a[(x+28&4294967295)>>2]=64;if(1!=(Gv()|0)){Te=26;break g}fi=1;break f}while(0);fi=0}else 22==Te&&(fi=1);while(0);jg=fi;Uk=jg;tg=22}Cb=0==((32==tg?Wm:28==tg?Ql:22==tg?Uk:20==tg?Sl:15==tg?Fc:ra)|0)?34:35;if(34==Cb){var Em=a[Xh>>2]+1&4294967295;a[Xh>>2]=Em;1==(160<=(Em|0)?1:2)&&(a[Xh>>2]=0);a[Ef>>2]=0;Cb=1}else 35==Cb&&(Cb=a[Ef>>2]=1)}d:do if(36==Cb)lj=0;else if(3==Cb){Cb=0<(a[Yh>>2]|0)?4:6;e:do if(4==Cb){var vl=sv(a[Yh>>2],a[Ef>>2]);a[Ef>>2]=vl;if(1!=(a[Ef>>2]|0))break e;lj=0;break d}while(0);Cb=9;e:do if(7==Cb){if(!(Ma[Na>>2]>>>0<Ma[jh>>2]>>>0)){Cb=9;break e}for(;;){var ck=a[Na>>2];a[Na>>2]=ck+1&4294967295;h[ck]=0;if(Ma[Na>>2]>>>0<Ma[jh>>2]>>>0)Cb=8;else{Cb=9;break e}}}while(0);lj=1}while(0);Fl=lj;hj=Fl;li=1<q[sm>>2]?1:3;c:do if(1==li){var sh=a[jh>>2]-yq&4294967295,Oq=(a[Na>>2]-yq&4294967295|0)/2|0,aj=(sh|0)/2|0,Pq=hj,yp;var te=void 0,Fm=void 0,zp=void 0,Ap=void 0,Bp=void 0,Wn=void 0,zp=yq,Ap=Oq,Bp=aj,Wn=Pq,te=0<(Ap|0)?1:6;if(1==te){te=0==(a[Pf>>2]|0)?2:3;if(2==te){var rg=void 0,wl=void 0,ve=void 0,co=void 0,Qq=void 0,bj=void 0,ve=gm(1,88),co=55,Qq=22050/65|0,bj=2*Qq&4294967295,rg=0==(ve|0)?1:2;if(1==rg)wl=0;else if(2==rg){a[(ve+32&4294967295)>>2]=bj;var Gl=gm(bj,2);a[(ve&4294967295)>>2]=Gl;rg=0==(a[(ve&4294967295)>>2]|0)?3:4;if(3==rg)wl=0;else if(4==rg){a[(ve+40&4294967295)>>2]=bj;var Hl=gm(bj,2);a[(ve+4&4294967295)>>2]=Hl;rg=0==(a[(ve+4&4294967295)>>2]|0)?5:6;if(5==rg)wl=0;else if(6==rg){a[(ve+36&4294967295)>>2]=bj;var Il=gm(bj,2);a[(ve+8&4294967295)>>2]=Il;rg=0==(a[(ve+8&4294967295)>>2]|0)?7:8;if(7==rg)wl=0;else if(8==rg){var Pm=gm(bj,2);a[(ve+12&4294967295)>>2]=Pm;q[(ve+16&4294967295)>>2]=1;q[(ve+24&4294967295)>>2]=1;q[(ve+20&4294967295)>>2]=1;a[(ve+72&4294967295)>>2]=22050;a[(ve+28&4294967295)>>2]=1;a[(ve+56&4294967295)>>2]=co;a[(ve+60&4294967295)>>2]=Qq;a[(ve+64&4294967295)>>2]=bj;wl=ve}}}}a[Pf>>2]=wl}te=q[(a[Pf>>2]+16&4294967295)>>2]!=q[sm>>2]?4:5;4==te&&(q[(a[Pf>>2]+16&4294967295)>>2]=q[sm>>2]);Cp(a[Pf>>2],zp,Ap)}te=0==(a[Pf>>2]|0)?7:8;if(7==te)Fm=0;else if(8==te){te=0!=(Wn|0)?9:10;if(9==te){var kg=a[Pf>>2],Bg=void 0,Dp=void 0,Ce=void 0,le=void 0,hi=void 0,Gm=void 0,Dp=a[(kg+64&4294967295)>>2],Ce=a[(kg+44&4294967295)>>2],Bg=0==(Ce|0)?1:2;e:do if(1!=Bg&&2==Bg){Bg=(Ce|0)>=(Dp|0)?3:5;f:do if(3==Bg){if(0!=(Cp(kg,0,0)|0))break f;break e}while(0);var ph=a[(kg+44&4294967295)>>2],Ce=ph,Bg=0==(ph|0)?6:7;if(6!=Bg&&7==Bg){var le=Dp-Ce&4294967295,Jl=(2*le&4294967295)*a[(kg+28&4294967295)>>2]&4294967295,Qf,Xn,Rq,Cg;Qf=a[(kg&4294967295)>>2]+2*(a[(kg+28&4294967295)>>2]*Ce&4294967295)&4294967295;Xn=Qf+Jl;Cg=0;0>Cg&&(Cg+=256);for(Cg=Cg+(Cg<<8)+(Cg<<16)+16777216*Cg;0!==Qf%4&&Qf<Xn;)h[Qf++]=0;Qf>>=2;for(Rq=Xn>>2;Qf<Rq;)a[Qf++]=Cg;for(Qf<<=2;Qf<Xn;)h[Qf++]=0;a[(kg+44&4294967295)>>2]=Dp;hi=a[(kg+48&4294967295)>>2];Bg=0!=(Cp(kg,0,0)|0)?9:8;9==Bg&&(Gm=(Ce|0)*q[(kg+16&4294967295)>>2]+0.5|0,Bg=(a[(kg+48&4294967295)>>2]|0)>(Gm+hi&4294967295|0)?10:11,10==Bg&&(a[(kg+48&4294967295)>>2]=Gm+hi&4294967295))}}while(0)}var cj=a[Pf>>2],dk=void 0,Ep=void 0,dj=void 0,Hm=void 0,dj=a[(cj+48&4294967295)>>2],Hm=0,dk=0==(dj|0)?1:2;if(1==dk)Ep=0;else if(2==dk){dk=(dj|0)>(Bp|0)?3:4;3==dk&&(Hm=dj-Bp&4294967295,dj=Bp);var Sq=(2*dj&4294967295)*a[(cj+28&4294967295)>>2]&4294967295,lg=void 0,ii=void 0,Fp=void 0,Tq=void 0,lg=a[(cj+4&4294967295)>>2],ii=zp,Fp=lg+Sq;if(ii%4==lg%4&&8<Sq){for(;0!==lg%4&&lg<Fp;)h[ii++]=h[lg++];lg>>=2;ii>>=2;for(Tq=Fp>>2;lg<Tq;)a[ii++]=a[lg++];lg<<=2;ii<<=2}for(;lg<Fp;)h[ii++]=h[lg++];dk=0<(Hm|0)?5:6;5==dk&&Yn(a[(cj+4&4294967295)>>2],a[(cj+4&4294967295)>>2]+2*(a[(cj+28&4294967295)>>2]*dj&4294967295)&4294967295,(2*Hm&4294967295)*a[(cj+28&4294967295)>>2]&4294967295,1,0);a[(cj+48&4294967295)>>2]=Hm;Ep=dj}Fm=Ep}yp=Fm;kk=2*yp&4294967295;a[Na>>2]=yq+kk&4294967295;if(!((kk|0)>=(sh|0)))break c;hj=0}while(0);hk=hj;Wh=0!=(a[hm>>2]|0)?1:2;c:do if(1==Wh)Dg=hk;else if(2==Wh){Wh=0==(a[Ic>>2]|0)?3:5;d:do if(3==Wh){var Kl=Al&4294967295,Vq=a[Uq>>2]+1&4294967295;a[Uq>>2]=Vq;U(Kl,Hv&4294967295,e([bh&4294967295,0,0,0,Vq,0,0,0,cp&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));if(0==(bp(Al&4294967295,a[Jb>>2])|0))break d;Dg=1;break c}while(0);Wh=0!=(a[vo>>2]|0)?6:9;d:do if(6==Wh){a[vo>>2]=0;if(!(0<Ma[Gi>>2]>>>0))break d;if(!(Ma[Zn>>2]>>>0>Ma[Gi>>2]>>>0))break d;Iv();a[Zn>>2]=0}while(0);Wh=0!=(a[Ic>>2]|0)?10:11;10==Wh&&(a[Zn>>2]=a[Zn>>2]+((a[Na>>2]-(xq&4294967295)&4294967295|0)/2|0)&4294967295,Nd(xq&4294967295,1,a[Na>>2]-(xq&4294967295)&4294967295,a[Ic>>2]));Dg=hk}while(0);var Ll=Dg;s=Jf;$k=Ll;f=0!=($k|0)?75:76;if(75==f&&0==(Yg|0)){f=78;break}0==(Ur(fc&4294967295,Nc,1)|0)&&(Yg=vn(0,0,1));f=74}Iv();f=83;break a}else if(79==f)if(pv(0),vn(c,n,0),f=0!=(a[Gp>>2]|0)?80:82,80==f){for(;;)if(0!=(vn(0,0,1)|0))f=80;else{f=81;break}j=0;f=87;break a}else if(82==f){Nd(Jv&4294967295,79,1,a[(a[lb>>2]+12&4294967295)>>2]);f=83;break a}while(0);if(83==f){f=(a[Le>>2]|0)!=(a[(a[lb>>2]+8&4294967295)>>2]|0)?84:86;a:do if(84==f){if((a[Le>>2]|0)==(a[(a[lb>>2]+12&4294967295)>>2]|0)){f=86;break a}Sd(a[Le>>2])}while(0);j=0}return j}function jq(b,m){var f,d;f=0!=(m|0)?1:2;a:do if(1==f)U(wd&4294967295,xl&4294967295,e([m,0,0,0],["i8*",0,0,0],y));else if(2==f){d=f=Yk(Kv&4294967295);f=0!=(f|0)?3:4;if(3==f&&(Rd(wd&4294967295,150,xl&4294967295,e([d,0,0,0],["i8*",0,0,0],y)),-2==(of(wd&4294967295)|0)))break a;d=Yk(Lv&4294967295);Rd(wd&4294967295,150,xl&4294967295,e([d,0,0,0],["i8*",0,0,0],y));d=wd&4294967295;d=Ye(d);d=H.findObject(d);null===d?d=-1:d.read?d=0:(N(T.EACCES),d=-1);if(0==(d|0))break a;var i,g,j;d=Mv&4294967295;i=wd&4294967295;g=d+23;if(i%4==d%4){for(;0!==d%4&&d<g;)h[i++]=h[d++];d>>=2;i>>=2;for(j=g>>2;d<j;)a[i++]=a[d++];d<<=2;i<<=2}for(;d<g;)h[i++]=h[d++]}while(0)}function bp(b,m){var f,d=null,i;f=0==(b|0)?1:2;if(1==f)i=2;else if(2==f){f=0==(nb(b,Co&4294967295)|0)?3:4;if(3==f){var g=a[(a[lb>>2]+8&4294967295)>>2];a[Ic>>2]=g;d=3}else if(4==f){var j=pe(b,tq&4294967295);a[Ic>>2]=j;d=4}f=0!=((4==d?j:g)|0)?6:7;6==f?(Nd($n&4294967295,1,24,a[Ic>>2]),Oh(a[Ic>>2],m),Oh(a[Ic>>2],2*m&4294967295),Nd($n+32&4294967295,1,12,a[Ic>>2]),i=0):7==f&&(i=1)}return i}function Iv(){var b,m;b=0==(a[Ic>>2]|0)?3:1;a:do if(1==b){if((a[Ic>>2]|0)==(a[(a[lb>>2]+8&4294967295)>>2]|0))break a;Ut(a[Ic>>2]);m=Vk(a[Ic>>2]);Wk(a[Ic>>2],4,0);Oh(a[Ic>>2],m-8&4294967295);Wk(a[Ic>>2],40,0);Oh(a[Ic>>2],m-44&4294967295);Sd(a[Ic>>2]);a[Ic>>2]=0}while(0)}function ye(a){var b,a=0==(a&255|0)|32<a>>>0?1:2;1==a?b=0:2==a&&(b=1);return b}function Nv(b,m){var f,d,i;for(i=b;;){if(0==(a[(i&4294967295)>>2]|0)){f=5;break}var g=i;if((a[(i+4&4294967295)>>2]|0)==(m|0)){f=3;break}i=g+8&4294967295;f=1}5==f?d=bf&4294967295:3==f&&(d=a[(g&4294967295)>>2]);return d}function Ov(b){var m=Nv(ja&4294967295,(a[(b&4294967295)>>2]&15)+64&4294967295);U(ek&4294967295,Pv&4294967295,e([m,0,0,0,a[(b&4294967295)>>2],0,0,0,a[(b+
4&4294967295)>>2],0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0],y));return ek&4294967295}function aI(b,m){var f,d,i,g;i=f=a[b>>2];var j=a[m>>2];g=j;j=nb(f,j);f=0!=(j|0)?1:2;1==f?d=j:2==f&&(d=$(i)+1&4294967295,i=i+d&4294967295,d=$(g)+1&4294967295,d=nb(i,g+d&4294967295));return d}function So(b,m){var f=pe(b,m);1==(0==(f|0)&0!=(a[Ta>>2]|0)?1:2)&&Ea(a[Ta>>2],Qv&4294967295,e([m,0,0,0,b,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));return f}function Ni(F,m){var f=s;s+=528;la(f,0,528);var d,i,g,j,c,n=f+4,k=f+204,w=f+400;j=0;h[fk]=0;U(k&4294967295,Rv&4294967295,e([F,0,0,0,m,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));var r=pe(k&4294967295,Mh&4294967295);c=r;d=0==(r|0)?1:3;a:do if(1==d){U(k&4294967295,Dg&4294967295,e([F,0,0,0,m,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));var Ze=pe(k&4294967295,Mh&4294967295);c=Ze;if(0!=(Ze|0)){d=3;break a}d=11;break a}while(0);if(3==d){Ea(a[Ta>>2],rq&4294967295,e([k&4294967295,0,0,0],["i8*",0,0,0],y));a[rc>>2]=0;var L=n&4294967295,t=n&4294967295,p=w&4294967295,u=w&4294967295;a:for(;;){if(0==(jn(L,200,c)|0)){d=10;break a}a[rc>>2]=a[rc>>2]+1&4294967295;var z;var C=t,q=p,B=f,Cc=s;s+=312;la(Cc,0,312);var D=void 0,K=null,I=void 0,x=void 0,X=void 0,nr=void 0,R=void 0,G=void 0,Pb=void 0,S=void 0,Y=void 0,na=void 0,H=void 0,v=void 0,M=void 0,P=void 0,ia=void 0,N=void 0,Z=void 0,T=void 0,aa=void 0,ma=void 0,bb=Cc,Va=void 0,oa=void 0,wa=Cc+4,ya=Cc+104,va=Cc+304,V=Cc+308,x=C,X=q,nr=B,ma=Z=N=ia=P=H=0,Pb=ao&4294967295,S=ao&4294967295,D=0==($b(x,Sv&4294967295,2)|0)?1:2;1==D&&(na=1);G=x;R=na=0;D=10!=(R&255|0)?3:55;c:do if(3==D)for(;;){R=h[G];D=63==(R&255|0)?4:12;e:do if(4==D){if(0!=(na|0)){D=12;break e}v=100;G=G+1&4294967295;D=33==((b=h[G],128<=b?b-256:b)|0)?6:7;6==D&&(v=132,G=G+1&4294967295);Y=0;D=0!=(10>((b=h[G],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?8:9;if(8==D)var Ij=(b=h[G],128<=b?b-256:b),Y=(Y-48&4294967295)+Ij&4294967295,G=G+1&4294967295;D=0!=(10>((b=h[G],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?10:11;if(10==D)var dc=10*Y&4294967295,Ia=(b=h[G],128<=b?b-256:b),Y=(dc-48&4294967295)+Ia&4294967295,G=G+1&4294967295;var ba=v+Y&255,ta=H,H=ta+1&4294967295;h[wa+ta&4294967295]=ba;R=h[G]}while(0);D=36==(R&255|0)?13:25;e:do if(13==D){var qb=(b=h[G+1&4294967295],128<=b?b-256:b);if(0==(cq(qb)|0)){D=25;break e}var oa=G,ob=l[G],R=ob,Ra=0!=(ye(ob&255)|0)^1,Sa=G;Ra?(K=14,D=15):(K=14,D=16);f:do if(15==D)for(;;){var G=(15==K?kq:Sa)+1&4294967295,ac=l[G],R=ac,xa=0!=(ye(ac&255)|0)^1,kq=G;if(xa)D=K=15;else{K=15;D=16;break f}}while(0);h[14==K?Sa:kq]=0;var Fa=Ff(ja&4294967295,oa),Y=Fa,D=0<Fa>>>0?17:24;if(17==D)if(D=200==(Y|0)?18:19,18==D)h[fk]=1;else{if(19==D)if(D=201==(Y|0)?20:21,20==D)h[fk]=0;else if(21==D)if(D=29==(Y|0)?22:23,22==D)ma=1;else if(23==D){var cc=Y&255,qa=H,H=qa+1&4294967295;h[wa+qa&4294967295]=cc}}else 24==D&&(Ea(a[Ta>>2],Tv&4294967295,e([a[rc>>2],0,0,0,oa,0,0,0],["i32",0,0,0,"i8*",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295)}while(0);D=47==(R&255|0)?26:29;e:do if(26==D){if(47!=((b=h[G+1&4294967295],128<=b?b-256:b)|0)){D=29;break e}if(0!=(P|0)){D=29;break e}R=10}while(0);var Q=na,D=0==Q?30:1==Q?34:2==Q?46:3==Q?50:4==Q?52:54;e:do if(30==D)if(D=40==(R&255|0)?31:32,31==D)P=1,Pb=G+1&4294967295,na=1;else{if(32==D){if(0!=(ye(R&255)|0)){D=54;break e}Pb=G;na=1}}else if(34==D){D=45==(R&255|0)?35:39;f:do if(35==D){if(0==(P|0)){D=39;break f}D=0!=(10>((b=h[Pb&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?37:38;37==D&&(ia=1);var ua=H,H=ua+1&4294967295;h[wa+ua&4294967295]=44;R=32}while(0);D=0!=(ye(R&255)|0)?40:43;if(40==D)if(h[G&4294967295]=0,D=0!=(P|0)?41:42,41==D)var Kb=G+1&4294967295,N=Z=Kb,na=2;else 42==D&&(na=3);else if(43==D){if(41!=(R&255|0)){D=54;break e}if(0==(P|0)){D=54;break e}h[G&4294967295]=0;na=3;P=0}}else if(46==D)if(D=0!=(ye(R&255)|0)?47:48,47==D)P=P+1&4294967295;else{if(48==D){if(41!=(R&255|0)){D=54;break e}h[G&4294967295]=32;Z=G+1&4294967295;na=3}}else if(50==D){if(0!=(ye(R&255)|0)){D=54;break e}S=G;na=4}else if(52==D){if(0==(ye(R&255)|0)){D=54;break e}h[G&4294967295]=0;na=5}while(0);G=G+1&4294967295;if(10!=(R&255|0))D=3;else{D=55;break c}}while(0);D=0==((b=h[Pb&4294967295],128<=b?b-256:b)|0)?56:57;if(56==D)I=0;else if(57==D){D=0!=(l[fk]&1|0)?58:59;c:do if(58==D){ma=1;D=60;break c}else if(59==D){if(0!=(ma|0)){D=60;break c}Yo(S,ya&4294967295,va&4294967295);D=0!=($g(ya&4294967295,21)|0)?65:66;if(65==D){var Ga=H,H=Ga+1&4294967295;h[wa+Ga&4294967295]=10}if(0==(l[va&4294967295]&255|0)){D=68;break c}Ea(a[Ta>>2],Uv&4294967295,e([a[rc>>2],0,0,0,l[va&4294967295]&255,0,0,0,l[va&4294967295]&255,0,0,0,Pb,0,0,0,S,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));a[pb>>2]=a[pb>>2]+1&4294967295;D=68;break c}while(0);c:do if(60==D)if(D=95==((b=h[Pb&4294967295],128<=b?b-256:b)|0)?61:63,61==D){var Qb=S,gc=$(Qb),hb=Qb+gc&4294967295,cb,ga,ka,Aa;cb=Vv&4294967295;ga=hb;for(ka=cb+2;cb<ka;)h[ga++]=h[cb++];ej(a[Rb>>2],S,0,0);ma=0;Af(ya&4294967295,Ua&4294967295,156);if(!(0==((b=h[Ua&4294967295],128<=b?b-256:b)|0)&3>(a[mm>>2]|0))){D=68;break c}a[mm>>2]=a[mm>>2]+1&4294967295;Ea(a[Ta>>2],Wv&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y))}else 63==D&&Af(ya&4294967295,S,156);while(0);var rb=ma,Ba=(b=h[(a[Rb>>2]&4294967295)+252&4294967295],128<=b?b-256:b),D=(rb|0)!=(Ba|0)?69:70;if(69==D){var Dc=H,H=Dc+1&4294967295;h[wa+Dc&4294967295]=29}D=1==(zb(Pb,Xv&4294967295,e([bb,0,0,0],["i32*",0,0,0],y))|0)?71:72;c:do if(71==D)Y=De(a[bb>>2],Pb),h[Pb+Y&4294967295]=0;else if(72==D){if(95==((b=h[Pb&4294967295],128<=b?b-256:b)|0)){D=80;break c}Va=1;G=G=Pb;Y=sc(V,G);D=0==(a[V>>2]|0)?78:74;d:do if(74==D)for(;;){D=0!=(ji(a[V>>2])|0)?75:76;if(75==D){var Ma=yl(a[V>>2]);De(Ma,G)}else 76==D&&(Va=0);G=G+Y&4294967295;Y=sc(V,G);if(0==(a[V>>2]|0)){D=78;break d}else D=74}while(0);if(0==(Va|0)){D=80;break c}var hc=H,H=hc+1&4294967295;h[wa+hc&4294967295]=42}while(0);T=$(Pb);D=0<(a[(a[Rb>>2]+288&4294967295)>>2]|0)?81:82;81==D&&(T=Yv(a[Rb>>2],Pb));var za=Zv(Pb);a[nr>>2]=za;aa=$(ya&4294967295);h[X+1&4294967295]=T&255;var T=T&63,ha=X+2&4294967295,A=T;cb=Pb;ga=ha;ka=cb+A;if(ga%4==cb%4&&8<A){for(;0!==cb%4&&cb<ka;)h[ga++]=h[cb++];cb>>=2;ga>>=2;for(Aa=ka>>2;cb<Aa;)a[ga++]=a[cb++];cb<<=2;ga<<=2}for(;cb<ka;)h[ga++]=h[cb++];D=0==(aa|0)?83:84;if(83==D){var mb=X+1&4294967295,ic=((b=h[mb],128<=b?b-256:b)|128)&255;h[mb]=ic;M=T+2&4294967295}else 84==D&&(M=(T+3&4294967295)+aa&4294967295,fa(X+(T+2&4294967295)&4294967295,ya&4294967295));Y=0;D=Y>>>0<H>>>0?86:87;c:do if(86==D)for(;;)if(h[X+(M+Y&4294967295)&4294967295]=h[wa+Y&4294967295],Y=Y+1&4294967295,Y>>>0<H>>>0)D=86;else{D=87;break c}while(0);M=M+H&4294967295;D=0!=(N|0)?88:94;c:do if(88==D){if(!(0<(P|0))){D=94;break c}D=10<(P|0)?90:91;if(90==D)Ea(a[Ta>>2],$v&4294967295,e([a[rc>>2],0,0,0,P,0,0,0],["i32",0,0,0,"i32",0,0,0],y));else if(91==D){var sa=P+80&255,Wa=M,M=Wa+1&4294967295;h[X+Wa&4294967295]=sa;Y=Z-N&4294967295;D=0!=(ia|0)?92:93;if(92==D){var ab=M,M=ab+1&4294967295;h[X+ab&4294967295]=32}var jb=X+M&4294967295,Ja=Y;cb=N;ga=jb;ka=cb+Ja;if(ga%4==cb%4&&8<Ja){for(;0!==cb%4&&cb<ka;)h[ga++]=h[cb++];cb>>=2;ga>>=2;for(Aa=ka>>2;cb<Aa;)a[ga++]=a[cb++];cb<<=2;ga<<=2}for(;cb<ka;)h[ga++]=h[cb++];M=M+Y&4294967295}}while(0);h[X&4294967295]=M&255;I=M}var ca=I;s=Cc;z=ca;i=z;if(0==(i|0)){d=4;continue a}var Ab=qn+4*a[f>>2]&4294967295;a[Ab>>2]=a[Ab>>2]+1&4294967295;g=Qd(i+4&4294967295);if(0==(g|0)){d=7;break a}var Lb=g,ec,Bb,Ha,vb;ec=Mj+4*a[f>>2]&4294967295;Bb=Lb;for(Ha=ec+4;ec<Ha;)h[Bb++]=h[ec++];a[(Mj+4*a[f>>2]&4294967295)>>2]=g;var da=g+4&4294967295,$c=i;ec=u;Bb=da;Ha=ec+$c;if(Bb%4==ec%4&&8<$c){for(;0!==ec%4&&ec<Ha;)h[Bb++]=h[ec++];ec>>=2;Bb>>=2;for(vb=Ha>>2;ec<vb;)a[Bb++]=a[ec++];ec<<=2;Bb<<=2}for(;ec<Ha;)h[Bb++]=h[ec++];j=j+1&4294967295;d=4}a:do if(7==d){if(0==(a[Ta>>2]|0))break a;Nd(hq&4294967295,22,1,a[Ta>>2]);a[pb>>2]=a[pb>>2]+1&4294967295}while(0);Ea(a[Ta>>2],aw&4294967295,e([j,0,0,0],["i32",0,0,0],y));Sd(c)}s=f}function bI(b,m){var f,d,i;f=$(m&-1);i=$(b&-1);i=f-i&4294967295;f=0!=(i|0)?1:2;1==f?d=i:2==f&&(i=nb(b&-1,m&-1),f=0!=(i|0)?3:4,3==f?d=i:4==f&&(d=a[(b+16&4294967295)>>2]-a[(m+16&4294967295)>>2]&4294967295));return d}function Xo(F,m){var f,d,i,g,j,c,n,k,l;f=0==((b=h[F&4294967295],128<=b?b-256:b)|0)?75:1;if(1==f){d=a[(Eg+4*a[m>>2]&4294967295)>>2];f=4==(a[m>>2]|0)?2:5;if(2==f){j=$(Pi&4294967295);if(3==(0<(j|0)?3:4))d=j,j=d+1&4294967295,h[Pi+d&4294967295]=32;d=Pi+j&4294967295}n=8421376;i=F;g=0;a:for(;;){l=0;f=i;i=f+1&4294967295;c=h[f];f=92==((b=c,128<=b?b-256:b)|0)?7:15;if(7==f){l=i;i=l+1&4294967295;c=h[l];f=48<=((b=c,128<=b?b-256:b)|0)?8:14;b:do if(8==f){if(!(51>=((b=c,128<=b?b-256:b)|0)))break b;if(!(48<=((b=h[i&4294967295],128<=b?b-256:b)|0)))break b;if(!(55>=((b=h[i&4294967295],128<=b?b-256:b)|0)))break b;if(!(48<=((b=h[i+1&4294967295],128<=b?b-256:b)|0)))break b;if(!(55>=((b=h[i+1&4294967295],128<=b?b-256:b)|0)))break b;l=64*((b=c,128<=b?b-256:b)-48&4294967295)&4294967295;c=8*((b=h[i&4294967295],128<=b?b-256:b)-48&4294967295)&4294967295;k=(b=h[i+1&4294967295],128<=b?b-256:b);c=((l-48&4294967295)+k&4294967295)+c&255;i=i+2&4294967295}while(0);l=1}f=1==(a[m>>2]|0)?17:16;b:do if(16==f){f=3==(a[m>>2]|0)?17:73;break b}while(0);b:do if(17==f){if(0!=(l|0))break b;f=(b=c,128<=b?b-256:b);if(95==f)f=19;else if(89==f)f=20;else if(65==f)f=21;else if(66==f)f=21;else if(67==f)f=21;else if(72==f)f=21;else if(70==f)f=21;else if(71==f)f=21;else if(68==f)f=24;else if(75==f)f=25;else if(78==f)f=26;else if(86==f)f=27;else if(90==f)f=28;else if(43==f)f=29;else if(64==f)f=30;else if(38==f)f=31;else if(37==f)f=32;else if(35==f)f=33;else if(33==f)f=34;else if(84==f)f=35;else if(87==f)f=36;else if(88==f)f=37;else if(74==f)f=38;else if(76==f)f=39;else if(36==f)f=48;else if(80==f)f=55;else if(83==f)f=56;else break b;c:do if(19==f){c=32;break b}else if(20==f){c=73;f=21;break c}else if(24==f){c=15;break b}else if(25==f){c=25;break b}else if(26==f){c=24;break b}else if(27==f){c=26;break b}else if(28==f){c=16;break b}else if(29==f){c=12;break b}else if(30==f){c=21;break b}else if(31==f){c=10;break b}else if(32==f){c=11;break b}else if(33==f){c=13;break b}else if(34==f){c=19;break b}else if(35==f){l=g;g=l+1&4294967295;h[d+l&4294967295]=28;c=17;break b}else if(36==f){c=31;break b}else if(37==f){c=29;break b}else if(38==f){c=23;break b}else if(39==f){f=i;i=f+1&4294967295;c=(b=h[f],128<=b?b-256:b)-48&255;f=i;i=f+1&4294967295;k=(b=h[f],128<=b?b-256:b)-48&4294967295;c=(10*(b=c,128<=b?b-256:b)&4294967295)+k&255;f=0>(k|0)|9<(k|0)?40:41;d:do if(40==f)c=0,Ea(a[Ta>>2],bw&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y)),a[pb>>2]=a[pb>>2]+1&4294967295;else if(41==f){f=0>=((b=c,128<=b?b-256:b)|0)?44:42;e:do if(42==f){if(26<=((b=c,128<=b?b-256:b)|0)){f=44;break e}k=(b=c,128<=b?b-256:b);if(0!=((b=h[nm+k&4294967295],128<=b?b-256:b)|0))break d}while(0);k=a[Ta>>2];var r=a[rc>>2],s=(b=c,128<=b?b-256:b);Ea(k,cw&4294967295,e([r,0,0,0,s,0,0,0],["i32",0,0,0,"i32",0,0,0],y));a[pb>>2]=a[pb>>2]+1&4294967295}while(0);c=(b=c,128<=b?b-256:b)+65&255;f=1==(a[m>>2]|0)?46:47;if(46==f){l=c;f=g;g=f+1&4294967295;h[d+f&4294967295]=l;c=18;break b}else if(47==f){l=g;g=l+1&4294967295;h[d+l&4294967295]=18;break b}}else if(48==f){l=g;g=l+1&4294967295;h[d+l&4294967295]=28;c=0;for(l=Fg&4294967295;;){if(0==(a[(l&4294967295)>>2]|0)){f=53;break}j=$(a[(l&4294967295)>>2]);f=0==($b(i,a[(l&4294967295)>>2],j)|0);var L=l;if(f){f=51;break}l=L+8&4294967295;f=49}51==f&&(c=a[(L+4&4294967295)>>2]&255,i=i+j&4294967295);if(0!=((b=c,128<=b?b-256:b)|0))break b;Ea(a[Ta>>2],dw&4294967295,e([a[rc>>2],0,0,0],["i32",0,0,0],y));a[pb>>2]=a[pb>>2]+1&4294967295;break b}else if(55==f){n|=1024;f=56;break c}while(0);if(21==f)f=1==(a[m>>2]|0)?22:23,22==f?(c=(b=c,128<=b?b-256:b)-65&4294967295,c=(b=h[Hp+c&4294967295],128<=b?b-256:b)+65&255,k=g,g=k+1&4294967295,h[d+k&4294967295]=c,c=17):23==f&&(k=g,g=k+1&4294967295,h[d+k&4294967295]=17,c=(b=c,128<=b?b-256:b)-65&4294967295,c=(b=h[Hp+c&4294967295],128<=b?b-256:b)+65&255);else if(56==f){c=g;g=c+1&4294967295;h[d+c&4294967295]=14;for(k=0;;){f=i;i=f+1&4294967295;c=f=h[f];f=(b=f,128<=b?b-256:b);if(0!=(ye(f)|0)){f=72;break}if(0==((b=c,128<=b?b-256:b)|0)){f=72;break}f=(b=c,128<=b?b-256:b);f=101==f?60:105==f?61:112==f?62:118==f?63:100==f?64:102==f?65:113==f?66:116==f?67:98==f?68:97==f?69:70;if(70==f){if(0!=(10>((b=c,128<=b?b-256:b)-48&4294967295)>>>0&1|0))f=10*k&4294967295,c=(b=c,128<=b?b-256:b),k=(f-48&4294967295)+c&4294967295;f=57}else 60==f?(n|=256,f=57):61==f?(n|=512,f=57):62==f?(n|=1024,f=57):63==f?(n|=2048,f=57):64==f?(n|=4096,f=57):65==f?(n|=8192,f=57):66==f?(n|=16384,f=57):67==f?(n|=65536,f=57):68==f?(n|=131072,f=57):69==f&&(n|=262144,f=57)}i=i+-1&4294967295;c=n>>16&255;r=g;g=r+1&4294967295;h[d+r&4294967295]=c;c=n>>8&255;r=g;g=r+1&4294967295;h[d+r&4294967295]=c;c=(k|128)&255}}while(0);l=c;f=g;g=f+1&4294967295;h[d+f&4294967295]=l;if(0==((b=c,128<=b?b-256:b)|0))break a}a[m>>2]=a[(ew+4*a[m>>2]&4294967295)>>2]}}function Af(a,b,f){for(var d=!1,i,g=0;g<f;g++)i=d?0:h[b+g],h[a+g]=i,d=d||0==h[b+g];h[a+(f-1&4294967295)&4294967295]=0}function Ff(b,m){var f,d,i;for(i=b;;){if(0==(a[(i&4294967295)>>2]|0)){f=5;break}f=0==(nb(m,a[(i&4294967295)>>2])|0);var g=i;if(f){f=3;break}i=g+8&4294967295;f=1}5==f?d=a[(i+4&4294967295)>>2]:3==f&&(d=a[(g+4&4294967295)>>2]);return d}function ap(F,m,f){var d=s;s+=172;la(d,0,172);var i,g,j,c,n,k;fa(Mi&4294967295,m);fa(F+292&-1,m);U(d&4294967295,To&4294967295,e([wd&4294967295,0,0,0,47,0,0,0,m,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));k=of(d&4294967295);i=0!=(a[(F+1052&4294967295)>>2]|0)?1:2;1==i&&(a[(F+1052&4294967295)>>2]=0);var w=pe(d&4294967295,gh&4294967295);i=0==(w|0)?4:3;a:do if(3==i){if(0>=k>>>0){i=4;break a}n=uo(k);a[(F+1052&4294967295)>>2]=n;k=fm(a[(F+1052&4294967295)>>2],1,k,w);Sd(w);c=a[(F+1052&4294967295)>>2];n=a[(c+4&4294967295)>>2];i=1032>=k>>>0?8:9;if(8==i){Ea(a[(a[lb>>2]+12&4294967295)>>2],fw&4294967295,e([d&4294967295,0,0,0],["i8*",0,0,0],y));g=2;i=19;break a}else if(9==i){i=1024!=(a[(c&4294967295)>>2]|0)?11:10;b:do if(10==i){if(0>=(n|0)|134217728<(n|0))break b;a[(F+1048&4294967295)>>2]=a[(F+1052&4294967295)>>2]+n&4294967295;i=void 0;var w=null,r=c=w=k=c=g=w=n=void 0;n=F;w=a[(n+7752&4294967295)>>2]=0;d:for(;;)if(a[((n+5256&4294967295)+4*w&4294967295)>>2]=0,h[(n+7756&4294967295)+w&4294967295]=0,h[(n+8012&4294967295)+w&4294967295]=-1,w=i=w+1&4294967295,256>(i|0))i=1;else{i=2;break d}c=w=k=g=void 0;g=n+5152&-1;k=g+104;c=0;0>c&&(c+=256);for(c=c+(c<<8)+(c<<16)+16777216*c;0!==g%4&&g<k;)h[g++]=0;g>>=2;for(w=k>>2;g<w;)a[g++]=c;for(g<<=2;g<k;)h[g++]=0;g=n+6280&-1;k=g+512;c=0;0>c&&(c+=256);for(c=c+(c<<8)+(c<<16)+16777216*c;0!==g%4&&g<k;)h[g++]=0;g>>=2;for(w=k>>2;g<w;)a[g++]=c;for(g<<=2;g<k;)h[g++]=0;g=a[(n+1048&4294967295)>>2];d:for(;;){if(0==((b=h[g],128<=b?b-256:b)|0)){i=25;break d}if(6!=((b=h[g],128<=b?b-256:b)|0)){i=5;break d}g=g+1&4294967295;i=20==((b=h[g&4294967295],128<=b?b-256:b)|0);k=g;i=i?7:10;if(7==i){k=k+4&-4;g=a[((n&4294967295)+264&4294967295)>>2]=k;0!=(a[(k&4294967295)>>2]|0)?(w=7,i=8):(w=7,i=9);e:do if(8==i)for(;;)if(j=k=(8==w?j:g)+8&4294967295,0!=(a[(k&4294967295)>>2]|0))i=w=8;else{w=8;break e}while(0);g=(7==w?g:j)+4&4294967295;i=3}else if(10==i){i=18==((b=h[k&4294967295],128<=b?b-256:b)|0);k=g;i=i?11:13;e:do if(11==i){w=(b=h[k+1&4294967295],128<=b?b-256:b)-65&4294967295;g=g+2&4294967295;if(!(0<=(w|0)&26>(w|0)))break e;a[((n+5152&4294967295)+4*w&4294967295)>>2]=g}else 13==i&&(r=$(k),c=g,w=h[c&4294967295],c=h[c+1&4294967295],g=g+(r+1&4294967295)&4294967295,i=1==(r|0)?14:15,14==i?a[((n+5256&4294967295)+4*(w&255)&4294967295)>>2]=g:15==i&&(i=0==(r|0)?16:17,16==i?a[(n+5256&-1)>>2]=g:17==i&&(i=1==(w&255|0)?18:19,18==i?a[((n+6280&4294967295)+4*((c&255)-1&4294967295)&4294967295)>>2]=g:19==i&&(i=255==(l[(n+8012&4294967295)+(w&255)&4294967295]&255|0)?20:21,20==i&&(h[(n+8012&4294967295)+(w&255)&4294967295]=a[(n+7752&4294967295)>>2]&255),r=(n+7756&4294967295)+(w&255)&4294967295,h[r]=h[r]+1&255,a[((n+6792&4294967295)+4*a[(n+7752&4294967295)>>2]&4294967295)>>2]=g,w=(256*(c&255)&4294967295)+(w&255)&4294967295,c=n+7752&4294967295,r=Ma[c>>2],a[c>>2]=r+1&4294967295,a[((n+7272&4294967295)+4*r&4294967295)>>2]=w))));while(0);i=7!=((b=h[g],128<=b?b-256:b)|0);k=g;i?(w=22,i=23):(w=22,i=24);e:do if(23==i)for(;;){Ze=$(23==w?Ze:k)+1&4294967295;g=g+Ze&4294967295;i=7!=((b=h[g],128<=b?b-256:b)|0);var Ze=g;if(i)i=w=23;else{w=23;break e}}while(0);g=(22==w?k:Ze)+1&4294967295;i=3}}5==i&&Ea(a[(a[lb>>2]+12&4294967295)>>2],gw&4294967295,e([Mi&4294967295,0,0,0,g-a[(n+1048&4294967295)>>2]&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));i=0==(a[(F+5256&-1)>>2]|0)?13:14;13==i&&Ea(a[(a[lb>>2]+12&4294967295)>>2],hw&4294967295,e([m,0,0,0],["i8*",0,0,0],y));j=a[(F+1052&4294967295)>>2]+8&4294967295;m=0;c:for(;;){a[((F+1056&4294967295)+4*m&4294967295)>>2]=j;n=Ze=(b=h[j],128<=b?b-256:b);i=0!=(Ze|0)?16:17;d:do if(16==i)for(;;)if(j=j+n&4294967295,n=Ze=(b=h[j],128<=b?b-256:b),0!=(Ze|0))i=16;else break d;while(0);j=j+1&4294967295;m=Ze=m+1&4294967295;if(!(1024>(Ze|0)))break c}g=0;i=19;break a}while(0);Ea(a[(a[lb>>2]+12&4294967295)>>2],iw&4294967295,e([d&4294967295,0,0,0,a[(c&4294967295)>>2],0,0,0,n,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0],y));g=2;i=19;break a}}while(0);4==i&&(5==(0==(f|0)?5:6)&&Ea(a[(a[lb>>2]+12&4294967295)>>2],jw&4294967295,e([d&4294967295,0,0,0],["i8*",0,0,0],y)),g=1);s=d;return g}function Zv(a){var m,f=null,d,i,g;i=0;var j=a,a=j+1&4294967295;d=f=(b=h[j],128<=b?b-256:b)&255;j=0;0!=(f|0)?(f=0,m=1):(f=0,m=2);a:do if(1==m)for(;;)if(g=d+(8*(1==f?g:j)&4294967295)&4294967295,g=g>>8^g&1023,i=i+1&4294967295,d=a,a=d+1&4294967295,d=f=(b=h[d],128<=b?b-256:b)&255,0!=(f|0))m=f=1;else{f=1;break a}while(0);return i+(0==f?j:g)&1023}function Yo(F,m,f){var d,i=null,g,j,e,c,k,w,r,s;h[f&4294967295]=0;e=(b=h[F],128<=b?b-256:b);d=0!=(Qc(e)|0)?1:2;a:do if(1==d)for(;;)if(F=F+1&4294967295,e=(b=h[F],128<=b?b-256:b),0!=(Qc(e)|0))d=1;else{d=2;break a}while(0);a:for(;;){e=w=l[F];if(0==(w&255|0)){d=34;break a}if(!(0!=(Qc(e&255)|0)^1)){d=34;break a}d=124==(e&255|0)?5:7;b:do if(5==d){e=w=l[F+1&4294967295];if(124==(w&255|0))break b;F=F+1&4294967295;d=2;continue a}while(0);k=-1;w=0;j=1;if(!((j|0)<(a[ae>>2]|0))){d=22;break a}b:for(;;){d=0==(a[(Z+4*j&4294967295)>>2]|0)?20:9;c:do if(9==d){if(15==(l[a[(Z+4*j&4294967295)>>2]+11&4294967295]&255|0))break c;c=0;for(r=a[(a[(Z+4*j&4294967295)>>2]&4294967295)>>2];;){e=d=l[F+c&4294967295];if(!(32<(d&255|0))){d=13;break}if(!(4>(c|0))){d=13;break}var L=c;if((e&255|0)==(r>>>((8*c&4294967295)>>>0)&255|0))i=14;else{i=14;d=16;break}c=L+1&4294967295;d=11}if(13==d)var t=c,i=13;if(!(((13==i?t:L)|0)>(k|0)))break c;d=4==(c|0)?19:18;if(18==d&&0!=(r>>>((8*c&4294967295)>>>0)&255|0))break c;k=c;w=l[a[(Z+4*j&4294967295)>>2]+10&4294967295]&255}while(0);j=j+1&4294967295;if(!((j|0)<(a[ae>>2]|0)))break b}if(0==(w|0)){d=22;break a}d=0>=(k|0)?24:25;24==d&&(k=1);F=F+(k+0&4294967295)&4294967295;j=w&255;c=m;m=c+1&4294967295;h[c]=j;if(21!=(w|0)){d=2;continue a}for(s=m;;){e=w=l[F];if(0!=(Qc(w&255)|0))break;if(0==(e&255|0))break;F=F+1&4294967295;w=$k(e&255)&255;j=m;m=j+1&4294967295;h[j]=w}h[m]=0;d=0==(e&255|0)?31:33;if(31==d)if(0==(nb(s,Gg&4294967295)|0)){d=32;break a}else d=2;else 33==d&&(e=m,m=e+1&4294967295,h[e]=124,d=2)}34==d?(h[m]=0,g=F):22==d?(h[f&4294967295]=h[F],h[f+1&4294967295]=0,h[m]=0,g=F+1&4294967295):32==d&&(h[s]=0,g=F);return g}function gk(F,m){var f,d,i,g,j,e;i=m;g=F;d=g+1&4294967295;g=e=l[g];f=0<(e&255|0)?1:14;a:do if(1==f)for(;;){f=255==(g&255|0)?2:3;c:do if(3==f){e=f=Ma[(Z+4*(g&255)&4294967295)>>2];if(0==(f|0))break c;f=1==(l[e+11&4294967295]&255|0)?5:9;d:do if(5==f){if(!(4>=(l[e+14&4294967295]&255|0)))break d;if(0!=(P[(e+8&4294967295)>>1]&65535|0))break d;if(!(1<(l[e+14&4294967295]&255|0)))break c;g=h[(kw&4294967295)+(l[e+14&4294967295]&255)&4294967295];e=i;i=e+1&4294967295;h[e]=g;break c}while(0);e=a[(e&4294967295)>>2];j=f=e&255;f=0!=(f&255|0)?10:11;d:do if(10==f)for(;;)if(f=j,j=i,i=j+1&4294967295,h[j]=f,e>>>=8,j=f=e&255,0!=(f&255|0))f=10;else{f=11;break d}while(0);if(21!=(g&255|0))break c;e=(b=h[d],128<=b?b-256:b);if(0==(dq(e)|0))break c;for(;;)if(e=d,d=e+1&4294967295,e=h[e],f=i,i=f+1&4294967295,h[f]=e,e=(b=h[d],128<=b?b-256:b),0!=(dq(e)|0))f=13;else break c}while(0);g=d;d=g+1&4294967295;g=e=l[g];if(0<(e&255|0))f=1;else break a}while(0);h[i]=0}function bo(F,m,f,d){var i=s;s+=152;la(i,0,152);var g,j=null,e,c;g=3==(a[Hd>>2]|0)?1:8;a:do if(1==g){h[i+132&-1]=0;g=0==(d|0)?2:3;2==g?Vr(l[f+10&4294967295]&255,i):3==g&&Ed(0,0,d,i);d=g=$(i+132&-1);if(!(0<(g|0))){g=8;break a}var k=(b=h[i+132&-1],128<=b?b-256:b);c=k;32<k>>>0?(j=5,g=6):(j=5,g=7);6==g&&(fa(F+a[m>>2]&4294967295,i+132&-1),e=m,a[e>>2]=a[e>>2]+d&4294967295,e=c,j=6);g=32<=(6==j?e:k)>>>0?23:8;break a}while(0);a:do if(8==g){e=1;d=a[(f&4294967295)>>2];for(;;){j=g=d&255;if(0==(g|0))break a;if(47==(j|0)&0==(a[lw>>2]|0))break a;g=3==(a[Hd>>2]|0)?12:20;c:do if(12==g){g=j;if(0!=(e|0)&95==(g|0))break a;g=35==(g|0)?14:15;if(14==g&&2==(l[f+11&4294967295]&255|0))break a;g=0!=(e|0)?17:16;if(16==g&&0!=(10>(j-48&4294967295)>>>0&1|0)){g=22;break c}g=32<=(j|0)&128>(j|0)?18:19;18==g&&(j=P[(mw+2*(j-32&4294967295)&4294967295)>>1]&65535);g=De(j,F+a[m>>2]&4294967295);j=m;a[j>>2]=a[j>>2]+g&4294967295;g=21;break c}else if(20==g){g=j&255;j=m;c=a[j>>2];a[j>>2]=c+1&4294967295;h[F+c&4294967295]=g;g=21;break c}while(0);21==g&&(e=0);d>>=8;g=9}}while(0);s=i}function Rf(b,m,f){var d,i;i=m;m=0!=(a[((b+968&4294967295)+4*f&4294967295)>>2]|0)?1:4;a:do if(1==m)m=0!=(hk(a[((b+968&4294967295)+4*f&4294967295)>>2],i)|0)?2:3,2==m?d=1:3==m&&(d=0);else if(4==m)if(m=7<(f|0)?5:6,5==m)d=0;else if(6==m){var g=i,m=0<(a[(b+964&4294967295)>>2]|0)?7:11;b:do if(7==m){i=m=g-a[(b+964&4294967295)>>2]&4294967295;m=0<(m|0)?8:10;c:do if(8==m){if(!(128>(i|0)))break c;break b}while(0);d=0;break a}else if(11==m){if(!(192<=(g|0)&606>(i|0)))break b;d=1<<f&l[(b+708&4294967295)+(l[Ip+(i-192&4294967295)&4294967295]&255)&4294967295]&255;break a}while(0);m=0<=(i|0)&128>(i|0)?14:15;14==m?d=1<<f&l[(b+708&4294967295)+i&4294967295]&255:15==m&&(d=0)}while(0);return d}function zl(F,m,f){var d=s;s+=248;la(d,0,248);var i,g;i=d+4;var j=d+8,e=d+168;a[i>>2]=0;fa(j&4294967295,m);g=nw(F,j&4294967295,e&4294967295,d,i,0);F=1;i=4<=(f|0)?2:1;a:do if(2==i){for(;;){if(!((F|0)<(a[d>>2]|0)))break a;if(((b=h[e+F&4294967295],128<=b?b-256:b)|0)>=(g|0)){i=4;break}F=F+1&4294967295;i=2}h[e+F&4294967295]=f&255}else if(1==i){if(!((F|0)<(a[d>>2]|0)))break a;for(;;)if(i=((b=h[e+F&4294967295],128<=b?b-256:b)|0)>(f|0)?7:8,7==i&&(h[e+F&4294967295]=f&255),F=F+1&4294967295,(F|0)<(a[d>>2]|0))i=6;else break a}while(0);F=1;f=j&4294967295;i=0!=(l[f]&255|0)?10:17;a:do if(10==i)for(;;){i=2==(l[a[(Z+4*(l[f]&255)&4294967295)>>2]+11&4294967295]&255|0)?11:16;c:do if(11==i){if(0!=(a[(a[(Z+4*(l[f]&255)&4294967295)>>2]+4&4294967295)>>2]&1048576|0))break c;i=0==((b=h[e+F&4294967295],128<=b?b-256:b)|0)?14:13;d:do if(13==i){i=1<((b=h[e+F&4294967295],128<=b?b-256:b)|0)?14:15;break d}while(0);14==i&&(j=h[Jp+(l[e+F&4294967295]&255)&4294967295],g=m,m=g+1&4294967295,h[g]=j);F=F+1&4294967295}while(0);i=f;f=i+1&4294967295;i=h[i];j=m;m=j+1&4294967295;h[j]=i;if(0!=(l[f]&255|0))i=10;else break a}while(0);h[m]=0;s=d}function nw(F,m,f,d,i,g){var j,e=null,c,k,w,r,s,L,t,p;r=c=m;m=1;t=s=-1;p=0;h[f&4294967295]=1;a:for(;;){k=c;c=k+1&4294967295;k=j=l[k];if(0==(j&255|0))break a;if(!(79>(m|0)))break a;w=j=Ma[(Z+4*(k&255)&4294967295)>>2];if(0==(j|0))continue a;j=1==(l[w+11&4294967295]&255|0)?5:24;b:do if(5==j){if(0!=(P[(w+8&4294967295)>>1]&65535|0))break b;j=8==(k&255|0)?7:20;if(7==j){var u=m-1&4294967295;L=u;e=7;c:for(;;){if(!(0<((19==e?z:u)|0)))continue a;if(0!=(a[i>>2]|0))continue a;if(!(4>((b=h[f+L&4294967295],128<=b?b-256:b)|0)))continue a;j=0!=((b=h[f+L&4294967295],128<=b?b-256:b)|0)?12:19;if(12==j&&1!=((b=h[f+L&4294967295],128<=b?b-256:b)|0))break c;var z=L-1&4294967295;L=z;e=19}h[f+L&4294967295]=4;j=4>(s|0)?14:15;14==j&&(s=4,p=L);e=1;if(!((e|0)<(L|0)))continue a;for(;;)if(j=4==((b=h[f+e&4294967295],128<=b?b-256:b)|0)?17:18,17==j&&(h[f+e&4294967295]=3),e=e+1&4294967295,(e|0)<(L|0))j=16;else continue a}else if(20==j){j=4>(l[w+14&4294967295]&255|0)?22:21;if(21==j&&0!=(a[i>>2]|0))continue a;t=l[w+14&4294967295]&255;if(!((t|0)>(s|0)))continue a;s=t;continue a}}while(0);j=2==(l[w+11&4294967295]&255|0)?25:34;b:do if(25==j){if(0!=(a[(w+4&4294967295)>>2]&1048576|0)){j=34;break b}h[f+m&4294967295]=t&255;L=t;4<=(L|0)?(e=26,j=27):(e=26,j=29);c:do if(27==j){var C=t;if(!((C|0)>=(s|0))){e=27;break c}p=m;var q=t;s=q;e=28}while(0);j=0>((28==e?q:27==e?C:L)|0)?30:33;c:do if(30==j){if(0==(g&1|0))break c;if(0==(a[(w+4&4294967295)>>2]&2|0))break c;h[f+m&4294967295]=1}while(0);m=m+1&4294967295;t=-1;j=38;break b}while(0);b:do if(34==j){if(20!=(k&255|0))break b;h[f+m&4294967295]=t&255;if(0!=(t|0))break b;if(0==(g&1|0))break b;w=m;m=w+1&4294967295;h[f+w&4294967295]=1}while(0);j=r;r=j+1&4294967295;h[j]=k}h[f+m&4294967295]=1;h[r]=0;j=0<(a[i>>2]|0)?40:43;a:do if(40==j)j=(a[i>>2]|0)>=(m|0)?41:42,41==j&&(a[i>>2]=m-1&4294967295),s=h[f+a[i>>2]&4294967295]=4,p=a[i>>2];else if(43==j){if(5!=(s|0))break a;e=1;j=(e|0)<(m|0)?45:52;b:do if(45==j)for(;;)if(j=4==((b=h[f+e&4294967295],128<=b?b-256:b)|0)?46:49,46==j&&(g=f+e&4294967295,j=0!=(a[((F&4294967295)+12&4294967295)>>2]&131072|0)?47:48,47==j?h[g]=1:48==j&&(h[g]=3)),j=5==((b=h[f+e&4294967295],128<=b?b-256:b)|0)?50:51,50==j&&(h[f+e&4294967295]=4,p=e),e=e+1&4294967295,(e|0)<(m|0))j=45;else{j=52;break b}while(0);s=4}while(0);a[i>>2]=p;a[d>>2]=m;return s}function Hg(F,m,f,d,i){var g=s;s+=408;la(g,0,408);var j,e=null,c,k,w,r,t,L;L=g+4;var q,p,u,z,C,E,B=g+8,y=g+88;E=g+168;k=g+248;var D;c=d;r=q=0;d=a[((F&4294967295)+12&4294967295)>>2];1==(0!=(f|0)?1:2)&&(r=a[(f&4294967295)>>2]);t=0;e=2;a:for(;;){p=t;if(!(160>((7==e?u:0)|0))){e=3;break a}h[k+t&4294967295]=h[m+p&4294967295];j=(l[k+t&4294967295]&255|0)>=(a[ae>>2]|0)?5:6;5==j&&(h[k+t&4294967295]=13);j=t;if(0==(l[k+j&4294967295]&255|0)){e=6;break a}t=u=t+1&4294967295;e=7}if(9==(0==((6==e?j:p)|0)?223:9)){u=l[k+(t-1&4294967295)&4294967295]&255;z=l[k+(t-2&4294967295)&4294967295]&255;p=m+157&4294967295;a[L>>2]=r&7;if(10==(0!=(r&8|0)?10:11))a[L>>2]=r&3,q=1;r=j=nw(F,k&4294967295,B&4294967295,g,L,1);j=0>(j|0)?12:17;a:do if(12==j){if(0==(f|0))break a;j=0!=(a[((F&4294967295)+12&4294967295)>>2]&1|0)?14:16;b:do if(14==j){if(2!=(a[g>>2]|0)){j=16;break b}h[B+1&4294967295]=0;r=f&4294967295;a[r>>2]|=4096}while(0);r=0}while(0);t=1;e=k&4294967295;j=0!=(l[e]&255|0)?18:33;a:do if(18==j)for(;;){j=2==(l[a[(Z+4*(l[e&4294967295]&255)&4294967295)>>2]+11&4294967295]&255|0)?19:32;c:do if(19==j){if(0!=(a[(a[(Z+4*(l[e&4294967295]&255)&4294967295)>>2]+4&4294967295)>>2]&1048576|0))break c;D=f=0;j=12==(l[a[(Z+4*(l[e+1&4294967295]&255)&4294967295)>>2]+10&4294967295]&255|0)?21:22;d:do if(21==j){D=1;j=24;break d}else if(22==j){if(0!=(D|0)){j=24;break d}j=0!=(a[(a[(Z+4*(l[e&4294967295]&255)&4294967295)>>2]+4&4294967295)>>2]&2097152|0)?24:25;break d}while(0);24==j&&(f=f+1&4294967295);h[E+t&4294967295]=f&255;j=0!=(D|0)?26:27;26==j&&(e=e+1&4294967295);j=0!=(b=h[ow+(l[a[(Z+4*(l[e+1&4294967295]&255)&4294967295)>>2]+11&4294967295]&255)&4294967295],128<=b?b-256:b)?28:31;d:do if(28==j){j=2!=(l[a[(Z+4*(l[e+2&4294967295]&255)&4294967295)>>2]+11&4294967295]&255|0)?30:29;if(29==j&&0==(a[(a[(Z+4*(l[e+1&4294967295]&255)&4294967295)>>2]+4&4294967295)>>2]&2097152|0)){j=31;break d}f=f+1&4294967295}while(0);h[y+t&4294967295]=f&255;t=t+1&4294967295}while(0);e=e+1&4294967295;if(0!=(l[e]&255|0))j=18;else break a}while(0);j=a[((F&4294967295)+8&4294967295)>>2];j=8==j?34:1==j?36:10==j?41:2==j?44:3==j?68:4==j?75:5==j?81:6==j?89:7==j?101:9==j?108:112;a:do if(34==j){if(0<((b=h[y+1&4294967295],128<=b?b-256:b)|0)){j=112;break a}j=0==((b=h[y+2&4294967295],128<=b?b-256:b)|0)?112:36;break a}else if(41==j){if(0!=(a[L>>2]|0)){j=112;break a}if(!(4>(a[g>>2]|0))){j=44;break a}r=h[B+(a[g>>2]-1&4294967295)&4294967295]=4;j=114;break a}else if(68==j){if(0!=(a[L>>2]|0)){j=112;break a}r=a[g>>2]-1&4294967295;a[L>>2]=r;for(e=69;;){if(!(0<((73==e?K:r)|0))){j=74;break}j=0>((b=h[B+a[L>>2]&4294967295],128<=b?b-256:b)|0);C=a[L>>2];if(j){j=72;break}var K=C-1&4294967295;a[L>>2]=K;e=73;j=70}72==j&&(h[B+C&4294967295]=4);r=4;j=114;break a}else if(75==j){if(0!=(a[L>>2]|0)){j=112;break a}a[L>>2]=a[g>>2]-3&4294967295;j=1>(a[L>>2]|0)?77:78;77==j&&(a[L>>2]=1);j=0==(r|0)?79:80;79==j&&(h[B+a[L>>2]&4294967295]=4);r=4;j=114;break a}else if(81==j){if(0!=(a[L>>2]|0)){j=112;break a}a[L>>2]=a[g>>2]-3&4294967295;j=16>(a[g>>2]|0)?83:88;83==j&&(j=2==(l[a[(Z+4*u&4294967295)>>2]+11&4294967295]&255|0)?84:85,84==j?(r=(b=h[pw+a[g>>2]&4294967295],128<=b?b-256:b),a[L>>2]=r):85==j&&(r=a[g>>2],j=4==(l[a[(Z+4*u&4294967295)>>2]+11&4294967295]&255|0)?86:87,86==j?(r=(b=h[qw+r&4294967295],128<=b?b-256:b),a[L>>2]=r):87==j&&(r=(b=h[rw+r&4294967295],128<=b?b-256:b),a[L>>2]=r)));r=h[B+a[L>>2]&4294967295]=4;j=114;break a}else if(89==j){if(0!=(a[L>>2]|0)){j=112;break a}r=-1;t=1;j=(t|0)<(a[g>>2]-1&4294967295|0)?91:95;b:do if(91==j)for(;;){j=0>((b=h[B+t&4294967295],128<=b?b-256:b)|0)?92:94;d:do if(92==j){e=C=(b=h[y+t&4294967295],128<=b?b-256:b);if(!((C|0)>=(r|0)))break d;r=e;a[L>>2]=t}while(0);t=t+1&4294967295;if((t|0)<(a[g>>2]-
1&4294967295|0))j=91;else break b}while(0);j=(j=2==((b=h[y+(a[g>>2]-1&4294967295)&4294967295],128<=b?b-256:b)|0))?96:98;b:do if(96==j){if(!(2>(r|0)))break b;a[L>>2]=a[g>>2]-1&4294967295}else if(98==j){if(!(0>=(r|0)))break b;a[L>>2]=1}while(0);r=h[B+a[L>>2]&4294967295]=4;j=114;break a}else if(101==j){if(0!=(a[L>>2]|0)){j=112;break a}a[L>>2]=a[g>>2]-1&4294967295;for(t=1;;){if(!((t|0)<(a[g>>2]|0))){j=107;break}r=1==((b=h[B+t&4294967295],128<=b?b-256:b)|0);var I=t;if(r){j=105;break}t=I+1&4294967295;j=103}105==j&&(a[L>>2]=I-1&4294967295);r=h[B+a[L>>2]&4294967295]=4;j=114;break a}else if(108==j){t=1;if(!((t|0)<(a[g>>2]|0))){j=112;break a}for(;;)if(j=0>((b=h[B+t&4294967295],128<=b?b-256:b)|0)?110:111,110==j&&(h[B+t&4294967295]=4),t=t+1&4294967295,(t|0)<(a[g>>2]|0))j=109;else{j=112;break a}}while(0);a:do if(36==j){if(0!=(a[L>>2]|0)){j=112;break a}if(!(2<(a[g>>2]|0))){j=112;break a}a[L>>2]=2;j=0==(r|0)?39:40;39==j&&(h[B+a[L>>2]&4294967295]=4);r=4;j=114;break a}else if(44==j){if(0!=(a[L>>2]|0)){j=112;break a}r=4;j=2<(a[g>>2]|0)?46:63;b:do if(46==j){a[L>>2]=a[g>>2]-2&4294967295;j=0!=(d&768|0)?47:55;c:do if(47==j){if(2==(l[a[(Z+4*u&4294967295)>>2]+11&4294967295]&255|0))break c;j=0!=(d&256|0)?49:50;if(49==j)a[L>>2]=a[g>>2]-1&4294967295;else if(50==j){e=a[(a[(Z+4*u&4294967295)>>2]&4294967295)>>2];C=a[(a[(Z+4*z&4294967295)>>2]&4294967295)>>2];j=115==(e|0)?51:52;if(51==j&&110==(C|0))break c;j=110!=(e|0)&115!=(e|0)?54:53;if(53==j&&2==(l[a[(Z+4*z&4294967295)>>2]+11&4294967295]&255|0))break c;a[L>>2]=a[g>>2]-1&4294967295}}while(0);j=0!=(d&524288|0)?56:58;c:do if(56==j){e=(b=h[E+(a[g>>2]-1&4294967295)&4294967295],128<=b?b-256:b);C=(b=h[E+(a[g>>2]-2&4294967295)&4294967295],128<=b?b-256:b);if(!((e|0)>(C|0)))break c;a[L>>2]=a[g>>2]-1&4294967295}while(0);C=a[L>>2];0==((b=h[B+C&4294967295],128<=b?b-256:b)|0)?(e=58,j=60):(e=58,j=59);if(59==j){var x=a[L>>2];if(1==((b=h[B+x&4294967295],128<=b?b-256:b)|0))e=59;else break b}K=a[L>>2];j=1<((59==e?x:C)|0)?61:62;61==j?a[L>>2]=K-1&4294967295:62==j&&(a[L>>2]=K+1&4294967295)}else 63==j&&(a[L>>2]=1);while(0);if(!(0>((b=h[B+a[L>>2]&4294967295],128<=b?b-256:b)|0))){j=112;break a}j=4>((b=h[B+(a[L>>2]-1&4294967295)&4294967295],128<=b?b-256:b)|0)?67:66;if(66==j&&!(4>((b=h[B+(a[L>>2]+1&4294967295)&4294967295],128<=b?b-256:b)|0))){j=112;break a}h[B+a[L>>2]&4294967295]=r&255;j=112;break a}while(0);a:do if(112==j){if(!(4>(r|0))){j=114;break a}w=4;j=115;break a}while(0);114==j&&(w=3);j=0!=(d&4096|0)?116:121;a:do if(116==j){if(2!=(a[g>>2]|0))break a;j=4==((b=h[B+
1&4294967295],128<=b?b-256:b)|0)?118:119;118==j&&(h[B+2&4294967295]=3);if(4!=((b=h[B+2&4294967295],128<=b?b-256:b)|0))break a;h[B+1&4294967295]=3}while(0);j=0!=(d&8192|0)?122:126;a:do if(122==j){if(!(0>((b=h[B+1&4294967295],128<=b?b-256:b)|0)))break a;if(!(2<(a[g>>2]|0)))break a;if(!(4<=((b=h[B+2&4294967295],128<=b?b-256:b)|0)))break a;h[B+1&4294967295]=3}while(0);E=r=0;L=1;j=(L|0)<(a[g>>2]|0)?127:151;a:do if(127==j)for(;;){j=0>((b=h[B+L&4294967295],128<=b?b-256:b)|0)?128:145;c:do if(128==j){j=0!=(d&16|0)?129:131;d:do if(129==j){if(!(4>(w|0)))break d;if((L|0)==(a[g>>2]-1&4294967295|0)){j=145;break c}}while(0);j=0!=(d&32768|0)?132:134;d:do if(132==j){if(0!=(r|0))break d;h[B+L&4294967295]=w&255;r=1;w=3;j=145;break c}while(0);if(!(1>=((b=h[B+(L-1&4294967295)&4294967295],128<=b?b-256:b)|0))){j=145;break c}j=1>=((b=h[B+(L+1&4294967295)&4294967295],128<=b?b-256:b)|0)?138:136;if(136==j){if(4!=(w|0)){j=145;break c}if(!(2>=((b=h[B+(L+1&4294967295)&4294967295],128<=b?b-256:b)|0))){j=145;break c}}j=3==(w|0)?139:140;if(139==j&&0!=(d&32|0)){j=150;break c}j=1<(L|0)?141:144;d:do if(141==j){if(0==(d&64|0))break d;if(0!=((b=h[y+L&4294967295],128<=b?b-256:b)|0))break d;if(0<((b=h[y+(L+1&4294967295)&4294967295],128<=b?b-256:b)|0)){j=150;break c}}while(0);h[B+L&4294967295]=w&255;r=1;w=3;j=145;break c}while(0);c:do if(145==j){if(!(4<=((b=h[B+L&4294967295],128<=b?b-256:b)|0)))break c;j=0==(E|0)?147:148;if(147==j)E=L;else if(148==j){if(0==(d&128|0))break c;h[B+L&4294967295]=3}}while(0);L=L+1&4294967295;if((L|0)<(a[g>>2]|0))j=127;else break a}while(0);j=0!=(q|0)?152:156;a:do if(152==j){if(!(0>(c|0)))break a;w=F&4294967295;j=2>=(a[g>>2]|0)?154:155;154==j?c=a[(w+16&4294967295)>>2]:155==j&&(c=a[(w+20&4294967295)>>2])}while(0);w=r=0;L=1;j=(L|0)<(a[g>>2]|0)?157:160;a:do if(157==j)for(;;)if(j=((b=h[B+L&4294967295],128<=b?b-256:b)|0)>=(r|0)?158:159,158==j&&(r=(b=h[B+L&4294967295],128<=b?b-256:b),w=L),L=L+1&4294967295,(L|0)<(a[g>>2]|0))j=157;else break a;while(0);if(161==(0<=(c|0)?161:164))162==((c|0)>(r|0)|4>=(r|0)?162:163)&&(h[B+w&4294967295]=c&255),r=c;e=k&4294967295;L=1;j=0!=(i&1|0)?174:165;a:do if(165==j){i=c=Ma[(Z+4*(l[e]&255)&4294967295)>>2];if(0==(c|0))break a;j=1==(l[i+11&4294967295]&255|0)?167:168;167==j&&(i=a[(Z+4*(l[e+1&4294967295]&255)&4294967295)>>2]);if(0==(a[((F&4294967295)+4&4294967295)>>2]&48|0))break a;if(2!=(l[i+11&4294967295]&255|0))break a;j=0!=(a[((F&4294967295)+4&4294967295)>>2]&32|0)?171:173;b:do if(171==j){if(!(4<=((b=h[B+1&4294967295],128<=b?b-256:b)|0))){j=173;break b}i=m;m=i+1&4294967295;h[i]=11;break a}while(0);i=m;m=i+1&4294967295;h[i]=23}while(0);e=k&4294967295;a:for(;;){k=e;e=k+1&4294967295;k=i=l[k];if(0==(i&255|0))break a;if(!(m>>>0<p>>>0))break a;i=c=Ma[(Z+4*(k&255)&4294967295)>>2];if(0==(c|0))continue a;j=0==(l[i+11&4294967295]&255|0)?179:180;b:do if(179==j)a[(F+8288&4294967295)>>2]=0;else if(180==j){j=2==(l[i+11&4294967295]&255|0)?181:182;c:do if(181==j){j=0!=(a[(i+4&4294967295)>>2]&1048576|0)?182:183;break c}while(0);if(182==j&&20!=(l[e]&255|0))break b;c=(b=h[B+L&4294967295],128<=b?b-256:b);a[(F+8288&4294967295)>>2]=c;b=h[B+(L-1&4294967295)&4294967295];j=1>=(c|0)?186:201;c:do if(186==j){j=1<(L|0)?187:191;d:do if(187==j){if(!(4<=(r|0)))break d;if(0==(d&4|0))break d;if((L|0)!=(a[g>>2]-1&4294967295|0))break d;c=0;break c}while(0);j=0!=(d&2|0)?194:192;d:do if(192==j){if(1==(L|0)){j=194;break d}if((L|0)==(a[g>>2]-1&4294967295|0)){j=194;break d}j=(L|0)==(a[g>>2]-2&4294967295|0)?196:198;e:do if(196==j){if(!(1>=((b=h[B+(a[g>>2]-1&4294967295)&4294967295],128<=b?b-256:b)|0)))break e;c=1;break c}while(0);j=0>((b=h[B+(L-1&4294967295)&4294967295],128<=b?b-256:b)|0)?200:199;if(199==j&&0!=(d&65536|0))break c;c=0;h[B+L&4294967295]=c&255;break c}while(0);c=1}while(0);j=0==(c|0)|1<(c|0)?202:203;202==j&&(q=h[Jp+c&4294967295],j=m,m=j+1&4294967295,h[j]=q);j=((b=h[B+L&4294967295],128<=b?b-256:b)|0)>(r|0)?204:205;204==j&&(r=(b=h[B+L&4294967295],128<=b?b-256:b));j=12==(l[e]&255|0)?206:214;c:do if(206==j){q=j=a[(((F&4294967295)+24&4294967295)+8&4294967295)>>2];if(0==(j&1|0))break c;E=0;j=0!=(q&16|0)?208:210;d:do if(208==j){if((L|0)==(w|0)){j=212;break d}E=1;j=213;break d}else if(210==j){if(!(4>(c|0))){j=212;break d}E=1;j=213;break d}while(0);if(212==j&&0==(E|0))break c;e=e+1&4294967295}while(0);j=4<=(c|0)?215:219;c:do if(215==j){if(2!=(a[(((F&4294967295)+24&4294967295)+8&4294967295)>>2]|0)){j=219;break c}if((L|0)!=(a[g>>2]-2&4294967295|0)){j=219;break c}if(0!=((b=h[y+L&4294967295],128<=b?b-256:b)|0)){j=219;break c}c=m;m=c+1&4294967295;h[c]=k;k=12}while(0);L=L+1&4294967295}while(0);if(1==(k&255|0))continue a;i=m;m=i+1&4294967295;h[i]=k}h[m]=0}s=g}function Wq(b,m,f,d){var i,g,j;j=$(d);i=($(m)+j&4294967295|0)>=(f|0)?14:1;a:do if(1==i){j=0;g=f=d;f=g+1&4294967295;g=i=l[g];i=0!=(i&255|0)?2:12;b:do if(2==i)for(;;){i=(g&255|0)>=(a[ae>>2]|0)?3:4;d:do if(4==i){var h=a[(Z+4*(g&255)&4294967295)>>2];i=1==(l[a[(Z+4*(g&255)&4294967295)>>2]+11&4294967295]&255|0)?5:7;if(5==i){if(!(4>(l[h+14&4294967295]&255|0)))break d;j=1}else if(7==i){if(2!=(l[h+11&4294967295]&255|0))break d;i=0==(a[(a[(Z+4*(g&255)&4294967295)>>2]+4&4294967295)>>2]&2|0)?9:11;e:do if(9==i){if(0!=(j|0)){i=11;break e}h=b+8300&4294967295;a[h>>2]=a[h>>2]+1&4294967295}while(0);j=0;h=b+8296&4294967295;a[h>>2]=a[h>>2]+1&4294967295}}while(0);g=f;f=g+1&4294967295;g=i=l[g];if(0!=(i&255|0))i=2;else{i=12;break b}}while(0);if(0==(m|0))break a;md(m,d)}while(0)}function Gf(F,m,f,d,i,g,j){var c=s;s+=416;la(c,0,416);var n,k=null,w,r,t,L,q,p=c+4,u,z,C,E,B=c+8,Cc,D,K,I=c+12,x,X=c+16,H=c+32,R=c+48,G=c+88,Pb=c+
248,S,Y=c+368,na=c+376;x=K=Cc=a[c>>2]=0;n=0==(a[(F+1048&4294967295)>>2]|0)?1:2;a:do if(1==n)w=0;else if(2==n){n=0!=(j|0)?3:4;3==n&&(x=a[(j&4294967295)>>2]);D=0;k=4;b:for(;;){if(!(159>((5==k?v:0)|0))){n=8;break b}var M=r=h[m+D&4294967295],P=D;D=P+1&4294967295;h[G+P&4294967295]=M;if(0==(r&255|0)){n=8;break b}var v=D,k=5;n=6}h[G+D&4294967295]=0;n=2==(a[Hd>>2]|0)?9:17;b:do if(9==n){if(0!=(g&268435456|0)){n=17;break b}for(S=0;;){var N=l[m+S&4294967295];r=N;if(32==(N&255|0)){n=14;break}if(0==(r&255|0)){n=14;break}h[Pb+S&4294967295]=r;S=S+1&4294967295;n=11}h[Pb+S&4294967295]=0;var ia=a[Le>>2],Z=Pb&4294967295;n=0!=(g&-2147483648|0)?15:16;15==n?Ea(ia,sw&4294967295,e([Z,0,0,0],["i8*",0,0,0],y)):16==n&&Ea(ia,tw&4294967295,e([Z,0,0,0],["i8*",0,0,0],y))}while(0);a[I>>2]=m;a[(F+8296&4294967295)>>2]=0;a[(F+8300&4294967295)>>2]=0;n=0!=(i|0)?18:19;18==n&&(h[i&4294967295]=0);var T=Y&4294967295,ma=Y+1&4294967295,wa=Y&4294967295,oa=na&4294967295,bb=na&4294967295,Va=na&4294967295,V=X+4&4294967295,ja=X+4&4294967295,ya=X&4294967295,va=X+4&4294967295,xa=X+8&4294967295,Ij=X+8&4294967295,dc=X+12&4294967295,Ia=X+12&4294967295,ba=X+4&4294967295,ta=H&4294967295,qb=H&4294967295,ob=H&4294967295,Ra=X&4294967295,Sa=X,ac=H,Fa=X&4294967295,qa=R&4294967295,ua=R&4294967295,cc=R&4294967295,Ma=X+4&4294967295,Q=X&4294967295,za=X&4294967295,Kb=R&4294967295,Ga=R&4294967295,Qb=X+4&4294967295,gc=X&4294967295;b:for(;;){var hb=l[a[I>>2]];r=hb;if(32==(hb&255|0)){n=104;break b}if(0==(r&255|0)){n=104;break b}q=sc(c,a[I>>2]);n=0!=(Sb(a[c>>2])|0)?23:24;23==n&&(Cc=Cc+1&4294967295);E=l[(F+7756&4294967295)+(r&255)&4294967295]&255;n=0!=(uq(a[c>>2])|0)?25:30;c:do if(25==n){n=0==((b=h[(F&4294967295)+250&4294967295],128<=b?b-256:b)|0)?27:26;if(26==n&&0!=(Cc|0)){n=30;break c}h[T]=95;var cb=q,ga,ka,Aa,rb;ga=a[I>>2];ka=ma;Aa=ga+cb;if(ka%4==ga%4&&8<cb){for(;0!==ga%4&&ga<Aa;)h[ka++]=h[ga++];ga>>=2;ka>>=2;for(rb=Aa>>2;ga<rb;)a[ka++]=a[ga++];ga<<=2;ka<<=2}for(;ga<Aa;)h[ka++]=h[ga++];h[Y+(q+1&4294967295)&4294967295]=0;aa(F,wa,oa);var Ba=K+1&4294967295;K=Ba;n=2<=Ba>>>0?28:29;if(28==n){var Dc=$(bb),ab=bb+Dc&4294967295;ga=uw&4294967295;ka=ab;for(Aa=ga+2;ga<Aa;)h[ka++]=h[ga++];K=0}Wq(F,f,d,Va);a[I>>2]=a[I>>2]+q&4294967295;n=20;continue b}while(0);u=K=0;var hc=a[c>>2]-a[(F+964&4294967295)>>2]&4294967295;D=hc;n=0<=(hc|0)?31:34;c:do if(31==n){if(!(128>(D|0))){n=34;break c}if(0==(a[((F+6280&4294967295)+4*D&4294967295)>>2]|0)){n=34;break c}fj(F,I,m,q,a[((F+6280&4294967295)+4*D&4294967295)>>2],X,g,x);u=1;n=85;break c}while(0);c:do if(34==n){if(0!=(u|0)){n=85;break c}n=0<(E|0)?36:43;d:do if(36==n){t=h[a[I>>2]+1&4294967295];L=(256*(t&255)&4294967295)+(r&255)&4294967295;b=h[a[I>>2]+2&4294967295];z=C=l[(F+8012&4294967295)+(r&255)&4294967295]&255;if(!((z|0)<(E+C&4294967295|0))){n=43;break d}for(;;){n=(a[((F+7272&4294967295)+4*z&4294967295)>>2]|0)==(L|0)?38:42;f:do if(38==n){u=1;a[p>>2]=a[I>>2];fj(F,p,m,2,a[((F+6792&4294967295)+4*z&4294967295)>>2],H,g,x);n=0<(a[ta>>2]|0)?39:40;39==n&&(a[qb>>2]=a[qb>>2]+35&4294967295);fj(F,I,m,1,a[((F+5256&4294967295)+4*(r&255)&4294967295)>>2],X,g,x);if(!((a[ob>>2]|0)>=(a[Ra>>2]|0))){n=42;break f}ga=ac;ka=Sa;Aa=ga+16;if(ka%4==ga%4){for(;0!==ga%4&&ga<Aa;)h[ka++]=h[ga++];ga>>=2;ka>>=2;for(rb=Aa>>2;ga<rb;)a[ka++]=a[ga++];ga<<=2;ka<<=2}for(;ga<Aa;)h[ka++]=h[ga++];a[I>>2]=a[p>>2]}while(0);z=z+1&4294967295;if((z|0)<(E+C&4294967295|0))n=37;else{n=43;break d}}}while(0);if(0!=(u|0)){n=85;break c}var Xa=F,ha=m;n=0!=(a[((F+5256&4294967295)+4*(r&255)&4294967295)>>2]|0)?45:46;d:do if(45==n){fj(Xa,I,ha,1,a[((F+5256&4294967295)+
4*(r&255)&4294967295)>>2],X,g,x);n=74;break d}else if(46==n){fj(Xa,I,ha,0,a[(F+5256&-1)>>2],X,g,x);if(0!=(a[za>>2]|0)){n=84;break d}if(0!=(a[mg>>2]&16|0)){n=74;break d}E=sc(B,a[I>>2]+-1&4294967295)-1&4294967295;n=0<(a[(F+964&4294967295)>>2]|0)?49:52;e:do if(49==n){var A=a[B>>2];if(577>=(A|0))k=49;else{k=49;n=53;break e}if(0!=(jf(a[B>>2])|0)){n=51;break b}else{n=52;break e}}while(0);if(52==n)var mb=a[B>>2],k=52;n=57384==((52==k?mb:A)|0)?54:56;e:do if(54==n){if(!((a[Ee>>2]|0)<(a[(((F&4294967295)+100&4294967295)+64&4294967295)>>2]|0))){n=56;break e}a[Ee>>2]=a[(((F&4294967295)+100&4294967295)+64&4294967295)>>2]}while(0);n=0!=(Al(a[B>>2])|0)?57:59;e:do if(57==n){if(!((a[Ee>>2]|0)<(a[(((F&4294967295)+24&4294967295)+64&4294967295)>>2]|0))){n=59;break e}a[Ee>>2]=a[(((F&4294967295)+24&4294967295)+64&4294967295)>>2]}while(0);n=192<=(a[B>>2]|0)&606>(a[B>>2]|0)?60:71;e:do if(60==n){var ic=l[Ip+(a[B>>2]-192&4294967295)&4294967295]&255;D=ic;if(0==(ic|0)){n=71;break e}n=32!=((b=h[a[I>>2]+-2&4294967295],128<=b?b-256:b)|0)?63:62;if(62==n&&32==((b=h[a[I>>2]+E&4294967295],128<=b?b-256:b)|0)){n=74;break d}a[p>>2]=a[I>>2]+-1&4294967295;h[a[I>>2]+-1&4294967295]=D&255;var sa=h[a[I>>2]+E&4294967295];h[a[I>>2]&4294967295]=sa;n=32!=((b=sa,128<=b?b-256:b)|0)?64:65;f:do if(64==n)for(;;){a[I>>2]=a[I>>2]+1&4294967295;var Wa=h[a[I>>2]+E&4294967295];h[a[I>>2]&4294967295]=Wa;if(32!=((b=Wa,128<=b?b-256:b)|0))n=64;else{n=65;break f}}while(0);var Ua=E;E=Ua-1&4294967295;n=0<(Ua|0)?66:67;f:do if(66==n)for(;;){var jb=a[I>>2];a[I>>2]=jb+1&4294967295;h[jb]=32;var Ja=E;E=Ja-1&4294967295;if(0<(Ja|0))n=66;else{n=67;break f}}while(0);n=0!=(a[(((F&4294967295)+24&4294967295)+4&4294967295)>>2]|0)?68:70;f:do if(68==n){if(!(0<(ik(vw&4294967295,a[B>>2])|0))){n=70;break f}a[I>>2]=a[p>>2];n=20;continue b}while(0);h[f&4294967295]=0;a[I>>2]=m;a[(F+8296&4294967295)>>2]=0;a[(F+8300&4294967295)>>2]=0;n=20;continue b}while(0);if(!(12800<=(a[B>>2]|0)&42752>(a[B>>2]|0))){n=74;break d}if(0==(i|0)){n=74;break d}aa(F,Xq&4294967295,Kb);a[Qb>>2]=Ga;a[gc>>2]=1;a[I>>2]=a[I>>2]+(q-1&4294967295)&4294967295;n=74;break d}while(0);d:do if(74==n){if(0!=(a[Fa>>2]|0)){n=84;break d}n=768<=(a[c>>2]|0)&879>=(a[c>>2]|0)?83:76;e:do if(76==n)if(n=0!=(Sb(a[c>>2])|0)?77:81,77==n){if(1<(Cc|0)){n=79;break b}if(32<((b=h[a[I>>2]+(q-1&4294967295)&4294967295],128<=b?b-256:b)|0)){n=79;break b}}else if(81==n){Im(F,a[c>>2],-1,qa,0);if(0==(b=h[ua],128<=b?b-256:b)){n=83;break e}a[Ma>>2]=cc;a[Q>>2]=1}while(0);a[I>>2]=a[I>>2]+(q-1&4294967295)&4294967295;n=85;break c}while(0);a[(F+652&4294967295)>>2]=0}while(0);n=0==(a[V>>2]|0)?86:87;86==n&&(a[ja>>2]=bf&4294967295);if(!(0<(a[ya>>2]|0))){n=20;continue b}if(0!=(g&-2147483648|0)){n=89;break b}n=21==((b=h[a[va>>2]&4294967295],128<=b?b-256:b)|0)?91:93;if(91==n&&0==(g&4096|0)){n=92;break b}var ca=a[xa>>2]&-32769;a[xa>>2]=ca;n=0!=(ca|0)?94:101;c:do if(94==n){if(0==(i|0)){n=101;break c}if(0==(a[Ij>>2]&1024|0)){n=97;break b}if(0==(g&536870912|0)){n=97;break b}}while(0);n=0!=(a[dc>>2]|0)?102:103;102==n&&(h[a[Ia>>2]]=69);Wq(F,f,d,a[ba>>2]);n=20}b:do if(89==n){w=a[(X+8&4294967295)>>2]|1;n=105;break a}else if(92==n){fa(f,a[(X+4&4294967295)>>2]);w=0;n=105;break a}else if(97==n){n=0!=(a[(X+8&4294967295)>>2]&1024|0)?98:100;c:do if(98==n){if(0!=(a[(X+8&4294967295)>>2]&127|0)){n=100;break c}var Ab=X+8&4294967295;a[Ab>>2]|=a[I>>2]-m&4294967295}while(0);fa(i,a[(X+4&4294967295)>>2]);var Lb=m,ec=G&4294967295,Bb=$(G&4294967295);ga=ec;ka=Lb;Aa=ga+Bb;if(ka%4==ga%4&&8<Bb){for(;0!==ga%4&&ga<Aa;)h[ka++]=h[ga++];ga>>=2;ka>>=2;for(rb=Aa>>2;ga<rb;)a[ka++]=a[ga++];ga<<=2;ka<<=2}for(;ga<Aa;)h[ka++]=h[ga++];w=a[(X+8&4294967295)>>2];n=105;break a}else if(79==n){h[f&4294967295]=0;if(0==(j|0)){n=104;break b}var Ha=j&4294967295;a[Ha>>2]|=65536}else if(51==n){U(f,Zo&4294967295,e([21,0,0,0,a[((F&4294967295)+268&4294967295)>>2],0,0,0],["i32",0,0,0,"i8*",0,0,0],y));w=0;n=105;break a}while(0);ww(F,f,x);var vb=m,da=G&4294967295,$c=$(G&4294967295);ga=da;ka=vb;Aa=ga+$c;if(ka%4==ga%4&&8<$c){for(;0!==ga%4&&ga<Aa;)h[ka++]=h[ga++];ga>>=2;ka>>=2;for(rb=Aa>>2;ga<rb;)a[ka++]=a[ga++];ga<<=2;ka<<=2}for(;ga<Aa;)h[ka++]=h[ga++];w=0}while(0);var ng=w;s=c;return ng}function aa(b,m,f){var d=s;s+=12;la(d,0,12);var i=d+8;a[(d+4&4294967295)>>2]=0;a[(d&4294967295)>>2]=0;a[i>>2]=m;b=Pd(b,i,f,d&4294967295,0,0);s=d;return b}function fj(F,m,f,d,i,g,j,c){var n=s;s+=264;la(n,0,264);var k,w=null,r,t,L,q,p,u,z,C,E,B,Cc,D,K,I,x,X,H,R,G,M,S,Y,na,P,v=n+4,N,Z,ia,T,aa=n+20,ma,wa,oa,bb,Va,V=n+180,ja,ya,va=n+184;r=i;T=a[m>>2];k=0==(r|0)?1:2;if(1==k)a[(g&4294967295)>>2]=0,a[m>>2]=a[m>>2]+1&4294967295;else if(2==k){Cc=ia=N=0;a[(Hf&4294967295)>>2]=0;a[(Hf+4&4294967295)>>2]=bf&4294967295;a[(Hf+8&4294967295)>>2]=0;a[(Hf+12&4294967295)>>2]=0;k=7!=((b=h[r],128<=b?b-256:b)|0)?3:198;a:do if(3==k){var xa=v&4294967295,Ij=v+8&4294967295,dc=v+12&4294967295,Ia=v&4294967295,ba=v,ta=v&4294967295,qb=v&4294967295,ob=v+4&4294967295,Ra=va&4294967295,Sa=va&4294967295,ac=v&4294967295,Fa=v+4&4294967295,qa=v+4&4294967295,ua=v+4&4294967295,cc=v+4&4294967295,Ma=v+4&4294967295,Q=v+4&4294967295,za=v&4294967295,Kb=v&4294967295,Ga=v+8&4294967295,Qb=aa&4294967295,gc=aa+1&4294967295,hb=v+12&4294967295,cb=v+8&4294967295;for(;;){K=j&-2147483648;L=I=Cc=0;R=-6;G=-2;P=0;a[xa>>2]=1;a[Ij>>2]=0;a[dc>>2]=0;u=a[m>>2];z=a[m>>2]+d&4294967295;C=r;var ga=D=0;0!=(ga|0)^1?(w=5,k=6):(w=5,k=183);c:do if(6==k)for(;;){var ka=r;r=ka+1&4294967295;t=h[ka];k=9>=(t&255|0)?7:33;e:do if(7==k){var Aa=t&255;if(0==Aa)k=8;else if(8==Aa)k=18;else if(1==Aa)k=19;else if(2==Aa)k=21;else if(3==Aa)k=22;else if(4==Aa)k=23;else if(5==Aa)k=24;else if(9==Aa)k=32;else{k=30;break e}if(8==k){k=0!=(ia|0)?9:16;f:do if(9==k)for(a[Fa>>2]=ia;;){var rb=a[qa>>2];a[qa>>2]=rb+1&4294967295;var Ba=l[rb];t=Ba;if(0==(Ba&255|0)){k=17;break f}if(3==(t&255|0)){k=17;break f}k=5==(t&255|0)?13:14;13==k&&(a[ua>>2]=a[ua>>2]+1&4294967295);9==(t&255|0)&&(a[cc>>2]=a[cc>>2]+2&4294967295);k=10}else 16==k&&(a[Ma>>2]=bf&4294967295);while(0);r=r+-1&4294967295;D=2}else if(18==k)P=1,K=0,Cc=1;else if(19==k){Cc=1;if(0==(j&-2147483648|0)){k=30;break e}D=1}else if(21==k)Cc=2;else if(22==k)a[Q>>2]=r,D=2;else if(23==k)ia=r;else if(24==k){var Dc=r;r=Dc+1&4294967295;Z=h[Dc];var ab=a[(F+692&4294967295)>>2],hc=Z&255;k=32<=(Z&255|0)?25:27;f:do if(25==k){if(0==(1<<(hc-32&4294967295)&ab|0)){k=29;break f}D=1;k=30;break e}else if(27==k){if(0!=(1<<hc&ab|0)){k=29;break f}D=1;k=30;break e}while(0);if(0!=(D|0)){k=30;break e}a[za>>2]=a[za>>2]+1&4294967295}else 32==k&&(r=r+2&4294967295)}else if(33==k){Y=0;var Xa=Cc;k=0==Xa?34:2==Xa?41:1==Xa?119:181;f:do if(34==k){p=L;var ha=z;z=ha+1&4294967295;L=h[ha];k=(L&255|0)==(t&255|0)?37:35;g:do if(35==k){k=69==(L&255|0)?36:40;if(36==k&&101==(t&255|0)){k=37;break g}D=1;k=30;break e}while(0);k=128!=(L&192|0)?38:39;38==k&&(Y=21);I=I+1&4294967295}else if(41==k){R=R+6&4294967295;k=18<(R|0)?42:43;42==k&&(R=19);p=L;q=sc(n,z)-1&4294967295;var A=z;z=A+1&4294967295;L=h[A];var mb=t&255;k=17==mb?44:18==mb?49:25==mb?52:15==mb?57:16==mb?62:11==mb?65:28==mb?68:45==mb?78:21==mb?83:29==mb?94:23==mb?101:12==mb?105:13==mb?106:14==mb?111:24==mb?112:115;if(115==k)if(k=(L&255|0)==(t&255|0)?116:118,116==k){if(128==(L&192|0)){k=181;break f}Y=21-R&4294967295}else{if(118==k){D=1;k=30;break e}}else if(44==k){var ic=r;r=ic+1&4294967295;H=(b=h[ic],128<=b?b-256:b)-65&4294967295;k=0!=(Rf(F,a[n>>2],H)|0)?45:48;if(45==k)M=20,k=2==(H|0)?46:47,46==k&&(M=19),Y=M-R&4294967295,z=z+q&4294967295;else if(48==k){D=1;k=30;break e}}else if(49==k){var sa=r;r=sa+1&4294967295;H=(b=h[sa],128<=b?b-256:b)-65&4294967295;var Wa=xw(F,z+-1&4294967295,H,0);S=Wa;k=0<(Wa|0)?50:51;if(50==k)Y=20-R&4294967295,z=z+(S-1&4294967295)&4294967295;else if(51==k){D=1;k=30;break e}}else if(52==k){k=0!=(Rf(F,a[n>>2],0)|0)?55:53;g:do if(53==k){k=32==(a[n>>2]|0)?54:56;if(54==k&&0!=(j&134217728|0)){k=55;break g}Y=20-R&4294967295;z=z+q&4294967295;k=181;break f}while(0);D=1;k=30;break e}else if(57==k)if(k=0!=(uq(a[n>>2])|0)?58:59,58==k)Y=20-R&4294967295,z=z+q&4294967295;else{if(59==k)if(k=0!=(b=h[(F&4294967295)+250&4294967295],128<=b?b-256:b)?60:61,60==k)Y=20-R&4294967295,z=z+-1&4294967295;else if(61==k){D=1;k=30;break e}}else if(62==k)if(k=0!=(jf(a[n>>2])|0)?64:63,64==k){D=1;k=30;break e}else 63==k&&(Y=21-R&4294967295,z=z+q&4294967295);else if(65==k)if(k=(L&255|0)==(p&255|0)?66:67,66==k)Y=21-R&4294967295;else{if(67==k){D=1;k=30;break e}}else if(68==k){var Ua=r;r=Ua+1&4294967295;na=(b=h[Ua],128<=b?b-256:b);k=1==(na|0)?69:70;if(69==k)a[Ga>>2]=32768;else if(70==k)if(k=16==(na&240|0)?71:74,71==k)if(k=0!=(1<<((na&15)+19&4294967295)&c|0)?72:73,72==k)Y=23;else{if(73==k){D=1;k=30;break e}}else if(74==k){if(32!=(na&240|0)){k=181;break f}var jb=B=(((a[m>>2]+1&4294967295)+I&4294967295)+(-f&4294967295)&4294967295)+d&4294967295,Ja,ca,Ab,Lb;Ja=f+-1&4294967295;ca=Qb;Ab=Ja+jb;if(ca%4==Ja%4&&8<jb){for(;0!==Ja%4&&Ja<Ab;)h[ca++]=h[Ja++];Ja>>=2;ca>>=2;for(Lb=Ab>>2;Ja<Lb;)a[ca++]=a[Ja++];Ja<<=2;ca<<=2}for(;Ja<Ab;)h[ca++]=h[Ja++];h[aa+B&4294967295]=32;h[aa+(B+1&4294967295)&4294967295]=0;var ec;var Bb=F,Ha=gc,vb=s;s+=104;la(vb,0,104);var da=void 0,$c=void 0,ng=vb,Vb=vb+100,da=Bb,$c=Ha;a[(jk+4&4294967295)>>2]=0;a[(jk&4294967295)>>2]=0;a[Vb>>2]=$c;Pd(da,Vb,ng&4294967295,jk&4294967295,0,0);var Db=a[(jk&4294967295)>>2];s=vb;ec=Db;k=0!=(1<<((na&15)+19&4294967295)&ec|0)?76:77;if(76==k)Y=23;else if(77==k){D=1;k=30;break e}}}else if(78==k){k=45==(L&255|0)?81:79;g:do if(79==k){k=32==(L&255|0)?80:82;if(80==k&&0!=(j&16384|0)){k=81;break g}D=1;k=30;break e}while(0);Y=22-R&4294967295}else if(83==k){ma=z+q&4294967295;wa=0;x=1;k=21==((b=h[r],128<=b?b-256:b)|0)?84:85;g:do if(84==k)for(;;)if(r=r+1&4294967295,x=x+1&4294967295,21==((b=h[r],128<=b?b-256:b)|0))k=84;else{k=85;break g}while(0);X=0;32!=(a[n>>2]|0)?(w=85,k=87):(w=85,k=91);g:do if(87==k)for(;;){k=0==((86==w?lb:0)|0)?88:90;i:do if(88==k){if(0==(Rf(F,a[n>>2],7)|0)){k=90;break i}wa=wa+1&4294967295}while(0);X=Rf(F,a[n>>2],7);var nc=sc(n,ma);ma=ma+nc&4294967295;if(32==(a[n>>2]|0)){k=91;break g}var lb=X,w=86;k=87}while(0);k=(x|0)<=(wa|0)?92:93;if(92==k)Y=(x+18&4294967295)+(-R&4294967295)&4294967295;else if(93==k){D=1;k=30;break e}}else if(94==k){for(oa=z+q&4294967295;;){if(32==(a[n>>2]|0)){k=99;break}if(0!=(Rf(F,a[n>>2],7)|0)){k=97;break}var Rb=sc(n,oa);oa=oa+Rb&4294967295;k=95}if(99==k){if(0!=(D|0)){k=30;break e}Y=19-R&4294967295}else if(97==k){D=1;k=30;break e}}else if(101==k){Va=bb=z+q&4294967295;sc(V,r);k=(a[n>>2]|0)!=(a[V>>2]|0)&32!=(a[n>>2]|0)?102:103;g:do if(102==k)for(;;){Va=bb;var db=sc(n,bb);bb=bb+db&4294967295;if((a[n>>2]|0)!=(a[V>>2]|0)&32!=(a[n>>2]|0))k=102;else{k=103;break g}}while(0);if((a[n>>2]|0)!=(a[V>>2]|0)){k=181;break f}z=Va}else if(105==k)Y=20;else if(106==k){for(E=a[m>>2]+d&4294967295;;){if(!(E>>>0<z>>>0)){k=181;break f}var Hb=101==((b=h[E],128<=b?b-256:b)|0),Ib=E;if(Hb){k=109;break}E=Ib+1&4294967295;k=107}a[hb>>2]=Ib}else if(111==k){var Wb=65536*(b=h[r&4294967295],128<=b?b-256:b)&4294967295,ea=256*((b=h[r+1&4294967295],128<=b?b-256:b)&127)&4294967295,Mb=(b=h[r+2&4294967295],128<=b?b-256:b)&127;a[cb>>2]=(ea+Wb&4294967295)+Mb&4294967295;r=r+3&4294967295}else if(112==k)if(k=0!=(j&8192|0)?113:114,113==k){D=1;k=30;break e}else 114==k&&(Y=1)}else if(119==k){G=G+2&4294967295;k=18<(G|0)?120:121;120==k&&(G=19);p=h[u];u=u+-1&4294967295;q=Bl(n,u,1)-1&4294967295;L=h[u];var kb=t&255;k=17==kb?122:18==kb?127:25==kb?130:11==kb?133:15==kb?136:16==kb?139:21==kb?142:10==kb?147:29==kb?150:26==kb?157:19==kb?160:46==kb?163:45==kb?170:175;if(175==k)if(k=(L&255|0)==(t&255|0)?176:180,176==k)if(k=32==(L&255|0)?177:178,177==k)Y=4;else{if(178==k){if(128==(L&192|0)){k=181;break f}Y=21-G&4294967295}}else{if(180==k){D=1;k=30;break e}}else if(122==k){var Ca=r;r=Ca+1&4294967295;H=(b=h[Ca],128<=b?b-256:b)-65&4294967295;k=0!=(Rf(F,a[n>>2],H)|0)?123:126;if(123==k)M=20,k=2==(H|0)?124:125,124==k&&(M=19),Y=M-G&4294967295,u=u+(-q&4294967295)&4294967295;else if(126==k){D=1;k=30;break e}}else if(127==k){var eb=r;r=eb+1&4294967295;H=(b=h[eb],128<=b?b-256:b)-65&4294967295;var Ya=xw(F,u,H,1);S=Ya;k=0<(Ya|0)?128:129;if(128==k)Y=20-R&4294967295,u=u+(-(S-1&4294967295)&4294967295)&4294967295;else if(129==k){D=1;k=30;break e}}else if(130==k)if(k=0!=(Rf(F,a[n>>2],0)|0)?132:131,132==k){D=1;k=30;break e}else 131==k&&(Y=20-G&4294967295,u=u+(-q&4294967295)&4294967295);else if(133==k)if(k=(L&255|0)==(p&255|0)?134:135,134==k)Y=21-G&4294967295;else{if(135==k){D=1;k=30;break e}}else if(136==k)if(k=0!=(uq(a[n>>2])|0)?137:138,137==k)Y=21-G&4294967295,u=u+(-q&4294967295)&4294967295;else{if(138==k){D=1;k=30;break e}}else if(139==k)if(k=0!=(jf(a[n>>2])|0)?141:140,141==k){D=1;k=30;break e}else 140==k&&(Y=21-R&4294967295,u=u+(-q&4294967295)&4294967295);else if(142==k){x=1;k=21==((b=h[r],128<=b?b-256:b)|0)?143:144;g:do if(143==k)for(;;)if(r=r+1&4294967295,x=x+1&4294967295,21==((b=h[r],128<=b?b-256:b)|0))k=143;else{k=144;break g}while(0);k=(x|0)<=(a[(F+8296&4294967295)>>2]|0)?145:146;if(145==k)Y=(x+18&4294967295)+(-G&4294967295)&4294967295;else if(146==k){D=1;k=30;break e}}else if(147==k)if(k=0<(a[(F+8300&4294967295)>>2]|0)?148:149,148==k)Y=19;else{if(149==k){D=1;k=30;break e}}else if(150==k){for(ja=(u+(-q&4294967295)&4294967295)+-1&4294967295;;){if(32==(a[n>>2]|0)){k=155;break}if(0!=(Rf(F,a[n>>2],7)|0)){k=153;break}var Na=Bl(n,ja,1);ja=ja+(-Na&4294967295)&4294967295;k=151}if(155==k){if(0!=(D|0)){k=30;break e}Y=3}else if(153==k){D=1;k=30;break e}}else if(157==k)if(k=0!=(a[(F+8272&4294967295)>>2]|0)?158:159,158==k)Y=1;else{if(159==k){D=1;k=30;break e}}else if(160==k)if(k=0!=(j&2|0)?161:162,161==k)Y=1;else{if(162==k){D=1;k=30;break e}}else if(163==k){for(E=u;;){if(32==((b=h[E],128<=b?b-256:b)|0)){k=168;break}if(46==((b=h[E],128<=b?b-256:b)|0)){k=166;break}E=E+-1&4294967295;k=164}166==k&&(Y=50);if(32!=((b=h[E],128<=b?b-256:b)|0)){k=181;break f}D=1;k=30;break e}else if(170==k){k=45==(L&255|0)?173:171;g:do if(171==k){k=32==(L&255|0)?172:174;if(172==k&&0!=(j&128|0)){k=173;break g}D=1;k=30;break e}while(0);Y=22-R&4294967295}}while(0);if(0!=(D|0)){k=30;break e}a[Kb>>2]=a[Kb>>2]+Y&4294967295}while(0);var oc=D;if(0!=(oc|0)^1)w=30,k=6;else{w=30;k=183;break c}}while(0);k=2==((30==w?oc:ga)|0)?184:197;c:do if(184==k){if(0!=(K|0)){k=197;break c}k=0==(P|0)?189:186;d:do if(186==k){if(32!=((b=h[u+-1&4294967295],128<=b?b-256:b)|0)){k=197;break c}if(0==(P|0)){k=189;break d}a[ac>>2]=a[ac>>2]+4&4294967295}while(0);k=(a[Ia>>2]|0)>=(a[(Hf&4294967295)>>2]|0)?190:191;if(190==k){Ja=ba;ca=Hf;Ab=Ja+16;if(ca%4==Ja%4){for(;0!==Ja%4&&Ja<Ab;)h[ca++]=h[Ja++];Ja>>=2;ca>>=2;for(Lb=Ab>>2;Ja<Lb;)a[ca++]=a[Ja++];Ja<<=2;ca<<=2}for(;Ja<Ab;)h[ca++]=h[Ja++];N=I}if(2!=(a[Hd>>2]|0)){k=197;break c}if(!(0<(a[ta>>2]|0))){k=197;break c}if(0!=(j&268435456|0)){k=197;break c}ya=a[qb>>2];k=1<(d|0)?195:196;195==k&&(ya=ya+
35&4294967295);gk(a[ob>>2],Ra);var xb=a[Le>>2],zb=ya;var nb=T,Eb=d,sb=C,fb=j,pb=s;s+=140;la(pb,0,140);var pa=void 0,qe=null,tb=void 0,Jb=void 0,Jc=void 0,ub=void 0,Ta=void 0,xe=void 0,wb=void 0,pc=void 0,Sb=void 0,$b=void 0,Pa=void 0,yc=void 0,Cd=void 0,Vc=void 0,Wc=void 0,Gb=void 0,xd=void 0,Rc=pb,Kc=pb+60,cf=pb+120,tb=nb,Jb=Eb,Jc=sb,ub=fb,Sb=Gb=Wc=yc=$b=0,vc=pc=h[Kc&4294967295]=0;(pc|0)<(Jb|0)?(qe=0,pa=1):(qe=0,pa=2);e:do if(1==pa)for(;;){h[Rc+pc&4294967295]=h[tb+(1==qe?Ne:vc)&4294967295];var Ne=pc=pc+1&4294967295;if((pc|0)<(Jb|0))pa=qe=1;else{qe=1;pa=2;break e}}while(0);h[Rc+(0==qe?vc:Ne)&4294967295]=0;var Ub=$(Rc&4294967295),wb=Rc+Ub&4294967295,pa=0!=($b|0)^1?3:38;e:do if(3==pa){var Lc=Kc&4294967295,Za=Rc&4294967295,rc=Rc&4294967295,yd=cf&4294967295,O=cf&4294967295,gb=cf&4294967295,fd=cf&4294967295;for(;;){var fc=Jc,Jc=fc+1&4294967295,Ta=h[fc],od=Ta&255,pa=9>=(Ta&255|0)?5:12;g:do if(5==pa){if(0==od)pa=6;else if(3==od)pa=6;else if(8==od)pa=7;else if(1==od)pa=8;else if(2==od)pa=9;else if(9==od)pa=11;else if(5==od)pa=10;else{pa=37;break g}if(6==pa){$b=1;pa=37;break g}else if(7==pa)Gb=1;else if(9==pa){Sb=2;h[wb]=0;var Oc=$(Za),pd=Za+Oc&4294967295,Ec,Zb,mc;Ec=yw&4294967295;Zb=pd;for(mc=Ec+3;Ec<mc;)h[Zb++]=h[Ec++];var Vd=$(rc),wb=Rc+Vd&4294967295,pa=37;break g}else if(11==pa){var Pa=((b=h[Jc+1&4294967295],128<=b?b-256:b)&255)-1&4294967295,qc=(b=h[Jc&4294967295],128<=b?b-256:b)&255,yc=((255*Pa&4294967295)-1&4294967295)+qc&4294967295,Jc=Jc+2&4294967295,pa=37;break g}else if(10==pa){var ad=Jc,Jc=ad+1&4294967295,Wc=(b=h[ad],128<=b?b-256:b),pa=37;break g}Sb=1;h[wb]=0;wb=Lc}else if(12==pa){pa=28==(od|0)?13:17;if(13==pa){var kc=Jc,Jc=kc+1&4294967295,Pa=(b=h[kc],128<=b?b-256:b)&255,pa=1!=(Pa|0)?15:14;h:do if(14==pa){pa=0!=(ub&-2147483648|0)?15:16;break h}while(0);if(15==pa){h[wb&4294967295]=36;xd=Nv(Fg&4294967295,Pa);fa(wb+1&4294967295,xd);var Nd=$(xd)+1&4294967295,wb=wb+Nd&4294967295}xe=32}else if(17==pa)if(pa=14==(Ta&255|0)?18:25,18==pa){var Qc=256*((b=h[Jc&4294967295],128<=b?b-256:b)&127)&4294967295,Cd=((b=h[Jc+1&4294967295],128<=b?b-256:b)&127)+Qc&4294967295,Vc=83,pa=0!=(Cd&4|0)?19:20;19==pa&&(Vc=80);var Nc=Vc,Bd=(b=h[Jc+2&4294967295],128<=b?b-256:b)&127;U(yd,zw&4294967295,e([Nc,0,0,0,Bd,0,0,0],["i32",0,0,0,"i32",0,0,0],y));Jc=Jc+3&4294967295;for(pc=0;;){pa=0!=(Cd&1|0)?22:23;if(22==pa){var bd=$(O),Wd=cf+bd&4294967295,gd=(b=h[(Aw&4294967295)+pc&4294967295],128<=b?b-256:b)&255;h[Wd]=gd;h[Wd+1&4294967295]=0}var Cd=Cd>>1,Ka=pc+1&4294967295,pc=Ka;if(9>(Ka|0))pa=21;else{pa=24;break}}fa(wb,gb);var Tb=$(fd),wb=wb+Tb&4294967295,xe=32}else if(25==pa)if(pa=17==(Ta&255|0)?26:27,26==pa)var lc=Jc,Jc=lc+1&4294967295,Od=(b=h[lc],128<=b?b-256:b)-65&4294967295,xe=h[Bw+Od&4294967295];else if(27==pa)if(pa=18==(Ta&255|0)?28:31,28==pa){var qd=Jc,Jc=qd+1&4294967295,Pa=(b=h[qd],128<=b?b-256:b)-65&4294967295;h[wb&4294967295]=76;h[wb+1&4294967295]=((Pa|0)/10|0)+48&255;xe=(Pa|0)%10+48&255;pa=1==(Sb|0)?29:30;29==pa&&(h[wb&4294967295]=xe,xe=76);wb=wb+2&4294967295}else if(31==pa){var ge=Ta&255,pa=31>=(Ta&255|0)?32:33;32==pa?xe=h[Cw+ge&4294967295]:33==pa&&(pa=32==(ge|0)?34:35,34==pa?xe=95:35==pa&&(xe=Ta))}var Tc=xe,Ed=wb,wb=Ed+1&4294967295;h[Ed]=Tc}while(0);if(0!=($b|0)^1)pa=4;else{pa=38;break e}}}while(0);h[wb]=0;wb=ki&4294967295;pa=0<(yc|0)?39:40;39==pa&&(U(wb,Dw&4294967295,e([yc,0,0,0],["i32",0,0,0],y)),wb=wb+7&4294967295);pa=0<(Wc|0)?41:42;if(41==pa){U(wb,Ew&4294967295,e([Wc,0,0,0],["i32",0,0,0],y));var Yc=$(wb),wb=wb+Yc&4294967295}var Bc=$(Kc&4294967295),pc=Bc,nd=0!=(Gb|0),pa=0<(Bc|0)?44:43;e:do if(44==pa){pa=nd?45:46;break e}else if(43==pa){pa=nd?45:49;break e}while(0);e:do if(45==pa){var Uc=wb,wb=Uc+1&4294967295;h[Uc]=95;pa=46;break e}while(0);if(46==pa){var uc=pc-1&4294967295,pc=uc,pa=0<=(uc|0)?47:48;e:do if(47==pa)for(;;){var Xb=h[Kc+pc&4294967295],Ic=wb,wb=Ic+1&4294967295;h[Ic]=Xb;var td=pc-1&4294967295,pc=td;if(0<=(td|0))pa=47;else{pa=48;break e}}while(0);var Oe=wb,wb=Oe+1&4294967295;h[Oe]=41;var Sd=wb,wb=Sd+1&4294967295;h[Sd]=32}h[wb]=0;md(wb,Rc&4294967295);var pf=$(ki&4294967295),wd=pc=pf;8>(pf|0)?(qe=49,pa=50):(qe=49,pa=51);e:do if(50==pa)for(;;){var qf=50==qe?Xc:wd,pc=qf+1&4294967295;h[ki+qf&4294967295]=32;var Xc=pc;if(8>(pc|0))pa=qe=50;else{qe=50;pa=51;break e}}while(0);h[ki+(49==qe?wd:Xc)&4294967295]=0;s=pb;Ea(xb,Fw&4294967295,e([zb,0,0,0,ki&4294967295,0,0,0,Sa,0,0,0],["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y))}while(0);for(;;){var Kd=r;r=Kd+1&4294967295;if(0!=((b=h[Kd],128<=b?b-256:b)|0))k=197;else{k=4;break}}if(7!=((b=h[r&4294967295],128<=b?b-256:b)|0))k=5;else{k=198;break a}}}while(0);k=2==(a[Hd>>2]|0)?199:202;a:do if(199==k){if(0!=(j&268435456|0)){k=202;break a}if(!(1>=(d|0))){k=202;break a}xc(10,a[Le>>2])}while(0);var Ld=N+d&4294967295;N=Ld;k=0==(Ld|0)?203:204;203==k&&(N=1);a[m>>2]=a[m>>2]+N&4294967295;k=0==(a[(Hf&4294967295)>>2]|0)?205:206;205==k&&(a[(Hf+4&4294967295)>>2]=bf&4294967295);Ja=Hf;ca=g;Ab=Ja+16;if(ca%4==Ja%4){for(;0!==Ja%4&&Ja<Ab;)h[ca++]=h[Ja++];Ja>>=2;ca>>=2;for(Lb=Ab>>2;Ja<Lb;)a[ca++]=a[Ja++];Ja<<=2;ca<<=2}for(;Ja<Ab;)h[ca++]=h[Ja++]}s=n}function ww(F,m,f){var d,f=0==(f&3145728|0)?4:1;a:do if(1==f){d=$(m);d=m+(d-1&4294967295)&4294967295;if(29295!=(a[(F+280&4294967295)>>2]|0))break a;var i=(b=h[d&4294967295],128<=b?b-256:b),g=Bd(106);if((i|0)!=(g|0))break a;h[d&4294967295]=6;i=Bd(105)&255;h[d+1&4294967295]=i;h[d+2&4294967295]=0}while(0)}function Yv(F,m){var f=s;s+=4;la(f,0,4);var d,i=null,g,j,e,c,k,l,r,q,L;r=l=m;q=1;c=a[(F+288&4294967295)>>2]-1&4294967295;k=a[(F+288&4294967295)>>2];j=a[(F+284&4294967295)>>2];L=(j+2&4294967295)+(-k&4294967295)&4294967295;a:for(;;){d=sc(f,l);l=l+d&4294967295;var y=a[f>>2];(y|0)>=(k|0)?(i=1,d=2):(i=1,d=4);b:do if(2==d){e=a[f>>2];if((e|0)<=(j|0))i=2;else{i=2;d=4;break b}d=a[f>>2]-c&255;var p=r;r=p+1&4294967295;h[p]=d;d=6;break b}while(0);b:do if(4==d){if(0==((2==i?e:y)|0))break b;q=De(a[f>>2],r);r=r+q&4294967295;q=0}while(0);if(0==(a[f>>2]|0))break a}h[r]=0;d=0!=(q|0)?8:21;if(8==d){g=c=0;d=r=m;l=d+1&4294967295;d=(b=h[d],128<=b?b-256:b);a[f>>2]=d;d=0!=(d|0)?9:18;a:do if(9==d)for(;;){k=d=a[(F+8268&4294967295)>>2];d=0!=(d|0)?10:15;c:do if(10==d){j=a[f>>2];j=(256*(b=h[l],128<=b?b-256:b)&4294967295)+j&4294967295;for(e=0;;){d=j;i=(b=t[(k+2*e&4294967295)>>1],32768<=b?b-65536:b);if(!((d|0)>=(i|0)))break c;d=j;var i=(b=t[(k+2*e&4294967295)>>1],32768<=b?b-65536:b),u=e;if((d|0)==(i|0)){d=13;break}e=u+1&4294967295;d=11}a[f>>2]=L+u&4294967295;l=l+1&4294967295}while(0);c=(a[f>>2]&63)+(64*c&4294967295)&4294967295;g=d=g+6&4294967295;d=8<=(d|0)?16:17;16==d&&(g=g-8&4294967295,d=c>>(g|0)&255,k=r,r=k+1&4294967295,h[k]=d);d=l;l=d+1&4294967295;d=(b=h[d],128<=b?b-256:b);a[f>>2]=d;if(0!=(d|0))d=9;else break a}while(0);if(19==(0<(g|0)?19:20))l=r,r=l+1&4294967295,h[l]=c<<(8-g&4294967295)&255;h[r]=0;g=r-m&4294967295|64}else 21==d&&(g=r-m&4294967295);s=f;return g}function Pd(F,m,f,d,i,g){var j=s;s+=164;la(j,0,164);var c,n=null,k,w,r,t,L,q,p,u=j+160;w=0;t=L=a[m>>2];a:for(;;){var z;var C=z=c=z=void 0;z=L;C=h[z&4294967295];z=128>(C&255|0)?1:2;1==z?c=1:2==z&&(z=224>(C&255|0)?3:4,3==z?c=2:4==z&&(z=240>(C&255|0)?5:6,5==z?c=3:6==z&&(c=4)));z=c;c=z;if(32!=((b=h[L+z&4294967295],128<=b?b-256:b)|0)){c=2;break a}n=46==((b=h[L+(c+1&4294967295)&4294967295],128<=b?b-256:b)|0);q=w;if(n)n=3;else{n=3;c=5;break a}var C=j+q&4294967295,E=c,B;z=L;B=z+E;if(C%4==z%4&&8<E){for(;0!==z%4&&z<B;)h[C++]=h[z++];z>>=2;C>>=2;for(E=B>>2;z<E;)a[C++]=a[z++];z<<=2;C<<=2}for(;z<B;)h[C++]=h[z++];z=w=w+c&4294967295;w=z+1&4294967295;h[j+z&4294967295]=46;L=L+(c+3&4294967295)&4294967295;c=1}if(2==c)var x=w,n=2;c=0<((2==n?x:q)|0)?6:12;a:do if(6==c){for(c=0;;){q=n=l[L+c&4294967295];if(0==(n&255|0))break;if(32==(q&255|0))break;c=c+1&4294967295}q=j+w&4294967295;n=c;z=L;C=q;B=z+n;if(C%4==z%4&&8<n){for(;0!==z%4&&z<B;)h[C++]=h[z++];z>>=2;C>>=2;for(E=B>>2;z<E;)a[C++]=a[z++];z<<=2;C<<=2}for(;z<B;)h[C++]=h[z++];h[j+(c+w&4294967295)&4294967295]=0;if(0==(Cl(F,j&4294967295,L,f,d,i,g)|0)){c=12;break a}k=d&4294967295;a[k>>2]|=128;a[kf>>2]=w;k=1;c=50;break a}while(0);if(12==c){w=0;n=12;a:for(;;){if(!(159>((19==n?r:0)|0)))break a;r=t;t=r+1&4294967295;q=r=l[r];if(0==(r&255|0))break a;if(32==(q&255|0))break a;c=46==(q&255|0)?17:19;b:do if(17==c){if(!(0<(w|0)))break b;if(0!=(10>((b=h[j+(w-1&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0))break a}while(0);h[j+w&4294967295]=q;w=r=w+1&4294967295;n=19}h[j+w&4294967295]=0;r=Cl(F,j&4294967295,t,f,d,i,g);c=0!=(a[(d&4294967295)>>2]&134217728|0)?21:25;a:do if(21==c)if(q=0==(nb(f,F+632&-1)|0),L=F,c=q?22:24,22==c){L=L+652&4294967295;a[L>>2]=a[L>>2]+1&4294967295;if(!(3<(a[(F+652&4294967295)>>2]|0)))break a;h[f&4294967295]=0}else 24==c&&(Af(L+632&-1,f,20),a[(F+652&4294967295)>>2]=1);else 25==c&&(a[(F+652&4294967295)>>2]=0);while(0);c=0==(r|0)?27:39;a:do if(27==c){c=0!=(a[(d+4&4294967295)>>2]&2048|0)?28:31;if(28==c)L=j&4294967295,c=95==((b=h[L],128<=b?b-256:b)|0)?29:30,29==c&&(L=L+1&4294967295),p=sc(u,L),Gw(F,a[u>>2],f),r=p=L+p&4294967295,n=30;else if(31==c)var D=r,n=31;if(0!=((31==n?D:p)|0)){c=39;break a}h[f&4294967295]=0;c=0!=(i&16|0)?34:36;b:do if(34==c){if(101!=((b=h[j+(w-1&4294967295)&4294967295],128<=b?b-256:b)|0))break b;h[j+(w-1&4294967295)&4294967295]=0;var K=Cl(F,j&4294967295,t,f,d,i,g);r=K;n=35;c=40;break a}while(0);if(0==(i&4096|0)){c=39;break a}u=(b=h[j+(w-1&4294967295)&4294967295],128<=b?b-256:b);D=(b=h[j+(w-2&4294967295)&4294967295],128<=b?b-256:b);if((u|0)!=(D|0)){c=39;break a}h[j+(w-1&4294967295)&4294967295]=0;var I=Cl(F,j&4294967295,t,f,d,i,g);r=I;n=38;c=40;break a}while(0);if(39==c)var H=r,n=39;c=0!=((39==n?H:35==n?K:I)|0)?41:49;if(41==c)if(c=0!=(b=h[(F&4294967295)+252&4294967295],128<=b?b-256:b)?42:43,42==c&&(a[d>>2]^=536870912),c=0!=(a[d>>2]&536870912|0)?44:48,44==c){c=0!=(i&2|0)?45:47;a:do if(45==c){h[Ig&4294967295]=0;h[Ig+1&4294967295]=32;U(Ig+2&4294967295,Hw&4294967295,e([f,0,0,0],["i8*",0,0,0],y));t=a[m>>2];a[m>>2]=Ig+2&4294967295;if(2!=(a[Hd>>2]|0))break a;p=r-t&4294967295;d=j&4294967295;F=p;z=t;C=d;B=z+F;if(C%4==z%4&&8<F){for(;0!==z%4&&z<B;)h[C++]=h[z++];z>>=2;C>>=2;for(E=B>>2;z<E;)a[C++]=a[z++];z<<=2;C<<=2}for(;z<B;)h[C++]=h[z++];h[j+p&4294967295]=0;Ea(a[Le>>2],Iw&4294967295,e([j&4294967295,0,0,0,a[m>>2],0,0,0],["i8*",0,0,0,"i8*",0,0,0],y))}while(0);k=h[f&4294967295]=0}else 48==c&&(k=1);else 49==c&&(k=h[f&4294967295]=0)}s=j;return k}function Cl(F,m,f,d,i,g,j){var c=s;s+=320;la(c,0,320);var n,k,l,r,t,q,Yg,p,u,z,C,E,B,x,D,K=c+160,I;l=m;D=C=0;1==(0!=(j|0)?1:2)&&(D=a[(j&4294967295)>>2]);m=l;n=0<(a[(F+288&4294967295)>>2]|0)?3:4;3==n?(fa(c&4294967295,l),Yg=Yv(F,c&4294967295),l=c&4294967295):4==n&&(Yg=$(l));r=Zv(l);r=t=a[((F+1056&4294967295)+4*r&4294967295)>>2];n=0==(t|0)?6:9;if(6==n)7==(0!=(i|0)?7:8)&&(a[i>>2]=0),k=0;else if(9==n){a:for(;;){if(0==((b=h[r],128<=b?b-256:b)|0)){n=95;break a}t=r;n=(b=h[r&4294967295],128<=b?b-256:b);t=t+n&4294967295;n=((b=h[r+1&4294967295],128<=b?b-256:b)&127|0)!=(Yg|0)?12:11;b:do if(11==n){if(0!=($b(l,r+2&4294967295,Yg&63)|0))break b;x=f;z=u=0;n=(b=h[r+1&4294967295],128<=b?b-256:b)&128;p=((b=h[r+1&4294967295],128<=b?b-256:b)&63)+2&4294967295;r=r+p&4294967295;p=d;n=0!=(n|0)?14:15;14==n?q=h[p&4294967295]=0:15==n&&(fa(p,r),q=$(r),r=r+(q+1&4294967295)&4294967295);c:for(;;){if(!(r>>>0<t>>>0)){n=39;break c}n=r;r=n+1&4294967295;p=h[n];E=p&255;n=100<=(p&255|0)?18:23;if(18==n)if(B=Ma[(F+692&4294967295)>>2],p&=255,n=132<=(E|0)?19:21,19==n){if(0==(1<<(p-132&4294967295)&B|0)){n=16;continue c}C=1;n=16}else{if(21==n){if(0!=(1<<(p-100&4294967295)&B|0)){n=16;continue c}C=1;n=16}}else if(23==n)if(n=80<(E|0)?24:33,24==n){E=t-r&4294967295;p=(p&255)-80&4294967295;B=0;n=(B|0)<=(p|0)?25:28;d:do if(25==n)for(;;)if(n=0!=(D&3072|0)?26:27,26==n&&(C=1),B=B+1&4294967295,(B|0)<=(p|0))n=25;else break d;while(0);if(0!=($b(f,r,E)|0)){n=29;break c}if(0!=(C|0)){n=31;break c}u|=128;a[kf>>2]=p;r=t;x=f+E&4294967295;n=16}else if(33==n)if(n=64<(p&255|0)?34:36,34==n){u=p&15|u&-16;if(12!=(p&12|0)){n=16;continue c}u|=2048;n=16}else 36==n&&(E=p&255,n=32<=(p&255|0)?37:38,37==n?(z|=1<<(E-32&4294967295),n=16):38==n&&(u|=1<<E,n=16))}c:do if(29==n){C=1;n=31;break c}while(0);31==n&&(r=t);n=0!=(C|0)?40:41;if(40==n){C=0;n=9;continue a}else if(41==n){n=0==(g&4|0)?42:43;if(42==n&&0!=(u&262144|0)){n=9;continue a}n=0!=(g&1024|0)?44:45;if(44==n&&0!=(u&1536|0)){n=9;continue a}n=0!=(g&4|0)?46:49;c:do if(46==n){if(0!=(u&512|0)){n=9;continue a}if(0==(u&1024|0))break c;if(0==(g&8|0)){n=9;continue a}}while(0);n=0!=(z&4096|0)?50:51;if(50==n&&0==(D&16384|0)){n=9;continue a}n=0!=(z&512|0)?52:53;if(52==n&&0==(D&2|0)){n=9;continue a}n=0!=(z&1024|0)?54:55;if(54==n&&0==(D&1|0)){n=9;continue a}n=0!=(u&33554432|0)?56:57;if(56==n&&0==(D&65536|0)){n=9;continue a}n=0!=(u&16384|0)?58:59;if(58==n&&x>>>0<Ma[(F+8292&4294967295)>>2]>>>0){n=9;continue a}n=0!=(u&32768|0)?60:61;if(60==n&&0==(a[(j&4294967295)>>2]&512|0)){n=9;continue a}n=0!=(z&8192|0)?62:63;if(62==n&&0==(a[(F+8324&4294967295)>>2]&524288|0)){n=9;continue a}n=0!=(z&16|0)?64:67;c:do if(64==n){if(0!=(a[(F+8272&4294967295)>>2]|0))break c;if(0==(a[(F+8280&4294967295)>>2]|0)){n=9;continue a}if(0==(g&8|0)){n=9;continue a}}while(0);n=0!=(z&64|0)?68:69;if(68==n&&0==(a[(F+8276&4294967295)>>2]|0)){n=9;continue a}n=0!=(z&32|0)?70:71;if(70==n&&0==(a[(F+8284&4294967295)>>2]|0)){n=9;continue a}if(0==(u&2097152|0)){n=74;break a}if(26741!=(a[(F+280&4294967295)>>2]|0)){n=74;break a}if(0!=(a[(F+8320&4294967295)>>2]&1048576|0)){n=74;break a}else{n=9;continue a}}}while(0);r=t;n=9}if(95==n)k=0;else if(74==n){if(75==(0!=(i|0)?75:76))a[(i&4294967295)>>2]=u|1073741824,a[(i+4&4294967295)>>2]=z;n=0==(q|0)?77:80;if(77==n)n=2==(a[Hd>>2]|0)?78:79,78==n&&(f=a[Le>>2],Ov(i),Ea(f,Jw&4294967295,e([m,0,0,0,ek&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y))),k=0;else if(80==n){if(81==(0!=(i|0)?81:82))F=i&4294967295,a[F>>2]|=-2147483648;n=2==(a[Hd>>2]|0)?83:94;a:do if(83==n){gk(d,K&4294967295);n=0==(u&536870912|0)?86:87;86==n?I=0:87==n&&(I=1);F=I;g=(b=h[(a[Rb>>2]&4294967295)+252&4294967295],128<=b?b-256:b);if((F|0)!=(g|0))break a;n=0!=(a[kf>>2]|0)?90:92;b:do if(90==n){if(0==(j|0)){n=92;break b}k=c&4294967295;g=x-f&4294967295;F=f;q=F+g;if(k%4==F%4&&8<g){for(;0!==F%4&&F<q;)h[k++]=h[F++];F>>=2;k>>=2;for(g=q>>2;F<g;)a[k++]=a[F++];F<<=2;k<<=2}for(;F<q;)h[k++]=h[F++];h[c+((x-1&4294967295)+
(-f&4294967295)&4294967295)&4294967295]=0;Ea(a[Le>>2],Kw&4294967295,e([m,0,0,0,c&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));n=93;break b}while(0);92==n&&Ea(a[Le>>2],Lw&4294967295,e([m,0,0,0],["i8*",0,0,0],y));F=a[Le>>2];g=K&4294967295;Ov(i);Ea(F,Mw&4294967295,e([g,0,0,0,ek&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y))}while(0);k=x}}}s=c;return k}function Nw(F,m,f,d){var i,g=null,j,e,c,k;e=m;i=32!=((b=h[e],128<=b?b-256:b)|0);j=e;i?(g=0,i=1):(g=0,i=4);a:do if(1==i)for(;;){i=69==((b=h[3==g?l:j],128<=b?b-256:b)|0)?2:3;2==i&&(h[e]=101);e=e+1&4294967295;i=32!=((b=h[e],128<=b?b-256:b)|0);var l=e;if(i)g=3,i=1;else{g=3;break a}}while(0);i=j=(0==g?j:l)-m&4294967295;g=d;l=m+i;if(g%4==m%4&&8<i){for(;0!==m%4&&m<l;)h[g++]=h[m++];m>>=2;g>>=2;for(i=l>>2;m<i;)a[g++]=a[m++];m<<=2;g<<=2}for(;m<l;)h[g++]=h[m++];h[d+j&4294967295]=0;d=j=i=f&63;i=0<(i|0)?5:8;a:do if(5==i)for(;;){e=e+-1&4294967295;i=128==((b=h[e],128<=b?b-256:b)&192|0)?6:7;c:do if(6==i)for(;;)if(e=e+-1&4294967295,d=d+1&4294967295,128==((b=h[e],128<=b?b-256:b)&192|0))i=6;else break c;while(0);j=i=j-1&4294967295;if(0<(i|0))i=5;else break a}while(0);m=j=0;(j|0)<(d|0)?(g=8,i=9):(g=8,i=10);a:do if(9==i)for(;;)if(h[li+j&4294967295]=h[e+(9==g?c:m)&4294967295],h[e+j&4294967295]=32,c=j=j+1&4294967295,(j|0)<(d|0))i=g=9;else{g=9;break a}while(0);h[li+(8==g?m:c)&4294967295]=0;e=e+-1&4294967295;c=f&65520|4;i=0!=(f&512|0)?11:13;a:do if(11==i){if(105!=((b=h[e&4294967295],128<=b?b-256:b)|0))break a;h[e&4294967295]=121}while(0);i=0!=(f&256|0)?14:33;a:do if(14==i){d=F;i=25966==(a[(F+280&4294967295)>>2]|0)?15:28;b:do if(15==i){j=(b=h[e+-1&4294967295],128<=b?b-256:b);i=0!=(Rf(d,j,7)|0)?16:23;c:do if(16==i){j=F;m=(b=h[e&4294967295],128<=b?b-256:b);if(0==(Rf(j,m,1)|0)){i=23;break c}for(j=0;;){k=d=a[(Kp+4*j&4294967295)>>2];if(0==(d|0)){i=22;break}i=$(k);if(0==($b(k,e+(1-i&4294967295)&4294967295,i)|0)){i=21;break}j=j+1&4294967295;i=18}if(21==i&&0!=(k|0)){i=30;break b}c|=16;i=30;break b}while(0);for(j=0;;){k=i=a[(Sf+4*j&4294967295)>>2];if(0==(i|0)){i=30;break b}i=$(k);if(0==($b(k,e+(1-i&4294967295)&4294967295,i)|0)){i=26;break}j=j+1&4294967295;i=24}c|=16}else if(28==i){if(0==(a[((d&4294967295)+276&4294967295)>>2]|0)){i=30;break b}c|=16}while(0);if(0==(c&16|0))break a;De(a[((F&4294967295)+276&4294967295)>>2],e+1&4294967295);if(2!=(a[Hd>>2]|0))break a;Nd(Ow&4294967295,6,1,a[Le>>2])}while(0);i=0!=(f&2048|0)?34:36;a:do if(34==i){if(0!=(a[(F+8272&4294967295)>>2]|0))break a;a[(F+8272&4294967295)>>2]=1}while(0);i=0==(nb(li&4294967295,Yq&4294967295)|0)?38:37;a:do if(37==i){i=0==(nb(li&4294967295,Pw&4294967295)|0)?38:39;break a}while(0);38==i&&(c|=8);i=39==((b=h[li&4294967295],128<=b?b-256:b)|0)?40:41;40==i&&(c&=-5);return c}function xw(F,m,f,d){var i,g,j;j=0;F=a[((F+5152&4294967295)+4*f&4294967295)>>2];f=0==(F|0)?1:2;if(1==f)i=0;else if(2==f){a:for(;;){if(7==((b=h[F],128<=b?b-256:b)|0)){f=13;break a}f=0!=(d|0)?4:5;4==f?(j=$(F),g=(m+(-j&4294967295)&4294967295)+1&4294967295):5==f&&(g=m);var f=(b=h[F],128<=b?b-256:b),e=(b=h[g],128<=b?b-256:b),f=(f|0)==(e|0)?7:8;b:do if(7==f)for(;;)if(g=g+1&4294967295,F=F+1&4294967295,f=(b=h[F],128<=b?b-256:b),e=(b=h[g],128<=b?b-256:b),(f|0)==(e|0))f=7;else{f=8;break b}while(0);if(0==((b=h[F],128<=b?b-256:b)|0)){f=9;break a}for(;;)if(f=F,F=f+1&4294967295,0!=((b=h[f],128<=b?b-256:b)|0))f=12;else{f=2;continue a}}13==f?i=0:9==f&&(f=0!=(d|0)?10:11,10==f?i=j:11==f&&(i=g-m&4294967295))}return i}function Wr(F,m,f){var d,i=null,g,j,e,c,k;k=c=e=0;a[Tf>>2]=-1;a[Dl>>2]=0;a[qh>>2]=-1;g=F;d=(g|0)<(m|0)?1:11;a:do if(1==d)for(;;){var w=j=(b=h[a[za>>2]+6*g&-1],128<=b?b-256:b);(w|0)>=(e|0)?(i=1,d=2):(i=1,d=6);if(2==d){d=(j|0)>(e|0)?3:4;3==d?k=g:4==d&&(k=c);c=g;var r=j;e=r;i=5}d=4<=((5==i?r:w)|0)?7:10;7==d&&(d=0>(a[Tf>>2]|0)?8:9,8==d&&(a[Tf>>2]=g-F&4294967295),a[qh>>2]=g);g=g+1&4294967295;if((g|0)<(m|0))d=1;else break a}while(0);d=0>(a[Tf>>2]|0)?12:13;12==d&&(a[Tf>>2]=m);a[Dl>>2]=(m-1&4294967295)+(-c&4294967295)&4294967295;a[Fd>>2]=c;a[gj>>2]=k;d=0!=(l[hj]&1|0)?14:15;a:do if(14==d)F=m,a[gj>>2]=F,a[Fd>>2]=F;else if(15==d)if(d=0<=(a[qh>>2]|0)?16:18,16==d){if((m|0)!=(f|0))break a;h[a[za>>2]+6*a[qh>>2]&-1]=7}else 18==d&&(h[a[za>>2]+6*a[Fd>>2]&-1]=7);while(0)}function Lp(F,m,f,d){var i,g,j,e;e=0;F=0==(F|0)?1:2;if(1==F){var c,k,w;w=a[jm>>2]+68*d&4294967295;k=m;Jm(k,a[Tf>>2]+k&4294967295,l[w+24&4294967295]&255,l[w+25&4294967295]&255);k=k+a[Tf>>2]&4294967295;c=0!=(a[rh>>2]&512|0)?3:4;3==c&&(a[Fd>>2]=a[gj>>2]);c=a[Fd>>2];var r,s=null,q,y,p,u,z,C,E,B,x,D,K;K=x=B=m=u=p=y=0;e=c;F=((l[w+32&4294967295]&255)-(l[w+31&4294967295]&255)&4294967295)<<8;d=-1<(F|0)?F:-F&4294967295;E=Jd&4294967295;C=1;z=0;r=255==(l[w+30&4294967295]&255|0)?1:2;1==r&&(z=1);r=255!=(l[w+33&4294967295]&255|0)?4:3;b:do if(4==r){for(s=c-1&4294967295;;){if(!((s|0)>=(k|0)))break b;q=4<=((b=h[a[za>>2]+6*s&-1],128<=b?b-256:b)|0);var I=s;if(q){r=7;break}s=I-1&4294967295;r=5}e=I}while(0);I=k;(k|0)<(c|0)?(s=3,r=9):(s=3,r=39);b:do if(9==r)for(;;){q=a[za>>2]+6*(38==s?i:I)&4294967295;i=(b=h[q&4294967295],128<=b?b-256:b);r=0!=(C|0)?13:10;d:do if(10==r){if(!(4<=(i|0))){r=32;break d}if(0!=(C|0)){r=13;break d}if(5==(i|0)){r=13;break d}r=(k|0)==(e|0)?23:24;if(23==r){y=(l[w+33&4294967295]&255)<<8;z=2;r=30;break d}else if(24==r)if(r=0!=(K|0)?25:26,25==r){z=1;K=0;y=(l[w+31&4294967295]&255)<<8;u=u+1&4294967295;r=30;break d}else if(26==r)if(r=0<(u|0)?27:28,27==r){y=y+p&4294967295;r=30;break d}else if(28==r){y=256*(l[w+32&4294967295]&255)&4294967295;r=d;var H=m,m=H+1&4294967295;y=(((b=h[(w+16&4294967295)+H&4294967295],128<=b?b-256:b)*r&4294967295|0)/64|0)+y&4294967295;if(!((m|0)>=(l[w+35&4294967295]&255|0))){r=30;break d}m=0;r=30;break d}}while(0);d:do if(13==r)if(m=C=0,H=k,r=255==(l[w+30&4294967295]&255|0)?14:15,14==r?(u=Zq(H,e,4),y=(l[w+31&4294967295]&255)<<8):15==r&&(u=Zq(H+1&4294967295,e,4),y=(l[w+30&4294967295]&255)<<8,K=1),r=(u|0)>(l[w+34&4294967295]&255|0)?17:18,17==r?(u=j=l[w+34&4294967295]&255,s=17):18==r&&(g=u,s=18),r=1<((18==s?g:j)|0)?20:21,20==r){p=(F|0)/(u-1&4294967295|0)|0;r=30;break d}else if(21==r){p=0;r=30;break d}while(0);d:do if(30==r){u=u-1&4294967295;if(!(4<=(i|0))){r=32;break d}B=Qw(k+1&4294967295,c,2);x=0;h[q&4294967295]=6;h[q+1&4294967295]=h[w+26&4294967295];Ue(q,y>>8,l[w+27&4294967295]&255);r=38;break d}while(0);32==r&&(r=2<=(i|0)?33:34,33==r?(B=Qw(k+1&4294967295,c,2),x=0,Ue(q,y>>8,a[(E+4*i&4294967295)>>2])):34==r&&(r=1<(B|0)?35:36,35==r?(D=(b=h[(w+39&4294967295)+z&4294967295],128<=b?b-256:b),s=(b=h[(w+36&4294967295)+z&4294967295],128<=b?b-256:b),D=(D-s&4294967295|0)/(B-1&4294967295|0)|0):36==r&&(D=0),s=q,q=y>>8,r=(b=h[(w+36&4294967295)+
z&4294967295],128<=b?b-256:b),Ue(s,(r+q&4294967295)+(x*D&4294967295)&4294967295,a[(E+4*i&4294967295)>>2]),x=x+1&4294967295));i=k=k+1&4294967295;if((k|0)<(c|0))s=38,r=9;else{s=38;break b}}while(0);k=3==s?I:i;c=0!=(l[hj]&1|0)?5:6;5!=c&&6==c&&(c=0==(a[Dl>>2]|0)?7:8,7==c?(a[mi>>2]=l[w+42&4294967295]&255,j=(l[w+43&4294967295]&255)-(l[w+44&4294967295]&255)&4294967295,g=k,k=g+1&4294967295,Ue(a[za>>2]+6*g&4294967295,l[w+44&4294967295]&255,j)):8==c&&(a[mi>>2]=l[w+45&4294967295]&255,j=(l[w+46&4294967295]&255)-
(l[w+47&4294967295]&255)&4294967295,g=k,k=g+1&4294967295,Ue(a[za>>2]+6*g&4294967295,l[w+47&4294967295]&255,j)),h[(a[za>>2]+6*a[Fd>>2]&4294967295)+1&4294967295]=a[mi>>2]&255,c=4==((b=h[a[za>>2]+6*a[Fd>>2]&-1],128<=b?b-256:b)|0)?10:11,10==c&&(h[a[za>>2]+6*a[Fd>>2]&-1]=6),Jm(k,f,l[w+48&4294967295]&255,l[w+49&4294967295]&255))}else if(2==F){3==(0<(m|0)?3:4)&&(e=1);g=tb+16*d&4294967295;j=Rw+16*d&4294967295;i=m;Jm(i,a[Tf>>2]+i&4294967295,l[g&4294967295]&255,l[g+1&4294967295]&255);i=i+a[Tf>>2]&4294967295;F=0!=(a[rh>>2]&512|0)?5:6;5==F&&(a[Fd>>2]=a[gj>>2]);D=a[Fd>>2];y=null;F=K=m=I=s=0;B=a[(g+4&4294967295)>>2];d=((l[g+3&4294967295]&255)-(l[g+2&4294967295]&255)&4294967295)<<8;E=-1<(d|0)?d:-d&4294967295;r=0!=(e|0)?1:2;1==r?(F=w=0,c=5,k=Sw&4294967295,I=(d|0)/((l[g+8&4294967295]&255)-1&4294967295|0)|0):2==r&&(c=l[g+10&4294967295]&255,k=a[(g+12&4294967295)>>2],w=1);e=i;(i|0)<(D|0)?(y=3,r=4):(y=3,r=31);b:do if(4==r)for(;;){q=a[za>>2]+6*(30==y?x:e)&4294967295;x=(b=h[q&4294967295],128<=b?b-256:b);r=0!=(w|0)?8:5;d:do if(5==r){p=x;if(4<=(p|0))y=5;else{y=5;r=23;break d}if(0!=(w|0)){r=8;break d}if(5==(x|0)){r=8;break d}r=0<(K|0)?16:17;if(16==r){s=s+I&4294967295;r=19;break d}else if(17==r){s=256*(l[g+3&4294967295]&255)&4294967295;r=E;H=F;F=H+1&4294967295;s=(((b=h[k+H&4294967295],128<=b?b-256:b)*r&4294967295|0)/64|0)+s&4294967295;if(!((F|0)>=(c|0))){r=19;break d}F=0;k=a[(g+12&4294967295)>>2];r=19;break d}}while(0);d:do if(8==r){F=w=0;m=K=Zq(i,D,4);r=(K|0)>(l[g+8&4294967295]&255|0)?9:10;9==r?(K=u=l[g+8&4294967295]&255,y=9):10==r&&(z=K,y=10);r=1<((10==y?z:u)|0)?12:13;12==r?I=(d|0)/(K-1&4294967295|0)|0:13==r&&(I=0);s=(l[g+2&4294967295]&255)<<8;r=19;break d}while(0);if(19==r){K=K-1&4294967295;m=m-1&4294967295;r=0!=(a[(j+8&4294967295)>>2]|0)?20:22;d:do if(20==r){if(!(2>(m|0)))break d;s=(b=t[(a[(j+8&4294967295)>>2]+2*m&4294967295)>>1],32768<=b?b-65536:b)<<8}while(0);C=x;y=22}r=4<=((22==y?C:p)|0)?24:25;24==r?(h[q&4294967295]=6,Ue(q,s>>8,a[(B+4*x&4294967295)>>2])):25==r&&(r=3<=(x|0)?26:27,26==r?Ue(q,s>>8,a[(B+4*x&4294967295)>>2]):27==r&&(r=3<=((b=h[a[za>>2]+6*(i-1&4294967295)&-1],128<=b?b-256:b)&63|0),y=q,q=s>>8,r=r?28:29,28==r?(r=(b=h[g+9&4294967295],128<=b?b-256:b),Ue(y,q-r&4294967295,a[(B+4*x&4294967295)>>2])):29==r&&Ue(y,q,a[(B+4*x&4294967295)>>2])));x=i=i+1&4294967295;if((i|0)<(D|0))y=30,r=4;else{y=30;break b}}while(0);i=3==y?e:x;F=0!=(l[hj]&1|0)?7:8;7!=F&&8==F&&(F=0!=(l[j+14&4294967295]&1|0)?9:10,9==F&&(g=(a[za>>2]+6*i&4294967295)+2&4294967295,D=((b=h[g],128<=b?b-256:b)|2)&255,h[g]=D),F=0==(a[Dl>>2]|0)?11:12,11==F?(a[mi>>2]=l[j&4294967295]&255,g=(l[j+1&4294967295]&255)-(l[j+2&4294967295]&255)&4294967295,D=i,i=D+1&4294967295,Ue(a[za>>2]+6*D&4294967295,l[j+2&4294967295]&255,g)):12==F&&(a[mi>>2]=l[j+3&4294967295]&255,g=(l[j+4&4294967295]&255)-(l[j+5&4294967295]&255)&4294967295,D=i,i=D+1&4294967295,Ue(a[za>>2]+6*D&4294967295,l[j+5&4294967295]&255,g)),h[(a[za>>2]+6*a[Fd>>2]&4294967295)+1&4294967295]=a[mi>>2]&255,F=4==((b=h[a[za>>2]+6*a[Fd>>2]&-1],128<=b?b-256:b)|0)?14:15,14==F&&(h[a[za>>2]+6*a[Fd>>2]&-1]=6),Jm(i,f,l[j+12&4294967295]&255,l[j+13&4294967295]&255))}}function Jm(F,m,f,d){var i,g=null,j,e,c,k,l,r;c=(d-f&4294967295)<<8;k=m-F&4294967295;i=0>=(k|0)?12:1;a:do if(1==i){i=1<(k|0)?2:3;2==i&&(c=(c|0)/(k|0)|0);e=f<<8;d=F;if(!((d|0)<(m|0)))break a;for(;;){r=a[za>>2]+6*d&4294967295;j=(b=h[r&4294967295],128<=b?b-256:b);i=0<(c|0)?5:6;if(5==i)Ue(r,e>>8,-(c>>8)&4294967295),e=e+c&4294967295;else if(6==i){var s=l=-(c>>8)&4294967295;(s|0)<(a[(Xr+4*j&4294967295)>>2]|0)?(g=6,i=7):(g=6,i=8);if(7==i){var t=a[(Xr+4*j&4294967295)>>2];l=t;g=7}g=7==g?t:s;e=e+c&4294967295;i=18<(g|0)?9:10;9==i&&(l=18);Ue(r,e>>8,l)}d=d+1&4294967295;if((d|0)<(m|0))i=4;else break a}}while(0)}function Ue(a,m,f){var d,i=null,g,j;g=m;j=f;m=0;0>(g|0)?(i=0,d=1):(i=0,d=2);if(1==d){g=0;var e=j,i=1}d=0>((1==i?e:f)|0)?3:4;3==d&&(m=1,j=-j&4294967295);f=i=j+g&4294967295;d=0>(i|0)?5:6;a:do if(5==d)f=0;else if(6==d){if(!(254<(i|0)))break a;f=254}while(0);9==(254<(g|0)?9:10)&&(g=254);h[a+4&4294967295]=f&255;h[a+5&4294967295]=g&255;a=a+2&4294967295;m=((b=h[a],128<=b?b-256:b)|m)&255;h[a]=m}function Zq(F,m,f){var d,i;for(d=0;(F|0)<(m|0);){i=F;F=i+1&4294967295;i=(b=h[a[za>>2]+6*i&-1],128<=b?b-256:b);if(7<=(i|0))break;(i|0)>=(f|0)&&(d=d+1&4294967295)}return d}function Qw(F,m,f){var d;for(d=F;(d|0)<=(m|0)&&!(((b=h[a[za>>2]+6*d&-1],128<=b?b-256:b)|0)>=(f|0));)d=d+1&4294967295;return d-F&4294967295}function jf(a){var b,f;b=256>a>>>0?1:2;1==b?f=dq(a):2==b&&(b=12352<a>>>0&42752>=a>>>0?3:4,3==b?f=1:4==b&&(b=563<a>>>0?5:6,5==b?f=0:6==b&&(f=l[ij+(a-256&4294967295)&4294967295]&255)));return f}function Oc(a){var b,f;b=256>a>>>0?1:2;1==b?f=10>(a-48&4294967295)>>>0&1:2==b&&(f=0);return f}function Mp(a){var b,f;b=0!=(Oc(a)|0)?1:2;1==b?f=1:2==b&&(f=jf(a));return f}function yl(a){var b,f;b=256>a>>>0?1:2;a:do if(1==b)f=$k(a);else if(2==b){b=563<a>>>0?4:3;b:do if(3==b){f=b=l[ij+(a-256&4294967295)&4294967295]&255;if(255==(b|0)){b=4;break b}b=254==(f|0)?6:8;c:do if(6==b){if(304!=(a|0))break c;f=105;break a}while(0);f=f+a&4294967295;break a}while(0);f=a}while(0);return f}function Tw(a){var b,f;b=($k(a-1&4294967295)|0)==(a|0)?1:2;1==b?f=a-1&4294967295:2==b&&(f=a);return f}function ji(a){var b,f;b=256>a>>>0?1:2;a:do if(1==b)f=65<=a&&90>=a||192<=a&&214>=a||216<=a&&222>=a;else if(2==b){b=563<a>>>0?5:3;b:do if(3==b){b=f=l[ij+(a-256&4294967295)&4294967295]&255;if(0==(f|0)){b=5;break b}if(255==(b|0)){b=5;break b}f=1;break a}while(0);f=0}while(0);return f}function kk(a){var b,f;b=256>a>>>0?1:2;a:do if(1==b)f=97<=a&&122>=a||223<=a&&246>=a||248<=a&&255>=a;else if(2==b){b=563<a>>>0?4:3;b:do if(3==b){if(255!=(l[ij+(a-256&4294967295)&4294967295]&255|0)){b=4;break b}f=1;break a}while(0);f=0}while(0);return f}function kc(a){var b,f;b=256>a>>>0?1:2;1==b?f=Qc(a):2==b&&(f=0);return f}function hk(b,m){var f,d,i;for(i=b;;){if(0==(a[i>>2]|0)){f=5;break}var g=i;if((a[i>>2]|0)==(m|0)){f=3;break}i=g+4&4294967295;f=1}5==f?d=0:3==f&&(d=g);return d}function Yr(b){var m;m=b;b=73==(m|0)?1:3;a:do if(1==b){if(29810!=(a[(a[Rb>>2]+280&4294967295)>>2]|0))break a;m=305}while(0);return yl(m)}function Kd(){var h,m;h=0!=(a[lk>>2]|0)?1:2;1==h?m=0:2==h&&(h=0!=(a[Jg>>2]|0)?3:4,3==h?m=0!=((b=t[(a[Jg>>2]+12&4294967295)>>1],32768<=b?b-65536:b)&32|0)&1:4==h&&(m=l[ni]&1));return m}function Zr(a){var b,f,d;for(b=d=0;!(f=Di(a)&255,d=((f&255)<<(8*b&4294967295))+d&4294967295,b=f=b+1&4294967295,!(4>(f|0))););return d}function $r(b,m){var f,d,i,g;f=0!=(m|0)?1:2;if(1==f){var j=null;i=0;0!=(a[b>>2]|0)?(j=0,f=1):(j=0,f=2);b:do if(1==f)for(;;)if(g=(1==j?g:i)+1&4294967295,0!=(a[b>>2]|0))f=j=1;else{j=1;break b}while(0);i=4*((0==j?i:g)+1&4294967295)&4294967295;a[sh>>2]=((a[sh>>2]+3&4294967295)>>>0)%4}else 2==f&&(i=$(b)+1&4294967295);f=(i+a[Uf>>2]&4294967295|0)>=(a[sh>>2]|0)?4:7;a:do if(4==f)if(g=f=ah(a[mk>>2],(a[Uf>>2]+300&4294967295)+i&4294967295),f=0==(f|0)?5:6,5==f){d=-1;f=8;break a}else if(6==f){a[mk>>2]=g;a[sh>>2]=(a[Uf>>2]+300&4294967295)+i&4294967295;f=7;break a}while(0);if(7==f){d=a[Uf>>2];j=a[mk>>2]+d&4294967295;f=i;var e;g=b;e=g+f;if(j%4==g%4&&8<f){for(;0!==g%4&&g<e;)h[j++]=h[g++];g>>=2;j>>=2;for(f=e>>2;g<f;)a[j++]=a[g++];g<<=2;j<<=2}for(;g<e;)h[j++]=h[g++];a[Uf>>2]=a[Uf>>2]+i&4294967295}return d}function Po(b){var m,f;f=Vf&4294967295;m=0==(b|0)?1:2;if(1==m){var d,b=f;m=b+76;d=0;0>d&&(d+=256);for(d=d+(d<<8)+(d<<16)+16777216*d;0!==b%4&&b<m;)h[b++]=0;b>>=2;for(f=m>>2;b<f;)a[b++]=d;for(b<<=2;b<m;)h[b++]=0}else 2==m&&(m=0!=(a[(b+4&4294967295)>>2]|0)?3:4,3==m&&fa(f+56&-1,a[(b+4&4294967295)>>2]),m=0!=(a[(b&4294967295)>>2]|0)?5:6,5==m&&fa(f+16&-1,a[(b&4294967295)>>2]),a[(f+4&4294967295)>>2]=l[b+14&4294967295]&255,a[(f+12&4294967295)>>2]=l[b+13&4294967295]&255,a[(f+8&4294967295)>>2]=l[b+12&4294967295]&255)}function Ld(){var b=s;s+=16;la(b,0,16);var m,f=null,d,i,g,j,h,e;g=e=a[lk>>2];m=0!=(e|0)?1:2;a:do if(1==m)a[lk>>2]=0,d=g;else if(2==m)if(m=0!=(a[th>>2]|0)?3:4,3==m?(g=a[th>>2],a[th>>2]=0):4==m&&(g=Uw()),m=3==(a[$e>>2]|0)|4==(a[$e>>2]|0)?6:7,6==m)a[lf>>2]=a[lf>>2]+1&4294967295,d=g;else if(7==m){m=2>(a[$e>>2]|0)?8:36;b:do if(8==m){var c=g;if(0!=(c&128|0))f=8;else{f=8;m=37;break b}e=0;m=192==(g&224|0)?10:12;c:do if(10==m){if(0==(g&30|0)){m=12;break c}e=1;f=11;m=17;break c}while(0);c:do if(12==m)if(m=224==(g&240|0)?13:14,13==m){e=2;f=13;m=17;break c}else if(14==m){m=240==(g&248|0)?15:18;d:do if(15==m){if(!(4>=(g&15|0)))break d;e=3;f=16;m=17;break c}while(0);h=m=e;m=0<(m|0)?19:33;break c}while(0);c:do if(17==m){h=13==f?2:16==f?3:1;m=19;break c}while(0);c:do if(19==m){i=l[as+h&4294967295]&255&g;var w=h,f=19;d:for(;;){if(!(0<((30==f?r:w)|0))){m=31;break d}m=Uw();j=a[(b+4*h&4294967295)>>2]=m;if(0==(m|0)){m=22;break d}if(128!=(j&192|0)){m=26;break d}i=(j&63)+(64*i&4294967295)&4294967295;var r=h-1&4294967295;h=r;f=30;m=20}if(22==m)m=0==(a[$e>>2]|0)?23:24,23==m&&(a[$e>>2]=2),Vw(32);else if(26==m){m=2==(e|0)?27:29;d:do if(27==m){if(1!=(h|0))break d;a[th>>2]=a[(b+8&4294967295)>>2]}while(0);Vw(j)}if(0!=(h|0))break c;a[lf>>2]=a[lf>>2]+1&4294967295;d=i;break a}while(0);if(0!=(a[$e>>2]|0)){m=36;break b}if(0!=(Kd()|0)){m=36;break b}a[$e>>2]=2;m=36;break b}while(0);if(36==m)var t=g,f=36;m=36==f?t:c;a[lf>>2]=a[lf>>2]+1&4294967295;e=g;m=160<=(m|0)?38:39;38==m?d=P[(a[(a[Rb>>2]+696&4294967295)>>2]+2*(e-160&4294967295)&4294967295)>>1]&65535:39==m&&(d=e)}while(0);s=b;return d}function Wf(b){a[lk>>2]=b}function Ww(b){var m=s;s+=4;la(m,0,4);var f=sc(m,b),d,i,f=b+f;i=32;0>i&&(i+=256);for(i=i+(i<<8)+(i<<16)+16777216*i;0!==b%4&&b<f;)h[b++]=32;b>>=2;for(d=f>>2;b<d;)a[b++]=i;for(b<<=2;b<f;)h[b++]=32;s=m}function Xw(F,m,f){var d=s;s+=156;la(d,0,156);var i=d+8,g=d+32,j=d+
92,c,n=d+152;c=0;h[nk&4294967295]=0;a[(d&4294967295)>>2]=0;a[(d+4&4294967295)>>2]=0;h[i&4294967295]=0;h[i+1&4294967295]=95;m=De(m,i+2&4294967295);h[i+(m+2&4294967295)&4294967295]=0;m=0!=(f|0)?1:2;a:do if(1==m)a[n>>2]=i+2&4294967295,Pd(F,n,g&4294967295,d&4294967295,0,0);else if(2==m){a[n>>2]=i+1&4294967295;if(0!=(Pd(F,n,g&4294967295,d&4294967295,0,0)|0))break a;a[n>>2]=i+2&4294967295;if(0!=(Pd(F,n,g&4294967295,d&4294967295,0,0)|0))break a;h[i+1&4294967295]=32;Gf(F,i+2&4294967295,g&4294967295,60,0,0,0)}while(0);m=0==(f|0)?6:13;a:do if(6==m){if(0!=((b=h[g&4294967295],128<=b?b-256:b)|0))break a;if(25966==(a[(F+280&4294967295)>>2]|0))break a;El(Gg&4294967295);a[n>>2]=i+1&4294967295;h[i+1&4294967295]=95;m=0==(Pd(a[tf>>2],n,g&4294967295,d&4294967295,0,0)|0)?9:10;9==m&&(a[n>>2]=i+2&4294967295,Pd(a[tf>>2],n,g&4294967295,d&4294967295,0,0));m=0!=(b=h[g&4294967295],128<=b?b-256:b)?11:12;11==m?c=Gg&4294967295:12==m&&Xf(a[(a[M>>2]+40&4294967295)>>2])}while(0);m=0!=(b=h[g&4294967295],128<=b?b-256:b)?14:17;a:do if(14==m)if(m=0!=(c|0)?15:16,15==m){Hg(a[tf>>2],g&4294967295,d&4294967295,-1,0);gk(g&4294967295,j&4294967295);i=j&4294967295;for(var k=void 0,l=n=void 0,r=void 0,n=a[(F+280&4294967295)>>2],r=bs&4294967295,l=3;!(k=n>>>((8*l&4294967295)>>>0)&255,h[r]=k,k=0!=((b=k,128<=b?b-256:b)|0)?2:3,2==k&&(r=r+1&4294967295),l=k=l-1&4294967295,!(0<=(k|0))););h[r]=0;U(nk&4294967295,Yw&4294967295,e([Gg&4294967295,0,0,0,i,0,0,0,bs&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));Xf(a[(a[M>>2]+40&4294967295)>>2])}else 16==m&&(Hg(F,g&4294967295,d&4294967295,-1,0),gk(g&4294967295,j&4294967295),U(nk&4294967295,Zw&4294967295,e([j&4294967295,0,0,0],["i8*",0,0,0],y)));else if(17==m){if(0!=(f|0))break a;i=$w&4294967295;n=nk&4294967295;l=i+17;if(n%4==i%4){for(;0!==i%4&&i<l;)h[n++]=h[i++];i>>=2;n>>=2;for(r=l>>2;i<r;)a[n++]=a[i++];i<<=2;n<<=2}for(;i<l;)h[n++]=h[i++]}while(0);s=d}function ax(a){var b,a=73==(a|0)|86==(a|0)|88==(a|0)|76==(a|0)?1:2;1==a?b=1:2==a&&(b=0);return b}function bx(F,m){var f=s;s+=764;la(f,0,764);var d,i,g,j,c,n,k=f+100,l,r=f+304,t=f+316;g=F;d=0==(g|0)?1:3;a:do if(1==d){g=j=a[((nd+16*m&4294967295)+12&4294967295)>>2];if(0!=(j|0)){d=3;break a}i=1;d=23;break a}while(0);a:do if(3==d){d=47!=((b=h[g&4294967295],128<=b?b-256:b)|0)?4:5;4==d&&(U(k&4294967295,cx&4294967295,e([wd&4294967295,0,0,0,47,0,0,0,47,0,0,0,g,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0],y)),g=k&4294967295);j=c=pe(g,gh&4294967295);d=0!=(c|0)?6:18;b:do if(6==d){Wk(j,20,0);c=0;c:for(;;)if(d=Zr(j),a[(r+4*c&4294967295)>>2]=d,c=d=c+1&4294967295,!(3>(d|0)))break c;d=65537!=(a[(r&4294967295)>>2]|0)?11:9;c:do if(9==d){if((a[(r+4&4294967295)>>2]|0)!=(a[Jb>>2]|0)){d=11;break c}d=(a[(r+8&4294967295)>>2]|0)!=(2*a[Jb>>2]&4294967295|0)?11:17;break c}while(0);c:do if(11==d){Sd(j);j=0;d=(a[(r+8&4294967295)>>2]|0)==(a[Jb>>2]|0)?12:13;12==d?l=bf&4294967295:13==d&&(l=dx&4294967295);d=f&4294967295;var q;c=ex&4294967295;n=c+18;if(d%4==c%4){for(;0!==c%4&&c<n;)h[d++]=h[c++];c>>=2;d>>=2;for(q=n>>2;c<q;)a[d++]=a[c++];c<<=2;d<<=2}for(;c<n;)h[d++]=h[c++];c=d=cI(f&4294967295);if(!(0<=(d|0)))break c;mc(c);U(t&4294967295,fx&4294967295,e([g,0,0,0,a[Jb>>2],0,0,0,f&4294967295,0,0,0,l,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));N(T.EAGAIN);break c}while(0);d=0==(j|0)?18:20;break b}while(0);b:do if(18==d){j=c=pe(g,gh&4294967295);if(0!=(c|0))break b;i=3;break a}while(0);n=of(g);Wk(j,0,0);c=d=ah(a[((nd+16*m&4294967295)+8&4294967295)>>2],n);d=0==(d|0)?21:22;21==d?(Sd(j),i=4):22==d&&(fm(c,1,n,j),Sd(j),Yt(f&4294967295),i=c+40&4294967295,a[((nd+16*m&4294967295)+4&4294967295)>>2]=(a[i>>2]|0)/2|0,a[((nd+16*m&4294967295)+8&4294967295)>>2]=c,i=0)}while(0);s=f;return i}function Np(b){var m,f=a[Yf>>2];m=dl+64*f&4294967295;1==(19>(f|0)?1:2)&&(a[Yf>>2]=a[Yf>>2]+1&4294967295);a[(m&4294967295)>>2]=b;for(b=0;!(a[((m+4&4294967295)+4*b&4294967295)>>2]=-1,b=f=b+1&4294967295,!(15>(f|0))););return m}function vc(e,m){var f,d=null,i,g;g=e;a:for(;;){if(0==(a[g>>2]|0)){f=17;break a}f=0!=(kc(a[(g+-4&4294967295)>>2])|0)?3:16;if(3==f){d=0;f=a[g>>2];var j=(b=h[m+d&4294967295],128<=b?b-256:b);f=(f|0)==(j|0)?4:5;b:do if(4==f)for(;;)if(g=g+4&4294967295,d=d+1&4294967295,f=a[g>>2],j=(b=h[m+d&4294967295],128<=b?b-256:b),(f|0)==(j|0))f=4;else break b;while(0);if(0==((b=h[m+d&4294967295],128<=b?b-256:b)|0)){f=6;break a}}g=g+4&4294967295;f=1}a:do if(17==f)i=0;else if(6==f){d=0!=(kc(a[g>>2])|0);i=g;d?(d=6,f=7):(d=6,f=8);b:do if(7==f)for(;;){g=(7==d?c:i)+4&4294967295;var d=0!=(kc(a[g>>2])|0),c=g;if(d)f=d=7;else{d=7;break b}}while(0);f=61==(a[(6==d?i:c)>>2]|0)?9:10;9==f&&(g=g+4&4294967295);d=0!=(kc(a[g>>2])|0);i=g;d?(d=10,f=11):(d=10,f=12);b:do if(11==f)for(;;){g=(11==d?n:i)+4&4294967295;var d=0!=(kc(a[g>>2])|0),n=g;if(d)f=d=11;else{d=11;break b}}while(0);f=34==(a[(10==d?i:n)>>2]|0)?14:13;b:do if(13==f){if(39==(a[g>>2]|0)){f=14;break b}i=gx&4294967295;break a}while(0);i=g+4&4294967295}while(0);return i}function cs(e,m){var f,d;f=0==(e|0)?1:2;a:do if(1==f)d=1;else if(2==f){d=0;b:for(;;){f=a[(e+4*d&4294967295)>>2];var i=(b=h[m+d&4294967295],128<=b?b-256:b);if((f|0)!=(i|0))break b;if(0==(a[(e+4*d&4294967295)>>2]|0))break b;d=d+1&4294967295}f=34==(a[(e+4*d&4294967295)>>2]|0)?8:7;b:do if(7==f){f=39==(a[(e+4*d&4294967295)>>2]|0)?8:10;break b}while(0);b:do if(8==f){if(0!=((b=h[m+d&4294967295],128<=b?b-256:b)|0)){f=10;break b}d=0;break a}while(0);d=1}while(0);return d}function jj(b,m){var f,d,i;for(i=0;;){if(0==(a[(m+8*i&-1)>>2]|0)){f=5;break}f=0==(cs(b,a[(m+8*i&-1)>>2])|0);var g=i;if(f){f=3;break}i=g+1&4294967295;f=1}5==f?d=a[((m+8*i&4294967295)+
4&4294967295)>>2]:3==f&&(d=a[((m+8*g&4294967295)+4&4294967295)>>2]);return d}function Km(F,m){var f=s;s+=80;la(f,0,80);var d,i,g,j,c=f+20;i=0;a:for(;;)if(a[(c+4*i&4294967295)>>2]=-1,i=g=i+1&4294967295,!(15>(g|0)))break a;g=0;var n=(g|0)<(a[Yf>>2]|0);i=0;d=n?4:3;a:do if(4==d)for(;;)if(d=0<=(a[(((dl+64*g&4294967295)+4&4294967295)+4*i&4294967295)>>2]|0)?5:6,5==d&&(a[(c+4*i&4294967295)>>2]=a[(((dl+64*g&4294967295)+4&4294967295)+4*i&4294967295)>>2]),i=n=i+1&4294967295,15>(n|0))d=4;else if(g=g+1&4294967295,n=(g|0)<(a[Yf>>2]|0),i=0,n)d=4;else break a;while(0);g=f&4294967295;for(var n=f&4294967295,k=f&4294967295,l=f&4294967295;!(j=d=a[(c+4*i&4294967295)>>2],d=(d|0)!=(a[(kj+4*i&4294967295)>>2]|0)?9:14,9==d&&(h[g]=0,d=i,d=5==d?10:6==d?11:1==d?12:2==d?12:3==d?12:4==d?12:12==d?12:13,10==d?a[Fi>>2]=j-1&4294967295:11==d?a[bl>>2]=j:12==d&&(d=(b=h[hx+i&4294967295],128<=b?b-256:b),U(l,ix&4294967295,e([1,0,0,0,j,0,0,0,d,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0],y))),a[(kj+4*i&4294967295)>>2]=a[(c+4*i&4294967295)>>2],fa(F+a[m>>2]&4294967295,n),j=$(k),d=m,a[d>>2]=a[d>>2]+j&4294967295),i=j=i+1&4294967295,!(15>(j|0))););s=f}function ds(b,m,f){var d,i,g;d=b;g=0;1==(32<=(d|0)?1:2)&&(d=d-32&4294967295);i=0;b=(i|0)<(a[Yf>>2]|0)?3:6;a:do if(3==b)for(;;)if(b=(a[(dl+64*i&-1)>>2]|0)==(d|0)?4:5,4==b&&(g=i),i=i+1&4294967295,(i|0)<(a[Yf>>2]|0))b=3;else break a;while(0);7==(0<(g|0)?7:8)&&(a[Yf>>2]=g);Km(m,f)}function co(b,m,f){var d,i,g;g=0;d=0==(b|0)?3:1;a:do if(1==d){if(0==(10>(a[b>>2]-48&4294967295)>>>0&1|0)){d=3;break a}d=10>(a[b>>2]-48&4294967295)>>>0?4:5;b:do if(4==d)for(;;)if(i=10*g&4294967295,d=b,b=d+4&4294967295,g=(i-48&4294967295)+a[d>>2]&4294967295,0!=(10>(a[b>>2]-48&4294967295)>>>0&1|0))d=4;else break b;while(0);d=1==(f|0)?6:8;b:do if(6==d){if(115!=(yl(a[b>>2])|0))break b;g=1E3*g&4294967295}while(0);i=g;d=9;break a}while(0);3==d&&(i=m);return i}function Fl(b,m,f){var d,i,g,j;j=g=0;d=0!=(m|0)?1:6;a:do if(1==d)for(;;){if(!((g|0)<(f-4&4294967295|0)))break a;i=m;m=i+4&4294967295;i=d=a[i>>2];if(0==(d|0))break a;d=34==(i|0)?4:5;if(4==d&&92!=(j|0))break a;j=De(i,b+g&4294967295);g=g+j&4294967295;j=i;d=1}while(0);h[b+g&4294967295]=0;return g}function jx(b){var m,f,d;for(d=0;;){if(!((d|0)<(a[km>>2]|0))){m=6;break}m=0!=(a[((nd+16*d&4294967295)+12&4294967295)>>2]|0)?3:5;if(3==m&&0==(nb(b,a[((nd+16*d&4294967295)+12&4294967295)>>2])|0)){m=4;break}d=d+1&4294967295;m=1}6==m?(a[uh>>2]=a[uh>>2]+1&4294967295,m=4<=(a[uh>>2]|0)?7:8,7==m&&(a[uh>>2]=0),m=0!=(bx(b,a[uh>>2])|0)?9:10,9==m?f=-1:10==m&&(m=a[((nd+16*d&4294967295)+
12&4294967295)>>2],f=$(b)+1&4294967295,m=ah(m,f),a[((nd+16*a[uh>>2]&4294967295)+12&4294967295)>>2]=m,fa(a[((nd+16*a[uh>>2]&4294967295)+12&4294967295)>>2],b),f=a[uh>>2])):4==m&&(f=d);return f}function Kg(e,m){var f,d,i,g,j,c,n;f=0!=(m&32|0)?1:3;a:do if(1==f){if(!(1<(a[Yc>>2]|0))){f=10;break a}a[Yc>>2]=a[Yc>>2]-1&4294967295;f=10;break a}else if(3==f){i=vc(e,kx&4294967295);f=2!=(m|0)?4:5;4==f?g=c=n=j=0:5==f&&(j=vc(e,Lm&4294967295),n=vc(e,Gl&4294967295),c=vc(e,lx&4294967295),g=vc(e,Hl&4294967295));f=2!=(m|0)?7:9;b:do if(7==f){if(0!=(i|0))break b;d=0;f=13;break a}while(0);f=a[Yc>>2];a[Yc>>2]=f+1&4294967295;f=Vf+76*f&4294967295;Fl(f+56&-1,i,20);Fl(f+16&-1,j,40);i=co(n,1,0)-1&4294967295;a[(f+4&4294967295)>>2]=i;c=co(c,0,0);a[(f+12&4294967295)>>2]=c;g=jj(g,oi&4294967295);a[(f+8&4294967295)>>2]=g;a[(f&4294967295)>>2]=m;f=10;break a}while(0);if(10==f){g=s;s+=108;la(g,0,108);var k;n=g+4;var l=g+28,r=g+68;fa(l&4294967295,Vf+16&4294967295);fa(r&4294967295,Vf+56&4294967295);h[n+13&4294967295]=a[(Vf+12&4294967295)>>2]&255;h[n+12&4294967295]=a[(Vf+8&4294967295)>>2]&255;h[n+14&4294967295]=a[(Vf+4&4294967295)>>2]&255;f=a[(n+8&4294967295)>>2]=0;c=(f|0)<(a[Yc>>2]|0)?1:15;b:do if(1==c){var t=l&4294967295,q=r&4294967295,y=n+12&4294967295,p=n+13&4294967295,u=n+14&4294967295,z=r&4294967295,C=l&4294967295,E=n+12&4294967295,B=n+13&4294967295,x=n+14&4294967295;for(;;){i=Vf+76*f&4294967295;j=0;c=0!=((b=h[i+16&-1],128<=b?b-256:b)|0)?3:5;d:do if(3==c){if(0==(tn(0,i+16&-1)|0))break d;j=1;fa(t,i+16&-1);h[q]=0;h[y]=0;h[p]=0;h[u]=0}while(0);c=0!=((b=h[i+56&-1],128<=b?b-256:b)|0)?6:8;d:do if(6==c){fa(z,i+56&-1);if(0!=(j|0))break d;h[C]=0}while(0);c=0!=(a[(i+8&4294967295)>>2]|0)?9:10;9==c&&(h[E]=a[(i+8&4294967295)>>2]&255);c=0!=(a[(i+12&4294967295)>>2]|0)?11:12;11==c&&(h[B]=a[(i+12&4294967295)>>2]&255);c=0!=(a[(i+4&4294967295)>>2]|0)?13:14;13==c&&(h[x]=a[(i+4&4294967295)>>2]&255);f=f+1&4294967295;if((f|0)<(a[Yc>>2]|0))c=2;else break b}}while(0);a[(n&4294967295)>>2]=l&4294967295;a[(n+4&4294967295)>>2]=r&4294967295;f=kv(n,g);c=0==(f|0)?16:17;16==c?k=hh&4294967295:17==c&&(k=f);s=g;f=0!=(nb(k,Mm&4294967295)|0)?11:12;11==f?(fa(Mm&4294967295,k),d=131072):12==f&&(d=0)}return d}function Uw(){var e,m,f;e=0!=(a[Jg>>2]|0)?1:8;a:do if(1==e)m=Di(a[Jg>>2]),e=0!=((b=t[(a[Jg>>2]+12&4294967295)>>1],32768<=b?b-65536:b)&32|0)?2:3,2==e&&(m=32),e=4==(a[$e>>2]|0)?4:7,4==e&&(f=Di(a[Jg>>2]),e=0!=((b=t[(a[Jg>>2]+12&4294967295)>>1],32768<=b?b-65536:b)&32|0)?5:6,5==e&&(f=0),m=(256*f&4294967295)+m&4294967295);else if(8==e){e=3==(a[$e>>2]|0)?9:13;b:do if(9==e)if(e=0==(a[a[lj>>2]>>2]|0)?10:11,10==e){h[ni]=1;m=0;break a}else{if(11==e){if(0!=(l[ni]&1|0)){e=19;break b}e=a[lj>>2];a[lj>>2]=e+4&4294967295;m=a[e>>2];break a}}else if(13==e)if(e=0==(l[a[Lg>>2]]&255|0)?14:15,14==e){h[ni]=1;m=0;break a}else if(15==e){if(0!=(l[ni]&1|0)){e=19;break b}m=Ma[Lg>>2];e=4==(a[$e>>2]|0)?17:18;if(17==e){m=(256*(l[a[Lg>>2]+1&4294967295]&255)&4294967295)+(l[m&4294967295]&255)&4294967295;a[Lg>>2]=a[Lg>>2]+2&4294967295;break a}else if(18==e){a[Lg>>2]=m+
1&4294967295;m=l[m]&255;break a}}while(0);m=0}while(0);return m}function Vw(b){var m;m=0!=(a[Jg>>2]|0)?1:2;1==m?(m=a[Jg>>2],m in H.streams&&(b=Fj(b&255),H.streams[m].ungotten.push(b))):2==m&&(a[Lg>>2]=a[Lg>>2]+-1&4294967295,h[a[Lg>>2]]=b&255,h[ni]=0)}function Nm(b){var m,f=null,d,i;a[(wa+28&4294967295)>>2]=0;a[(wa+24&4294967295)>>2]=450;a[(wa+16&4294967295)>>2]=110;a[(wa+20&4294967295)>>2]=100;a[(wa+8&4294967295)>>2]=5;d=a[(Ub+8&4294967295)>>2];1==(2==(b|0)?1:2)&&(d=a[(Ub+32&4294967295)>>2]);i=d;m=0<(a[(a[M>>2]+64&4294967295)>>2]|0)?3:4;3==m&&(d=(a[(a[M>>2]+64&4294967295)>>2]*d&4294967295|0)/100|0);5==(0!=(b&2|0)?5:6)&&mx(1024);m=450<(i|0)?10:7;a:do if(7==m){var g=d;m=(i|0)>(a[(wa+32&4294967295)>>2]|0)?8:14;b:do if(8==m){if(350<(g|0)){m=10;break a}var j=d,f=9;m=16;break b}else if(14==m){if(450<(g|0))f=14;else{f=14;m=16;break b}d=450;m=17;break b}while(0);b:do if(16==m){m=360<((9==f?j:g)|0)?17:18;break b}while(0);17==m&&(a[(wa+28&4294967295)>>2]=(d-360&4294967295|0)/8|0);i=g=d;359<(g|0)?(f=18,m=19):(f=18,m=20);if(19==m){i=359;var h=d,f=19}m=80>((19==f?h:g)|0)?21:22;21==m&&(i=80);f=l[nx+(i-80&4294967295)&4294967295]&255;m=380<=(d|0)?23:25;b:do if(23==m){f=7;if(!(400<=(d|0)))break b;f=6}while(0);m=0!=(b&1|0)?26:28;b:do if(26==m){a[ok>>2]=(a[(a[M>>2]+52&4294967295)>>2]*f&4294967295|0)/256|0;a[Om>>2]=(a[(a[M>>2]+56&4294967295)>>2]*f&4294967295|0)/256|0;a[eo>>2]=(a[(a[M>>2]+60&4294967295)>>2]*f&4294967295|0)/256|0;if(!(7>=(f|0)))break b;a[ok>>2]=f;h=f-1&4294967295;a[eo>>2]=h;a[Om>>2]=h}while(0);if(0==(b&2|0)){m=51;break a}h=d;m=350<(d|0)?30:31;b:do if(30==m)a[(wa+16&4294967295)>>2]=85-((h-350&4294967295|0)/3|0)&4294967295,a[(wa+20&4294967295)>>2]=60-((d-350&4294967295|0)/8|0)&4294967295;else if(31==m){if(!(250<(h|0)))break b;a[(wa+16&4294967295)>>2]=110-((d-250&4294967295|0)/4|0)&4294967295;a[(wa+20&4294967295)>>2]=110-((d-250&4294967295|0)/2|0)&4294967295}while(0);h=f=(a[(a[M>>2]+52&4294967295)>>2]*f&4294967295|0)/256|0;m=170<=(d|0)?34:35;34==m?a[(wa+12&4294967295)>>2]=((150*h&4294967295|0)/128|0)+110&4294967295:35==m&&(a[(wa+12&4294967295)>>2]=((128*h&4294967295|0)/130|0)+128&4294967295);m=350<=(d|0)?37:40;b:do if(37==m){a[(wa+12&4294967295)>>2]=l[ox+(d-350&4294967295)&4294967295]&255;if(!(390<=(d|0)))break b;a[(wa+24&4294967295)>>2]=450-((d-400&4294967295|0)/2|0)&4294967295;if(!(440<(d|0)))break b;a[(wa+24&4294967295)>>2]=(-d&4294967295)+860&4294967295}while(0);a[(wa&4294967295)>>2]=(256*f&4294967295|0)/115|0;a[(wa+4&4294967295)>>2]=0;m=430<(d|0)?41:42;b:do if(41==m)a[(wa&4294967295)>>2]=12;else if(42==m)if(m=400<(d|0)?43:44,43==m)a[(wa&4294967295)>>2]=13;else if(44==m)if(m=374<(d|0)?45:46,45==m)a[(wa&4294967295)>>2]=14;else if(46==m){if(!(350<(d|0)))break b;a[(wa&4294967295)>>2]=l[px+(d-350&4294967295)&4294967295]&255}while(0);if(0!=(a[(wa+4&4294967295)>>2]|0)){m=51;break a}m=a[(wa&4294967295)>>2];a[(wa+4&4294967295)>>2]=m;if(!(16>(m|0))){m=51;break a}a[(wa+4&4294967295)>>2]=16;m=51;break a}while(0);a:do if(10==m){i=d;d=175;f=73;m=0!=(b&1|0)?11:12;11==m&&(a[ok>>2]=(a[(a[M>>2]+
52&4294967295)>>2]*f&4294967295|0)/256|0,a[Om>>2]=(a[(a[M>>2]+56&4294967295)>>2]*f&4294967295|0)/256|0,a[eo>>2]=(a[(a[M>>2]+60&4294967295)>>2]*f&4294967295|0)/256|0);if(0==(b&2|0))break a;f=(i|0)/(d|0);mx(1024*f|0);a[(wa&4294967295)>>2]=85;a[(wa+4&4294967295)>>2]=80;a[(wa+8&4294967295)>>2]=22;a[(wa+24&4294967295)>>2]=900;a[(wa+12&4294967295)>>2]=211;a[(wa+16&4294967295)>>2]=210;a[(wa+20&4294967295)>>2]=170}while(0)}function Vi(b,m,f){var d;d=m;f=0!=(f|0)?1:3;a:do if(1==f){if(!(5>(b|0)))break a;d=a[(Qo+4*b&4294967295)>>2];d=((m*d&4294967295|0)/100|0)+d&4294967295}while(0);a[((dl+4&4294967295)+4*b&4294967295)>>2]=d;f=1==b?4:2==b?5:3==b?6:4==b?11:13==b?14:7==b?15:9==b?16:19;if(4==f)a[(Ub+8&4294967295)>>2]=d,a[(Ub+32&4294967295)>>2]=d,Nm(3);else if(5==f)a[(Ub+12&4294967295)>>2]=d,Il();else if(6==f){b=d;f=99<(b|0)?7:8;a:do if(7==f)d=99;else if(8==f){if(!(0>(b|0)))break a;d=0}while(0);a[(Ub+4&4294967295)>>2]=d}else 11==f?(12==(99<(d|0)?12:13)&&(d=99),a[(Ub+16&4294967295)>>2]=d):14==f?a[kn>>2]=d:15==f?a[wo>>2]=d:16==f&&(17==(0!=(d&255|0)?17:18)&&(a[((a[Rb>>2]&4294967295)+228&4294967295)>>2]=d&255),a[rh>>2]=d)}function Gw(c,m,f){var d=s;s+=128;la(d,0,128);var i=null,g,j,l,n,k,w=d+32,r=d+64,q=d+96;g=f;k=n=l=j=0;h[q&4294967295]=0;f=224<=m>>>0&383>m>>>0?1:2;if(1==f){var L=P[(qx+2*(m-224&4294967295)&4294967295)>>1]&65535;j=L;i=1}else if(2==f)if(f=592<=m>>>0&680>=m>>>0?3:4,3==f){var x=P[(rx+2*(m-592&4294967295)&4294967295)>>1]&65535;j=x;i=3}else if(4==f)var p=j,i=4;f=0!=((4==i?p:3==i?x:L)|0)?6:24;a:do if(6==f){m=(j&63)+59&4294967295;f=97>(m|0)?7:8;7==f&&(m=(b=t[(sx+2*(m-59&4294967295)&4294967295)>>1],32768<=b?b-65536:b));i=j>>6;f=0!=(j&32768|0)?9:10;9==f?(k=i&63,k=k+59&4294967295,n=j>>12&7):10==f&&(l=i&31,n=j>>11&15);if(0==(aa(c,a[(ub+8*l&-1)>>2],r&4294967295)|0))break a;if(0==(tx(c,m,d&4294967295)|0))break a;f=0!=(n|0)?14:16;b:do if(14==f){aa(c,a[(ub+8*n&-1)>>2],q&4294967295);if(0==(a[((ub+8*n&4294967295)+4&4294967295)>>2]&1|0))break b;fa(g,q&4294967295);m=$(g);g=g+m&4294967295;h[q&4294967295]=0}while(0);f=0!=(k|0)?17:18;if(17==f)tx(c,k,w&4294967295),U(g,ux&4294967295,e([r&4294967295,0,0,0,23,0,0,0,d&4294967295,0,0,0,6,0,0,0,w&4294967295,0,0,0,q&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));else if(18==f)if(f=0==(l|0)?19:20,19==f)fa(g,d&4294967295);else if(20==f){f=0!=(a[((c&4294967295)+220&4294967295)>>2]&1|0)?22:21;b:do if(21==f){if(0!=(a[((ub+8*l&4294967295)+4&4294967295)>>2]&1|0)){f=22;break b}U(g,vx&4294967295,e([4,0,0,0,d&4294967295,0,0,0,23,0,0,0,r&4294967295,0,0,0,23,0,0,0],["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],y));break a}while(0);U(g,wx&4294967295,e([r&4294967295,0,0,0,23,0,0,0,6,0,0,0,d&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0],y))}}while(0);s=d}function tx(a,m,f){var d=s;s+=12;la(d,0,12);h[d&4294967295]=0;h[d+1&4294967295]=95;m=De(m,d+2&4294967295);h[d+(m+2&4294967295)&4294967295]=32;h[d+(m+3&4294967295)&4294967295]=0;m=0==(aa(a,d+1&4294967295,f)|0)?1:3;a:do if(1==m){h[d+1&4294967295]=32;if(0!=(aa(a,d+2&4294967295,f)|0))break a;Gf(a,d+2&4294967295,f,20,0,0,0)}while(0);a=(b=h[f&4294967295],128<=b?b-256:b);s=d;return a}function Im(c,m,f,d,i){var g=s;s+=48;la(g,0,48);var j,l,n=g+8;j=f;h[d&4294967295]=0;l=De(m,be+2&4294967295);h[be+(l+2&4294967295)&4294967295]=32;f=-1==(j|0)?1:7;a:do if(1==f){if(0!=(aa(c,be+2&4294967295,d)|0))break a;h[be+1&4294967295]=95;if(0!=(aa(c,be+1&4294967295,n&4294967295)|0))break a;if(25966==(a[(c+280&4294967295)>>2]|0))break a;El(Gg&4294967295);f=0!=(aa(a[tf>>2],be+2&4294967295,n&4294967295)|0)?5:6;if(5==f){var k=d;h[k]=21;h[k+1&4294967295]=0}Xf(a[(a[M>>2]+40&4294967295)>>2])}else if(7==f){f=32>=m>>>0?9:8;b:do if(8==f){if(0!=(kc(m)|0)){f=9;break b}f=32!=(j|0)?11:12;11==f&&(j=31);h[be+(l+3&4294967295)&4294967295]=j&255;h[be+1&4294967295]=95;a[(g+4&4294967295)>>2]=0;f=0==(aa(c,be+1&4294967295,n&4294967295)|0)?13:15;c:do if(13==f){h[be+1&4294967295]=32;if(0!=(aa(c,be+2&4294967295,n&4294967295)|0))break c;Gf(c,be+2&4294967295,n&4294967295,40,0,268435456,0)}while(0);f=0==((b=h[n&4294967295],128<=b?b-256:b)|0)?16:17;16==f&&Gw(c,m,n&4294967295);fa(d,n&4294967295);if(0==((b=h[d&4294967295],128<=b?b-256:b)|0))break a;if(21==((b=h[d&4294967295],128<=b?b-256:b)|0))break a;a[(g&4294967295)>>2]=0;a[(g+4&4294967295)>>2]=0;Hg(c,d,g&4294967295,-1,i&1);break a}while(0);U(be+1&4294967295,xx&4294967295,e([m,0,0,0],["i32",0,0,0],y));aa(c,be+1&4294967295,d)}while(0);s=g}function yx(c,m,f,d){var i=s;s+=152;la(i,0,152);var g,j,l,n,k=i+4,w=i+24,r=i+84,t=i+144;h[w&4294967295]=0;h[k&4294967295]=0;l=sc(i,m);g=57344==(a[i>>2]&1048320|0)?1:2;1==g&&(a[i>>2]&=255);g=0!=(d&2|0)?3:5;a:do if(3==g){if(0==(ji(a[i>>2])|0))break a;aa(c,es&4294967295,k&4294967295)}while(0);n=Yr(a[i>>2]);a[i>>2]=n;n=a[i>>2];g=(b=h[m+l&4294967295],128<=b?b-256:b);Im(c,n,g,w&4294967295,d&1);g=21==((b=h[w&4294967295],128<=b?b-256:b)|0)?6:7;a:do if(6==g)fa(f,w&4294967295),j=0;else if(7==g){g=0==((b=h[w&4294967295],128<=b?b-256:b)|0)?8:11;b:do if(8==g){if(25966==(a[(c+
280&4294967295)>>2]|0))break b;El(Gg&4294967295);j=a[Hd>>2];a[Hd>>2]=0;n=a[tf>>2];g=a[i>>2];var q=(b=h[m+l&4294967295],128<=b?b-256:b);Im(n,g,q,w&4294967295,d&1);Xf(a[(a[M>>2]+40&4294967295)>>2]);a[Hd>>2]=j;if(0==((b=h[w&4294967295],128<=b?b-256:b)|0))break b;U(f,zx&4294967295,e([21,0,0,0],["i32",0,0,0],y));j=0;break a}while(0);g=0==((b=h[w&4294967295],128<=b?b-256:b)|0)?12:20;b:do if(12==g){g=0!=(jf(a[i>>2])|0)?13:14;13==g&&aa(c,Ax&4294967295,w&4294967295);g=0==((b=h[w&4294967295],128<=b?b-256:b)|0)?15:17;c:do if(15==g){if(0!=(kc(a[i>>2])|0)){g=17;break c}aa(c,Xq&4294967295,w&4294967295)}while(0);if(0==((b=h[w&4294967295],128<=b?b-256:b)|0))break b;U(t&4294967295,fs&4294967295,e([a[i>>2],0,0,0],["i32",0,0,0],y));n=w&4294967295;j=t&4294967295;if(0==((b=h[j],128<=b?b-256:b)|0))break b;for(;;)if(g=$(n),g=n=n+g&4294967295,n=g+1&4294967295,h[g]=23,g=c,q=(b=h[j],128<=b?b-256:b),Im(g,q,0,n,1),j=j+1&4294967295,0!=((b=h[j],128<=b?b-256:b)|0))g=19;else break b}while(0);j=$(f);n=r&4294967295;g=0!=(a[((c&4294967295)+220&4294967295)>>2]&2|0)?21:22;21==g?U(n,gs&4294967295,e([255,0,0,0,w&4294967295,0,0,0,k&4294967295,0,0,0],["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y)):22==g&&U(n,gs&4294967295,e([255,0,0,0,k&4294967295,0,0,0,w&4294967295,0,0,0],["i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));n=j;g=160>($(r&4294967295)+n&4294967295)>>>0?24:25;24==g&&fa(f+j&4294967295,r&4294967295);j=l}while(0);s=i;return j}function Bx(a,m,f,d){var i=s;s+=160;la(i,0,160);var g,j=null,e,c,k,w;e=k=0;var r=(b=h[m+e&4294967295],128<=b?b-256:b);c=r;0!=(r|0)?(j=0,g=1):(j=0,g=4);a:do if(1==g)for(;;)if(g=6==((0==j?r:w)|0)?2:3,2==g&&(k=k+1&4294967295),h[i+e&4294967295]=c&255,e=e+1&4294967295,c=w=(b=h[m+e&4294967295],128<=b?b-256:b),0!=(w|0))j=3,g=1;else break a;while(0);e=w=h[i+e&4294967295]=0;c=r=l[i+e&4294967295]&255;0!=(r|0)?(j=4,g=5):(j=4,g=26);a:do if(5==g)for(;;){y=4==j?r:y;6==(y|0)?(j=5,g=6):(j=5,g=15);c:do if(6==g)if(g=1<(d|0)?7:14,7==g){w=w+1&4294967295;g=1==((b=h[(a&4294967295)+249&4294967295],128<=b?b-256:b)|0);var t=w;g=g?8:10;if(8==g){if(!(1<(t|0))){g=24;break c}c=5;g=24;break c}else if(10==g){if((t|0)==(k|0)){g=24;break c}g=0!=((w|0)%3|0)?13:12;if(12==g&&(w|0)!=(k-1&4294967295|0)){g=24;break c}c=5;g=24;break c}}else if(14==g){var q=c,j=14;g=15;break c}while(0);c:do if(15==g){if(255!=((14==j?q:y)|0)){g=24;break c}if(2>(f|0)){g=25;break c}if(0==(e|0)){g=25;break c}g=0==((w|0)%3|0)?22:21;d:do if(21==g){if(2<(f|0))break d;c=23;g=24;break c}while(0);c=11;g=24;break c}while(0);24==g&&(j=c&255,c=m,m=c+1&4294967295,h[c]=j);e=e+1&4294967295;var y=l[i+e&4294967295]&255;c=y;if(0!=(y|0))j=25,g=5;else break a}while(0);if(27==(2<=(f|0)?27:28))a=m,m=a+1&4294967295,h[a]=11;h[m]=0;s=i}function Cx(e,m,f,d,i){var g=s;s+=4;la(g,0,4);var j,c,n;c=0;j=0!=(a[((e&4294967295)+184&4294967295)>>2]&65536|0)?1:32;a:do if(1==j){j=46==((b=h[f&4294967295],128<=b?b-256:b)|0)?3:2;if(2==j&&0==(a[(d&-1)>>2]&65536|0))break a;if(0!=(a[(d+12&-1)>>2]&256|0))break a;j=0!=(i|0)?6:5;if(5==j&&0!=(a[(d+12&-1)>>2]&2|0))break a;j=46==((b=h[f&4294967295],128<=b?b-256:b)|0);n=f;j=j?7:8;7==j?sc(g,n+2&4294967295):8==j&&sc(g,n&4294967295);if(0==((b=h[f&4294967295],128<=b?b-256:b)|0))break a;if(0==((b=h[f+1&4294967295],128<=b?b-256:b)|0))break a;j=0==(a[g>>2]|0)?14:12;b:do if(12==j){if(0!=(a[(d&-1)>>2]&131072|0))break b;if(0==(Sb(a[g>>2])|0))break a}while(0);c=2;j=46==((b=h[f&4294967295],128<=b?b-256:b)|0)?15:16;15==j&&(h[f&4294967295]=32);if(0!=(i|0))break a;if(26741!=(a[(e+280&4294967295)>>2]|0))break a;n=0;j=0!=(Sb(a[g>>2])|0)?19:20;19==j&&(n=ej(e,f+2&4294967295,0,0));j=0!=(a[(e+8320&4294967295)>>2]&1048576|0)?21:25;b:do if(21==j){j=0==(a[g>>2]|0)?24:22;c:do if(22==j){if(0!=(a[(d&-1)>>2]&131072|0)){j=24;break c}if(0==(Oc(a[g>>2])|0))break b}while(0);c=0}while(0);j=0!=(n&1048576|0)?26:27;26==j&&(c=0);if(0==(n&4194304|0))break a;j=45==((b=h[m+-2&4294967295],128<=b?b-256:b)|0)?29:30;29==j&&(c=0);if(0==(a[(e+8320&4294967295)>>2]&5242880|0))break a;c=34}while(0);s=g;return c}function Dx(a,m,f){var d,i;d=97==((b=h[a&4294967295],128<=b?b-256:b)|0)?2:1;a:do if(1==d){if(101==((b=h[a&4294967295],128<=b?b-256:b)|0)){d=2;break a}i=0;d=13;break a}while(0);a:do if(2==d){d=32==((b=h[a+1&4294967295],128<=b?b-256:b)|0)?6:3;b:do if(3==d){if(122==((b=h[a+1&4294967295],128<=b?b-256:b)|0)){d=6;break b}d=116==((b=h[a+1&4294967295],128<=b?b-256:b)|0)?5:7;if(5==d&&116==((b=h[a+2&4294967295],128<=b?b-256:b)|0)){d=6;break b}d=1==(m|0)?9:8;c:do if(8==d){d=0==((f|0)%1E3|0)?9:11;break c}while(0);c:do if(9==d){if(108!=((b=h[a+1&4294967295],128<=b?b-256:b)|0))break c;i=0;break a}while(0);i=1;break a}while(0);i=0}while(0);return i}function Ex(c,m,f,d,i,g){var j,vd;j=193==(a[mg>>2]|0)?2:1;a:do if(1==j){if(0!=(a[(i&-1)>>2]&524288|0)){j=2;break a}j=0!=(a[((c&4294967295)+184&4294967295)>>2]|0)?4:5;if(4==j){var n;var k=c,w=m,r=f,t=d,q=i,x=g,p=s;s+=560;la(p,0,560);var u=void 0,z=null,C=void 0,E=void 0,B=void 0,Cc=void 0,D=void 0,K=void 0,I=void 0,H=void 0,X=void 0,v=void 0,R=void 0,G=void 0,M=void 0,S=void 0,Y=void 0,P=void 0,N=void 0,Z=void 0,T=void 0,fa=void 0,ia=void 0,ma=void 0,wa=void 0,oa=void 0,V=p,ja=p+4,bb=p+24,Va=p+124,Ea=p+176,xa=p+376,ya=p+428,va=p+480,Fa=p+500,qa=p+552,dc=p+556,Ia=void 0,E=k,B=w,Cc=r,D=t,K=q,I=x,Y=S=M=0,P=1,oa=T=Z=N=0;a[D>>2]=0;a[vh>>2]=0;h[Fa&4294967295]=0;a[pi>>2]=Fa&4294967295;a[uf>>2]=I;var v=0,ba=10>((b=h[B+v&4294967295],128<=b?b-256:b)-48&4294967295)>>>0,ta=v;ba?(z=0,u=1):(z=0,u=2);c:do if(1==u)for(;;){var v=(1==z?ob:ta)+1&4294967295,qb=0!=(10>((b=h[B+v&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0),ob=v;if(qb)u=z=1;else{z=1;u=2;break c}}while(0);var Ra=0==z?ta:ob,H=Ra,X=Ke(B),u=3==(Ra|0)?3:6;c:do if(3==u){if(((b=h[B+-2&4294967295],128<=b?b-256:b)|0)!=(a[((E&4294967295)+204&4294967295)>>2]|0)){u=6;break c}if(0==(10>((b=h[B+-3&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=6;break c}Z=1;u=14;break c}while(0);c:do if(6==u){u=32==(a[((E&4294967295)+204&4294967295)>>2]|0)?8:7;d:do if(7==u){u=0!=(a[((E&4294967295)+184&4294967295)>>2]&4096|0)?8:12;break d}while(0);d:do if(8==u){if(3!=(H|0)){u=12;break d}if(0!=(a[(K&4294967295)>>2]&262144|0)){u=12;break d}if(0==(10>((b=h[B+-2&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=12;break d}Z=1;u=14;break c}while(0);if(0!=(Z|0)){u=14;break c}a[wh>>2]=0}while(0);h[Mg&4294967295]=0;h[ya&4294967295]=0;u=0!=(Z|0)?16:15;c:do if(15==u){u=48!=((b=h[B&4294967295],128<=b?b-256:b)|0)?16:18;break c}while(0);c:do if(16==u){var Sa=Cx(E,B,B+v&4294967295,K,0),T=Sa;if(0==(Sa|0)){u=18;break c}}while(0);u=46==((b=h[B+v&4294967295],128<=b?b-256:b)|0)?19:23;c:do if(19==u){if(0!=(10>((b=h[B+(v+1&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=23;break c}if(0!=(10>((b=h[B+(v+2&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=23;break c}if(0!=(a[(K+12&-1)>>2]&256|0)){u=23;break c}h[B+v&4294967295]=0}while(0);u=0==(T|0)?25:24;c:do if(24==u){u=26741==(a[(E+280&4294967295)>>2]|0)?25:38;break c}while(0);c:do if(25==u){v=v+1&4294967295;a[V>>2]=va&4294967295;u=0!=(a[(K&-1)>>2]&16384|0)?26:27;if(26==u){var ac=a[V>>2];a[V>>2]=ac+1&4294967295;h[ac]=45;v=v+1&4294967295}d:for(;;){if(0==((b=h[B+v&4294967295],128<=b?b-256:b)|0)){u=31;break d}if(32==((b=h[B+v&4294967295],128<=b?b-256:b)|0)){u=31;break d}if(!(19>(v|0))){u=31;break d}var ua=v,v=ua+1&4294967295,za=h[B+ua&4294967295],ab=a[V>>2];a[V>>2]=ab+1&4294967295;h[ab]=za;u=27}h[a[V>>2]]=0;if(0==((b=h[va&4294967295],128<=b?b-256:b)|0)){u=38;break c}u=0!=(a[((E&4294967295)+216&4294967295)>>2]|0)?33:35;d:do if(33==u){if(0!=(nb(va&4294967295,a[((E&4294967295)+216&4294967295)>>2])|0)){u=35;break d}T=2;u=38;break c}while(0);if(0!=(10>((b=h[va&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=38;break c}U(ja&4294967295,Fx&4294967295,e([va&4294967295,0,0,0],["i8*",0,0,0],y));if(0==(aa(E,ja&4294967295,Mg&4294967295)|0)){u=38;break c}var T=2,cc=D&4294967295;a[cc>>2]|=128;oa=1}while(0);u=0!=(a[(K&-1)>>2]&32768|0)?39:40;39==u&&(T=2);h[Va&4294967295]=0;h[xa&4294967295]=0;u=48==((b=h[B&4294967295],128<=b?b-256:b)|0)?41:55;c:do if(41==u){if(0!=(Z|0)){u=55;break c}if(32==((b=h[B+1&4294967295],128<=b?b-256:b)|0)){u=55;break c}if(((b=h[B+1&4294967295],128<=b?b-256:b)|0)==(a[((E&4294967295)+208&4294967295)>>2]|0)){u=55;break c}var Xa=H;2==(Xa|0)?(z=44,u=45):(z=44,u=49);if(45==u){u=58==((b=h[B+3&4294967295],128<=b?b-256:b)|0)?46:48;d:do if(46==u){if(0==(10>((b=h[B+5&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=48;break d}var Q=(b=h[B+7&4294967295],128<=b?b-256:b);if(0!=(Qc(Q)|0)){u=55;break c}}while(0);var Ua=H,z=48}u=3<((48==z?Ua:Xa)|0)?50:51;if(50==u){var Kb=D&4294967295;a[Kb>>2]&=-129;C=0;u=157;break c}else if(51==u)for(var v=0,Ga=ya&4294967295;;){if(48!=((b=h[B+v&4294967295],128<=b?b-256:b)|0)){u=55;break c}if(!((v|0)<(H-1&4294967295|0))){u=55;break c}var Qb=E,gc=$(Ga);aa(Qb,mj&4294967295,ya+gc&4294967295);v=v+1&4294967295;u=52}}while(0);if(55==u){u=0!=(a[((E&4294967295)+184&4294967295)>>2]&4096|0)?56:58;c:do if(56==u){if(32!=((b=h[B+H&4294967295],128<=b?b-256:b)|0)){u=58;break c}N=1;u=60;break c}while(0);c:do if(58==u)if(u=((b=h[B+H&4294967295],128<=b?b-256:b)|0)==(a[((E&4294967295)+204&4294967295)>>2]|0)?59:61,59==u){N=2;u=60;break c}else if(61==u){var hb=N,wa=H+2&4294967295,u=0<(hb|0)?62:77;break c}while(0);c:do if(60==u){wa=H+2&4294967295;u=62;break c}while(0);c:do if(62==u){R=N+H&4294967295;for(;;){if(0!=(a[(K+12*(Y+1&4294967295)&-1)>>2]&262144|0)){u=77;break c}if(0==(10>((b=h[B+R&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=77;break c}if(0==(10>((b=h[B+(R+1&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=77;break c}if(0==(10>((b=h[B+(R+2&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=77;break c}if(0!=(10>((b=h[B+(R+3&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=77;break c}if(!(0!=(10>((b=h[B+(R-1&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)^1)){u=77;break c}u=48!=((b=h[B+R&4294967295],128<=b?b-256:b)|0)?72:70;e:do if(70==u){if(48!=((b=h[B+(R+1&4294967295)&4294967295],128<=b?b-256:b)|0)){u=72;break e}u=48!=((b=h[B+(R+2&4294967295)&4294967295],128<=b?b-256:b)|0)?72:73;break e}while(0);72==u&&(P=0);Y=Y+1&4294967295;R=R+3&4294967295;u=((b=h[B+R&4294967295],128<=b?b-256:b)|0)==(a[((E&4294967295)+204&4294967295)>>2]|0)?76:74;if(74==u){if(0==(a[((E&4294967295)+184&4294967295)>>2]&4096|0)){u=77;break c}if(32!=((b=h[B+R&4294967295],128<=b?b-256:b)|0)){u=77;break c}}wa=R+2&4294967295;R=R+N&4294967295;u=63}}while(0);u=0==(X|0)?78:80;c:do if(78==u){if(0==(Z|0)){u=80;break c}M=1}while(0);u=26741==(a[(E+280&4294967295)>>2]|0)?81:85;c:do if(81==u){if(0==(a[(K+12*Y&-1)>>2]&16384|0)){u=85;break c}if(1!=(P|0)){u=85;break c}if(0==(Dx(B+wa&4294967295,Y,X)|0)){u=85;break c}a[uf>>2]|=1}while(0);u=((b=h[B+H&4294967295],128<=b?b-256:b)|0)==(a[((E&4294967295)+208&4294967295)>>2]|0)?86:88;c:do if(86==u){if(0==(10>((b=h[B+(H+1&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=88;break c}aa(E,hs&4294967295,Va&4294967295);S=1;u=98;break c}while(0);c:do if(88==u)if(u=0==(M|0)?89:95,89==u){if(!(0<(N|0))){u=98;break c}if(!(0<(Y|0))){u=98;break c}if(!(1E3>(X|0))){u=98;break c}if(0!=(M|0)){u=98;break c}if(0==(Gx(E,X,Y,P,Va&4294967295)|0)){u=98;break c}X=0;M=1}else if(95==u){if(1!=(a[wh>>2]|0)){u=98;break c}U(ja&4294967295,Pm&4294967295,e([Y+1&4294967295,0,0,0],["i32",0,0,0],y));if(0!=(aa(E,ja&4294967295,bb&4294967295)|0)){u=98;break c}U(ja&4294967295,Pm&4294967295,e([Y,0,0,0],["i32",0,0,0],y));aa(E,ja&4294967295,Va&4294967295)}while(0);u=0==((b=h[Va&4294967295],128<=b?b-256:b)|0)?99:102;c:do if(99==u){if(46!=((b=h[B+H&4294967295],128<=b?b-256:b)|0)){u=102;break c}if(0!=(Y|0)){u=112;break c}aa(E,Hx&4294967295,Va&4294967295);u=102;break c}while(0);c:do if(102==u){if(0!=(Y|0)){u=112;break c}a[V>>2]=B;var cb=10>((b=h[a[V>>2]+1&4294967295],128<=b?b-256:b)-48&4294967295)>>>0,ga=Ma[V>>2];cb?(z=103,u=104):(z=103,u=105);d:do if(104==u)for(;;){a[V>>2]=(104==z?Aa:ga)+1&4294967295;var ka=0!=(10>((b=h[a[V>>2]+1&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0),Aa=Ma[V>>2];if(ka)u=z=104;else{z=104;u=105;break d}}while(0);u=0!=(10>((b=h[(103==z?ga:Aa)+-1&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?106:108;d:do if(106==u){a[qa>>2]=a[V>>2]+-1&4294967295;if(0==(Pd(E,qa,Fa&4294967295,D,4,K)|0)){u=108;break d}a[vh>>2]=2}while(0);if(0!=((b=h[Fa&4294967295],128<=b?b-256:b)|0)){u=112;break c}if(48==((b=h[a[V>>2]],128<=b?b-256:b)|0)){u=112;break c}if(0==(Pd(E,V,Fa&4294967295,D,4,K)|0)){u=112;break c}a[vh>>2]=1}while(0);Jl(E,X,Ea&4294967295,M,Y,T|Z);u=0<(Y|0)?113:115;c:do if(113==u){if(0==(a[((E&4294967295)+188&4294967295)>>2]&512|0)){u=115;break c}U(Cc,xh&4294967295,e([ya&4294967295,0,0,0,Va&4294967295,0,0,0,xa&4294967295,0,0,0,Ea&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));u=116;break c}while(0);115==u&&U(Cc,xh&4294967295,e([ya&4294967295,0,0,0,xa&4294967295,0,0,0,Ea&4294967295,0,0,0,Va&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));var rb=Ea&4294967295,Ba=ja&4294967295,Dc=ja&4294967295,eb=bb&4294967295,hc=Ea&4294967295,lb=bb&4294967295,ha=Ea&4294967295,A=bb&4294967295,mb=bb&4294967295,ic=bb&4294967295,sa=bb&4294967295,Wa=bb&4294967295,Ya=bb&4294967295,jb=bb&4294967295,Ja=bb&4294967295,ca=bb&4294967295,Ab=bb&4294967295,Lb=bb&4294967295,ec=bb&4294967295;c:for(;;){var Bb=S,z=117;d:for(;;){if(0==((117==z?Bb:0)|0)){u=145;break c}H=H+1&4294967295;fa=0;u=0!=(10>((b=h[B+(fa+H&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?120:121;e:do if(120==u)for(;;)if(fa=fa+1&4294967295,0!=(10>((b=h[B+(fa+H&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0))u=120;else{u=121;break e}while(0);var ia=2,Ha=a[((E&4294967295)+184&4294967295)>>2]&57344,ma=Ha,u=32768==Ha?122:16384==Ha?123:8192==Ha?128:40960==Ha?128:24576==Ha?133:136;e:do if(122==u){ia=5;u=123;break e}else if(128==u){var vb=E,da=Ke(B+H&4294967295);Jl(vb,da,rb,0,0,0);u=48==((b=h[B+H&4294967295],128<=b?b-256:b)|0)?130:129;f:do if(129==u){u=40960==(ma|0)?130:132;break f}while(0);if(130==u){U(Ba,Ix&4294967295,e([fa,0,0,0],["i32",0,0,0],y));if(0==(aa(E,Dc,eb)|0)){u=136;break e}md(hc,lb)}md(Cc,ha);H=H+fa&4294967295;u=136;break e}else if(133==u){if(!(4>=(fa|0))){u=136;break e}if(48==((b=h[B+H&4294967295],128<=b?b-256:b)|0)){u=136;break e}var $c=E,Rb=Ke(B+H&4294967295);Jl($c,Rb,A,0,0,0);md(Cc,mb);H=H+fa&4294967295;u=136;break e}while(0);e:do if(123==u){u=48==((b=h[B+H&4294967295],128<=b?b-256:b)|0)?124:125;f:do if(124==u)for(;;)if(aa(E,mj&4294967295,Wa),md(Cc,Ya),fa=fa-1&4294967295,H=H+1&4294967295,48==((b=h[B+H&4294967295],128<=b?b-256:b)|0))u=124;else{u=125;break f}while(0);if(!((fa|0)<=(ia|0))){u=136;break e}if(0==(10>((b=h[B+H&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=136;break e}var Vb=E,Db=Ke(B+H&4294967295);Jl(Vb,Db,ic,0,0,0);md(Cc,sa);H=H+fa&4294967295}while(0);for(;;){var nc=l[B+H&4294967295],G=nc;if(0==(10>((nc&255)-48&4294967295)>>>0&1|0)){u=139;break}if(!(150>$(Cc)>>>0)){u=139;break}var Na=H,H=Na+1&4294967295,X=(b=h[B+Na&4294967295],128<=b?b-256:b)-48&4294967295;Kl(E,X,2,jb);md(Cc,Ja);u=136}u=0!=(aa(E,Jx&4294967295,ca)|0)?140:141;140==u&&md(Cc,Ab);u=(G&255|0)==(a[((E&4294967295)+208&4294967295)>>2]|0)?142:144;if(142==u&&0!=(10>((b=h[B+(H+1&4294967295)&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){u=143;break d}S=0;z=144;u=118}aa(E,hs&4294967295,Lb);md(Cc,ec);u=117}u=0!=((b=h[Cc&4294967295],128<=b?b-256:b)|0)?146:154;c:do if(146==u){if(21==((b=h[Cc&4294967295],128<=b?b-256:b)|0)){u=154;break c}var Ia=B+(H+1&4294967295)&4294967295,xb=sc(dc,Ia),Ia=Ia+xb&4294967295,u=0!=(a[((E&4294967295)+184&4294967295)>>2]&131072|0)?148:150;d:do if(148==u){if(32!=(a[dc>>2]|0)){u=150;break d}sc(dc,Ia)}while(0);if(0!=(jf(a[dc>>2])|0)){u=154;break c}u=0!=(a[(K+12*Y&-1)>>2]&16384|0)?152:153;if(152==u&&0!=(P|0)){u=154;break c}var db=Cc,Hb=$(db),Ib=db+Hb&4294967295,Wb,ea,Mb;Wb=Kx&4294967295;ea=Ib;for(Mb=Wb+2;Wb<Mb;)h[ea++]=h[Wb++]}while(0);var kb=D;a[kb>>2]|=-2147483648;a[wh>>2]=a[wh>>2]-1&4294967295;u=0!=(oa|0)?155:156;155==u&&(a[kf>>2]=oa);C=1}var Ca=C;s=p;n=Ca;vd=n;j=6;break a}else if(5==j){vd=0;j=6;break a}}while(0);2==j&&(vd=0);return vd}function Gx(c,m,f,d,i){var g=s;s+=104;la(g,0,104);var j,l=null,n,k,w,r=g+12,t=g+24,q=g+64;w=0;h[r&4294967295]=0;j=0<(m|0)?1:12;a:do if(1==j){j=0!=(d&1|0)?2:9;b:do if(2==j){j=0!=(d&2|0)?3:4;3==j&&(U(g&4294967295,Lx&4294967295,e([m,0,0,0,f,0,0,0],["i32",0,0,0,"i32",0,0,0],y)),w=aa(c,g&4294967295,t&4294967295));j=0!=(a[uf>>2]&1&(0!=(w|0)^1)&1|0)?5:6;if(5==j)U(g&4294967295,Mx&4294967295,e([m,0,0,0,f,0,0,0],["i32",0,0,0,"i32",0,0,0],y)),w=k=aa(c,g&4294967295,t&4294967295),l=5;else if(6==j)var x=w,l=6;if(0!=((6==l?x:k)|0)){j=9;break b}U(g&4294967295,Nx&4294967295,e([m,0,0,0,f,0,0,0],["i32",0,0,0,"i32",0,0,0],y));var p=aa(c,g&4294967295,t&4294967295);w=p;l=8;j=10;break b}while(0);if(9==j)var u=w,l=9;if(0!=((9==l?u:p)|0)){j=12;break a}U(g&4294967295,Ox&4294967295,e([m,0,0,0,f,0,0,0],["i32",0,0,0,"i32",0,0,0],y));var z=aa(c,g&4294967295,t&4294967295);w=z;l=11;j=13;break a}while(0);if(12==j)var C=w,l=12;j=0==((12==l?C:z)|0)?14:36;a:do if(14==j){j=20<=((m|0)%100|0)?15:16;15==j&&aa(c,Px&4294967295,r&4294967295);k=0;j=0!=(d&1|0)?17:28;if(17==j){j=0!=(d&2|0)?18:19;if(18==j){var E=g&4294967295,l=Ll(m);U(E,Qx&4294967295,e([l,0,0,0,f,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));k=E=aa(c,g&4294967295,t&4294967295);l=18}else if(19==j)var B=k,l=19;j=0!=((19==l?B:E)|0)?23:21;b:do if(21==j){if(0==(a[uf>>2]&1|0)){j=23;break b}var H=g&4294967295,l=Ll(m);U(H,Rx&4294967295,e([l,0,0,0,f,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));k=H=aa(c,g&4294967295,t&4294967295);l=22;j=24;break b}while(0);if(23==j)var D=k,l=23;j=0!=((23==l?D:H)|0)?26:25;if(26==j)var K=k,l=26;else if(25==j){var I=g&4294967295,l=Ll(m);U(I,Sx&4294967295,e([l,0,0,0,f,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));I=aa(c,g&4294967295,t&4294967295);l=25}if(0!=((26==l?K:I)|0))break a}j=g&4294967295;k=Ll(m);U(j,Tx&4294967295,e([k,0,0,0,f,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));if(0!=(aa(c,g&4294967295,t&4294967295)|0))break a;j=3<(f|0)?30:32;b:do if(30==j){U(g&4294967295,Pm&4294967295,e([f-1&4294967295,0,0,0],["i32",0,0,0],y));if(0!=(aa(c,g&4294967295,q&4294967295)|0))break b;aa(c,Ux&4294967295,t&4294967295);a[wh>>2]=3}while(0);if(0!=((b=h[t&4294967295],128<=b?b-256:b)|0))break a;U(g&4294967295,Vx&4294967295,e([m,0,0,0],["i32",0,0,0],y));w=j=aa(c,g&4294967295,t&4294967295);j=0==(j|0)?34:35;34==j&&aa(c,Wx&4294967295,t&4294967295);a[wh>>2]=2}while(0);U(i,Dg&4294967295,e([r&4294967295,0,0,0,t&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));j=1==(m|0)?37:40;a:do if(37==j){if(1!=(f|0)){j=40;break a}if(0==(a[((c&4294967295)+184&4294967295)>>2]&2097152|0)){j=40;break a}n=1;j=41;break a}while(0);40==j&&(n=w);s=g;return n}function Jl(c,m,f,d,i,g){var j=s;s+=380;la(j,0,380);var l,n=null,k,w,r,t,q,x=j+12,p=j+112,u=j+212,z=j+232,C=j+252,E=j+304,B=j+356,H=j+368;k=d;q=0;t=g&34;r=(m|0)/100|0;d=(m|0)%100;h[x&4294967295]=0;h[E&4294967295]=0;h[H&4294967295]=0;l=0!=(a[((c&4294967295)+184&4294967295)>>2]&4194304|0)?1:4;a:do if(1==l){l=0!=(g&1|0)?3:2;if(2==l)if(w=r,10<=(w|0))n=2;else{n=2;l=5;break a}q=1;l=4;break a}while(0);if(4==l)var D=r,n=4;l=0<((4==n?D:w)|0)?7:6;a:do if(6==l){l=0!=(q|0)?7:61;break a}while(0);if(7==l){w=0;l=0!=(t|0)?8:12;a:do if(8==l){l=0==(d|0)?9:10;if(9==l){var K=aa(c,Xx&4294967295,u&4294967295);w=K;n=9}else if(10==l)var I=w,n=10;l=0==((10==n?I:K)|0)?12:17;break a}while(0);a:do if(12==l){l=0==(d|0)?13:14;if(13==l){var v=aa(c,Yx&4294967295,u&4294967295);w=v;n=13}else if(14==l)var X=w,n=14;if(0!=((14==n?X:v)|0))break a;aa(c,Zx&4294967295,u&4294967295)}while(0);K=r;l=0!=(a[((c&4294967295)+184&4294967295)>>2]&2048|0)?18:19;a:do if(18==l){l=19!=(K|0)&10<=(r|0)?20:33;break a}else if(19==l){l=10<=(K|0)?20:33;break a}while(0);if(20==l){l=h[C&4294967295]=0;21==(0==((m|0)%1E3|0)?21:22)&&(l=1);l=0==(Gx(c,(r|0)/10|0,i+1&4294967295,t|l,z&4294967295)|0)?23:26;23==l&&(k=0,l=0!=(1<<(i+1&4294967295)&a[((c&4294967295)+188&4294967295)>>2]|0)?24:25,24==l&&(k=8),Kl(c,(r|0)/10|0,k,C&4294967295));k=E&4294967295;l=0!=(a[((c&4294967295)+188&4294967295)>>2]&512|0)?27:28;27==l?U(k,Dg&4294967295,e([z&4294967295,0,0,0,C&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y)):28==l&&U(k,Dg&4294967295,e([C&4294967295,0,0,0,z&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));r=z=(r|0)%10;l=0==(z|0)?30:32;a:do if(30==l){if(0!=(q|0))break a;h[u&4294967295]=0}while(0);k=1}h[C&4294967295]=0;l=0<(r|0)?35:34;a:do if(34==l){l=0!=(q|0)?35:60;break a}while(0);a:do if(35==l){l=0!=(a[((c&4294967295)+184&4294967295)>>2]&262144|0)?36:39;b:do if(36==l){l=0!=(g&1|0)?38:37;if(37==l&&0==((b=h[E&4294967295],128<=b?b-256:b)|0))break b;aa(c,nj&4294967295,H&4294967295)}while(0);k=1;w=0;l=0!=(t|0)?40:45;b:do if(40==l){l=0==(d|0)?42:41;if(41==l&&0==(a[((c&4294967295)+
188&4294967295)>>2]&4096|0))break b;U(j&4294967295,$x&4294967295,e([r,0,0,0],["i32",0,0,0],y));w=aa(c,j&4294967295,C&4294967295);if(0==(a[((c&4294967295)+188&4294967295)>>2]&4096|0))break b;if(!(0<(d|0)))break b;md(C&4294967295,Mg&4294967295)}while(0);l=0==(r|0)?46:48;b:do if(46==l){if(0==(q|0))break b;aa(c,mj&4294967295,C&4294967295);break a}while(0);l=0!=(w|0)?54:49;b:do if(49==l){l=0==(d|0)?50:51;if(50==l){U(j&4294967295,ay&4294967295,e([r,0,0,0],["i32",0,0,0],y));var M=aa(c,j&4294967295,C&4294967295);w=M;n=50}else if(51==l)var R=w,n=51;if(0!=((51==n?R:M)|0)){l=54;break b}U(j&4294967295,by&4294967295,e([r,0,0,0],["i32",0,0,0],y));var G=aa(c,j&4294967295,C&4294967295);w=G;n=53;l=55;break b}while(0);if(54==l)var P=w,n=54;l=0!=((54==n?P:G)|0)?56:57;if(56==l)h[u&4294967295]=0;else if(57==l){l=1<(r|0)?59:58;if(58==l&&0!=(a[((c&4294967295)+184&4294967295)>>2]&1024|0))break a;Kl(c,r,0,C&4294967295)}}while(0);U(x&4294967295,xh&4294967295,e([E&4294967295,0,0,0,H&4294967295,0,0,0,C&4294967295,0,0,0,u&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y))}h[B&4294967295]=0;l=0<(d|0)?62:74;a:do if(62==l){l=100<(m|0)?65:63;b:do if(63==l){if(0==(g&1|0)){l=69;break b}l=0==(i|0)?65:69;break b}while(0);b:do if(65==l){l=0!=(a[((c&4294967295)+184&4294967295)>>2]&64|0)?68:66;if(66==l){if(0==(a[((c&4294967295)+184&4294967295)>>2]&8388608|0))break b;if(!(10>(d|0)))break b}aa(c,nj&4294967295,B&4294967295)}while(0);if(0==(a[((c&4294967295)+184&4294967295)>>2]&524288|0))break a;if(0!=(r|0))break a;l=0!=(g&1|0)?73:72;if(72==l&&0==((b=h[E&4294967295],128<=b?b-256:b)|0))break a;aa(c,nj&4294967295,B&4294967295)}while(0);h[p&4294967295]=0;l=0!=(d|0)?76:75;a:do if(75==l){if(0==(k|0)){l=76;break a}if(0==((b=h[Mg&4294967295],128<=b?b-256:b)|0)){l=94;break a}n=$(x&4294967295);l=0<(n|0)?91:93;b:do if(91==l){if(10!=((b=h[x+(n-1&4294967295)&4294967295],128<=b?b-256:b)|0))break b;h[x+(n-1&4294967295)&4294967295]=0}while(0);fa(p&4294967295,Mg&4294967295);l=94;break a}while(0);a:do if(76==l){k=0;l=0==(i|0)?77:84;b:do if(77==l){k=2;l=0!=(t|0)?78:79;78==l&&(k=3);l=100>(m|0)?80:82;c:do if(80==l){if(0!=(g&1|0)){l=82;break c}k|=4}while(0);if(0==(t&32|0)){l=86;break b}k|=32}else if(84==l){if(0==(1<<i&a[((c&4294967295)+188&4294967295)>>2]|0)){l=86;break b}k=8}while(0);if(0==(Kl(c,d,k,p&4294967295)|0))break a;if(0==(a[((c&4294967295)+184&4294967295)>>2]&128|0))break a;h[B&4294967295]=0}while(0);U(f,pk&4294967295,e([x&4294967295,0,0,0,B&4294967295,0,0,0,p&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));s=j}function Kl(c,m,f,d){var i=s;s+=148;la(i,0,148);var g,j=null,vd,n,k,w,r,t,q,x,p=i+12,u=i+32,z=i+84,C=i+136;t=r=0;x=111;k=(m|0)%10;w=(m|0)/10|0;vd=0;h[p&4294967295]=0;h[u&4294967295]=0;h[z&4294967295]=0;h[C&4294967295]=0;1==(0!=(f&32|0)?1:2)&&(x=113);g=0!=(f&2|0)&2==(a[vh>>2]|0)?3:4;a:do if(3==g)fa(d,a[pi>>2]);else if(4==g){g=0==((b=h[a[pi>>2]&4294967295],128<=b?b-256:b)|0)?5:23;b:do if(5==g){g=0!=(f&8|0)?6:7;if(6==g){U(i&4294967295,is&4294967295,e([m,0,0,0],["i32",0,0,0],y));var E=aa(c,i&4294967295,z&4294967295);vd=E;j=6}else if(7==g)if(g=0!=(f&1|0)?8:14,8==g){fa(p&4294967295,Mg&4294967295);g=0!=(f&4|0)?9:10;if(9==g){U(i&4294967295,cy&4294967295,e([m,0,0,0,x,0,0,0],["i32",0,0,0,"i32",0,0,0],y));var B=aa(c,i&4294967295,z&4294967295);vd=B;j=9}else if(10==g)var H=vd,j=10;g=0==((10==j?H:B)|0)?12:13;12==g&&(U(i&4294967295,js&4294967295,e([m,0,0,0,x,0,0,0],["i32",0,0,0,"i32",0,0,0],y)),vd=aa(c,i&4294967295,z&4294967295));var D=vd;t=D;j=13}else if(14==g)var K=vd,j=14;if(0!=((14==j?K:13==j?D:E)|0))break b;g=0!=(f&2|0)?17:19;if(17==g)if(g=0!=(a[uf>>2]&1|0)?18:20,18==g){U(i&4294967295,ks&4294967295,e([m,0,0,0],["i32",0,0,0],y));var I=aa(c,i&4294967295,z&4294967295);vd=I;j=18}else{if(20==g)var v=vd,j=20}else if(19==g){U(i&4294967295,ls&4294967295,e([m,0,0,0],["i32",0,0,0],y));var X=aa(c,i&4294967295,z&4294967295);vd=X;j=19}if(0!=((20==j?v:18==j?I:X)|0))break b;U(i&4294967295,ms&4294967295,e([m,0,0,0],["i32",0,0,0],y));vd=aa(c,i&4294967295,z&4294967295)}while(0);g=0!=(f&16|0)?24:26;b:do if(24==g){if(!(10>(m|0))){g=26;break b}aa(c,mj&4294967295,u&4294967295);g=61;break b}while(0);b:do if(26==g)if(g=0!=(vd|0)?27:28,27==g)h[u&4294967295]=0;else if(28==g){g=0!=(f&1|0)?29:36;c:do if(29==g){g=0==(k|0)?32:30;d:do if(30==g){if(0!=(a[((c&4294967295)+184&4294967295)>>2]&16|0))break d;if(0==(a[((c&4294967295)+188&4294967295)>>2]&4096|0)){g=36;break c}}while(0);U(i&4294967295,dy&4294967295,e([w,0,0,0,x,0,0,0],["i32",0,0,0,"i32",0,0,0],y));if(0==(aa(c,i&4294967295,u&4294967295)|0)){g=36;break c}t=1;if(0==(k|0)){g=38;break c}if(0==(a[((c&4294967295)+188&4294967295)>>2]&4096|0)){g=36;break c}md(u&4294967295,Mg&4294967295);g=36;break c}while(0);c:do if(36==g){if(0!=(t|0))break c;U(i&4294967295,ns&4294967295,e([w,0,0,0],["i32",0,0,0],y));aa(c,i&4294967295,u&4294967295)}while(0);g=0==((b=h[u&4294967295],128<=b?b-256:b)|0)?39:41;c:do if(39==g){if(0==(a[((c&4294967295)+184&4294967295)>>2]&1048576|0))break c;k=(m|0)%20;U(i&4294967295,ns&4294967295,e([w&254,0,0,0],["i32",0,0,0],y));aa(c,i&4294967295,u&4294967295)}while(0);h[z&4294967295]=0;if(!(0<(k|0)))break b;vd=0;g=0!=(f&2|0)?43:45;c:do if(43==g){if(0==((b=h[a[pi>>2]&4294967295],128<=b?b-256:b)|0))break c;fa(z&4294967295,a[pi>>2]);t=1;h[p&4294967295]=0;break b}while(0);g=0!=(f&8|0)?46:47;46==g&&(U(i&4294967295,is&4294967295,e([k,0,0,0],["i32",0,0,0],y)),vd=aa(c,i&4294967295,z&4294967295));g=0!=(f&1|0)?48:51;c:do if(48==g){if(0!=(a[((c&4294967295)+184&4294967295)>>2]&16|0)){g=51;break c}U(i&4294967295,js&4294967295,e([k,0,0,0,x,0,0,0],["i32",0,0,0,"i32",0,0,0],y));vd=n=aa(c,i&4294967295,z&4294967295);if(0==(n|0)){g=52;break c}t=1;g=51;break c}while(0);if(51==g&&0!=(vd|0))break b;g=0!=(a[uf>>2]&1|0)?53:55;c:do if(53==g){if(0==(f&2|0)){g=55;break c}U(i&4294967295,ks&4294967295,e([k,0,0,0],["i32",0,0,0],y));var M=aa(c,i&4294967295,z&4294967295);vd=M;j=54;g=59;break c}while(0);c:do if(55==g){g=0==(f&2|0)?57:56;d:do if(56==g){if(0!=(a[((c&4294967295)+184&4294967295)>>2]&16|0)){g=57;break d}var R=vd,j=58;g=59;break c}while(0);U(i&4294967295,ls&4294967295,e([k,0,0,0],["i32",0,0,0],y));var G=aa(c,i&4294967295,z&4294967295);vd=G;j=57}while(0);if(0!=((58==j?R:54==j?M:G)|0))break b;U(i&4294967295,ms&4294967295,e([k,0,0,0],["i32",0,0,0],y));aa(c,i&4294967295,z&4294967295)}while(0);g=0!=(f&1|0)?62:70;b:do if(62==g){if(0!=(t|0))break b;if(0!=((b=h[p&4294967295],128<=b?b-256:b)|0))break b;g=20<=(m|0)?65:68;c:do if(65==g){g=0==((m|0)%10|0)?67:66;if(66==g&&0==(a[((c&4294967295)+184&4294967295)>>2]&16|0)){g=68;break c}aa(c,ey&4294967295,p&4294967295)}while(0);if(0!=((b=h[p&4294967295],128<=b?b-256:b)|0))break b;aa(c,fy&4294967295,p&4294967295)}while(0);g=0!=(a[((c&4294967295)+184&4294967295)>>2]&48|0)?71:79;b:do if(71==g){if(0==((b=h[u&4294967295],128<=b?b-256:b)|0))break b;if(0==((b=h[z&4294967295],128<=b?b-256:b)|0))break b;aa(c,nj&4294967295,C&4294967295);g=0!=(a[((c&4294967295)+188&4294967295)>>2]&4096|0)?74:75;74==g&&(h[C&4294967295]=0);vd=d;g=0!=(a[((c&4294967295)+184&4294967295)>>2]&16|0)?76:77;76==g?U(vd,xh&4294967295,e([z&4294967295,0,0,0,C&4294967295,0,0,0,u&4294967295,0,0,0,p&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y)):77==g&&U(vd,xh&4294967295,e([u&4294967295,0,0,0,C&4294967295,0,0,0,z&4294967295,0,0,0,p&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));r=1;break a}while(0);g=0!=(a[((c&4294967295)+184&4294967295)>>2]&512|0)?80:87;b:do if(80==g){n=g=$(u&4294967295)-1&4294967295;if(!(0<=(g|0))){g=87;break b}if(0==((b=h[z&4294967295],128<=b?b-256:b)|0)){g=87;break b}g=(b=h[z&4294967295],128<=b?b-256:b);q=g=l[a[(Z+4*g&4294967295)>>2]+11&4294967295]&255;g=1==(g|0)?83:84;83==g&&(q=(b=h[z+1&4294967295],128<=b?b-256:b),q=l[a[(Z+4*q&4294967295)>>2]+11&4294967295]&255);var P=(b=h[u+n&4294967295],128<=b?b-256:b);if(2!=(l[a[(Z+4*P&4294967295)>>2]+11&4294967295]&255|0)){g=87;break b}if(2!=(q|0)){g=87;break b}h[u+n&4294967295]=0}while(0);U(d,pk&4294967295,e([u&4294967295,0,0,0,z&4294967295,0,0,0,p&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y))}while(0);g=0!=(a[((c&4294967295)+184&4294967295)>>2]&256|0)?89:95;a:do if(89==g){vd=0;n=c=$(d)-1&4294967295;if(!(0<=(c|0)))break a;for(;;)if(g=6==((b=h[d+n&4294967295],128<=b?b-256:b)|0)?91:94,91==g&&(g=0!=(vd|0)?92:93,92==g?h[d+n&4294967295]=5:93==g&&(vd=1)),n=c=n-1&4294967295,0<=(c|0))g=90;else break a}while(0);s=i;return r}function Ll(b){var m,f;m=0!=(a[((a[Rb>>2]&4294967295)+188&4294967295)>>2]&256|0)?1:3;a:do if(1==m){if(!(2<=(b|0)&4>=(b|0))){m=3;break a}f=os&4294967295;m=13;break a}while(0);a:do if(3==m){m=10>((b|0)%100|0)?5:4;b:do if(4==m){m=20<((b|0)%100|0)?5:12;break b}while(0);b:do if(5==m){m=0!=(a[((a[Rb>>2]&4294967295)+188&4294967295)>>2]&64|0)?6:9;c:do if(6==m){if(!(2<=((b|0)%10|0)))break c;if(!(4>=((b|0)%10|0)))break c;f=os&4294967295;break a}while(0);if(0==(a[((a[Rb>>2]&4294967295)+188&4294967295)>>2]&128|0)){m=12;break b}if(1!=((b|0)%10|0)){m=12;break b}f=gy&4294967295;break a}while(0);f=hy&4294967295}while(0);return f}function iy(b,m,f){var d=s;s+=168;la(d,0,168);var i,g,j;h[Hj&4294967295]=0;a[ps>>2]=0;a[yh>>2]=0;i=0==(b|0)?1:2;if(1==i)a[Jb>>2]=a[Eo>>2],Vi(14,0,0),g=0;else if(2==i)if(U(d&4294967295,jy&4294967295,e([wd&4294967295,0,0,0,b,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y)),i=0>=(of(d&4294967295)|0)?3:4,3==i&&U(d&4294967295,ky&4294967295,e([b,0,0,0],["i8*",0,0,0],y)),i=0>=(of(d&4294967295)|0)?5:6,5==i&&U(d&4294967295,ly&4294967295,e([b,0,0,0,b,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y)),i=0>=(of(d&4294967295)|0)?7:8,7==i&&U(d&4294967295,my&4294967295,e([b,0,0,0],["i8*",0,0,0],y)),i=0!=(ny(d&4294967295)|0)?9:10,9==i)g=2;else if(10==i){U(d&4294967295,oy&4294967295,e([wd&4294967295,0,0,0,m,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));var m=of(d&4294967295),c=pe(d&4294967295,gh&4294967295);i=0==(c|0)?11:12;if(11==i)py(),g=2;else if(12==i)if(i=ah(a[zh>>2],m),a[zh>>2]=i,i=0==(i|0)?13:14,13==i)Sd(c),py(),g=-1;else if(14==i){i=Zr(c);a[qs>>2]=i;j=a[zh>>2];g=4;i=(g|0)<(m|0)?15:16;a:do if(15==i)for(;;){i=Zr(c);var l=j;j=l+4&4294967295;a[l>>2]=i;g=g+4&4294967295;if((g|0)<(m|0))i=15;else break a}while(0);fm(a[zh>>2],1,m,c);Sd(c);c=(a[qs>>2]&255|0)/16;m=c==q[qk>>2]?3:1;b:do if(1==m){q[qk>>2]=c;if(1!=(a[Fe>>2]|0))break b;oj();ny(a[rk>>2])}while(0);a[Jb>>2]=f;i=22050==(f|0)?17:18;17==i?Vi(14,0,0):18==i&&Vi(14,1,0);fa(Hj&4294967295,b);a[ps>>2]=1E3;g=0}}s=d;return g}function sk(b,m,f,d,i){var g=s;s+=76;la(g,0,76);var j=null,c,n=g+4,k,w,r,t,q,x,p=g+8,u=g+24;w=-1;t=999;k=q=0;h[wc&4294967295]=0;r=a[(xb+4*b&4294967295)>>2];rv(a[M>>2],m,f,g,n);m=(128*d&4294967295|0)/100|0;1==(0>(m|0)?1:2)&&(m=-m&4294967295);c=0;a:for(;;)if(f=(l[r+c&4294967295]&255|0)>(w|0)?4:5,4==f&&(w=l[r+c&4294967295]&255,q=c),f=(l[r+c&4294967295]&255|0)<(t|0)?6:7,6==f&&(t=l[r+c&4294967295]&255,k=c),c=f=c+1&4294967295,!(128>(f|0)))break a;a[(p+8&4294967295)>>2]=64;9==(0<(q|0)&127>(q|0)?9:10)&&(a[(p+8&4294967295)>>2]=q);11==(0<(k|0)&127>(k|0)?11:12)&&(a[(p+8&4294967295)>>2]=k);a[(p+4&4294967295)>>2]=(a[(p+8&4294967295)>>2]|0)/2|0;a[(p+12&4294967295)>>2]=((127-a[(p+8&4294967295)>>2]&4294967295|0)/2|0)+a[(p+8&4294967295)>>2]&4294967295;f=(((l[r&4294967295]&255)*a[n>>2]&4294967295)>>8)+a[g>>2]&4294967295;w=(((l[r+127&4294967295]&255)*a[n>>2]&4294967295)>>8)+a[g>>2]&4294967295;if(13==(0<=(d|0)?13:14))U(u&4294967295,qy&4294967295,e([(f|0)/4096|0,0,0,0],["i32",0,0,0],y)),md(wc&4294967295,u&4294967295);f=1<(b|0)?15:25;a:do if(15==f){b=1;t=u&4294967295;q=u&4294967295;for(;;){k=(((l[r+a[(p+4*b&4294967295)>>2]&4294967295]&255)*a[n>>2]&4294967295)>>8)+a[g>>2]&4294967295;f=0<(d|0)?17:18;if(17==f){var z=(80*a[(p+4*b&4294967295)>>2]&4294967295|0)/(m|0)|0;x=z;j=17}else if(18==f)if(c=a[(p+
4*b&4294967295)>>2],f=0>(d|0)?19:20,19==f){var C=(80*(c-m&4294967295)&4294967295|0)/(m|0)|0;x=C;j=19}else if(20==f){var E=(80*c&4294967295|0)/128|0;x=E;j=20}f=0<((19==j?C:20==j?E:z)|0)?22:24;c:do if(22==f){if(!(80>=(x|0)))break c;U(t,Op&4294967295,e([x,0,0,0,(k|0)/4096|0,0,0,0],["i32",0,0,0,"i32",0,0,0],y));md(wc&4294967295,q)}while(0);b=f=b+1&4294967295;if(4>(f|0))f=16;else break a}}while(0);w=(w|0)/4096|0;if(26==(0>=(d|0)?26:27))U(u&4294967295,Op&4294967295,e([80,0,0,0,w,0,0,0],["i32",0,0,0,"i32",0,0,0],y)),md(wc&4294967295,u&4294967295);U(u&4294967295,Op&4294967295,e([100,0,0,0,w,0,0,0],["i32",0,0,0,"i32",0,0,0],y));md(wc&4294967295,u&4294967295);d=$(wc&4294967295);j=(wc&4294967295)+d&4294967295;d=$o&4294967295;for(n=d+2;d<n;)h[j++]=h[d++];30==(0!=(i|0)?30:31)&&U(wc&4294967295,ry&4294967295,e([w,0,0,0],["i32",0,0,0],y));s=g}function Lo(b,m,f){b=s;s+=192;la(b,0,192);var d,i;U(b&4294967295,Mo&4294967295,e([wd&4294967295,0,0,0,47,0,0,0,m,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));var m=of(b&4294967295),g=pe(b&4294967295,gh&4294967295);d=0==(g|0)?1:2;if(1==d)Ea(a[(a[lb>>2]+12&4294967295)>>2],sy&4294967295,e([b&4294967295,0,0,0],["i8*",0,0,0],y)),i=0;else if(2==d){var j=uo(m);d=0==(j|0)?5:6;5==d?(Sd(g),i=0):6==d&&(d=(fm(j,1,m,g)|0)!=(m|0),Sd(g),d=d?7:8,7==d?i=0:8==d&&(9==(0!=(f|0)?9:10)&&(a[f>>2]=m),i=j))}s=b;return i}function Bd(b){var m,f,d;for(d=0;;){if(!((d|0)<(a[ae>>2]|0))){m=6;break}m=0==(a[(Z+4*d&4294967295)>>2]|0)?5:3;if(3==m&&(a[(a[(Z+4*d&4294967295)>>2]&4294967295)>>2]|0)==(b|0)){m=4;break}d=d+1&4294967295;m=1}6==m?f=0:4==m&&(f=l[a[(Z+4*d&4294967295)>>2]+10&4294967295]&255);return f}function ty(a){for(var m=null,f,d,m=f=d=0;4>((3==m?i:0)|0)&&0!=((b=h[a+f&4294967295],128<=b?b-256:b)|0);){m=h[a+f&4294967295];d|=(m&255)<<(8*f&4294967295);var i=f+1&4294967295;f=i;m=3}return Bd(d)}function rs(b){var m,f;m=0==(b|0)?1:2;1==m?(Nd(uy&4294967295,20,1,a[(a[lb>>2]+12&4294967295)>>2]),f=a[(xb&4294967295)>>2]):2==m&&(f=a[Jj>>2]+b&4294967295);return f}function Xf(b){a[ae>>2]=0;vy(b,0);a[ae>>2]=a[ae>>2]+1&4294967295;a[ss>>2]=b}function vy(b,m){var f,d,i,g;if(1==(0==(m|0)?1:2)){d=ts&4294967295;g=d+256;i=0;0>i&&(i+=256);for(i=i+(i<<8)+(i<<16)+16777216*i;0!==d%4&&d<g;)h[d++]=0;d>>=2;for(f=g>>2;d<f;)a[d++]=i;for(d<<=2;d<g;)h[d++]=0}d=a[((Me+48*b&4294967295)+40&4294967295)>>2];3==(0<(d|0)?3:4)&&vy(d-1&4294967295,1);g=a[((Me+48*b&4294967295)+32&4294967295)>>2];d=0;f=(d|0)<(a[((Me+48*b&4294967295)+36&4294967295)>>2]|0)?5:10;a:do if(5==f)for(;;)if(i=l[(g+16*d&4294967295)+10&4294967295]&255,a[(Z+4*i&4294967295)>>2]=g+16*d&4294967295,f=(i|0)>(a[ae>>2]|0)?6:7,6==f&&(a[ae>>2]=i),f=0==(m|0)?8:9,8==f&&(f=ts+i&4294967295,h[f]=(l[f]&255|1)&255),d=d+1&4294967295,(d|0)<(a[((Me+48*b&4294967295)+36&4294967295)>>2]|0))f=5;else break a;while(0)}function wy(b){var m,f,d;for(d=0;;){if(!((d|0)<(a[Lj>>2]|0))){m=5;break}m=0==(nb(b,Me+48*d&-1)|0);var i=d;if(m){m=3;break}d=i+1&4294967295;m=1}3==m&&(a[pn>>2]=i);m=(d|0)==(a[Lj>>2]|0)?6:7;6==m?f=-1:7==m&&(f=d);return f}function Ah(a){var b,f=wy(a),a=-1==(f|0)?1:2;1==a?b=-1:2==a&&(Xf(f),b=f);return b}function Ed(e,m,f,d){var i=s;s+=44;la(i,0,44);var g,j=null,c,n,k,w,r,q,y,x=i+4;y=0;c=a[(f+8&4294967295)>>2];r=d;k=r+152;g=0;0>g&&(g+=256);for(g=g+(g<<8)+(g<<16)+16777216*g;0!==r%4&&r<k;)h[r++]=0;r>>=2;for(n=k>>2;r<n;)a[r++]=g;for(r<<=2;r<k;)h[r++]=0;a[((d+4&4294967295)+40&4294967295)>>2]=l[c+14&4294967295]&255;a[((d+4&4294967295)+36&4294967295)>>2]=l[c+15&4294967295]&255;g=0==(P[(c+8&4294967295)>>1]&65535|0)?69:1;a:do if(1==g){r=0;a[i>>2]=a[im>>2]+2*(P[(c+8&4294967295)>>1]&65535)&4294967295;if(1==(r|0))break a;b:for(;;){n=t[a[i>>2]>>1];k=(n&65535)>>8&15;g=(n&65535)>>12;g=0==g?3:1==g?21:2==g?25:3==g?25:6==g?40:9==g?44:10==g?49:11==g?53:12==g?53:13==g?53:14==g?53:15==g?53:61;c:do if(61==g)us(c,n&65535);else if(3==g)if(j=n&255,g=0==(k|0)?4:7,4==g){g=j;if(1==g)g=5;else if(2==g)break c;else g=6;6==g?us(c,n&65535):5==g&&(r=1)}else{if(7==g)if(g=5==(k|0)?8:10,8==g){if(2!=(l[a[(Z+4*(l[f+24&-1]&255)&4294967295)>>2]+11&4294967295]&255|0))break c;a[((d+
4&4294967295)+16&4294967295)>>2]=j}else if(10==g)if(g=13==(k|0)?11:14,11==g){q=0;g=(q|0)<(j|0)&16>(q|0)?12:13;d:do if(12==g)for(;;)if(a[i>>2]=a[i>>2]+2&4294967295,h[(d+132&4294967295)+q&4294967295]=(P[(a[i>>2]&4294967295)>>1]&65535)>>8&255,h[(d+132&4294967295)+(q+1&4294967295)&4294967295]=P[(a[i>>2]&4294967295)>>1]&255,q=q+2&4294967295,(q|0)<(j|0)&16>(q|0))g=12;else{g=13;break d}while(0);h[(d+132&4294967295)+q&4294967295]=0}else if(14==g)if(g=16>(k|0)?15:20,15==g){g=12==(k|0)?16:17;16==g&&(a[((d+
4&4294967295)+4&4294967295)>>2]=j);a[((d+4&4294967295)+4*k&4294967295)>>2]=j;if(1!=(k|0))break c;if(0==(m&256|0))break c;r=1}else 20==g&&us(c,n&65535)}else if(21==g){if(0==(e|0))break c;if(!(8>(k|0)))break c;if(!xy(e,f,k&7,1))break c;a[((d+4&4294967295)+4&4294967295)>>2]=n&255;r=1}else if(25==g){j=0;w=1;g=8192==(n&57344|0)?26:34;d:do if(26==g)for(;;){var p=w&1;g=0!=(j|0)?27:30;if(27==g){p?(j=27,g=29):(j=27,g=28);if(28==g)var u=yy(e,m,f,n&4095),j=28;w=(27==j?1:u)&1}else if(30==g){p?(j=30,g=31):(j=30,g=32);if(31==g)var z=yy(e,m,f,n&4095),j=31;w=(30==j?0:z)&1}j=n&4096;n=a[i>>2]+2&4294967295;a[i>>2]=n;n=t[n>>1];if(8192==(n&57344|0))g=26;else break d}while(0);g=0==(w&1|0)?35:39;d:do if(35==g)if(g=26624==(n&63488|0)?36:37,36==g)a[i>>2]=a[i>>2]+2*(n&255)&4294967295;else if(37==g){var C=p=w=p=j=w=void 0,p=a[i>>2];w=P[p>>1]&65535;C=w>>12;w=11>(C|0)?1:2;1==w?j=(b=h[zy+C&4294967295],128<=b?b-256:b):2==w&&(p=P[(p+4&4294967295)>>1]&65535,w=15==(p>>12|0)?3:4,3==w?j=4:4==w&&(w=2==(p|0)?5:6,5==w?j=3:6==w&&(j=2)));a[i>>2]=a[i>>2]+2*j&4294967295;if(24576!=(P[(a[i>>2]&4294967295)>>1]&65024|0)){g=39;break d}a[i>>2]=a[i>>2]+2&4294967295}while(0);a[i>>2]=a[i>>2]+-2&4294967295}else if(40==g){g=k>>1;if(0==g)g=41;else if(6==g)g=43;else if(5==g)g=42;else break c;41==g?a[i>>2]=a[i>>2]+2*((n&255)-1&4294967295)&4294967295:43==g?Ay(f,d,i,3):42==g&&Ay(f,d,i,2)}else if(44==g){j=(65536*(n&15)&4294967295)+(P[(a[i>>2]+2&4294967295)>>1]&65535)&4294967295;a[i>>2]=a[i>>2]+2&4294967295;g=k;if(1==g)g=45;else if(2==g)g=47;else if(3==g)g=48;else break c;if(45==g){if(!(10>(y|0)))break c;w=a[i>>2];p=y;y=p+1&4294967295;a[(x+4*p&4294967295)>>2]=w;a[i>>2]=(a[im>>2]+2*j&4294967295)+-2&4294967295}else 47==g?a[(d+124&4294967295)>>2]=j:48==g&&(a[(d+128&4294967295)>>2]=j)}else if(49==g)g=1==(k|0)?50:51,50==g?q=0:51==g&&(q=2),a[((d+108&4294967295)+4*q&4294967295)>>2]=(65536*(P[(a[i>>2]&4294967295)>>1]&255)&4294967295)+(P[(a[i>>2]+2&4294967295)>>1]&65535)&4294967295,a[((d+108&4294967295)+4*(q+1&4294967295)&4294967295)>>2]=(P[(a[i>>2]+6&4294967295)>>1]&65535)+(65536*(P[(a[i>>2]+4&4294967295)>>1]&65535)&4294967295)&4294967295,a[i>>2]=a[i>>2]+6&4294967295;else if(53==g){k=((n&65535)>>12)-11&4294967295;a[((d+68&4294967295)+4*k&4294967295)>>2]=(4*(P[(a[i>>2]+2&4294967295)>>1]&65535)&4294967295)+(262144*(n&15)&4294967295)&4294967295;g=(n&65535)>>4&255;a[((d+88&4294967295)+4*k&4294967295)>>2]=g;j=g&255;a[i>>2]=a[i>>2]+2&4294967295;if(2==(P[(a[i>>2]+2&4294967295)>>1]&65535|0))break c;g=2>(k|0)?55:57;d:do if(55==g){r=1;if(15!=((P[(a[i>>2]+2&4294967295)>>1]&65535)>>12|0)){g=59;break d}r=2}else if(57==g){if(4!=(k|0)){g=59;break d}r=r-1&4294967295}while(0);if(!(2==(k|0)|3==(k|0)))break c;j=(b=j,128<=b?b-256:b);a[((d+88&4294967295)+4*k&4294967295)>>2]=j}while(0);g=0!=(a[(c+4&4294967295)>>2]&4096|0)?63:64;c:do if(63==g)r=1;else if(64==g){if(1==(r|0))break c;a[i>>2]=a[i>>2]+2&4294967295;g=2;continue b}while(0);g=0<(y|0)?67:68;67==g&&(r=0,y=k=y-1&4294967295,a[i>>2]=a[(x+4*k&4294967295)>>2]);k=r;a[i>>2]=a[i>>2]+2&4294967295;if(1!=(k|0))g=2;else break a}}while(0);s=i}function us(b,m){var f=a[(a[lb>>2]+12&4294967295)>>2];fo(a[(b&4294967295)>>2]);Ea(f,By&4294967295,e([m,0,0,0,Bh&4294967295,0,0,0],["i32",0,0,0,"i8*",0,0,0],y))}function xy(b,m,f,d){var i,g,j,h;i=2==(l[a[(Z+4*(l[m&-1]&255)&4294967295)>>2]+11&4294967295]&255|0)?1:2;a:do if(1==i){h=m;i=5;break a}else if(2==i)if(i=2==(l[a[(Z+4*(l[m+24&-1]&255)&4294967295)>>2]+11&4294967295]&255|0)?3:4,3==i){h=m+24&4294967295;i=5;break a}else if(4==i){g=0;i=21;break a}while(0);a:do if(5==i){j=l[h+1&4294967295]&15;i=0!=(b|0)?6:13;b:do if(6==i){i=0!=(d&1|0)?7:10;c:do if(7==i){if(0==(P[(m+4&4294967295)>>1]&16|0)){i=10;break c}if(0!=(a[(((b&4294967295)+24&4294967295)+40&4294967295)>>2]&1|0)){i=10;break c}g=0;break a}while(0);if(0==(a[(((b&4294967295)+24&4294967295)+40&4294967295)>>2]&2|0))break b;if(!((j|0)>=(l[h+2&4294967295]&255|0)))break b;j=4}while(0);i=4==(f|0)?14:15;if(14==i)g=(j|0)>=(l[h+2&4294967295]&255|0);else if(15==i){g=j;i=3==(f|0)?16:18;b:do if(16==i){if(!(3<(g|0))){i=20;break b}g=1;break a}else if(18==i){if(!((g|0)<(a[(Cy+4*f&4294967295)>>2]|0))){i=20;break b}g=1;break a}while(0);g=0}}while(0);return g}function yy(e,m,f,d){var i,g=null,j,c,n,k,w,r;n=d&255;k=d>>8;i=14>(k|0)?1:67;a:do if(1==i){r=c=(k|0)%7;4==(r|0)?(g=1,i=2):(g=1,i=5);if(2==i)if(i=0!=(b=t[((f+24&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b)?3:4,3==i){j=0;break a}else if(4==i)var s=c,g=4;i=5==((4==g?s:r)|0)?6:8;b:do if(6==i){if(0==(b=t[((f&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b))break b;j=0;break a}while(0);r=c;7==(r|0)?(g=8,i=9):(g=8,i=13);b:do if(9==i){i=0!=(b=t[((f+24&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b)?11:10;c:do if(10==i){if(0!=(b=t[((f+48&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b))break c;var q=c,g=12;break b}while(0);j=0;break a}while(0);i=6==((12==g?q:r)|0)?14:19;b:do if(14==i){for(c=2;0==(b=t[((f+24*(c-1&4294967295)&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b);){var y=c;if(2==(l[a[(Z+4*(l[f+24*(c-1&4294967295)&-1]&255)&4294967295)>>2]+11&4294967295]&255|0)){g=17;break b}c=y+1&4294967295}j=0;break a}else if(19==i){var p=a[(Dy+4*c&4294967295)>>2];c=p;g=19}while(0);i=19==g?p:y;r=f;f=f+24*(i-1&4294967295)&4294967295;i=0==(i|0)?21:23;b:do if(21==i){if(1!=(l[f&4294967295]&255|0))break b;f=f+-24&4294967295}while(0);i=0!=(m&256|0)?24:25;24==i&&(a[(f+8&4294967295)>>2]=a[(Z+4*(l[f&4294967295]&255)&4294967295)>>2]);w=a[(f+8&4294967295)>>2];i=7>(k|0)?26:32;if(26==i)if(i=1==((a[(a[(Z+4*n&4294967295)>>2]&4294967295)>>2]|0)==(a[(w&4294967295)>>2]|0)&1|0)?27:28,27==i)j=1;else{if(28==i){i=0==(c|0)?29:31;b:do if(29==i){if(2!=(l[w+11&4294967295]&255|0)){i=31;break b}j=(n|0)==(l[w+13&4294967295]&255|0);break a}while(0);j=(n|0)==(l[w+12&4294967295]&255|0)}}else if(32==i)if(n=d&31,i=d&224,i=0==i?33:32==i?34:64==i?35:128==i?36:66,66==i)j=0;else if(33==i)j=(l[w+11&4294967295]&255|0)==(n|0);else if(34==i)j=(Ma[(w+4&4294967295)>>2]>>>16&15|0)==(n|0);else if(35==i)j=0!=(1<<n&a[(w+4&4294967295)>>2]|0);else if(36==i){j=n;i=0==j?37:1==j?37:2==j?37:3==j?37:4==j?37:5==j?38:6==j?41:7==j?42:8==j?43:9==j?46:10==j?51:11==j?52:12==j?56:60;b:do if(37==i){j=xy(e,f,n,0);break a}else if(38==i){0==(l[w+11&4294967295]&255|0)?(g=38,i=40):(g=38,i=39);if(39==i)var u=0!=(P[(r+4&4294967295)>>1]&8192|0),g=39;j=38==g?1:u;break a}else if(41==i){j=0!=(P[(f+6&4294967295)>>1]&65535|0);break a}else if(42==i){j=0==(P[(f+6&4294967295)>>1]&65535|0);break a}else if(43==i){0!=(b=t[((f+24&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b)?(g=43,i=45):(g=43,i=44);if(44==i)var z=0==(l[a[((f+24&4294967295)+8&4294967295)>>2]+11&4294967295]&255|0),g=44;j=43==g?1:z;break a}else if(46==i)if(i=0!=(P[(f+6&4294967295)>>1]&65535|0)?47:48,47==i){j=0;break a}else{if(48==i){for(;;){f=f+-24&4294967295;if(4<=(l[f+1&4294967295]&15|0))break;if(0!=(P[(f+6&4294967295)>>1]&65535|0)){i=60;break b}}j=1;break a}}else if(51==i){j=2!=(l[w+11&4294967295]&255|0);break a}else if(52==i){for(;;){f=f+24&4294967295;a[(f+8&4294967295)>>2]=a[(Z+4*(l[f&4294967295]&255)&4294967295)>>2];if(0!=(P[(f+6&4294967295)>>1]&65535|0)){i=53;break}if(2==(l[a[(f+
8&4294967295)>>2]+11&4294967295]&255|0)){i=55;break}else i=52}if(53==i){j=1;break a}else if(55==i){j=0;break a}}else if(56==i){2==(l[w+11&4294967295]&255|0)?(g=56,i=59):(g=56,i=57);c:do if(57==i){if(3==(l[w+11&4294967295]&255|0)){g=57;break c}var C=0!=(a[(w+4&4294967295)>>2]&16|0),g=58}while(0);j=57==g?1:56==g?1:C;break a}while(0);for(j=0;;){i=2==(l[a[(f+8&4294967295)>>2]+11&4294967295]&255|0)?62:63;62==i&&(j=j+1&4294967295);if(0!=(P[(f+6&4294967295)>>1]&65535|0)){i=65;break}f=f+-24&4294967295;i=61}j=1==(j|0)}}else if(67==i){i=15==(k|0)?68:72;b:do if(68==i){j=n;if(1==j)i=69;else if(2==j)i=70;else if(3==j)i=71;else{i=72;break b}if(69==i){j=0!=(m&1|0);break a}else if(70==i){j=0!=(a[(a[M>>2]+112&-1)>>2]|0);break a}else if(71==i){j=0!=((b=h[Hj&4294967295],128<=b?b-256:b)|0);break a}}while(0);j=0}while(0);return j}function Ay(h,m,f,d){var i,g;i=2==(d|0)?1:2;1==i?(i=m&4294967295,a[i>>2]|=2,g=l[a[((h+24&4294967295)+8&4294967295)>>2]+12&4294967295]&255):2==i&&(g=l[a[((h+-24&4294967295)+8&4294967295)>>2]+13&4294967295]&255);g=g-28&4294967295;if(4==(0<=(g|0)&6>(g|0)?4:5))h=a[f>>2]+2*(2*g&4294967295)&4294967295,a[((m+68&4294967295)+4*d&4294967295)>>2]=4*((65536*(P[(h+2&4294967295)>>1]&15)&4294967295)+(P[(h+4&4294967295)>>1]&65535)&4294967295)&4294967295,h=(P[(h+2&4294967295)>>1]&65535)>>4&255,h=(b=h,128<=b?b-256:b),a[((m+88&4294967295)+4*d&4294967295)>>2]=h;a[f>>2]=a[f>>2]+24&4294967295}function Vr(b,m){var f=s;s+=96;la(f,0,96);var d,i,g,j;d=f&4294967295;i=d+96;j=0;0>j&&(j+=256);for(j=j+(j<<8)+(j<<16)+16777216*j;0!==d%4&&d<i;)h[d++]=0;d>>=2;for(g=i>>2;d<g;)a[d++]=j;for(d<<=2;d<i;)h[d++]=0;for(d=0;!(h[f+24*d&-1]=9,a[((f+24*d&4294967295)+8&4294967295)>>2]=a[(Z+36&4294967295)>>2],d=i=d+1&4294967295,!(4>(i|0))););h[f+24&-1]=b&255;a[((f+24&4294967295)+8&4294967295)>>2]=a[(Z+4*b&4294967295)>>2];t[((f+48&4294967295)+6&4294967295)>>1]=1;Ed(0,0,f+24&4294967295,m);s=f}function fo(a){var b;for(b=0;;){h[Bh+b&4294967295]=a>>>((8*b&4294967295)>>>0)&255;var f=b+1&4294967295;b=f;if(!(3>(f|0)))break}h[Bh+4&4294967295]=0;return Bh&4294967295}function Pp(b,m){var f,d;f=0==(m|0)?1:4;1==f?(f=200<=(b|0)?2:3,2==f?d=(a[(wa+4&4294967295)>>2]*b&4294967295|0)/256|0:3==f&&(d=(a[(wa&4294967295)>>2]*b&4294967295|0)/256|0)):4==f&&(d=(a[(wa+12&4294967295)>>2]*b&4294967295|0)/256|0);f=(d|0)<(a[(wa+8&4294967295)>>2]|0)?6:7;6==f&&(d=a[(wa+8&4294967295)>>2]);return d}function Ch(b,m,f){var d,i,g;Qp(1);d=-1==(f|0)?1:2;1==d?i=f:2==d&&(i=a[((b+88&4294967295)+4&4294967295)>>2],3==(0==(i|0)?3:4)&&(i=100),i=(32*i&4294967295|0)/100|0);a[Gd>>2]=0;d=0==(a[((b+68&4294967295)+4&4294967295)>>2]|0)?6:7;6==d?g=0:7==d&&(g=Ey(a[((b+68&4294967295)+4&4294967295)>>2],2,2*a[((b+4&4294967295)+40&4294967295)>>2]&4294967295,a[(b&4294967295)>>2],m,i));a[Uc>>2]=0;return g}function Qp(b){var m;m=0<(a[Ng>>2]|0)&0<=(a[Nh>>2]|0)?1:4;1==m&&(m=0==(a[((Fa+16*a[Nh>>2]&4294967295)+4&4294967295)>>2]|0)?2:3,2==m&&(a[((Fa+16*a[Nh>>2]&4294967295)+4&4294967295)>>2]=a[Ng>>2]),a[Ng>>2]=0);if(5==(0!=(b|0)?5:6)){a[jd>>2]=-1;a[Uc>>2]=0;a[Zf>>2]=a[V>>2];Fy();a[dh>>2]=-1;var f,d,b=vs;m=b+16;d=0;0>d&&(d+=256);for(d=d+(d<<8)+(d<<16)+16777216*d;0!==b%4&&b<m;)h[b++]=0;b>>=2;for(f=m>>2;b<f;)a[b++]=d;for(b<<=2;b<m;)h[b++]=0}}function Ey(b,m,f,d,i,g){var h,e=null,c,k,w,r,e=f,b=b&8388607;h=a[Kj>>2]+b&4294967295;k=l[h+2&4294967295]&255;f=256*(l[h+1&4294967295]&255)&4294967295;f=f+(l[h&4294967295]&255)&4294967295;h=0==(f|0)?1:2;if(1==h)c=0;else if(2==h){w=a[(wa+24&4294967295)>>2];3==(0==(k|0)?3:4)&&(w=2*w&4294967295);h=0<(e|0)?5:9;a:do if(5==h){e=(a[Jb>>2]*e&4294967295|0)/1E3|0;h=0==(k|0)?6:7;6==h&&(e=2*e&4294967295);r=(e*w&4294967295|0)/(f|0)|0;if(!((r|0)>(w|0)))break a;w=r}else 9==h&&(e=f);while(0);11==(0<(i|0)?11:12)&&(e=(i*e&4294967295|0)/256|0);i=(a[(wa+12&4294967295)>>2]*e&4294967295|0)/256|0;h=0!=(d&4|0)?13:15;a:do if(13==h){if(!((i|0)>(e|0)))break a;i=e}while(0);16==((i|0)<(w|0)?16:17)&&(i=w);if(18==(0==(k|0)?18:19))i=(i|0)/2|0,f=(f|0)/2|0;h=0>(g|0)?20:21;if(20==h)c=i;else if(21==h)if(d=(f|0)/4|0,b=b+4&4294967295,h=0!=(m&256|0)?22:23,22==h)a[jd>>2]=a[V>>2],c=Fa+16*a[V>>2]&-1,a[(c&4294967295)>>2]=7,a[(c+4&4294967295)>>2]=f<<16|i,a[(c+8&4294967295)>>2]=a[Kj>>2]+b&4294967295,a[(c+12&4294967295)>>2]=(256*g&4294967295)+k&4294967295,lc(),c=i;else if(23==h){h=(i|0)>(f|0)?24:25;24==h?(r=3*d&4294967295,i=i-r&4294967295):25==h&&(r=i,i=0);a[jd>>2]=a[V>>2];c=Fa+16*a[V>>2]&-1;a[(c&4294967295)>>2]=6;a[(c+4&4294967295)>>2]=r;a[(c+8&4294967295)>>2]=a[Kj>>2]+b&4294967295;a[(c+12&4294967295)>>2]=(256*g&4294967295)+k&4294967295;lc();m=i;(m|0)>(3*d&4294967295|0)?(e=26,h=27):(e=26,h=30);a:do if(27==h)for(;;){r=d;h=0==(k|0)?28:29;28==h&&(r=2*r&4294967295);a[jd>>2]=a[V>>2];c=Fa+16*a[V>>2]&-1;a[(c&4294967295)>>2]=6;a[(c+4&4294967295)>>2]=2*d&4294967295;a[(c+8&4294967295)>>2]=a[Kj>>2]+(r+b&4294967295)&4294967295;a[(c+12&4294967295)>>2]=(256*g&4294967295)+k&4294967295;lc();var s=i=i-(2*d&4294967295)&4294967295;if((s|0)>(3*d&4294967295|0))e=29,h=27;else{e=29;break a}}while(0);if(31==(0<((29==e?s:m)|0)?31:34))r=f-i&4294967295,32==(0==(k|0)?32:33)&&(r=2*r&4294967295),a[jd>>2]=a[V>>2],c=Fa+16*a[V>>2]&-1,a[(c&4294967295)>>2]=6,a[(c+4&4294967295)>>2]=i,a[(c+8&4294967295)>>2]=a[Kj>>2]+(r+b&4294967295)&4294967295,a[(c+12&4294967295)>>2]=(256*g&4294967295)+k&4294967295,lc();c=i}}return c}function Og(e,m){var f,d;f=0==(m|0)?1:3;a:do if(1==f){if(0==((b=t[(e&4294967295)>>1],32768<=b?b-65536:b)&32768|0)){f=3;break a}d=e;f=6;break a}while(0);if(3==f){f=a[Ml>>2]+1&4294967295;a[Ml>>2]=f;1==(160<=(f|0)?1:2)&&(a[Ml>>2]=0);f=Gy+64*a[Ml>>2]&4294967295;if(4==(0!=(f|0)?4:5)){var i,g,c;d=e;i=f;g=d+64;if(i%4==d%4){for(;0!==d%4&&d<g;)h[i++]=h[d++];d>>=2;i>>=2;for(c=g>>2;d<c;)a[i++]=a[d++];d<<=2;i<<=2}for(;d<g;)h[i++]=h[d++];h[f+16&4294967295]=0;d=f&4294967295;i=((b=t[d>>1],32768<=b?b-65536:b)|32768)&65535;t[d>>1]=i}d=f}return d}function tk(e,m){var f,d,i;f=0!=(a[(a[M>>2]+112&-1)>>2]|0)?1:3;a:do if(1==f){if(-1!=(m|0))break a;h[e+39&-1]=50}else if(3==f){if(0==(l[e+17&4294967295]&255|0))break a;d=(64*m&4294967295|0)/(l[e+17&4294967295]&255|0)|0;f=200<=(d|0)?5:6;5==f&&(d=199);d=(b=t[(Hy+2*d&4294967295)>>1],32768<=b?b-65536:b);for(i=0;;)if(f=(l[(e+18&4294967295)+i&4294967295]&255)*d&4294967295,h[(e+18&4294967295)+i&4294967295]=((f|0)/512|0)&255,i=f=i+1&4294967295,8>(f|0))f=7;else break a}while(0)}function Iy(e,m,f,d,i,g,c,s){var n=null,n=g,m=(a[(a[M>>2]+96&4294967295)>>2]*m&4294967295|0)/256|0,g=(b=t[((e+2&4294967295)+4&4294967295)>>1],32768<=b?b-65536:b),m=(m-g&4294967295|0)/2|0;1==((m|0)>(d|0)?1:2)&&(m=d);3==((m|0)<(f|0)?3:4)&&(m=f);f=(e+2&4294967295)+4&4294967295;m=(b=t[f>>1],32768<=b?b-65536:b)+m&65535;t[f>>1]=m;m=(e+2&4294967295)+6&4294967295;f=(b=t[m>>1],32768<=b?b-65536:b)+n&65535;t[m>>1]=f;5==(0!=(s&32|0)?5:6)&&(n=-n&4294967295);m=(e+2&4294967295)+8&4294967295;s=(b=t[m>>1],32768<=b?b-65536:b)+n&65535;t[m>>1]=s;m=(e+2&4294967295)+10&4294967295;n=(b=t[m>>1],32768<=b?b-65536:b)+n&65535;t[m>>1]=n;1==(i|0)?(n=6,s=7):(n=6,s=12);if(7==s){var k=m=235-(b=t[((e+2&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b)&4294967295,s=-100>(k|0)?8:9;a:do if(8==s)m=-100;else if(9==s){if(!(-60<(k|0)))break a;m=-60}while(0);k=(e+2&4294967295)+2&4294967295;m=(b=t[k>>1],32768<=b?b-65536:b)+m&65535;t[k>>1]=m;k=i;n=11}if(13==(2==((11==n?k:i)|0)?13:18)){k=m=235-(b=t[((e+2&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b)&4294967295;s=-300>(k|0)?14:15;a:do if(14==s)m=-300;else if(15==s){if(!(-150<(k|0)))break a;m=-150}while(0);k=(e+2&4294967295)+2&4294967295;n=(b=t[k>>1],32768<=b?b-65536:b)+m&65535;t[k>>1]=n;k=e+2&-1;m=(b=t[k>>1],32768<=b?b-65536:b)+m&65535;t[k>>1]=m}if(19==(3==(i|0)?19:24)){i=m=100-(b=t[((e+2&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b)&4294967295;s=-400>(i|0)?20:21;a:do if(20==s)m=-400;else if(21==s){if(!(-300<(i|0)))break a;m=-400}while(0);i=(e+2&4294967295)+2&4294967295;k=(b=t[i>>1],32768<=b?b-65536:b)+m&65535;t[i>>1]=k;i=e+2&-1;k=(b=t[i>>1],32768<=b?b-65536:b)+m&65535;t[i>>1]=k}k=0!=(a[(a[M>>2]+112&-1)>>2]|0)?3:1;b:do if(1==k)for(i=2;;)if(k=(l[(e+18&4294967295)+i&4294967295]&255)*c&4294967295,h[(e+18&4294967295)+i&4294967295]=((k|0)/100|0)&255,i=k=i+1&4294967295,8>(k|0))k=2;else break b;while(0)}function Jy(a){var h,f=(b=t[((a+2&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b),a=300>(f|0)?1:2;1==a?h=3:2==a&&(a=400>(f|0)?3:4,3==a?h=2:4==a&&(a=500>(f|0)?5:6,5==a?h=1:6==a&&(h=0)));return h}function Ve(b,h){var f,d;f=0==(b|0)?1:2;1==f?d=0:2==f&&(d=Pp(b,h),d=(a[Jb>>2]*d&4294967295|0)/1E3|0);Qp(1);a[(Fa+16*a[V>>2]&-1)>>2]=5;a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=d;lc();a[Uc>>2]=0;f=0!=(a[Dh>>2]|0)?4:5;4==f&&(a[(Fa+16*a[V>>2]&-1)>>2]=14,a[Dh>>2]=0,a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=0,lc())}function ce(e,m,f,d,i){var g=s;s+=104;la(g,0,104);var c,q=null,n,k,w,r,y,L,x,p,u,z,C,E,B,H,D,K,I=g+4;k=i;D=0;K=3;c=0==(a[(f+8&4294967295)>>2]|0)?1:2;if(1==c)n=0;else if(2==c){E=(b=t[(d+12&4294967295)>>1],32768<=b?b-65536:b);c=0==(E|0)?3:4;3==c&&(E=256);H=(a[Jb>>2]|0)/70|0;2==(m|0)?(q=4,c=5):(q=4,c=11);if(5==c){c=0<(a[(((a[Rb>>2]&4294967295)+24&4294967295)+72&4294967295)>>2]|0)?6:10;a:do if(6==c){c=(l[e+14&4294967295]&255|0)>=(a[(((a[Rb>>2]&4294967295)+24&4294967295)+72&4294967295)>>2]|0)?9:7;b:do if(7==c){if(0!=(P[(d+4&4294967295)>>1]&8|0)){c=9;break b}if(0==(a[(e+4&4294967295)>>2]&2097152|0))break a}while(0);H=2*H&4294967295}while(0);var v=m,q=10}c=1==((10==q?v:m)|0)?12:17;a:do if(12==c){c=3==(l[e+11&4294967295]&255|0)?15:13;b:do if(13==c){if(3==(l[(d+-24&4294967295)+15&4294967295]&255|0)){c=15;break b}if(8!=(l[(d+-24&4294967295)+15&4294967295]&255|0))break a}while(0);var X=E,N=a[(((a[Rb>>2]&4294967295)+24&4294967295)+28&4294967295)>>2];u=N;if(!((X|0)<(N|0)))break a;E=u}while(0);a[qi>>2]=0;var R=s;s+=4;la(R,0,4);var G,U=null,S,Y,na,$,fa,T,ma,ia,aa,ja;ia=a[Jj>>2]+a[(f+8&4294967295)>>2]&4294967295;a[R>>2]=l[ia+2&4294967295]&255;G=25<=(a[R>>2]|0)?1:2;1==G&&(a[R>>2]=24);a[Gd>>2]=a[(f+12&4294967295)>>2]+a[(f+24&4294967295)>>2]&4294967295;S=na=0;G=(S|0)<(a[R>>2]|0)?4:3;b:do if(4==G){for(;;){var oa=0!=((b=t[(ia+4&-1)>>1],32768<=b?b-65536:b)&1|0),Ea=S;G=oa?5:6;5==G?ja=(ia+4&4294967295)+64*Ea&4294967295:6==G&&(ja=(ia+4&4294967295)+44*Ea&4294967295);a[((Pg+8*S&4294967295)+4&4294967295)>>2]=ja;t[((Pg+8*S&4294967295)+2&4294967295)>>1]=t[(ja&4294967295)>>1];t[(Pg+8*S&-1)>>1]=l[ja+16&4294967295]&255;G=0!=((b=t[(ja&4294967295)>>1],32768<=b?b-65536:b)&2|0)?8:9;8==G&&(na=S);S=S+1&4294967295;if(!((S|0)<(a[R>>2]|0)))break}var xa=na;$=Pg&4294967295;if(!(0<(xa|0)))break b;var bb=na;G=1==(m|0)?12:13;12==G?a[R>>2]=bb+1&4294967295:13==G&&($=Pg+8*bb&4294967295,a[R>>2]=a[R>>2]-na&4294967295)}else 3==G&&($=Pg&4294967295);while(0);G=2==(l[e+11&4294967295]&255|0)?15:18;b:do if(15==G){if(0!=(a[(f+20&4294967295)>>2]|0))break b;if(0==(a[(f+4&4294967295)>>2]|0))break b;var Va=$,qa=R,ua=a[(f+36&4294967295)>>2],ya=a[(f+40&4294967295)>>2],va=void 0,ab=void 0,za=void 0,dc=void 0,Ia=void 0,ba=void 0,ta=void 0,qb=void 0,ob=void 0,Ra=void 0,Sa=void 0,ac=void 0,Xa=void 0,Ma=void 0,Ua=void 0,cc=void 0,eb=void 0,cc=0,va=2>(a[qa>>2]|0)?1:2;if(1==va)ab=0;else if(2==va){ba=2*(ua&63)&4294967295;ta=ua>>>6&63;Ma=ua>>>12;ob=50*(ya&63)&4294967295;Ra=50*((ya>>>6&31)-15&4294967295)&4294967295;Sa=50*((ya>>>11&31)-15&4294967295)&4294967295;ac=50*((ya>>>16&31)-15&4294967295)&4294967295;Xa=8*(ya>>>21&31)&4294967295;qb=ya>>>26&7;Ua=ya>>>29;va=5;c:do if(3==va){if(63!=(a[0]|0))break c;Ma|=8}while(0);va=1==(m|0)?6:20;c:do if(6==va){cc=Og(a[((Va&4294967295)+4&4294967295)>>2],0);a[((Va&4294967295)+4&4294967295)>>2]=cc;t[(Va&-1)>>1]=50;va=0<(ba|0)?7:8;7==va&&(t[(Va&-1)>>1]=ba&65535);var Q=(Va&4294967295)+2&4294967295,lb=((b=t[Q>>1],32768<=b?b-65536:b)|16384)&65535;t[Q>>1]=lb;var Kb=cc&4294967295,Ga=((b=t[Kb>>1],32768<=b?b-65536:b)|16384)&65535;t[Kb>>1]=Ga;Ia=l[a[((Va+8&4294967295)+4&4294967295)>>2]+17&4294967295]&255;va=0!=(a[(a[M>>2]+112&-1)>>2]|0)?9:10;9==va&&(h[cc+39&-1]=(l[a[((Va+8&4294967295)+4&4294967295)>>2]+39&-1]&255)-4&255);va=0!=(ob|0)?11:15;d:do if(11==va){va=0!=(ta&32|0)?12:13;12==va&&tk(cc,((ta&31)*Ia&4294967295|0)/30|0);Iy(cc,ob,Ra,Sa,qb,ac,Xa,Ma);if(0!=(ta&32|0)){va=18;break d}tk(cc,2*ta&4294967295)}else if(15==va){var Qb=cc,va=0!=(Ma&8|0)?16:17;16==va?tk(Qb,(24*Ia&4294967295|0)/32|0):17==va&&tk(Qb,28)}while(0);if(0==(Ma&8|0))break c;var gc=(256*Jy(cc)&4294967295)+2048&4294967295;a[qi>>2]=gc}else if(20==va){ta=2*ta&4294967295;va=0!=(ob|0)?22:21;if(21==va&&0==(Ma|0))break c;va=0!=(Ma&8|0)?23:24;d:do if(23==va){cc=Og(a[((Va+8*(a[qa>>2]-1&4294967295)&4294967295)+4&4294967295)>>2],0);a[((Va+8*(a[qa>>2]-1&4294967295)&4294967295)+4&4294967295)>>2]=cc;var ta=35,hb=(256*Jy(cc)&4294967295)+1024&4294967295;a[qi>>2]=hb}else if(24==va){var cb=Va,ga=qa,ka=a[ga>>2];a[ga>>2]=ka+1&4294967295;var Aa=ba,rb;var Ba=void 0,Dc=void 0,Ya=void 0,hc=void 0,Ba=cb,Dc=ka,Ya=Aa;t[(Ba+8*(Dc-1&4294967295)&-1)>>1]=Ya&65535;hc=Og(a[((Ba+8*(Dc-1&4294967295)&4294967295)+4&4294967295)>>2],1);a[((Ba+8*Dc&4294967295)+4&4294967295)>>2]=hc;t[(Ba+8*Dc&-1)>>1]=0;rb=hc;cc=rb;va=36<(ba|0)?25:26;25==va&&(a[Gd>>2]=(ba-36&4294967295)+a[Gd>>2]&4294967295);if(0==(ob|0)){va=28;break d}Iy(cc,ob,Ra,Sa,qb,ac,Xa,Ma)}while(0);tk(cc,ta);if(!(0<(Ua|0)&2>=(Ua|0)))break c;za=0;if(!((za|0)<(a[qa>>2]|0)))break c;for(;;){cc=Og(a[((Va+8*za&4294967295)+4&4294967295)>>2],0);a[((Va+8*za&4294967295)+4&4294967295)>>2]=cc;for(dc=1;;){var Na=(b=t[((cc+2&4294967295)+2*dc&4294967295)>>1],32768<=b?b-65536:b),eb=(b=t[((Ky+10*(Ua-1&4294967295)&4294967295)+2*(dc-1&4294967295)&4294967295)>>1],32768<=b?b-65536:b)*Na&4294967295;t[((cc+2&4294967295)+2*dc&4294967295)>>1]=((eb|0)/256|0)&65535;var ha=dc+1&4294967295,dc=ha;if(!(5>=(ha|0)))break}za=za+1&4294967295;if((za|0)<(a[qa>>2]|0))va=30;else break c}}while(0);va=0!=(cc|0)?34:38;c:do if(34==va){va=0!=(Ma&4|0)?35:36;if(35==va){var A=cc&4294967295,mb=((b=t[A>>1],32768<=b?b-65536:b)|32)&65535;t[A>>1]=mb}if(0==(Ma&2|0))break c;var ic=cc&4294967295,sa=((b=t[ic>>1],32768<=b?b-65536:b)|16)&65535;t[ic>>1]=sa}while(0);va=0!=(Ma&64|0)?39:40;39==va&&Ve(12,0);va=0!=(Ma&16|0)?41:42;41==va?ab=ba:42==va&&(ab=0)}a[Gd>>2]=a[Gd>>2]+ab&4294967295}while(0);fa=0;Y=a[R>>2]-1&4294967295;S=0;G=(S|0)<(Y|0)?19:20;b:do if(19==G)for(;;){var Wa=(b=t[($+8*S&-1)>>1],32768<=b?b-65536:b);fa=fa+Wa&4294967295;S=S+1&4294967295;if((S|0)<(Y|0))G=19;else break b}while(0);G=0!=(a[(f+20&4294967295)>>2]|0)?21:29;if(21==G){aa=a[Jj>>2]+a[(f+20&4294967295)>>2]&4294967295;a[R>>2]=a[R>>2]-1&4294967295;S=0;G=(S|0)<(l[aa+2&4294967295]&255|0)?22:28;b:do if(22==G)for(;;){var xb=0!=((b=t[(aa+4&-1)>>1],32768<=b?b-65536:b)&1|0),jb=S;G=xb?23:24;23==G?ja=(aa+4&4294967295)+64*jb&4294967295:24==G&&(ja=(aa+4&4294967295)+44*jb&4294967295);t[($+8*a[R>>2]&-1)>>1]=l[ja+16&4294967295]&255;G=0<(S|0)?26:27;26==G&&(a[(($+8*a[R>>2]&4294967295)+4&4294967295)>>2]=ja,t[(($+8*a[R>>2]&4294967295)+2&4294967295)>>1]=t[(ja&4294967295)>>1]);a[R>>2]=a[R>>2]+1&4294967295;S=S+1&4294967295;if((S|0)<(l[aa+2&4294967295]&255|0))G=22;else break b}while(0);a[pj>>2]=0}G=0<(fa|0)?30:47;b:do if(30==G)if(G=2==(m|0)?31:37,31==G){T=(a[(f+44&4294967295)>>2]-45&4294967295)+a[Gd>>2]&4294967295;G=10>(T|0)?32:33;32==G&&(T=10);G=0!=(P[(d+4&4294967295)>>1]&8|0)?34:35;34==G&&(T=(2*(l[a[(Z+48&4294967295)>>2]+14&4294967295]&255)&4294967295)+
T&4294967295);ma=(256*T&4294967295|0)/(fa|0)|0;S=0;if(!((S|0)<(Y|0)))break b;for(;;){var Ja=(b=t[($+8*S&-1)>>1],32768<=b?b-65536:b);t[($+8*S&-1)>>1]=((Ja*ma&4294967295|0)/256|0)&65535;S=S+1&4294967295;if((S|0)<(Y|0))G=36;else break b}}else if(37==G){var ca=f;G=1==(m|0)?38:41;c:do if(38==G){if(1!=(a[(ca&4294967295)>>2]|0)){G=43;break c}if(!(130>(a[(f+44&4294967295)>>2]|0))){G=43;break c}var Ab=(b=t[($&-1)>>1],32768<=b?b-65536:b);t[($&-1)>>1]=((a[(f+44&4294967295)>>2]*Ab&4294967295|0)/130|0)&65535;G=43;break c}else if(41==G){if(!(0<(a[(ca+44&4294967295)>>2]|0))){G=43;break c}var Lb=a[Gd>>2]+(a[(f+44&4294967295)>>2]-fa&4294967295)&4294967295;a[Gd>>2]=Lb;U=42;G=44;break c}while(0);if(43==G)var ec=a[Gd>>2],U=43;if(0==((43==U?ec:Lb)|0))break b;ma=(256*(a[Gd>>2]+fa&4294967295)&4294967295|0)/(fa|0)|0;S=0;if(!((S|0)<(Y|0)))break b;for(;;){var Bb=(b=t[($+8*S&-1)>>1],32768<=b?b-65536:b);t[($+8*S&-1)>>1]=((Bb*ma&4294967295|0)/256|0)&65535;S=S+1&4294967295;if((S|0)<(Y|0))G=46;else break b}}while(0);a[g>>2]=a[R>>2];var Ha=$;s=R;c=0==(Ha|0)?18:19;if(18==c)n=0;else if(19==c){c=(a[(f+16&4294967295)>>2]|0)!=(a[Dh>>2]|0)?20:21;if(20==c){p=Fa+16*a[V>>2]&-1;a[(p&4294967295)>>2]=14;var vb=a[(f+16&4294967295)>>2];a[Dh>>2]=vb;a[(p+4&4294967295)>>2]=vb;lc()}r=a[((Ha&4294967295)+4&4294967295)>>2];c=0!=(a[(a[M>>2]+112&-1)>>2]|0)?22:23;22==c&&(K=1);a[pj>>2]=a[(f+28&4294967295)>>2];c=0==(a[(f+32&4294967295)>>2]|0)?24:25;24==c?a[go>>2]=32:25==c&&(a[go>>2]=(32*a[(f+32&4294967295)>>2]&4294967295|0)/100|0);c=0==(a[pj>>2]|0)?27:33;a:do if(27==c)if(c=0!=(l[ho]&1|0)?28:31,28==c)K=4,c=0!=(a[(a[M>>2]+112&-1)>>2]|0)?29:30,29==c&&(K=2),h[ho]=0;else if(31==c){K=3;if(0==(a[(a[M>>2]+112&-1)>>2]|0))break a;K=1}while(0);c=0!=(a[Uc>>2]|0)?34:43;a:do if(34==c){c=2>(l[a[Uc>>2]+16&4294967295]&255|0)?36:35;if(35==c&&0==((b=t[(a[Uc>>2]&4294967295)>>1],32768<=b?b-65536:b)&2|0))break a;if(0!=((b=t[(a[Uc>>2]&4294967295)>>1],32768<=b?b-65536:b)&16|0))break a;a[((Fa+16*a[jd>>2]&4294967295)+12&4294967295)>>2]=r;if(0==((b=t[(a[Uc>>2]&4294967295)>>1],32768<=b?b-65536:b)&8|0))break a;L=Og(r,1);x=3;for(q=38;;){c=7>((38==q?3:da)|0)?40:41;40==c&&(t[((L+2&4294967295)+2*x&4294967295)>>1]=t[((a[Uc>>2]+2&4294967295)+2*x&4294967295)>>1]);h[(L+18&4294967295)+x&4294967295]=h[(a[Uc>>2]+18&4294967295)+x&4294967295];var da=x+1&4294967295;x=da;if(8>(da|0))q=41,c=39;else{c=42;break}}a[((Fa+16*a[jd>>2]&4294967295)+12&4294967295)>>2]=L}while(0);c=2==(l[e+11&4294967295]&255|0)?44:46;a:do if(44==c){if(2!=(m|0))break a;Fy();a[dh>>2]=a[V>>2]}while(0);B=0;w=1;c=(w|0)<(a[g>>2]|0)?47:56;a:do if(47==c){b:for(;;){C=E;c=0!=((b=t[((Ha+8*(w-1&4294967295)&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b)&4|0)?48:49;c:do if(48==c)C=(((256-a[(wa+16&4294967295)>>2]&4294967295)*E&4294967295)+(256*a[(wa+16&4294967295)>>2]&4294967295)&4294967295|0)/256|0;else if(49==c){if(0==((b=t[((Ha+8*(w-1&4294967295)&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b)&16384|0))break c;C=(((256-a[(wa+20&4294967295)>>2]&4294967295)*E&4294967295)+(256*a[(wa+20&4294967295)>>2]&4294967295)&4294967295|0)/256|0}while(0);z=(b=t[(Ha+8*(w-1&4294967295)&-1)>>1],32768<=b?b-65536:b);u=(a[Jb>>2]*z&4294967295|0)/1E3|0;u=(C*u&4294967295|0)/256|0;B=B+u&4294967295;a[(I+4*w&4294967295)>>2]=u;w=w+1&4294967295;if((w|0)<(a[g>>2]|0))c=47;else{c=52;break b}}if(!(0<(B|0)))break a;if(!((B|0)<(H|0)))break a;w=1;if(!((w|0)<(a[g>>2]|0)))break a;for(;;)if(a[(I+4*w&4294967295)>>2]=(H*a[(I+4*w&4294967295)>>2]&4294967295|0)/(B|0)|0,w=w+1&4294967295,(w|0)<(a[g>>2]|0))c=55;else break a}while(0);w=1;c=(w|0)<(a[g>>2]|0)?57:72;a:do if(57==c)for(;;){y=a[((Ha+8*w&4294967295)+4&4294967295)>>2];c=0!=(a[(f+28&4294967295)>>2]|0)?58:60;c:do if(58==c){if(0!=((b=t[(r&4294967295)>>1],32768<=b?b-65536:b)&128|0))break c;a[Gd>>2]=0;Ey(a[(f+28&4294967295)>>2],m+256&4294967295,0,a[(f&4294967295)>>2],0,a[go>>2]);h[ho]=1;a[pj>>2]=0;a[(f+28&4294967295)>>2]=0}while(0);c=0<=(k|0)?61:66;c:do if(61==c){c=0!=((b=t[(r&4294967295)>>1],32768<=b?b-65536:b)&64|0)?62:63;62==c&&(k=6);if((w|0)!=(a[g>>2]-1&4294967295|0))break c;if(0==(a[qi>>2]&3840|0))break c;k|=a[qi>>2]}while(0);var $c=a[(I+4*w&4294967295)>>2];u=$c;a[Ng>>2]=a[Ng>>2]+$c&4294967295;a[Qg>>2]=a[Qg>>2]+$c&4294967295;c=0==($c|0)?67:68;if(67==c)a[Uc>>2]=0,r=y;else if(68==c){a[jd>>2]=a[V>>2];c=0<=(k|0)?69:70;69==c&&(p=Fa+16*a[V>>2]&-1,a[(p&4294967295)>>2]=K,a[(p+4&4294967295)>>2]=(65536*k&4294967295)+u&4294967295,a[(p+8&4294967295)>>2]=r,a[(p+12&4294967295)>>2]=y,lc());var ng=y;r=ng;a[Uc>>2]=ng;D=D+u&4294967295}w=w+1&4294967295;if((w|0)<(a[g>>2]|0))c=57;else break a}while(0);c=1!=(m|0)&0!=(a[Dh>>2]|0)?73:74;73==c&&(p=Fa+16*a[V>>2]&-1,a[(p&4294967295)>>2]=14,a[Dh>>2]=0,a[(p+4&4294967295)>>2]=0,lc());n=D}}var Vb=n;s=g;return Vb}function Fy(){var c,h=null,f,d,i,g,e,l,n,k,s,r,q,y;c=(a[Rg>>2]|0)==(a[Zf>>2]|0)?58:1;a:do if(1==c){c=0>(a[dh>>2]|0)?3:2;b:do if(2==c){if((a[dh>>2]|0)==(a[Rg>>2]|0)){c=3;break b}h=Fa+16*a[dh>>2]&-1;d=a[(h+8&4294967295)>>2];g=y=a[dh>>2]-1&4294967295;f=d=h=d;h=4;c:for(;;){c=0>((30==h?i:y)|0)?6:7;6==c&&(g=159);h=Fa+16*g&-1;if(5==(a[(h&4294967295)>>2]|0))break c;if(6==(a[(h&4294967295)>>2]|0))break c;c=4>=(a[(h&4294967295)>>2]|0)?10:29;d:do if(10==c){e=a[(h+4&4294967295)>>2]&65535;i=a[(h+12&4294967295)>>2];if((i|0)!=(f|0))break c;i=a[(h+12&4294967295)>>2]=d;d=f=a[(h+8&4294967295)>>2];n=0;if(0!=((b=t[(f&4294967295)>>1],32768<=b?b-65536:b)&16|0))break c;c=0!=((b=t[(f&4294967295)>>1],32768<=b?b-65536:b)&32|0)?13:14;13==c&&(e=(12*e&4294967295|0)/10|0);l=0;for(;;){c=0!=((b=t[(f&4294967295)>>1],32768<=b?b-65536:b)&8|0)?16:17;f:do if(16==c){c=3>(l|0)?28:17;break f}while(0);f:do if(17==c)if(r=(b=t[((i+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b),q=(b=t[((f+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b),s=c=q-r&4294967295,c=0<(c|0)?18:19,18==c?k=q+(2*r&4294967295)&4294967295:19==c&&(k=(2*q&4294967295)+r&4294967295),k=(a[(Rp+4*l&4294967295)>>2]*k&4294967295|0)/3E3|0,k=(e*k&4294967295|0)/256|0,c=(s|0)>(k|0)?21:24,21==c)c=0==(n|0)?22:23,22==c&&(d=Og(f,0),n=1),s=(b=t[((i+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b),t[((d+2&4294967295)+2*l&4294967295)>>1]=s+k&65535,a[(h+8&4294967295)>>2]=d;else if(24==c){if(!((s|0)<(-k&4294967295|0)))break f;c=0==(n|0)?26:27;26==c&&(d=Og(f,0),n=1);s=(b=t[((i+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b);t[((d+2&4294967295)+2*l&4294967295)>>1]=s-k&65535;a[(h+8&4294967295)>>2]=d}while(0);l=s=l+1&4294967295;if(6>(s|0))c=15;else break d}}while(0);if((g|0)==(a[Rg>>2]|0))break c;g=i=g-1&4294967295;h=30}g=a[dh>>2];f=0;c:for(;;){h=Fa+16*g&-1;if(5==(a[(h&4294967295)>>2]|0))break c;if(6==(a[(h&4294967295)>>2]|0))break c;c=4>=(a[(h&4294967295)>>2]|0)?35:54;d:do if(35==c){e=a[(h+4&4294967295)>>2]&65535;i=a[(h+8&4294967295)>>2];c=0!=(f|0)?36:38;if(36==c){if((i|0)!=(f|0))break c;i=a[(h+8&4294967295)>>2]=d}d=f=a[(h+12&4294967295)>>2];n=0;if(0!=((b=t[(i&4294967295)>>1],32768<=b?b-65536:b)&16|0))break c;c=0!=((b=t[(i&4294967295)>>1],32768<=b?b-65536:b)&32|0)?40:41;40==c&&(e=(6*e&4294967295|0)/5|0);l=0;for(;;){q=(b=t[((i+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b);y=(b=t[((f+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b);s=c=y-q&4294967295;c=0<(c|0)?43:44;43==c?k=y+(2*q&4294967295)&4294967295:44==c&&(k=(2*y&4294967295)+q&4294967295);k=(a[(Rp+4*l&4294967295)>>2]*k&4294967295|0)/3E3|0;k=(e*k&4294967295|0)/256|0;c=(s|0)>(k|0)?46:49;f:do if(46==c)c=0==(n|0)?47:48,47==c&&(d=Og(f,0),n=1),y=(b=t[((i+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b),t[((d+2&4294967295)+2*l&4294967295)>>1]=y+k&65535,a[(h+12&4294967295)>>2]=d;else if(49==c){if(!((s|0)<(-k&4294967295|0)))break f;c=0==(n|0)?51:52;51==c&&(d=Og(f,0),n=1);y=(b=t[((i+2&4294967295)+2*l&4294967295)>>1],32768<=b?b-65536:b);t[((d+2&4294967295)+2*l&4294967295)>>1]=y-k&65535;a[(h+12&4294967295)>>2]=d}while(0);l=y=l+1&4294967295;if(6>(y|0))c=42;else break d}}while(0);g=h=g+1&4294967295;c=160<=(h|0)?55:56;55==c&&(g=0);if((g|0)==(a[Zf>>2]|0))break c}a[Rg>>2]=a[Zf>>2];break a}while(0);a[Rg>>2]=a[Zf>>2]}while(0)}function mf(b,c,f,d){a[(Fa+16*a[V>>2]&-1)>>2]=10;a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=b;a[((Fa+16*a[V>>2]&4294967295)+8&4294967295)>>2]=f<<24|c&16777215;a[((Fa+16*a[V>>2]&4294967295)+12&4294967295)>>2]=d;lc()}function mx(b){a[(Fa+16*a[V>>2]&-1)>>2]=15;a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=b;lc()}function wq(b){var c;c=Qd(1344);var f,d,i;f=c;d=b+1344;if(f%4==b%4){for(;0!==b%4&&b<d;)h[f++]=h[b++];b>>=2;f>>=2;for(i=d>>2;b<i;)a[f++]=a[b++];b<<=2;f<<=2}for(;b<d;)h[f++]=h[b++];a[(Fa+16*a[V>>2]&-1)>>2]=11;a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=c;lc()}function Ly(b,c){var f,d,i,g;a:for(;;){d=a[(vf+4*a[b>>2]&4294967295)>>2];i=d>>>8;g=f=d&127;if(0==(f|0))break a;f=b;a[f>>2]=a[f>>2]+1&4294967295;f=g&31;f=2==f?3:7==f?4:10==f?7:11==f?8:9;b:do if(9==f)Ve(10,0),a[(Fa+16*a[V>>2]&-1)>>2]=12,a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=g,a[((Fa+16*a[V>>2]&4294967295)+8&4294967295)>>2]=i,lc();else if(3==f)Qr((g&96)+8&4294967295,i),Nm(2);else if(4==f){if(!((i|0)<(a[km>>2]|0)))break b;if(0==(a[((nd+16*i&4294967295)+4&4294967295)>>2]|0))break b;Ve(10,0);a[(Fa+16*a[V>>2]&-1)>>2]=6;a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=a[((nd+16*i&4294967295)+4&4294967295)>>2];a[((Fa+16*a[V>>2]&4294967295)+8&4294967295)>>2]=a[((nd+16*i&4294967295)+8&4294967295)>>2]+44&4294967295;a[((Fa+16*a[V>>2]&4294967295)+12&4294967295)>>2]=5376;lc()}else 7==f?mf(3,(c&2047)+a[$f>>2]&4294967295,0,i):8==f&&mf(4,a[lf>>2]+1&4294967295,0,i);while(0);if(0!=(d&128|0))break a}}function Ur(c,m,f){var d=s;s+=656;la(d,0,656);var i,g,j,q,n,k,w,r,x,L,H,p,u,z,C=d+152,E=d+304,B=d+456,v=d+608;p=0;i=0!=(a[Gp>>2]|0)?1:2;if(1==i)g=0;else if(2==i)if(i=0!=((b=h[Hj&4294967295],128<=b?b-256:b)|0)?3:4,3==i){var D;var K,I,M;M=0;K=0==(a[m>>2]|0)?1:2;if(1==K)I=0;else if(2==K){K=0!=(a[Do>>2]|0)?3:4;3==K&&(M=a[Le>>2]);var X=a[m>>2],N=M,R=s;s+=332;la(R,0,332);var G,$=null,S,Y,na,fa,T,ja,aa,ia,ma,oa=R+152,Ea,xa,qa=R+200,bb=R+204,Va,za=R+208,ua,ya,va=R+212,ab,Xa,dc;Ea=0;G=0!=(f|0)?2:1;1==G&&(a[Tc>>2]=1,a[ws>>2]=0,a[Sp>>2]=0);var Ia=va&4294967295,ba=va&4294967295,ta=va&4294967295,qb=R+68&-1,ob=oa+8&4294967295;b:for(;;){if(!((a[Tc>>2]|0)<(X|0))){G=64;break b}if(22>(dp()|0)){G=5;break b}ya=Ia;ia=c+24*a[Tc>>2]&4294967295;ma=c+24*(a[Tc>>2]+1&4294967295)&4294967295;T=a[(ia+8&4294967295)>>2];aa=a[((c+24*(a[Tc>>2]-1&4294967295)&4294967295)+8&4294967295)>>2];ja=a[((c+24*(a[Tc>>2]+1&4294967295)&4294967295)+8&4294967295)>>2];G=0!=(P[(ia+4&4294967295)>>1]&2|0)?7:8;7==G&&Ly(ws,P[(ia+6&4294967295)>>1]&65535);G=0!=(l[ia+19&4294967295]&4|0)?9:10;9==G&&mf(2,(P[(ia+6&4294967295)>>1]&2047)+a[$f>>2]&4294967295,0,a[uk>>2]);G=0!=(l[ia+19&4294967295]&1|0)?11:12;if(11==G){var Ra=(P[(ia+6&4294967295)>>1]&2047)+a[$f>>2]&4294967295,Sa=(P[(ia+6&4294967295)>>1]&65535)>>11,ac=a[ur>>2],Ua=Ma[Sp>>2];a[Sp>>2]=Ua+1&4294967295;mf(1,Ra,Sa,Ua+ac&4294967295)}var eb=T,Ya=aa,cc=ja,lb;var Q=void 0,Na=void 0,Kb=void 0,Ga=void 0,Qb=void 0,gc=void 0,hb=void 0,cb=void 0,ga=void 0,ka=void 0,Aa=void 0,rb=void 0,Kb=ia,Ga=eb,Qb=Ya,gc=cc,hb=qa,cb=za,ga=bb,rb=0;a[hb>>2]=0;a[cb>>2]=0;a[ga>>2]=0;a[ri>>2]=a[(Ga&4294967295)>>2];ka=a[zh>>2];d:for(;;){if(0==(a[(ka&4294967295)>>2]|0)){Q=28;break d}Q=(a[ri>>2]|0)==(a[(ka&4294967295)>>2]|0)?3:27;e:do if(3==Q){Q=0==(a[(ka+4&4294967295)>>2]|0)?4:5;f:do if(4==Q)rb=1;else if(5==Q){Q=58==(a[(ka+4&4294967295)>>2]|0)?6:8;g:do if(6==Q){if(0==(P[(Kb+4&4294967295)>>1]&8|0))break g;rb=1;break f}while(0);Q=0!=(a[(ka+20&4294967295)>>2]&2|0)?9:10;g:do if(9==Q)Aa=Qb;else if(10==Q){Q=0!=(a[(ka+20&4294967295)>>2]&8|0)?11:13;h:do if(11==Q){if(0==(b=h[(Kb+24&4294967295)+19&4294967295],128<=b?b-256:b)){Q=13;break h}Aa=a[(Z&4294967295)>>2];break g}while(0);Aa=gc}while(0);Q=(a[(ka+4&4294967295)>>2]|0)==(a[(Aa&4294967295)>>2]|0)?19:15;g:do if(15==Q){Q=2==(a[(ka+4&4294967295)>>2]|0)?16:17;if(16==Q&&2==(l[Aa+11&4294967295]&255|0)){Q=19;break g}if(95!=(a[(ka+4&4294967295)>>2]|0))break f;if(0!=(l[Aa+11&4294967295]&255|0))break f}while(0);rb=1}while(0);Q=0!=(a[(ka+20&4294967295)>>2]&4|0)?21:23;f:do if(21==Q){if(0!=(l[Kb+19&4294967295]&255|0)){Q=23;break f}rb=0;break e}while(0);if(0!=(rb|0)){Q=24;break d}}while(0);ka=ka+24&4294967295;Q=1}d:do if(24==Q){a[hb>>2]=a[(ka+12&4294967295)>>2];a[cb>>2]=a[(ka+16&4294967295)>>2];a[ga>>2]=a[(ka+20&4294967295)>>2];var Ba=a[(ka+8&4294967295)>>2],Q=0!=(a[(ka+20&4294967295)>>2]&16|0)?25:26;if(25==Q){a[yh>>2]=Ba;Na=0;Q=31;break d}else if(26==Q){a[ri>>2]=Ba;Q=28;break d}}while(0);28==Q&&(Q=0!=(a[yh>>2]|0)?29:30,29==Q&&(a[ri>>2]=a[yh>>2]&255|a[ri>>2]<<8),a[yh>>2]=0,Na=a[ri>>2]);lb=Na;Y=lb;0!=(a[bb>>2]&1|0)?($=12,G=13):($=12,G=14);if(13==G){a[Tc>>2]=a[Tc>>2]+1&4294967295;var Dc=Y,$=13}G=0==((13==$?Dc:lb)|0)?15:16;if(15==G)a[Tc>>2]=a[Tc>>2]+1&4294967295,G=3;else if(16==G){G=0==(l[T+11&4294967295]&255|0)?17:20;c:do if(17==G){if((Y|0)!=(a[(T&4294967295)>>2]|0)){G=20;break c}Y=95;na=((b=t[(ia+12&4294967295)>>1],32768<=b?b-65536:b)*a[(wa&4294967295)>>2]&4294967295|0)/256|0;if(0!=(na|0)){G=21;break c}na=1;G=21;break c}while(0);20==G&&(na=(80*a[(wa+12&4294967295)>>2]&4294967295|0)/256|0);mf(7,(P[(ia+6&4294967295)>>1]&2047)+a[$f>>2]&4294967295,0,a[(T&4294967295)>>2]);var zb=ya;fo(Y);var hc=U(zb,My&4294967295,e([Bh&4294967295,0,0,0],["i8*",0,0,0],y));ya=ya+hc&4294967295;G=95==(a[qa>>2]|0)?22:23;22==G&&(Ea=a[za>>2],a[qa>>2]=0);Va=0;ua=bf&4294967295;var nb=l[T+11&4294967295]&255;G=2==nb?24:4==nb?32:5==nb?40:6==nb?41:8==nb?44:3==nb?48:50;c:do if(24==G){na=l[T+14&4294967295]&255;G=0!=(P[(ia+4&4294967295)>>1]&8|0)?25:26;25==G&&(na=na+(l[a[(Z+48&4294967295)>>2]+14&4294967295]&255)&4294967295);G=0==(l[ja+11&4294967295]&255|0)?27:28;27==G&&(na=na+50&4294967295);var ha=na;na=((b=t[(ia+12&4294967295)>>1],32768<=b?b-65536:b)*ha&4294967295|0)/256|0;var A=l[ia+14&4294967295]&255,mb=l[ia+20&4294967295]&255,ic=l[ia+21&4294967295]&255;G=0==(a[qa>>2]|0)?29:30;if(29==G){sk(A,mb,ic,0,0);ab=wc&4294967295;var sa=U(ya,xs&4294967295,e([na,0,0,0,ab,0,0,0],["i32",0,0,0,"i8*",0,0,0],y));ya=ya+sa&4294967295}else if(30==G){sk(A,mb,ic,a[za>>2],0);Xa=wc&4294967295;fa=(a[za>>2]*na&4294967295|0)/100|0;var Wa=U(ya,xs&4294967295,e([fa,0,0,0,Xa,0,0,0],["i32",0,0,0,"i8*",0,0,0],y));ya=ya+Wa&4294967295;sk(l[ia+14&4294967295]&255,l[ia+20&4294967295]&255,l[ia+21&4294967295]&255,-a[za>>2]&4294967295,0);Xa=wc&4294967295;var Eb=ya;fo(a[qa>>2]);var jb=U(Eb,Ny&4294967295,e([Bh&4294967295,0,0,0,na-fa&4294967295,0,0,0,Xa,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));ya=ya+jb&4294967295}Va=1;G=54;break c}else if(32==G){xa=0;G=2==(l[ma+15&4294967295]&255|0)?33:34;33==G&&(xa=1);G=3==(l[ma+15&4294967295]&255|0)?35:37;d:do if(35==G){if(0!=(b=h[ma+19&4294967295],128<=b?b-256:b)){G=37;break d}xa=1;G=39;break d}while(0);d:do if(37==G){if(0!=(xa|0))break d;var Ja=ia+4&4294967295;t[Ja>>1]=(P[Ja>>1]&65535|8192)&65535}while(0);Ed(0,0,ia,R);na=Ch(R,0,-1);na=(1E3*na&4294967295|0)/(a[Jb>>2]|0)|0;var ca=Pp(l[ia+16&4294967295]&255,1);na=na+ca&4294967295;G=50;break c}else if(40==G){na=(80*a[(wa+12&4294967295)>>2]&4294967295|0)/256|0;G=50;break c}else if(41==G){na=0;Ed(0,0,ia,R);G=0!=(P[(ia+4&4294967295)>>1]&8|0)?42:43;if(42==G){var Ab=(b=t[(ia+12&4294967295)>>1],32768<=b?b-65536:b);na=Ch(R,Ab,-1)}var Lb=(b=t[(ia+12&4294967295)>>1],32768<=b?b-65536:b),ec=Ch(R,Lb,-1);na=na+ec&4294967295;na=(1E3*na&4294967295|0)/(a[Jb>>2]|0)|0;G=50;break c}else if(44==G){if(2==(l[ma+15&4294967295]&255|0)){G=50;break c}var Bb,Ha,vb,da;Bb=oa;Ha=Bb+48;da=0;0>da&&(da+=256);for(da=da+(da<<8)+(da<<16)+16777216*da;0!==Bb%4&&Bb<Ha;)h[Bb++]=0;Bb>>=2;for(vb=Ha>>2;Bb<vb;)a[Bb++]=da;for(Bb<<=2;Bb<Ha;)h[Bb++]=0;Ed(0,0,ia,R);a[ob>>2]=a[qb>>2];na=ce(a[(ia+8&4294967295)>>2],0,oa,ia,-1);na=(1E3*na&4294967295|0)/(a[Jb>>2]|0)|0;G=0==(l[ma+15&4294967295]&255|0)?46:47;46==G&&(na=na+50&4294967295);sk(l[ia+14&4294967295]&255,l[ia+20&4294967295]&255,l[ia+21&4294967295]&255,0,1);ua=wc&4294967295;G=50;break c}else if(48==G){if(0!=(l[ma+15&4294967295]&255|0)){G=50;break c}na=na+50&4294967295;sk(l[ia+14&4294967295]&255,l[ia+20&4294967295]&255,l[ia+21&4294967295]&255,0,1);ua=wc&4294967295;G=50;break c}while(0);c:do if(50==G){if(0!=(Va|0))break c;G=0!=(a[qa>>2]|0)?52:53;if(52==G){fa=(a[za>>2]*na&4294967295|0)/100|0;var $c=ya,ng=fa;fo(a[qa>>2]);var Vb=U($c,Oy&4294967295,e([ng,0,0,0,Bh&4294967295,0,0,0],["i32",0,0,0,"i8*",0,0,0],y));ya=ya+Vb&4294967295;na=na-fa&4294967295}var Db=U(ya,Py&4294967295,e([na,0,0,0,ua,0,0,0],["i32",0,0,0,"i8*",0,0,0],y));ya=ya+Db&4294967295}while(0);G=0!=(Ea|0)?55:56;if(55==G){var nc=Pp(Ea,0);na=na+nc&4294967295;var sb=ya,pb=Pp(Ea,0),db=U(sb,Qy&4294967295,e([pb,0,0,0],["i32",0,0,0],y));ya=ya+db&4294967295;Ea=0}G=0!=(N|0)?57:58;if(57==G)Nd(ba,1,ya-ta&4294967295,N);else if(58==G){var Hb;var Ib=void 0,Ib=ba;a[Fe>>2]=2;Hb=ys(Ib);dc=Hb;if(0>(dc|0)){G=59;break b}if(0==(dc|0)){G=61;break b}a[(Fa+16*a[V>>2]&-1)>>2]=13;a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=na;lc()}a[Tc>>2]=a[Tc>>2]+1&4294967295;G=3}}64==G?(G=0!=(N|0)?66:65,65==G&&(ys(zs&4294967295),a[(Fa+16*a[V>>2]&-1)>>2]=13,a[((Fa+16*a[V>>2]&4294967295)+4&4294967295)>>2]=500,lc()),S=0):5==G?S=1:59==G?S=0:61==G&&(S=1);var Wb=S;s=R;K=0!=(Wb|0)?6:5;5==K&&(a[m>>2]=0);I=Wb}D=I;g=D}else if(4==i){i=0==(f|0)?5:6;if(5==i){a[Ge>>2]=1;a[As>>2]=0;a[Tp>>2]=0;a[Ng>>2]=0;a[Qg>>2]=0;a[Uc>>2]=0;a[jd>>2]=-1;a[Rg>>2]=a[V>>2];a[Zf>>2]=a[V>>2];a[dh>>2]=-1;a[Nh>>2]=-1;var ea,Mb,kb,Ca;ea=vs;Mb=ea+16;Ca=0;0>Ca&&(Ca+=256);for(Ca=Ca+(Ca<<8)+(Ca<<16)+16777216*Ca;0!==ea%4&&ea<Mb;)h[ea++]=0;ea>>=2;for(kb=Mb>>2;ea<kb;)a[ea++]=Ca;for(ea<<=2;ea<Mb;)h[ea++]=0;Ve(0,0)}var Ta=d&4294967295,fb=v&4294967295,sc=d+68&-1,oc=v+8&4294967295,Sb=d+88&-1,tb=v+16&4294967295,$b=d+68&-1,ub=v+8&4294967295,Gb=d+88&-1,vc=v+16&4294967295,xc=(d+68&4294967295)+16&4294967295,pa=v+28&4294967295,qe=(d+88&4294967295)+16&4294967295,fc=v+32&4294967295,Zb=(d+4&4294967295)+40&4294967295,Jc=v+44&4294967295,mc=d+68&-1,Ub=v+8&4294967295,xe=d+88&-1,wb=v+16&4294967295,pc=(d+68&4294967295)+16&4294967295,rc=v+28&4294967295,Oc=(d+88&4294967295)+16&4294967295,Pa=v+32&4294967295,yc=(d+4&4294967295)+40&4294967295,Cd=v+44&4294967295,Vc=d+68&-1,Wc=v+8&4294967295,kc=d+88&-1,xd=v+16&4294967295,Rc=(d+4&4294967295)+40&4294967295,Kc=v+44&4294967295,cf=d+68&-1,md=v+8&4294967295,Ne=d+88&-1,Qc=v+16&4294967295,Lc=(d+68&4294967295)+16&4294967295,Za=v+28&4294967295,Nc=(d+
88&4294967295)+16&4294967295,yd=v+32&4294967295,O=(d+4&4294967295)+40&4294967295,gb=v+44&4294967295,fd=(d+68&4294967295)+8&4294967295,Bd=v+8&4294967295,od=d&4294967295,Tb=(d+88&4294967295)+8&4294967295,pd=v+12&4294967295,Ec=v+8&4294967295,Bc=v+4&4294967295,Hd=v&4294967295,Vd=d+68&-1,qc=v+8&4294967295,ad=d+88&-1,nd=v+16&4294967295,uc=B+124&4294967295,Ic=B+128&4294967295,Yc=B+128&4294967295,td=d+68&-1,bd=v+8&4294967295,Wd=d+88&-1,gd=v+16&4294967295,Ka=v+36&4294967295,Sd=v+40&4294967295,wd=(d+68&4294967295)+
12&4294967295,Od=v+20&4294967295,qd=(d+88&4294967295)+12&4294967295,ge=v+24&4294967295,Pd=v+24&4294967295,Kd=v+4&4294967295,Ld=(E+108&4294967295)+8&4294967295,Rd=v+36&4294967295,Ud=(E+108&4294967295)+12&4294967295,Xd=v+40&4294967295,Ee=(E+68&4294967295)+12&4294967295,Xb=v+20&4294967295,kf=(E+88&4294967295)+12&4294967295,Fd=v+24&4294967295,Oe=(C+68&4294967295)+8&4294967295,Jd=v+8&4294967295,pf=(C+88&4294967295)+8&4294967295,be=v+24&4294967295,qf=C+108&-1,Xc=v+36&4294967295,Ke=(C+108&4294967295)+4&4294967295,pe=v+40&4294967295;a:for(;;){if(!((a[Ge>>2]|0)<(a[m>>2]|0))){i=134;break a}k=c+24*a[Ge>>2]&4294967295;i=0==(l[k+15&4294967295]&255|0)?9:10;9==i?H=5:10==i&&(i=2!=(l[k+15&4294967295]&255|0)?11:12,11==i?H=10:12==i&&(H=22));if((dp()|0)<=(H|0)){i=14;break a}j=c+24*(a[Ge>>2]-1&4294967295)&4294967295;q=c+24*(a[Ge>>2]+1&4294967295)&4294967295;n=c+24*(a[Ge>>2]+2&4294967295)&4294967295;i=0!=(P[(k+4&4294967295)>>1]&2|0)?16:17;16==i&&Ly(As,P[(k+6&4294967295)>>1]&65535);i=0!=(b=h[k+19&4294967295],128<=b?b-256:b)?18:26;b:do if(18==i){i=2==(l[k+15&4294967295]&255|0)?19:20;c:do if(19==i){i=0!=(a[(((a[Rb>>2]&4294967295)+24&4294967295)+32&4294967295)>>2]&1|0)?22:20;break c}while(0);c:do if(20==i){if(0!=(a[(a[(k+8&4294967295)>>2]+4&4294967295)>>2]&16777216|0)){i=22;break c}a[Uc>>2]=0}while(0);a[qj>>2]=(P[(k+6&4294967295)>>1]&2047)+a[$f>>2]&4294967295;i=0!=(l[k+19&4294967295]&4|0)?23:24;23==i&&mf(2,a[qj>>2],0,a[uk>>2]);if(0==(l[k+19&4294967295]&1|0)){i=26;break b}var Dd=a[qj>>2],ye=(P[(k+6&4294967295)>>1]&65535)>>11,De=a[ur>>2],jf=Ma[Tp>>2];a[Tp>>2]=jf+1&4294967295;mf(1,Dd,ye,jf+De&4294967295)}while(0);var ud=void 0,ud=0<(a[Qg>>2]|0)?1:4;1==ud&&(ud=0==(a[((Fa+16*a[lm>>2]&4294967295)+4&4294967295)>>2]|0)?2:3,2==ud&&(a[((Fa+16*a[lm>>2]&4294967295)+4&4294967295)>>2]=a[Qg>>2]),a[Qg>>2]=0);i=0<(l[k+16&4294967295]&255|0)?27:28;27==i&&Ve(l[k+16&4294967295]&255,1);i=0!=(a[Bs>>2]|0)?29:31;b:do if(29==i){if(2==(l[k+15&4294967295]&255|0)){i=31;break b}mf(7,a[qj>>2],0,a[(a[(k+8&4294967295)>>2]&4294967295)>>2])}while(0);var Fb=l[k+15&4294967295]&255;i=0==Fb?32:4==Fb?33:6==Fb?41:5==Fb?44:7==Fb?67:8==Fb?81:3==Fb?91:2==Fb?100:133;b:do if(32==i){var Td=(b=t[(k+12&4294967295)>>1],32768<=b?b-65536:b);Ve(Td,0)}else if(33==i){w=0;i=2==(l[q+15&4294967295]&255|0)?34:35;c:do if(34==i)w=1;else if(35==i){i=0!=(b=h[q+19&4294967295],128<=b?b-256:b)?38:36;d:do if(36==i){if(3!=(l[q+15&4294967295]&255|0)){i=38;break d}w=1;i=40;break c}while(0);if(0!=(w|0)){i=40;break c}var Pe=k+4&4294967295;t[Pe>>1]=(P[Pe>>1]&65535|8192)&65535}while(0);Ed(0,0,k,d);a[Ta>>2]|=4;Ch(d,0,0)}else if(41==i){Ed(0,0,k,d);i=0!=(P[(k+4&4294967295)>>1]&8|0)?42:43;if(42==i){var Qa=(b=t[(k+12&4294967295)>>1],32768<=b?b-65536:b);Ch(d,Qa,0)}var Me=(b=t[(k+12&4294967295)>>1],32768<=b?b-65536:b);Ch(d,Me,0)}else if(44==i){z=a[(k+8&4294967295)>>2];ea=v;Mb=ea+48;Ca=0;0>Ca&&(Ca+=256);for(Ca=Ca+(Ca<<8)+(Ca<<16)+16777216*Ca;0!==ea%4&&ea<Mb;)h[ea++]=0;ea>>=2;for(kb=Mb>>2;ea<kb;)a[ea++]=Ca;for(ea<<=2;ea<Mb;)h[ea++]=0;a[fb>>2]=4;L=0;i=2==(l[q+15&4294967295]&255|0)?45:46;c:do if(45==i)me(l[k+18&4294967295]&255,0),de(a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2],l[k+20&4294967295]&255,l[k+21&4294967295]&255),L=1;else if(46==i){i=3==(l[q+15&4294967295]&255|0)?47:49;d:do if(47==i){if(0!=(b=h[q+19&4294967295],128<=b?b-256:b)){i=49;break d}me(l[q+18&4294967295]&255,0);de(a[(xb+4*(l[q+14&4294967295]&255)&4294967295)>>2],l[q+20&4294967295]&255,l[q+21&4294967295]&255);L=1;i=51;break c}while(0);if(!(0>(a[Nh>>2]|0))){i=51;break c}me(l[q+18&4294967295]&255,0);de(a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2],l[k+20&4294967295]&255,l[k+21&4294967295]&255)}while(0);i=2==(l[j+15&4294967295]&255|0)?54:52;c:do if(52==i){if(0!=(a[(a[(j+8&4294967295)>>2]+4&4294967295)>>2]&256|0)){i=54;break c}if(0!=(a[(z+4&4294967295)>>2]&33554432|0)){i=54;break c}if(0==(P[(k+4&4294967295)>>1]&8|0)){i=58;break c}Ve(50,0);i=58;break c}while(0);c:do if(54==i){Ed(0,1,k,d);a[oc>>2]=a[sc>>2];a[tb>>2]=a[Sb>>2];ce(z,0,v,k,0);if(0==(P[(k+4&4294967295)>>1]&8|0)){i=58;break c}Ve(25,1);ce(z,0,v,k,0)}while(0);i=0!=(L|0)?59:60;if(59==i)vk();else if(60==i){var hd=k+4&4294967295;t[hd>>1]=(P[hd>>1]&65535|8192)&65535}Ed(0,0,k,d);a[ub>>2]=a[$b>>2];a[vc>>2]=a[Gb>>2];a[pa>>2]=a[xc>>2];a[fc>>2]=a[qe>>2];ce(z,0,v,k,0);if(0!=(l[k+19&4294967295]&255|0)){i=133;break b}if(0!=(l[n+19&4294967295]&255|0)){i=133;break b}i=7==(l[q+15&4294967295]&255|0)?64:65;64==i&&Ve(20,0);if(6!=(l[q+15&4294967295]&255|0)){i=133;break b}Ve(12,0)}else if(67==i){i=2==(l[q+15&4294967295]&255|0)?68:69;c:do if(68==i)me(l[k+18&4294967295]&255,0),de(a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2],l[k+20&4294967295]&255,l[k+21&4294967295]&255);else if(69==i)if(i=3==(l[q+15&4294967295]&255|0)?70:71,70==i)me(l[q+18&4294967295]&255,0),de(a[(xb+4*(l[q+14&4294967295]&255)&4294967295)>>2],l[q+20&4294967295]&255,l[q+21&4294967295]&255);else if(71==i){if(!(0>(a[Nh>>2]|0))){i=73;break c}me(l[k+18&4294967295]&255,0);de(a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2],l[k+20&4294967295]&255,l[k+21&4294967295]&255)}while(0);i=2==(l[q+15&4294967295]&255|0)?76:74;c:do if(74==i){i=3==(l[q+15&4294967295]&255|0)?75:77;if(75==i&&0==(l[q+19&4294967295]&255|0)){i=76;break c}var he=k+4&4294967295;t[he>>1]=(P[he>>1]&65535|8192)&65535;i=78;break c}while(0);76==i&&vk();Ed(0,0,k,d);ea=v;Mb=ea+48;Ca=0;0>Ca&&(Ca+=256);for(Ca=Ca+(Ca<<8)+(Ca<<16)+16777216*Ca;0!==ea%4&&ea<Mb;)h[ea++]=0;ea>>=2;for(kb=Mb>>2;ea<kb;)a[ea++]=Ca;for(ea<<=2;ea<Mb;)h[ea++]=0;a[Jc>>2]=2*a[Zb>>2]&4294967295;a[Ub>>2]=a[mc>>2];a[wb>>2]=a[xe>>2];a[rc>>2]=a[pc>>2];a[Pa>>2]=a[Oc>>2];i=0!=(P[(k+4&4294967295)>>1]&8|0)?79:80;79==i&&ce(a[(k+8&4294967295)>>2],0,v,k,0);ce(a[(k+8&4294967295)>>2],0,v,k,0)}else if(81==i){ea=v;Mb=ea+48;Ca=0;0>Ca&&(Ca+=256);for(Ca=Ca+(Ca<<8)+(Ca<<16)+16777216*Ca;0!==ea%4&&ea<Mb;)h[ea++]=0;ea>>=2;for(kb=Mb>>2;ea<kb;)a[ea++]=Ca;for(ea<<=2;ea<Mb;)h[ea++]=0;i=0!=(P[(k+4&4294967295)>>1]&1|0)?83:82;82==i&&(me(l[k+18&4294967295]&255,0),de(a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2],l[k+20&4294967295]&255,l[k+21&4294967295]&255));i=8==(l[j+
15&4294967295]&255|0)?84:85;84==i&&(a[Uc>>2]=0);Ed(0,0,k,d);a[Cd>>2]=2*a[yc>>2]&4294967295;a[Wc>>2]=a[Vc>>2];a[xd>>2]=a[kc>>2];i=2==(l[q+15&4294967295]&255|0)?86:87;if(86==i)vk(),ce(a[(k+8&4294967295)>>2],0,v,k,0);else if(87==i){i=2==(l[j+15&4294967295]&255|0)?88:90;c:do if(88==i){if(0==(P[(k+4&4294967295)>>1]&1|0)){i=90;break c}ce(a[(k+8&4294967295)>>2],0,v,k,0);i=133;break b}while(0);a[Uc>>2]=0;ce(a[(k+8&4294967295)>>2],0,v,k,0);a[Uc>>2]=0}}else if(91==i){ea=v;Mb=ea+48;Ca=0;0>Ca&&(Ca+=256);for(Ca=Ca+(Ca<<8)+(Ca<<16)+16777216*Ca;0!==ea%4&&ea<Mb;)h[ea++]=0;ea>>=2;for(kb=Mb>>2;ea<kb;)a[ea++]=Ca;for(ea<<=2;ea<Mb;)h[ea++]=0;x=0;i=0!=(a[(a[(k+8&4294967295)>>2]+4&4294967295)>>2]&128|0)?92:93;92==i&&(x=5);i=0!=(P[(k+4&4294967295)>>1]&1|0)?95:94;94==i&&(me(l[k+18&4294967295]&255,0),de(a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2],l[k+20&4294967295]&255,l[k+21&4294967295]&255));i=8==(l[j+15&4294967295]&255|0)?96:97;96==i&&(a[Uc>>2]=0);i=2==(l[q+15&4294967295]&255|0)?98:99;98==i&&vk();Ed(0,0,k,d);a[Kc>>2]=2*a[Rc>>2]&4294967295;a[md>>2]=a[cf>>2];a[Qc>>2]=a[Ne>>2];a[Za>>2]=a[Lc>>2];a[yd>>2]=a[Nc>>2];ce(a[(k+8&4294967295)>>2],0,v,k,x)}else if(100==i){z=a[(k+8&4294967295)>>2];r=l[k+1&4294967295]&15;ea=v;Mb=ea+48;Ca=0;0>Ca&&(Ca+=256);for(Ca=Ca+(Ca<<8)+(Ca<<16)+16777216*Ca;0!==ea%4&&ea<Mb;)h[ea++]=0;ea>>=2;for(kb=Mb>>2;ea<kb;)a[ea++]=Ca;for(ea<<=2;ea<Mb;)h[ea++]=0;Ed(0,0,k,d);a[gb>>2]=2*a[O>>2]&4294967295;var Id=a[fd>>2];a[Bd>>2]=Id;i=0!=(Id|0)?101:103;c:do if(101==i){if(0!=(a[od>>2]&2|0)){i=103;break c}a[pd>>2]=a[Tb>>2];i=107;break c}while(0);c:do if(103==i){if(0==(l[j+15&4294967295]&255|0)){i=107;break c}Ed(0,0,j,C);var og=a[Oe>>2];a[Jd>>2]=og;i=0!=(og|0)?105:106;105==i&&(a[be>>2]=a[pf>>2]);a[Xc>>2]=a[qf>>2];a[pe>>2]=a[Ke>>2]}while(0);i=0==(a[Ec>>2]|0)?108:109;108==i&&(a[Bc>>2]=1,a[Hd>>2]=1,a[qc>>2]=a[Vd>>2]);a[nd>>2]=a[ad>>2];p=a[(xb+4*(l[k+14&4294967295]&255)&4294967295)>>2];u=0;i=0!=(l[k+3&4294967295]&255|0)?110:112;c:do if(110==i){Vr(l[k+3&4294967295]&255,B);p=rs(a[uc>>2]);if(!(0<(a[Ic>>2]|0))){i=112;break c}u=rs(a[Yc>>2])}while(0);vk();x=2;i=1>=(r|0)?113:114;c:do if(113==i)x=1;else if(114==i){if(!(7<=(r|0))){i=116;break c}x=3}while(0);i=5==(l[j+15&4294967295]&255|0)?118:117;c:do if(117==i){if(7==(l[j+15&4294967295]&255|0)){i=118;break c}i=3==(l[j+15&4294967295]&255|0)?121:120;d:do if(120==i){if(8==(l[j+15&4294967295]&255|0)){i=121;break d}i=0!=(P[(k+4&4294967295)>>1]&1|0)?124:123;123==i&&(me(l[k+18&4294967295]&255,u),de(p,l[k+20&4294967295]&255,l[k+21&4294967295]&255));ce(z,1,v,k,x);i=125;break c}while(0);me(l[k+18&4294967295]&255,u);ce(z,1,v,k,x);de(p,l[k+20&4294967295]&255,l[k+21&4294967295]&255);i=125;break c}while(0);118==i&&(me(l[k+18&4294967295]&255,u),de(p,l[k+20&4294967295]&255,l[k+21&4294967295]&255),ce(z,1,v,k,x));i=0!=(a[Bs>>2]|0)?126:127;126==i&&mf(7,a[qj>>2],0,a[(a[(k+8&4294967295)>>2]&4294967295)>>2]);a[bd>>2]=a[td>>2];a[gd>>2]=a[Wd>>2];a[Ka>>2]=0;a[Sd>>2]=0;var cd=a[wd>>2];a[Od>>2]=cd;i=0!=(cd|0)?128:129;c:do if(128==i)a[ge>>2]=a[qd>>2];else if(129==i){if(0==(l[q+15&4294967295]&255|0)){i=132;break c}a[Pd>>2]=0;Ed(0,0,q,E);a[Kd>>2]=1;a[Rd>>2]=a[Ld>>2];a[Xd>>2]=a[Ud>>2];var Gd=a[Ee>>2];a[Xb>>2]=Gd;if(0==(Gd|0)){i=132;break c}a[Fd>>2]=a[kf>>2]}while(0);ce(z,2,v,k,x)}while(0);a[Ge>>2]=a[Ge>>2]+1&4294967295;i=7}134==i?(Qp(1),i=0<(a[m>>2]|0)?135:136,135==i&&(mf(5,a[lf>>2],0,a[uk>>2]),a[m>>2]=0),g=0):14==i&&(g=1)}var pg=g;s=d;return pg}function me(b,c){var f;a[lm>>2]=a[V>>2];a[Qg>>2]=0;f=Fa+16*a[V>>2]&-1;a[(f&4294967295)>>2]=8;a[(f+4&4294967295)>>2]=0;a[(f+
8&4294967295)>>2]=c;a[(f+12&4294967295)>>2]=b;lc()}function de(b,c,f){var d;Qp(0);d=255==(c|0)?1:2;a:do if(1==d)c=55,f=76,b=a[(xb&4294967295)>>2],a[Nh>>2]=a[V>>2],a[Ng>>2]=0;else if(2==d){var i=f;a[Nh>>2]=a[V>>2];a[Ng>>2]=0;if(!(0>(i|0)))break a;f=0}while(0);d=Fa+16*a[V>>2]&-1;a[(d&4294967295)>>2]=9;a[(d+4&4294967295)>>2]=0;a[(d+8&4294967295)>>2]=b;a[(d+12&4294967295)>>2]=(65536*c&4294967295)+f&4294967295;lc()}function vk(){1==((a[Zf>>2]|0)==(a[Rg>>2]|0)?1:2)&&(a[Zf>>2]=a[V>>2])}function vn(c,m,f){var d=s;s+=8;la(d,0,8);var i,g=null,j,q=d+4;i=4==(f|0)?1:4;a:do if(1==i)i=0==(a[Sg>>2]|0)&0==(a[wk>>2]|0)?2:3,2==i?j=0:3==i&&(j=1);else if(4==i)if(i=2==(f|0)?5:8,5==i)h[rj]=0,a[wk>>2]=0,i=0!=(a[Sg>>2]|0)?6:7,6==i&&(Sd(a[Sg>>2]),a[Sg>>2]=0),a[Nc>>2]=0,Ry(),j=a[(Ub+24&4294967295)>>2]=0;else if(8==i)if(i=3==(f|0)?9:13,9==i)i=0==((l[Qm]?2:0)|0)?10:11,10==i?(h[rj]=0,h[Qm]=1):11==i&&(h[rj]=1,h[Qm]=0,Ur(fc&4294967295,Nc,0)),j=0;else if(13==i)if(i=5==(f|0)?14:15,14==i)a[Nc>>2]=0,Ry(),j=0;else if(15==i){i=0!=(c|0)?17:16;b:do if(16==i){i=0!=(m|0)?17:18;break b}while(0);17==i&&(a[Sg>>2]=c,a[wk>>2]=m,h[rj]=1,h[Qm]=0);i=0==(a[Sg>>2]|0)&0==(a[wk>>2]|0)?19:20;if(19==i)a[xk>>2]=0,j=h[rj]=0;else if(20==i){i=0!=(a[Sg>>2]|0)?21:23;b:do if(21==i){if(0==((b=t[(a[Sg>>2]+12&4294967295)>>1],32768<=b?b-65536:b)&32|0)){i=23;break b}h[rj]=0;Sd(a[Sg>>2]);j=a[Sg>>2]=0;i=39;break a}while(0);i=(a[ss>>2]|0)!=(a[(a[M>>2]+40&4294967295)>>2]|0)?24:25;24==i&&Xf(a[(a[M>>2]+40&4294967295)>>2]);var n;var k=a[Rb>>2],w=a[Sg>>2],r=a[wk>>2],x=d,L=q,v=s;s+=6500;la(v,0,6500);var p=void 0,u=null,z=void 0,C=void 0,E=void 0,B=void 0,H=void 0,D=void 0,K=void 0,I=void 0,N=v,X=v+4,T=void 0,R=void 0,G=v+8,Pb=v+12,S=void 0,Y=void 0,na=v+16,ja=void 0,aa=v+20,V=void 0,oa=void 0,ia=void 0,qa=void 0,xa=void 0,ua=void 0,Xa=void 0,Fa=void 0,bb=void 0,Va=void 0,Ua=void 0,eb=void 0,ya=void 0,va=void 0,Ya=void 0,Na=void 0,dc=void 0,Ia=void 0,ba=void 0,ta=void 0,qb=v+24,ob=v+28,Ra=v+1436,Sa=void 0,ac=v+5036,Ta=void 0,sb=void 0,pb=v+5736,cc=void 0,fb=v+5740,Q=void 0,tb=v+5744,Kb=void 0,Ga=void 0,Qb=void 0,gc=v+5748,hb=v+5900,cb=void 0,C=k,E=w,B=r,H=x,D=L,R=T=a[X>>2]=0;a[Pb>>2]=32;Y=0;ia=oa=a[aa>>2]=0;qa=1;Ya=va=ya=eb=Ua=Fa=Xa=0;Sa=a[qb>>2]=0;p=0==(C|0)?1:2;c:do if(1==p)z=0;else if(2==p){a[Lg>>2]=B;a[lj>>2]=B;a[wf>>2]=0;a[vr>>2]=0;a[Ee>>2]=0;h[wr]=0;var ga=a[lf>>2];a[$f>>2]=ga;p=0>(ga|0)?3:4;3==p&&(a[$f>>2]=0);a[ur>>2]=a[Nl>>2]+1&4294967295;K=0;d:for(;;){t[(ob+2*K&4294967295)>>1]=0;var ka=K+1&4294967295,K=ka;if(700>(ka|0))p=5;else{p=6;break d}}var Aa=C,rb=E,Ba=td&4294967295,Dc=ob&4294967295,$b=qb,hc=pb,ub=Cs&4294967295,ha=s;s+=1136;la(ha,0,1136);var A=void 0,mb=null,ic=void 0,sa=ha+4,Wa=void 0,Jb=void 0,jb=void 0,Ja=void 0,ca=ha+8,Ab=void 0,Lb=void 0,ec=void 0,Bb=void 0,Ha=void 0,vb=void 0,da=void 0,$c=void 0,ng=void 0,Vb=void 0,Db=void 0,nc=void 0,Gb=void 0,Zb=void 0,db=void 0,Hb=void 0,Ib=ha+12,Wb=ha+1040,ea=void 0,Mb=ha+1064,kb=ha+1104,Ca=void 0,Jb=Wa=a[ha>>2]=32,Hb=db=Zb=Gb=Db=ng=Bb=ec=a[ca>>2]=0,A=0!=(l[Rm]&1|0)?1:2;1==A&&(a[xk>>2]=0,h[Rm]=0);a[(Aa+652&4294967295)>>2]=0;a[(Aa+8304&4294967295)>>2]=0;a[(Aa+8308&4294967295)>>2]=0;h[ni]=0;a[hc>>2]=0;h[ub]=0;a[Jg>>2]=rb;A=0!=(a[Sm>>2]|0)?3:4;if(3==A){fa(Ba,a[Sm>>2]);var mc=$(a[Sm>>2]);a[ca>>2]=a[ca>>2]+mc&4294967295;a[Sm>>2]=0}A=0!=(a[ag>>2]|0)?5:6;if(5==A)a[sa>>2]=a[ag>>2];else if(6==A){var rc=Ld();a[sa>>2]=rc}var Tb=Wb&4294967295,oc=Wb&4294967295,Bc=Wb+1&4294967295,Fb=Wb+2&4294967295,uc=Wb+1&4294967295,Ic=Wb&4294967295,lc=Ib&4294967295,wd=kb&4294967295,Tc=Mb&4294967295,pa=kb&4294967295,qe=Mb&4294967295,Uc=Mb&4294967295;d:for(;;){if(!(0==(Kd()|0)|0!=(a[lk>>2]|0)|0!=(a[ag>>2]|0)|0<=(a[Eh>>2]|0))){A=256;break d}A=0!=(Mp(a[ha>>2])|0)?16:10;e:do if(10==A){A=0<(a[xr>>2]|0)?11:13;if(11==A&&(a[lf>>2]|0)>(a[xr>>2]|0)){A=12;break d}if(!(0<(a[Tm>>2]|0))){A=16;break e}if((a[lf>>2]|0)>(a[Tm>>2]|0)){A=15;break d}}while(0);Jb=Wa;Wa=a[ha>>2];a[ha>>2]=a[sa>>2];A=0<=(a[Eh>>2]|0)?17:19;e:do if(17==A){if(0!=((b=h[Um+a[Eh>>2]&4294967295],128<=b?b-256:b)|0)){A=19;break e}a[Eh>>2]=-1}while(0);var ud=a[Eh>>2];0==(ud|0)&0==(a[ag>>2]|0)?(mb=19,A=20):(mb=19,A=21);if(20==A){var Jc=a[Eh>>2],Rd=Jc+1&4294967295;a[Eh>>2]=Rd;var Ud=(b=h[Um+Jc&4294967295],128<=b?b-256:b);a[ha>>2]=Ud;mb=20}A=0<=((20==mb?Rd:ud)|0)?22:23;e:do if(22==A){var xe=a[Eh>>2];a[Eh>>2]=xe+1&4294967295;var wb=(b=h[Um+xe&4294967295],128<=b?b-256:b);a[sa>>2]=wb}else if(23==A){var pc=Ld();a[sa>>2]=pc;if(0==(Kd()|0)){A=25;break e}a[sa>>2]=32}while(0);a[ag>>2]=0;A=0!=(a[Bo>>2]|0)?26:72;e:do if(26==A){if(0!=(Bb|0)){A=72;break e}A=38!=(a[io>>2]|0)?28:50;f:do if(28==A){if(38!=(a[ha>>2]|0)){A=50;break f}A=35==(a[sa>>2]|0)?31:30;if(30==A&&!(97<=(a[sa>>2]|0)&122>=(a[sa>>2]|0))){A=50;break f}Ha=0;a[ha>>2]=a[sa>>2];g:for(;;){if(0!=(Kd()|0)){A=36;break g}if(!(0!=(Mp(a[ha>>2])|0)|35==(a[ha>>2]|0))){A=36;break g}if(!(20>(Ha|0))){A=36;break g}var Xd=a[ha>>2]&255,Fd=Ha,Ha=Fd+1&4294967295;h[Wb+Fd&4294967295]=Xd;var Pa=Ld();a[ha>>2]=Pa;A=32}h[Wb+Ha&4294967295]=0;var yc=Ld();a[sa>>2]=yc;U(Um&4294967295,Sy&4294967295,e([Tb,0,0,0,a[ha>>2],0,0,0,a[sa>>2],0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0],y));A=59==(a[ha>>2]|0)?37:44;g:do if(37==A){A=35==((b=h[oc],128<=b?b-256:b)|0)?38:41;h:do if(38==A)if(A=120==((b=h[Bc],128<=b?b-256:b)|0)?39:40,39==A)var Cd=zb(Fb,fs&4294967295,e([ha,0,0,0],["i32*",0,0,0],y)),$c=Cd,mb=39;else{if(40==A)var Vc=zb(uc,Lh&4294967295,e([ha,0,0,0],["i32*",0,0,0],y)),$c=Vc,mb=40}else if(41==A){var Wc=Ff(sj&4294967295,Ic),$c=Wc;if(-1==(Wc|0)){A=46;break g}var Jd=$c;a[ha>>2]=Jd;if(0==(a[sa>>2]|0))mb=42;else{mb=42;A=45;break h}a[sa>>2]=32;var xd=$c,mb=43}while(0);if(0>=((40==mb?Vc:39==mb?Cd:42==mb?Jd:xd)|0)){A=46;break g}if(!(32>=(a[ha>>2]|0))){A=72;break e}if(!(20==(a[si>>2]|0)|36==(a[si>>2]|0))){A=72;break e}a[ha>>2]=a[ha>>2]+57344&4294967295;A=72;break e}else 44==A&&($c=-1);while(0);a[Eh>>2]=0;a[ha>>2]=38;a[sa>>2]=32;A=72;break e}while(0);if(!(60==(a[ha>>2]|0)&60!=(a[io>>2]|0))){A=72;break e}A=33==(a[sa>>2]|0)?52:56;if(52==A){for(;;){if(0!=(Kd()|0)){A=55;break}if(62==(a[ha>>2]|0)){A=55;break}var Rc=Ld();a[ha>>2]=Rc;A=52}a[sa>>2]=32}else if(56==A){A=47==(a[sa>>2]|0)?58:57;if(57==A&&0==(jf(a[sa>>2])|0)){A=72;break e}Ha=0;for(a[ha>>2]=a[sa>>2];;){if(0!=(Kd()|0)){A=63;break}if(62==(a[ha>>2]|0)){A=63;break}if(!(256>(Ha|0))){A=63;break}var Kc=a[ha>>2],cf=Ha,Ha=cf+1&4294967295;a[(Ib+4*cf&4294967295)>>2]=Kc;var be=Ld();a[ha>>2]=be;A=59}a[(Ib+4*Ha&4294967295)>>2]=0;a[sa>>2]=32;Vb=0;A=47==(a[(Ib+4*(Ha-1&4294967295)&4294967295)>>2]|0)?64:65;64==A&&(a[(Ib+4*(Ha-1&4294967295)&4294967295)>>2]=32,Vb=1);var Ne,pe=lc,Lc=Ba,Za=ca,Dd=Vb,yd=s;s+=376;la(yd,0,376);var O=void 0,gb=null,fd=void 0,wc=void 0,od=void 0,Gd=void 0,pd=void 0,Ec=void 0,Td=void 0,ce=void 0,Vd=void 0,qc=void 0,ad=void 0,jd=void 0,We=void 0,Oi=void 0,Ie=void 0,Qd=void 0,bd=yd+40,Wd=void 0,gd=void 0,Ka=yd+120,gb=wc=0;f:for(;;){if(!(39>(4==gb?qd:0)>>>0)){O=5;break f}var Ye=a[(pe+4*wc&4294967295)>>2],Gd=Ye;if(0==(Ye|0)){O=5;break f}if(0!=(kc(Gd)|0)){O=5;break f}var of=(b=Gd&255,128<=b?b-256:b),Od=$k(of)&255;h[yd+wc&4294967295]=Od;var qd=wc+1&4294967295,wc=qd,gb=4,O=1}h[yd+wc&4294967295]=0;qc=pe+4*wc&4294967295;O=47==((b=h[yd&4294967295],128<=b?b-256:b)|0)?6:9;f:do if(6==O){var ge=Ff(Eb&4294967295,yd+1&4294967295),pd=ge,O=16!=(ge|0)?7:8;if(7==O){var Ph=Za,Qh=a[Ph>>2];a[Ph>>2]=Qh+1&4294967295;h[Lc+Qh&4294967295]=32}var af=pd+32&4294967295,pd=af,gb=8,O=14;break f}else if(9==O){var Af=Ff(Eb&4294967295,yd&4294967295),pd=Af,O=16!=(Af|0)?10:11;if(10==O){var ff=Za,Gf=a[ff>>2];a[ff>>2]=Gf+1&4294967295;h[Lc+Gf&4294967295]=32}var Ue=pd;if(0!=(Dd|0))gb=11;else{gb=11;O=14;break f}if(0!=(b=h[Ty+Ue&4294967295],128<=b?b-256:b))gb=12;else{gb=12;O=14;break f}fd=0;O=113;break f}while(0);f:do if(14==O){var Xb=12==gb?Ue:8==gb?af:Ue,Vd=0,Oi=16384,Fe=Ma[Yc>>2],gd=Vf+76*(Fe-1&4294967295)&4294967295;10==Xb?(gb=14,O=15):3==Xb?(gb=14,O=20):12==Xb?(gb=14,O=25):42==Xb?(gb=14,O=31):35==Xb?(gb=14,O=31):44==Xb?(gb=14,O=31):4==Xb?(gb=14,O=32):36==Xb?(gb=14,O=39):9==Xb?(gb=14,O=42):14==Xb?(gb=14,O=44):41==Xb?(gb=14,O=45):46==Xb?(gb=14,O=45):5==Xb?(gb=14,O=46):11==Xb?(gb=14,O=51):43==Xb?(gb=14,O=66):13==Xb?(gb=14,O=67):1==Xb?(gb=14,O=79):2==Xb?(gb=14,O=85):33==Xb?(gb=14,O=88):34==Xb?(gb=14,O=92):15==Xb?(gb=14,O=96):47==Xb?(gb=14,O=96):6==Xb?(gb=14,O=97):7==Xb?(gb=14,O=100):38==Xb?(gb=14,O=105):39==Xb?(gb=14,O=108):(gb=14,O=112);g:do if(15==O){Wd=Np(pd);ad=vc(qc,Uy&4294967295);jd=vc(qc,Vy&4294967295);O=0==(cs(ad,Wy&4294967295)|0)?16:17;h:do if(16==O)Ec=jj(jd,Vm&4294967295),a[((Wd+4&4294967295)+20&4294967295)>>2]=Ec;else if(17==O){if(0!=(cs(ad,Xy&4294967295)|0)){O=19;break h}Ec=jj(jd,Ol&4294967295);a[((Wd+4&4294967295)+24&4294967295)>>2]=Ec}while(0);Km(Lc,Za)}else if(20==O){Wd=Np(pd);for(Qd=1;;){var Ve=vc(qc,a[(yk+4*Qd&4294967295)>>2]),ad=Ve,O=0!=(Ve|0)?22:23;if(22==O){var Oe=Qd,mf=ad,pf=Wd,Ge=s;s+=4;la(Ge,0,4);var qf=void 0,Xc=void 0,Xe=void 0,oe=void 0,we=Ge,Ae=void 0,Xc=Oe,Xe=mf,oe=pf,hf=jj(Xe,a[(Pl+4*Xc&4294967295)>>2]);a[we>>2]=hf;var Rf=Xc,qf=0<=(hf|0)?1:2;if(1==qf)a[((oe+4&4294967295)+4*Xc&4294967295)>>2]=(a[we>>2]*a[((dl+4&4294967295)+4*Rf&4294967295)>>2]&4294967295|0)/100|0;else if(2==qf){var mg=Rf,tf=Xe,me=we,Pe=s;s+=4;la(Pe,0,4);var Qa=void 0,de=null,hd=void 0,he=void 0,Id=void 0,og=void 0,cd=void 0,he=tf,Id=0,If=0!=(kc(a[he>>2])|0),pg=he;If?(de=0,Qa=1):(de=0,Qa=2);i:do if(1==Qa)for(;;){var he=(1==de?qg:pg)+4&4294967295,ld=0!=(kc(a[he>>2])|0),qg=he;if(ld)Qa=de=1;else{de=1;break i}}while(0);Qa=43==(a[(0==de?pg:qg)>>2]|0)?3:4;3==Qa&&(he=he+4&4294967295,Id=1);Qa=45==(a[he>>2]|0)?5:6;5==Qa&&(he=he+4&4294967295,Id=-1);var sg=he,zf=Pe,Je=s;s+=80;la(Je,0,80);var nf=void 0,bf=null,ae=void 0,ne=void 0,ae=sg,nf=0!=(Qc(a[ae>>2])|0)?1:2;i:do if(1==nf)for(;;)if(ae=ae+4&4294967295,0!=(Qc(a[ae>>2])|0))nf=1;else break i;while(0);ne=0;for(bf=2;80>((5==bf?Ef:0)|0);){h[Je+ne&4294967295]=a[(ae+4*ne&4294967295)>>2]&255;var gg=(b=h[Je+ne&4294967295],128<=b?b-256:b);if(0!=(Qc(gg)|0))break;var Ef=ne+1&4294967295,ne=Ef,bf=5}a[zf>>2]=ae+4*ne&4294967295;var Fg=dI(Je&4294967295);s=Je;og=Fg;Qa=(a[Pe>>2]|0)==(he|0)?7:8;i:do if(7==Qa)a[me>>2]=100,hd=2;else if(8==Qa)if(Qa=37==(a[a[Pe>>2]>>2]|0)?9:12,9==Qa)Qa=0!=(Id|0)?10:11,10==Qa&&(og=100+(Id|0)*og),a[me>>2]=og|0,hd=2;else if(12==Qa){Qa=115==(a[(a[Pe>>2]&4294967295)>>2]|0)?13:15;j:do if(13==Qa){if(116!=(a[(a[Pe>>2]+4&4294967295)>>2]|0))break j;cd=100*Math.pow(2,og*(Id|0)/12);a[me>>2]=cd|0;hd=2;break i}while(0);Qa=1==(mg|0)?16:20;16==Qa?(Qa=0==(Id|0)?17:18,17==Qa?a[me>>2]=100*og|0:18==Qa&&(a[me>>2]=(100*(Id|0)*og|0)+100&4294967295),hd=2):20==Qa&&(a[me>>2]=og|0,hd=Id)}while(0);var Gg=hd;s=Pe;Ae=Gg;qf=0==(Ae|0)?3:4;if(3==qf)a[((oe+
4&4294967295)+4*Xc&4294967295)>>2]=a[we>>2];else if(4==qf){var Hf=a[(kj+4*Xc&4294967295)>>2],Sf=a[we>>2],qf=2==(Ae|0)?5:6;5==qf?a[((oe+4&4294967295)+4*Xc&4294967295)>>2]=(Sf*Hf&4294967295|0)/100|0:6==qf&&(a[((oe+4&4294967295)+4*Xc&4294967295)>>2]=(Ae*Sf&4294967295)+Hf&4294967295)}}s=Ge}var Tf=Qd+1&4294967295,Qd=Tf;if(4>=(Tf|0))O=21;else{O=24;break}}Km(Lc,Za)}else if(25==O){var Wd=Np(pd),Ec=3,Yf=vc(qc,Yy&4294967295),ad=Yf,O=0!=(Yf|0)?26:27;26==O&&(Ec=jj(ad,Ql&4294967295));var Zf=Ec,O=1==(a[((a[Rb>>2]&4294967295)+224&4294967295)>>2]|0)?28:29;28==O?(a[((Wd+4&4294967295)+16&4294967295)>>2]=l[Zy+Zf&4294967295]&255,a[((Wd+4&4294967295)+8&4294967295)>>2]=l[$y+Ec&4294967295]&255):29==O&&(a[((Wd+4&4294967295)+48&4294967295)>>2]=Zf);Km(Lc,Za)}else if(31==O)ds(pd,Lc,Za);else if(32==O){ad=vc(qc,az&4294967295);jd=vc(qc,bz&4294967295);We=vc(qc,cz&4294967295);Ec=jj(ad,tj&4294967295);Td=jj(jd,Ds&4294967295);O=1==(Td|0)?33:34;33==O&&(Ec=19);ce=co(We,0,0);O=64==(Ec|0)?35:38;35==O&&(O=1>=(ce|0)?36:37,36==O?Ec=193:37==O&&(Ec=ce+64&4294967295));U(bd&4294967295,dz&4294967295,e([1,0,0,0,Ec,0,0,0],["i32",0,0,0,"i32",0,0,0],y));fa(Lc+a[Za>>2]&4294967295,bd&4294967295);var Pg=$(bd&4294967295),Jf=Za;a[Jf>>2]=a[Jf>>2]+Pg&4294967295;a[Es>>2]=a[Za>>2];a[si>>2]=Ec}else if(39==O){O=36==(a[si>>2]|0)?40:41;if(40==O){h[Lc+a[Za>>2]&4294967295]=0;var ch=Lc,eh=a[Es>>2],jh=Za,Re=s;s+=40;la(Re,0,40);var vq=void 0,xg=void 0,Pf=void 0,Dg=void 0,Eg=Re,df=void 0,Qe=void 0,Uf=void 0,xg=ch,Pf=eh,Dg=jh,uh=Eg,Bf=void 0,Qi=void 0,uf=void 0,Mg=void 0,Bf=zk,Qi=uh,uf=Bf+40;if(Qi%4==Bf%4){for(;0!==Bf%4&&Bf<uf;)h[Qi++]=h[Bf++];Bf>>=2;Qi>>=2;for(Mg=uf>>2;Bf<Mg;)a[Qi++]=a[Bf++];Bf<<=2;Qi<<=2}for(;Bf<uf;)h[Qi++]=h[Bf++];var Uf=xg+Pf&4294967295,Ng=Ff(Eg&4294967295,Uf),Qe=Ng,vq=0!=(Ng|0)?1:2;1==vq&&(df=De(Qe,Uf),a[Dg>>2]=df+Pf&4294967295);s=Re}var Og=Za,Qg=a[Og>>2];a[Og>>2]=Qg+1&4294967295;h[Lc+Qg&4294967295]=1;var Rg=Za,Tg=a[Rg>>2];a[Rg>>2]=Tg+1&4294967295;h[Lc+Tg&4294967295]=89;a[si>>2]=0}else if(42==O){var Ug=vc(qc,ez&4294967295),ad=Ug;if(0==(Ug|0)){O=112;break g}h[uj]=1;var Kh=Fl(Lc+a[Za>>2]&4294967295,ad,700-a[Za>>2]&4294967295),Vg=Za;a[Vg>>2]=a[Vg>>2]+Kh&4294967295}else if(44==O)h[uj]=1;else if(45==O)h[uj]=0;else if(46==O){var Wg=vc(qc,Lm&4294967295),ad=Wg;if(0==(Wg|0)){O=112;break g}Fl(bd&4294967295,ad,80);O=0==(nb(yr&4294967295,bd&4294967295)|0)?48:49;if(48==O){h[Rm]=1;h[yr&4294967295]=0;fd=16384;O=113;break f}else if(49==O){var Xg=$r(bd&4294967295,0),od=Xg;if(!(0<=(Xg|0))){O=112;break g}U(bd&4294967295,fz&4294967295,e([1,0,0,0,od,0,0,0],["i32",0,0,0,"i32",0,0,0],y));fa(Lc+a[Za>>2]&4294967295,bd&4294967295);var Lf=$(bd&4294967295),Zg=Za;a[Zg>>2]=a[Zg>>2]+Lf&4294967295}}else if(51==O){var Wd=Np(pd),Th=vc(qc,gz&4294967295),ad=Th,O=0!=(Th|0)?52:62;h:do if(52==O)if(Fl(bd&4294967295,ad,80),O=0==(a[Fs>>2]|0)?53:59,53==O){O=0!=(a[vj>>2]|0)?54:56;i:do if(54==O){if(47==((b=h[bd&4294967295],128<=b?b-256:b)|0)){O=56;break i}U(Ka&4294967295,hz&4294967295,e([a[vj>>2],0,0,0,bd&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));var ah=jx(Ka&4294967295),od=ah,gb=55,O=57;break i}while(0);if(56==O)var bh=jx(bd&4294967295),od=bh,gb=56;if(!(0<=((56==gb?bh:ah)|0))){O=62;break h}U(bd&4294967295,iz&4294967295,e([1,0,0,0,od,0,0,0],["i32",0,0,0,"i32",0,0,0],y));fa(Lc+a[Za>>2]&4294967295,bd&4294967295);var Nh=$(bd&4294967295),dh=Za;a[dh>>2]=a[dh>>2]+Nh&4294967295;a[(Wd+4&-1)>>2]=1}else if(59==O){var hh=$r(bd&4294967295,0),od=hh;if(!(0<=(hh|0))){O=62;break h}Ie=a[mk>>2]+od&4294967295;if(0!=(Bi[a[Fs>>2]](1,Ie,a[vj>>2])|0)){O=62;break h}U(bd&4294967295,jz&4294967295,e([1,0,0,0,od,0,0,0],["i32",0,0,0,"i32",0,0,0],y));fa(Lc+a[Za>>2]&4294967295,bd&4294967295);var Vh=$(bd&4294967295),kh=Za;a[kh>>2]=a[kh>>2]+Vh&4294967295;a[(Wd+4&-1)>>2]=1}while(0);Km(Lc,Za);O=0!=(Dd|0)?63:64;63==O?ds(pd,Lc,Za):64==O&&(h[jo]=1);fd=16384;O=113;break f}else if(66==O){ds(pd,Lc,Za);h[jo]=0;fd=16384;O=113;break f}else if(67==O){var Ec=21,Oi=16384,fg=vc(qc,kz&4294967295),ad=fg,O=0!=(fg|0)?68:71;if(68==O){Ec=jj(ad,Ak&4294967295);O=3>(Ec|0)?69:70;if(69==O){U(Lc+a[Za>>2]&4294967295,lz&4294967295,e([1,0,0,0,Ec,0,0,0],["i32",0,0,0,"i32",0,0,0],y));var lh=Za;a[lh>>2]=a[lh>>2]+3&4294967295;Oi=0}Ec=a[(mz+4*Ec&4294967295)>>2]}var rh=vc(qc,nz&4294967295),jd=rh,O=0!=(rh|0)?72:74;h:do if(72==O){var fh=(25*co(jd,0,1)&4294967295|0)/(a[(wa&4294967295)>>2]|0)|0,Ec=fh;if(0==(Oi|0))gb=72;else{gb=72;O=76;break h}Oi=16384;O=75;break h}else if(74==O)if(0!=(Oi|0)){O=75;break h}else{O=112;break g}while(0);if(75==O)var mi=Ec,gb=75;O=4095<((75==gb?mi:fh)|0)?77:78;77==O&&(Ec=4095);fd=Ec+Oi&4294967295;O=113;break f}else if(79==O){var sh=vc(qc,oz&4294967295),ad=sh,O=0!=(sh|0)?80:82;h:do if(80==O){Fl(bd&4294967295,ad,80);var Ah=$r(bd&4294967295,0),od=Ah;if(!(0<=(Ah|0))){O=82;break h}a[vj>>2]=a[mk>>2]+od&4294967295}while(0);O=0==(Kg(qc,pd)|0)?83:84;if(83==O){fd=0;O=113;break f}else if(84==O){fd=147456;O=113;break f}}else if(85==O)if(O=0==(Kg(qc,pd)|0)?86:87,86==O){fd=0;O=113;break f}else{if(87==O){fd=147456;O=113;break f}}else if(88==O){for(;;){if(!(1<((90==gb?Bh:Fe)|0))){O=91;break}if(1==(a[(Vf+76*(a[Yc>>2]-1&4294967295)&-1)>>2]|0)){O=91;break}var Bh=a[Yc>>2]-1&4294967295;a[Yc>>2]=Bh;gb=90;O=88}fd=Kg(qc,pd)+524328&4294967295;O=113;break f}else if(92==O){for(;;){if(!(1<((94==gb?Dh:Fe)|0))){O=95;break}if(2==(a[(Vf+76*(a[Yc>>2]-1&4294967295)&-1)>>2]|0)){O=95;break}var Dh=a[Yc>>2]-1&4294967295;a[Yc>>2]=Dh;gb=94;O=92}var ui=Oi=0,fd=Kg(qc,pd)+ui&4294967295,O=113;break f}else if(96==O){fd=262174;O=113;break f}else if(97==O){O=6==(a[(gd&4294967295)>>2]|0)?98:99;98==O&&(Vd=Kg(qc,38));var yi=Kg(qc,pd),Vd=Vd|yi,fd=Vd+524358&4294967295,O=113;break f}else if(100==O){O=6==(a[(gd&4294967295)>>2]|0)?101:102;101==O&&(Vd=Kg(qc,38));O=7==(a[(gd&4294967295)>>2]|0)?103:104;if(103==O)var zd=Kg(qc,39),Vd=Vd|zd;var Ri=Kg(qc,pd),Vd=Vd|Ri,fd=Vd+524358&4294967295,O=113;break f}else if(105==O){O=6==(a[(gd&4294967295)>>2]|0)?106:107;106==O&&(Vd=Kg(qc,pd));fd=Vd+524328&4294967295;O=113;break f}else if(108==O){O=6==(a[(gd&4294967295)>>2]|0)?110:109;h:do if(109==O){if(7==(a[(gd&4294967295)>>2]|0)){O=110;break h}fd=524358;O=113;break f}while(0);fd=Kg(qc,pd)+524358&4294967295;O=113;break f}while(0);fd=0}while(0);var ef=fd;s=yd;vb=Ne=ef;if(0!=(Ne|0)){A=66;break d}a[ha>>2]=32;var zi=Ld();a[sa>>2]=zi;A=8;continue d}}while(0);a[io>>2]=0;if(0!=(l[uj]&1|0)){A=8;continue d}var Jh=Ma[ha>>2];if(10==(a[sa>>2]|0)&-1==(a[kn>>2]|0)){A=74;break d}A=1==(Jh|0)?80:79;e:do if(79==A){var Ai=a[ha>>2],Hi=(b=h[zr],128<=b?b-256:b),A=(Ai|0)==(Hi|0)?80:97;break e}while(0);e:do if(80==A){if(86==(a[sa>>2]|0)){A=81;break d}if(66!=(a[sa>>2]|0)){A=97;break e}var Ji=Ba+a[ca>>2]&4294967295,tc,ue,Uh,eg;tc=Mr&4294967295;ue=Ji;for(Uh=tc+4;tc<Uh;)h[ue++]=h[tc++];a[ca>>2]=a[ca>>2]+3&4294967295;var Mh=Ld();a[sa>>2]=Mh;A=48==(Mh|0)?89:90;f:do if(89==A)a[Fi>>2]=0;else if(90==A){a[Fi>>2]=1;a[(ln&4294967295)>>2]=0;if(49==(a[sa>>2]|0)){A=96;break f}for(Ab=0;;){if(0!=(kc(a[sa>>2])|0)){A=95;break}if(!(0!=(Kd()|0)^1)){A=95;break}var Mi=a[sa>>2],Oh=Ab,Ab=Oh+1&4294967295;a[(ln+4*Oh&4294967295)>>2]=Mi;var Vi=Ld();a[sa>>2]=Vi;var Xh=a[ca>>2];a[ca>>2]=Xh+1&4294967295;h[Ba+Xh&4294967295]=32;A=92}a[(ln+4*Ab&4294967295)>>2]=0;a[Fi>>2]=2}while(0);var ej=Ld();a[sa>>2]=ej;A=8;continue d}while(0);ec=ec+1&4294967295;A=0!=(Mp(a[ha>>2])|0)?98:99;e:do if(98==A)ng=1;else if(99==A){A=0!=(Zb|0)?100:101;100==A&&(Zb=0,a[ha>>2]=1328,Wf(a[sa>>2]),a[sa>>2]=32);if(0!=(ik(pz&4294967295,a[ha>>2])|0)){A=8;continue d}A=0!=(kc(a[ha>>2])|0)?103:109;f:do if(103==A){if(6972015!=(a[(Aa+280&4294967295)>>2]|0)){A=109;break f}ea=Ba+(a[ca>>2]-1&4294967295)&4294967295;if(105!=((b=h[ea&4294967295],128<=b?b-256:b)|0)){A=109;break f}A=46==((b=h[ea+-1&4294967295],128<=b?b-256:b)|0)?106:107;106==A&&(ea=ea+-1&4294967295);if(32==((b=h[ea+-1&4294967295],128<=b?b-256:b)|0)){A=108;break d}}while(0);if(3405!=(a[ha>>2]|0)){A=112;break e}if(8205!=(a[sa>>2]|0)){A=112;break e}a[ha>>2]=3406}while(0);A=0!=(ji(a[ha>>2])|0)?113:118;e:do if(113==A){var ki=Aa+8304&4294967295;a[ki>>2]=a[ki>>2]+1&4294967295;if(!(2==(a[bl>>2]|0)&0==(a[si>>2]|0))){A=120;break e}if(0!=(ji(Wa)|0)){A=120;break e}var li=Aa,pi=wd,Si=s;s+=124;la(Si,0,124);var wh=void 0,xh=void 0,Ch=Si+8,qi=Si+64,ri=Si+120;a[ri>>2]=es&4294967295;a[(Si+4&4294967295)>>2]=0;a[(Si&4294967295)>>2]=0;wh=0!=(Pd(li,ri,Ch&4294967295,Si&4294967295,0,0)|0)?1:2;1==wh?(Hg(li,Ch&4294967295,Si&4294967295,-1,0),gk(Ch&4294967295,qi&4294967295),U(pi,qz&4294967295,e([qi&4294967295,0,0,0],["i8*",0,0,0],y)),xh=pi):2==wh&&(xh=0);var qj=xh;s=Si;if(0==(qj|0)){A=120;break e}var vi=$(pa)+1&4294967295;tc=pa;ue=Tc;Uh=tc+vi;if(ue%4==tc%4&&8<vi){for(;0!==tc%4&&tc<Uh;)h[ue++]=h[tc++];tc>>=2;ue>>=2;for(eg=Uh>>2;tc<eg;)a[ue++]=a[tc++];tc<<=2;ue<<=2}for(;tc<Uh;)h[ue++]=h[tc++];Ab=$(qe);if(!(700>(Ab+a[ca>>2]&4294967295|0))){A=120;break e}fa(Ba+a[ca>>2]&4294967295,Uc);a[ca>>2]=a[ca>>2]+Ab&4294967295}else if(118==A){if(0==(jf(a[ha>>2])|0)){A=120;break e}var wi=Aa+8308&4294967295;a[wi>>2]=a[wi>>2]+1&4294967295}while(0);A=0!=(a[mr>>2]|0)?121:130;e:do if(121==A)if(A=0<(Bb|0)?122:123,122==A)Bb=Bb-1&4294967295;else if(123==A){var xi=a[ha>>2];91==(xi|0)?(mb=123,A=124):(mb=123,A=127);if(124==A)if(A=91==(a[sa>>2]|0)?125:126,125==A){Bb=-1;A=130;break e}else if(126==A)var Fj=a[ha>>2],mb=126;if(93!=((126==mb?Fj:xi)|0)){A=130;break e}if(93!=(a[sa>>2]|0)){A=130;break e}Bb=2}while(0);A=10==(a[ha>>2]|0)?131:148;if(131==A){for(Ja=0;;){if(0!=(Kd()|0)){A=137;break}if(0==(kc(a[sa>>2])|0)){A=137;break}A=10==(a[sa>>2]|0)?135:136;135==A&&(Ja=Ja+1&4294967295);var Gj=Ld();a[sa>>2]=Gj;A=132}if(0<(Ja|0)){A=138;break d}if((ec|0)<=(a[kn>>2]|0)){A=146;break d}ec=0}Gb=0;A=0==(Bb|0)&0==(a[si>>2]|0)?149:238;e:do if(149==A){nc=0;A=0!=(db|0)?150:155;f:do if(150==A){if(0!=(kc(a[ha>>2])|0)){A=155;break f}if(0==(Sb(a[ha>>2])|0)){A=153;break d}if(0==(kk(a[ha>>2])|0)){A=153;break d}db=0}while(0);A=46==(a[ha>>2]|0)?156:162;f:do if(156==A){if(46!=(a[sa>>2]|0)){A=162;break f}var Ci=Ld(),jb=Ci,A=46==(Ci|0)?158:159;g:do if(158==A)for(;;){a[ha>>2]=8230;a[sa>>2]=32;var Di=Ld(),jb=Di;if(46==(Di|0))A=158;else{A=159;break g}}while(0);var Gi=jb,A=8230==(a[ha>>2]|0)?160:161;160==A?a[sa>>2]=Gi:161==A&&Wf(Gi)}while(0);var Db=0,Ii=ik(Ar&4294967295,a[ha>>2]),da=Ii,A=0!=(Ii|0)?163:171;f:do if(163==A)if(Db=a[(Br+4*da&4294967295)>>2],A=0!=(Db&1048576|0)?164:165,164==A){Zb=1;a[hc>>2]=Db>>12&15;A=8;continue d}else if(165==A){A=0!=(kc(a[sa>>2])|0)?170:166;g:do if(166==A){if(0!=(Db&32768|0)){A=170;break g}if(0!=(Al(a[sa>>2])|0)|63==(a[sa>>2]|0)){A=170;break g}if(0!=(Kd()|0)){A=170;break g}var Jj=a[sa>>2],Kj=(b=h[zr],128<=b?b-256:b);if((Jj|0)!=(Kj|0)){A=171;break f}}while(0);nc=1}while(0);A=57404==(a[ha>>2]|0)?172:173;172==A&&(a[ha>>2]=60);A=0!=(a[Fi>>2]|0)?174:181;f:do if(174==A){var Ti=a[ha>>2],Yh=void 0,ei=void 0,Yh=256>Ti>>>0?1:2;1==Yh?ei=33<=Ti&&47>=Ti||58<=Ti&&64>=Ti||91<=Ti&&96>=Ti||123<=Ti&&126>=Ti:2==Yh&&(ei=0);if(0==(ei|0)){A=181;break f}if(0!=(l[jo]&1|0)){A=181;break f}A=1==(a[Fi>>2]|0)?178:177;if(177==A&&0==(hk(ln&4294967295,a[ha>>2])|0)){A=181;break f}a[(Aa+652&4294967295)>>2]=0;var $i,Nj=Aa,ie=a[ha>>2],fj=sa,jk=Ba,Oj=ca,Mf=nc,rf=s;s+=280;la(rf,0,280);var Nb=void 0,Cf=void 0,ih=void 0,Ig=void 0,hg=void 0,qh=void 0,Pj=void 0,gj=void 0,ij=void 0,th=rf+200,Pj=a[fj>>2];h[rf&4294967295]=0;var oi,Ui=void 0,vh=void 0,hl=void 0,hl=4;g:for(;;){if(!((hl|0)<(a[km>>2]|0))){Ui=8;break g}var mj=hl;if((a[(nd+16*hl&-1)>>2]|0)==(ie|0)){Ui=3;break g}hl=mj+1&4294967295;Ui=1}g:do if(8==Ui)vh=-1;else if(3==Ui){Ui=0==(a[((nd+16*mj&4294967295)+4&4294967295)>>2]|0)?4:6;h:do if(4==Ui){if(0==(bx(0,hl)|0)){Ui=6;break h}vh=-1;break g}while(0);vh=hl}while(0);oi=vh;Nb=0<=(oi|0)?1:2;g:do if(1==Nb){U(rf&4294967295,rz&4294967295,e([oi,0,0,0],["i32",0,0,0],y));Wf(Pj);Nb=26;break g}else if(2==Nb){Xw(Nj,ie,0);Ig=nk&4294967295;Nb=0==(a[Oj>>2]|0)?5:3;h:do if(3==Nb){if(0==(Mf|0)){Nb=5;break h}if(0!=(a[(((Nj&4294967295)+24&4294967295)+68&4294967295)>>2]&2|0)){Nb=5;break h}Wf(Pj);Nb=0!=(a[Bo>>2]|0)?21:23;i:do if(21==Nb){if(!(60==(ie|0)|38==(ie|0)))break i;a[io>>2]=ie}while(0);a[ag>>2]=ie;h[rf&4294967295]=32;h[rf+1&4294967295]=0;Nb=24;break h}while(0);h:do if(5==Nb){ih=1;Nb=(Pj|0)==(ie|0)&60!=(ie|0)?6:7;i:do if(6==Nb)for(;;)if(ih=ih+1&4294967295,Pj=Ld(),(Pj|0)==(ie|0)&60!=(ie|0))Nb=6;else break i;while(0);a[fj>>2]=Pj;Nb=0!=(Mf|0)?8:9;8==Nb&&Wf(Pj);Nb=1==(ih|0)?10:11;if(10==Nb)U(rf&4294967295,Gs&4294967295,e([Ig,0,0,0],["i8*",0,0,0],y));else if(11==Nb){var nj=rf&4294967295,Nb=4>(ih|0)?12:19;if(12==Nb){h[nj]=0;Nb=300>(a[(Ub+8&4294967295)>>2]|0)?13:14;if(13==Nb){var pk=rf&4294967295,Qj,yh,zh;Qj=sz&4294967295;yh=pk;for(zh=Qj+6;Qj<zh;)h[yh++]=h[Qj++]}var oj=ih,ih=oj-1&4294967295,Nb=0<(oj|0)?15:17;i:do if(15==Nb)for(var rk=th&4294967295,sk=rf&4294967295,tk=th&4294967295;;){U(rk,Gs&4294967295,e([Ig,0,0,0],["i8*",0,0,0],y));md(sk,tk);var pj=ih,ih=pj-1&4294967295;if(0<(pj|0))Nb=16;else{Nb=17;break i}}while(0);if(!(300>(a[(Ub+8&4294967295)>>2]|0)))break h;var vk=th&4294967295;Qj=tz&4294967295;yh=vk;for(zh=Qj+7;Qj<zh;)h[yh++]=h[Qj++];md(rf&4294967295,th&4294967295)}else 19==Nb&&U(nj,uz&4294967295,e([Ig,0,0,0,ih,0,0,0,Ig,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y))}}while(0);Nb=26;break g}while(0);g:do if(26==Nb){ij=a[Oj>>2];gj=$(rf&4294967295);fa(jk+a[Oj>>2]&4294967295,rf&4294967295);var Wh=Oj;a[Wh>>2]=a[Wh>>2]+gj&4294967295;Nb=0==(Mf|0)?27:28;if(27==Nb)Cf=-1;else if(28==Nb)if(Nb=45==(ie|0)?29:30,29==Nb)Cf=16384;else if(30==Nb){var Ik=ik(Ar&4294967295,ie),hg=a[(Br+4*Ik&4294967295)>>2],qh=262148,Nb=4096==(hg&28672|0)?31:32;31==Nb&&(qh=266244);Nb=0<(ij|0)?33:37;h:do if(33==Nb){if(0!=(a[(((Nj&4294967295)+24&4294967295)+68&4294967295)>>2]&2|0))break h;Nb=266270==(hg&-32769|0)?35:36;if(35==Nb){Cf=262148;break g}else if(36==Nb){Cf=qh;break g}}while(0);Nb=0!=(hg&524288|0)?38:39;38==Nb?Cf=hg:39==Nb&&(Cf=qh)}}while(0);var Jk=Cf;s=rf;vb=$i=Jk;if(0<=($i|0)){A=179;break d}Gb=a[ha>>2]}while(0);A=0!=(Db&2097152|0)?182:185;f:do if(182==A){if(0!=(Gb|0)){A=185;break f}var Kk=Ca=Ba+a[ca>>2]&4294967295;Xw(Aa,a[ha>>2],1);var xj=$(nk&4294967295)+1&4294967295;tc=nk&4294967295;ue=Kk;Uh=tc+xj;if(ue%4==tc%4&&8<xj){for(;0!==tc%4&&tc<Uh;)h[ue++]=h[tc++];tc>>=2;ue>>=2;for(eg=Uh>>2;tc<eg;)a[ue++]=a[tc++];tc<<=2;ue<<=2}for(;tc<Uh;)h[ue++]=h[tc++];if(0==((b=h[Ca&4294967295],128<=b?b-256:b)|0)){A=185;break f}var Nk=$(Ca);a[ca>>2]=a[ca>>2]+Nk&4294967295;Gb=a[ha>>2];Db&=-28673}while(0);if(0==(nc|0)){A=238;break e}Lb=0;jb=a[sa>>2];A=0!=(kc(jb)|0)?187:192;f:do if(187==A)for(;;){if(0!=(Kd()|0)){A=192;break f}if(0==(kc(jb)|0)){A=192;break f}A=10==(jb|0)?190:191;190==A&&(Lb=Lb+1&4294967295);jb=Ld();A=187}while(0);A=46==(a[ha>>2]|0)?193:195;f:do if(193==A){if(!(2>(Lb|0))){A=226;break f}Db|=4194304;A=195;break f}while(0);f:do if(195==A){if(0!=(Lb|0)){A=226;break f}var yj=a[ha>>2];44==(yj|0)?(mb=196,A=197):(mb=196,A=204);g:do if(197==A){A=46==(Wa|0)?198:203;h:do if(198==A){if(26741!=(a[(Aa+280&4294967295)>>2]|0)){A=203;break h}if(0==(Oc(Jb)|0)){A=203;break h}A=0!=(Oc(jb)|0)?202:201;if(201==A&&0==(kk(jb)|0)){A=203;break h}a[ha>>2]=1367;nc=0;A=220;break g}while(0);var Ok=a[ha>>2],mb=203,A=204;break g}while(0);g:do if(204==A){if(46!=((203==mb?Ok:yj)|0)){A=220;break g}A=0!=(a[((Aa&4294967295)+184&4294967295)>>2]&65536|0)?206:214;h:do if(206==A){A=0!=(Oc(Wa)|0)?210:207;i:do if(207==A){if(0==(ax(Wa)|0)){A=214;break h}if(0!=(ax(Jb)|0)){A=210;break i}if(0==(kc(Jb)|0)){A=214;break h}}while(0);A=0!=(Oc(Wa)|0)?212:211;if(212==A){if(!(0!=(kk(jb)|0)|45==(jb|0))){A=216;break h}nc=0;A=216;break h}else if(211==A){nc=0;A=216;break h}}while(0);h:do if(214==A){if(39!=(jb|0)){A=216;break h}nc=0}while(0);A=0!=(kk(jb)|0)?217:218;217==A&&(nc=0);if(0!=(ng|0)){A=222;break g}a[ha>>2]=32;nc=0;A=235;break f}while(0);g:do if(220==A){if(0!=(ng|0)){A=222;break g}nc=0;A=235;break f}while(0);if(0==(nc|0)){A=235;break f}if(46!=(a[ha>>2]|0)){A=226;break f}if(!(60==(jb|0)&0!=(a[Bo>>2]|0))){A=226;break f}nc=0;Hb=a[ca>>2];db=Db;A=235;break f}while(0);if(226==A&&0!=(nc|0)){A=227;break d}if(0!=(Kd()|0)){A=238;break e}if(0==(kc(a[sa>>2])|0)){A=238;break e}Wf(jb)}while(0);if(1==(a[(kj&4294967295)>>2]|0)){A=8;continue d}var zj=a[ha>>2],A=(zj|0)==(Gb|0)?240:245;e:do if(240==A){A=0!=(Al(a[ha>>2])|0)?241:242;f:do if(241==A)a[ha>>2]=57384;else if(242==A){if(45==(a[ha>>2]|0)){A=244;break f}a[ha>>2]=32}while(0);Ab=a[ca>>2]+1&4294967295}else if(245==A){Ab=a[ca>>2]+1&4294967295;if(57404!=(zj|0)){A=247;break e}a[ha>>2]=60}while(0);var Pk=De(a[ha>>2],Ba+a[ca>>2]&4294967295);a[ca>>2]=a[ca>>2]+Pk&4294967295;A=0!=(kc(a[ha>>2])|0)?251:248;e:do if(248==A){if(0!=(Al(a[ha>>2])|0)){A=251;break e}t[(Dc+2*a[ca>>2]&4294967295)>>1]=a[lf>>2]-a[$f>>2]&65535;if(!((Ab|0)<(a[ca>>2]|0))){A=251;break e}for(;;){var Aj=Ab,Ab=Aj+1&4294967295;t[(Dc+2*Aj&4294967295)>>1]=-1;if((Ab|0)<(a[ca>>2]|0))A=250;else{A=251;break e}}}while(0);a[$b>>2]=a[ca>>2];A=680<(a[ca>>2]|0)?252:254;e:do if(252==A){if(0!=(Sb(a[ha>>2])|0)){A=254;break e}if(0==(Oc(a[ha>>2])|0)){A=255;break d}}while(0);if(698<=(a[ca>>2]|0)){A=255;break d}else A=8}if(256==A){A=0!=(Zb|0)?257:258;if(257==A){var Qk=De(1328,Ba+a[ca>>2]&4294967295);a[ca>>2]=a[ca>>2]+Qk&4294967295}A=0!=(db|0)?259:260;259==A&&Ww(Ba+Hb&4294967295);h[Ba+a[ca>>2]&4294967295]=32;h[Ba+(a[ca>>2]+1&4294967295)&4294967295]=0;ic=589864}else if(12==A)h[ni]=1,ic=589864;else if(15==A)h[Rm]=1,a[Tm>>2]=0,Wf(a[sa>>2]),ic=16384;else if(66==A){A=0!=(db|0)?67:68;67==A&&(a[ca>>2]=Hb);h[Ba+a[ca>>2]&4294967295]=32;var Cb=a[ca>>2];a[ca>>2]=Cb+1&4294967295;h[Ba+Cb&4294967295]=0;A=0!=(vb&131072|0)?69:70;69==A&&fa(ub,Mm&4294967295);ic=vb}else if(74==A){var tg=ik(Ar&4294967295,Jh),da=tg,A=0==(tg|0)?75:76;if(75==A){t[(Dc+2*a[ca>>2]&4294967295)>>1]=a[lf>>2]-a[$f>>2]&65535;a[$b>>2]=a[ca>>2];var Rk=De(a[ha>>2],Ba+a[ca>>2]&4294967295);a[ca>>2]=a[ca>>2]+Rk&4294967295;vb=524328}else 76==A&&(vb=a[(Br+4*da&4294967295)>>2]);h[Ba+a[ca>>2]&4294967295]=32;h[Ba+(a[ca>>2]+1&4294967295)&4294967295]=0;ic=vb}else if(81==A){var id=a[ca>>2];a[ca>>2]=id+1&4294967295;for(h[Ba+id&4294967295]=0;;){var ug=Ld();a[ha>>2]=ug;if(0!=(kc(ug)|0)){A=86;break}if(0!=(Kd()|0)){A=86;break}if(!(699>(a[ca>>2]|0))){A=86;break}var Sk=a[ha>>2]&255,Df=a[ca>>2];a[ca>>2]=Df+1&4294967295;h[Ba+Df&4294967295]=Sk;A=82}var Bj=a[ca>>2];a[ca>>2]=Bj+1&4294967295;h[Ba+Bj&4294967295]=0;ic=147456}else if(108==A)a[Sm>>2]=vz&4294967295,Wf(a[sa>>2]),h[ea&4294967295]=0,ic=524328;else if(138==A)Wf(a[sa>>2]),A=0!=(db|0)?139:140,139==A&&Ww(Ba+Hb&4294967295),h[Ba+a[ca>>2]&4294967295]=32,h[Ba+(a[ca>>2]+1&4294967295)&4294967295]=0,A=3<(Ja|0)?141:142,141==A&&(Ja=3),A=0!=(a[Bo>>2]|0)?143:144,143==A&&(Ja=1),ic=(30*Ja&4294967295)+524328&4294967295;else if(146==A)Wf(a[sa>>2]),h[Ba+a[ca>>2]&4294967295]=32,h[Ba+(a[ca>>2]+1&4294967295)&4294967295]=0,ic=262174;else if(153==A)Wf(a[sa>>2]),a[ag>>2]=a[ha>>2],h[Ba+Hb&4294967295]=32,h[Ba+(Hb+1&4294967295)&4294967295]=0,ic=db;else if(179==A)ic=vb;else if(227==A){Wf(jb);h[Ba+a[ca>>2]&4294967295]=32;h[Ba+(a[ca>>2]+1&4294967295)&4294967295]=0;A=0!=(Oc(Wa)|0)?228:230;d:do if(228==A){if(0!=(Sb(jb)|0)){A=230;break d}Db&=-4194305}while(0);var Cj=Db,A=1<(Lb|0)?231:234;231==A?(A=532520==(Cj|0)|536621==(Db|0)?232:233,232==A?ic=Db+35&4294967295:233==A&&(ic=524358)):234==A&&(ic=Cj)}else 255==A&&(h[Ba+a[ca>>2]&4294967295]=32,h[Ba+(a[ca>>2]+1&4294967295)&4294967295]=0,Wf(a[sa>>2]),ic=16384);var Tk=ic;s=ha;Ta=Tk;p=0!=(a[Li>>2]|0)?7:11;d:do if(7==p){if(0==(a[pq>>2]&4|0)){p=11;break d}Ea(a[Li>>2],wz&4294967295,e([Ta,0,0,0],["i32",0,0,0],y));dc=td&4294967295;p=0!=((b=h[dc],128<=b?b-256:b)|0)?9:10;e:do if(9==p)for(;;){var Uk=(b=h[dc],128<=b?b-256:b);xc(Uk,a[Li>>2]);dc=dc+1&4294967295;if(0!=((b=h[dc],128<=b?b-256:b)|0))p=9;else{p=10;break e}}while(0);Nd(xz&4294967295,10,1,a[Li>>2]);Ut(a[Li>>2])}while(0);dc=td&4294967295;t[(ob+2*(a[qb>>2]+1&4294967295)&4294967295)>>1]=0;t[(ob+2*(a[qb>>2]+2&4294967295)&4294967295)>>1]=32767;t[(ob+2*(a[qb>>2]+3&4294967295)&4294967295)>>1]=0;V=10*(Ta&4095)&4294967295;sb=Ta>>12&7;p=0!=(a[pb>>2]|0)?12:13;12==p&&(sb=a[pb>>2]);dc=td&4294967295;d:for(;;){if(0==((b=h[dc],128<=b?b-256:b)|0)){p=17;break d}var Vk=(b=h[dc],128<=b?b-256:b);if(0==(ye(Vk)|0)){p=17;break d}dc=dc+1&4294967295;p=14}p=0==((b=h[dc],128<=b?b-256:b)|0)?18:21;18==p?(V=V-a[ko>>2]&4294967295,p=0>(V|0)?19:20,19==p&&(V=0),Ta&=-524289,a[ko>>2]=a[ko>>2]+V&4294967295):21==p&&(a[ko>>2]=V);a[(C+8324&4294967295)>>2]=Ta;p=0!=(a[Rl>>2]|0)?23:26;d:do if(23==p){a[uk>>2]=a[uk>>2]+1&4294967295;if(!(0<(a[Wm>>2]|0))){p=26;break d}a[Wm>>2]=a[Wm>>2]-1&4294967295;if(0!=(a[Wm>>2]|0)){p=26;break d}a[xk>>2]=0}while(0);var ra,Fc,ze,jc;ra=ab&4294967295;Fc=ra+8;jc=0;0>jc&&(jc+=256);for(jc=jc+(jc<<8)+(jc<<16)+16777216*jc;0!==ra%4&&ra<Fc;)h[ra++]=0;ra>>=2;for(ze=Fc>>2;ra<ze;)a[ra++]=jc;for(ra<<=2;ra<Fc;)h[ra++]=0;h[ab&4294967295]=10;a[ma>>2]=1;a[(C+8288&4294967295)>>2]=0;a[(C+8312&4294967295)>>2]=0;a[(C+8272&4294967295)>>2]=0;a[(C+8284&4294967295)>>2]=0;a[(C+8276&4294967295)>>2]=0;a[(C+8280&4294967295)>>2]=0;a[(C+652&4294967295)>>2]=0;a[(C+8316&4294967295)>>2]=0;Va=bb=ua=Sa=a[(C+8320&4294967295)>>2]=0;h[ac&4294967295]=0;h[ac+1&4294967295]=32;h[ac+2&4294967295]=32;K=3;a[G>>2]=32;t[((Ra&4294967295)+4&4294967295)>>1]=K&65535;var Ia=xa=a[(Ra&-1)>>2]=0,Yk=0>=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0),gf=Ia;Yk?(u=26,p=27):(u=26,p=28);d:do if(27==p)for(;;){var Ia=(27==u?sf:gf)+1&4294967295,Zk=0>=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0),sf=Ia;if(Zk)p=u=27;else{u=27;p=28;break d}}while(0);t[((Ra&4294967295)+6&4294967295)>>1]=t[(ob+2*(26==u?gf:sf)&4294967295)>>1];ba=0;p=0!=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0)?29:32;d:do if(29==p)for(;;){var Hj=Ia,Ia=Hj+1&4294967295,p=-1!=((b=t[(ob+2*Hj&4294967295)>>1],32768<=b?b-65536:b)|0)?30:31;30==p&&(ba=ba+1&4294967295);if(0!=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0))p=29;else{p=32;break d}}while(0);h[(Ra&4294967295)+10&4294967295]=ba&255;d:for(;;){if(0!=(xa|0)){p=230;break d}if(!(700>(K|0)&996>(a[ma>>2]|0))){p=230;break d}S=a[Pb>>2];Bl(Pb,ac+(K-1&4294967295)&4294967295,1);p=0!=(b=h[(C&4294967295)+250&4294967295],128<=b?b-256:b)?36:39;e:do if(36==p){if(0==(Hs(a[Pb>>2])|0)){p=39;break e}if(0==(Sb(S)|0)){p=39;break e}a[Pb>>2]=97}while(0);p=0!=(Y|0)?40:41;e:do if(40==p)a[G>>2]=Y,Y=0;else if(41==p){if(!(0<Ma[X>>2]>>>0)){p=43;break e}Bl(G,td+(a[X>>2]-1&4294967295)&4294967295,1)}while(0);T=a[X>>2];p=0!=(a[aa>>2]|0)?44:45;if(44==p)I=a[aa>>2],a[aa>>2]=0;else if(45==p){var cl=sc(N,td+a[X>>2]&4294967295);a[X>>2]=a[X>>2]+cl&4294967295;I=a[N>>2]}var ja=sc(na,td+a[X>>2]&4294967295),Lj=I,p=0==Lj?47:1==Lj?49:48;e:do if(47==p){xa=1;I=32;p=48;break e}while(0);e:do if(48==p){var el=I,gl=(b=h[zr],128<=b?b-256:b),p=(el|0)==(gl|0)?49:52;break e}while(0);if(49==p)if(cc=a[X>>2]-1&4294967295,p=32!=(a[G>>2]|0)?50:51,50==p)Y=I=32,a[X>>2]=a[X>>2]-1&4294967295;else if(51==p){var Zh=X,je=void 0,Rh=null,Sh=void 0,Pi=void 0,il=void 0,gh=void 0,jl=void 0,Rj=void 0,Tj=void 0,Pi=yz&4294967295,il=-1,gh=0,jl=h[td+a[Zh>>2]&4294967295],je=43==(jl&255|0)?1:2;e:do if(1==je){var gh=64,Nf=Zh;a[Nf>>2]=a[Nf>>2]+1&4294967295}else if(2==je){if(45!=(jl&255|0))break e;var gh=96,$h=Zh;a[$h>>2]=a[$h>>2]+1&4294967295}while(0);je=0!=(10>((b=h[td+a[Zh>>2]&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?5:7;e:do if(5==je){il=Ke(td+a[Zh>>2]&4294967295);if(!(10>((b=h[td+a[Zh>>2]&4294967295],128<=b?b-256:b)-48&4294967295)>>>0))break e;for(;;){var Sj=Zh;a[Sj>>2]=a[Sj>>2]+1&4294967295;if(0!=(10>((b=h[td+a[Zh>>2]&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0))je=6;else break e}}while(0);var Vj=Zh,Zj=a[Vj>>2];a[Vj>>2]=Zj+1&4294967295;jl=h[td+Zj&4294967295];je=248<=(a[wf>>2]|0)?8:9;if(8==je)Sh=0;else if(9==je){var Uj=zz(Pi,jl&255),Rj=Uj,je=0==(Uj|0)?10:11;if(10==je)Sh=0;else if(11==je){var ek=(Rj-Pi&4294967295)+1&4294967295,Tj=ek;-1==(il|0)?(Rh=11,je=12):(Rh=11,je=13);if(12==je)var fk=Tj,il=a[(Nr+4*fk&4294967295)>>2],gh=0,Rh=12;je=9==((12==Rh?fk:ek)|0)?14:15;14==je&&(a[wj>>2]=il,a[Bk>>2]=0);je=13==(Tj|0)?16:19;16==je&&(je=3<=(il|0)?17:18,17==je?h[Xm]=1:18==je&&(h[Xm]=0));var Dl=(gh+Tj&4294967295)+(256*il&4294967295)&4294967295,rm=a[wf>>2];a[wf>>2]=rm+1&4294967295;a[(vf+4*rm&4294967295)>>2]=Dl;Sh=1}}var Ua=Ua+Sh&4294967295,Y=a[G>>2],El=a[X>>2]-cc&4294967295;ra=td+cc&4294967295;Fc=ra+El;jc=32;0>jc&&(jc+=256);for(jc=jc+(jc<<8)+(jc<<16)+16777216*jc;0!==ra%4&&ra<Fc;)h[ra++]=32;ra>>=2;for(ze=Fc>>2;ra<ze;)a[ra++]=jc;for(ra<<=2;ra<Fc;)h[ra++]=32;a[X>>2]=cc;p=33;continue d}p=36==(a[wj>>2]|0)?53:58;e:do if(53==p){if(32==(I|0)){p=58;break e}p=32==(a[G>>2]|0)?55:57;f:do if(55==p){if(32!=(a[na>>2]|0)){p=57;break f}a[wj>>2]=20}while(0);I=Yr(I)}while(0);p=0!=(Xa|0)?59:62;e:do if(59==p){qa=8;if(93!=(I|0)){p=195;break e}if(93!=(a[na>>2]|0)){p=195;break e}Xa=0;a[X>>2]=a[X>>2]+1&4294967295;I=32}else if(62==p)if(p=64==(a[wj>>2]&240|0)?63:68,63==p)if(p=0!=(Oc(I)|0)?64:66,64==p){a[Bk>>2]=a[Bk>>2]+1&4294967295;if(!((a[Bk>>2]|0)>(a[wj>>2]&15|0))){p=195;break e}I=32;ya=1;a[Bk>>2]=0}else{if(66==p){a[Bk>>2]=0;if(0==(Oc(a[Pb>>2])|0)){p=195;break e}I=32;ya=1}}else if(68==p){if(0!=(a[wj>>2]&16|0)){p=195;break e}p=146==(I|0)|180==(I|0)|8217==(I|0)|8242==(I|0)?70:71;70==p&&(I=39);var qk=I;8216==(I|0)|63==(qk|0)?(u=71,p=72):(u=71,p=76);f:do if(72==p){p=0!=(Sb(a[Pb>>2])|0)?73:75;g:do if(73==p){if(0==(Sb(a[na>>2])|0)){p=75;break g}I=39;p=80;break f}while(0);var Ml=I,u=75,p=76;break f}while(0);f:do if(76==p)if(p=1328==((75==u?Ml:qk)|0)?77:78,77==p)I=32,bb|=1024;else if(78==p){if(1367!=(I|0)){p=80;break f}I=32;bb|=131072}while(0);var Lk,kl=C,Mk=td+a[X>>2]&4294967295,am=a[G>>2],ig=I,ke=a[na>>2],Wj=aa,Ob=s;s+=4;la(Ob,0,4);var rd=void 0,vg=void 0,ai=void 0,wg=void 0,tm=void 0,Dj=void 0,An=void 0,ai=ig,Ej=a[(kl+280&4294967295)>>2],rd=24934==Ej?1:28268==Ej?1:27503==Ej?9:18;f:do if(1==rd){if(0!=(jf(am)|0)){rd=18;break f}sc(Ob,Mk+1&4294967295);if(39!=(ai|0)){rd=18;break f}if(0==(Sl(a[Ob>>2])|0)){rd=18;break f}rd=110==(ke|0)?5:7;g:do if(5==rd){if(24934!=(a[(kl+280&4294967295)>>2]|0))break g;h[Mk&4294967295]=32;vg=601;rd=19;break f}while(0);if(!(110==(ke|0)|116==(ke|0))){rd=18;break f}vg=601;rd=19;break f}else if(9==rd){var Wk=ai-44032&4294967295,wg=Wk,rd=0<=(Wk|0)&55215>=ai>>>0?10:15;if(10==rd){tm=((wg|0)/28|0)/21|0;Dj=((wg|0)/28|0)%21;An=(wg|0)%28;rd=11==(tm|0)?11:13;g:do if(11==rd){ai=Dj+4449&4294967295;if(!(0<(An|0)))break g;a[Wj>>2]=An+4519&4294967295}else 13==rd&&(ai=tm+4352&4294967295,a[Wj>>2]=(An+50500&4294967295)+(28*Dj&4294967295)&4294967295);while(0);vg=ai;rd=19;break f}else if(15==rd){var Xk=ai-12592&4294967295,wg=Xk;if(!(0<=(Xk|0))){rd=18;break f}if(!(52>(wg|0))){rd=18;break f}vg=(l[Az+wg&4294967295]&255)+4352&4294967295;rd=19;break f}}while(0);if(18==rd){var fm=kl,um=ai,al=ke,gm=Wj,sd=void 0,Bn=null,vm=void 0,wm=void 0,Ei=void 0,mh=void 0,Ki=void 0,Mj=void 0,Ni=void 0,Ni=0,sd=0!=(l[Cr]&1|0)?1:2;if(1==sd)h[Cr]=0,vm=8;else if(2==sd)if(sd=0==(um|0)?3:4,3==sd)vm=0;else if(4==sd){var Wi=a[((fm&4294967295)+264&4294967295)>>2],sd=0==(Wi|0)?5:6;if(5==sd)vm=um;else if(6==sd){Mj=um;sd=0!=(ji(um)|0)?7:8;7==sd&&(Mj=yl(um),Ni=1);wm=mh=0;f:for(;;){var nl=a[(Wi+4*wm&4294967295)>>2],Ei=nl;if(0==(nl|0)){sd=16;break f}sd=(Mj|0)==(Ei&65535|0)?11:15;if(11==sd){if(0==(Ei>>>16|0)){sd=12;break f}var ym=Ei>>>16,Am=yl(al);if((ym|0)==(Am|0)){sd=14;break f}}wm=wm+2&4294967295;sd=9}if(16==sd)var Dm=mh,Bn=16;else if(12==sd)var xl=Ma[(Wi+4*(wm+1&4294967295)&4294967295)>>2],mh=xl,Bn=12;else if(14==sd){var zl=Ma[(Wi+4*(wm+1&4294967295)&4294967295)>>2],mh=zl;h[Cr]=1;Bn=14}sd=0==((16==Bn?Dm:14==Bn?zl:xl)|0)?18:19;if(18==sd)vm=um;else if(19==sd){sd=0!=(mh&-2097152|0)?20:24;if(20==sd){Ki=mh>>>16;sd=0!=(Ni|0)?21:23;f:do if(21==sd){if(0==(ji(al)|0))break f;Ki=Tw(Ki)}while(0);a[gm>>2]=Ki;mh&=65535}sd=0!=(Ni|0)?25:26;25==sd&&(mh=Tw(mh));vm=mh}}}vg=vm}var Im=vg;s=Ob;I=Lk=Im;if(8==(Lk|0)){p=33;continue d}p=0!=(a[aa>>2]|0)?82:83;82==p&&(a[na>>2]=a[aa>>2]);p=0!=(Sb(I)|0)?91:84;f:do if(84==p){if(0!=(Sl(I)|0)){p=91;break f}if(0!=(hk(a[(C+704&4294967295)>>2],I)|0)){p=91;break f}if(0==(Sb(a[Pb>>2])|0)){p=91;break f}p=0!=(b=h[(C&4294967295)+250&4294967295],128<=b?b-256:b)?88:90;g:do if(88==p){if(0==(Hs(I)|0)){p=90;break g}if(0==(Hs(a[na>>2])|0)){p=91;break f}}while(0);I=32;ya=1}while(0);p=0!=(Oc(a[Pb>>2])|0)?92:94;f:do if(92==p){var $a=0==(Oc(I)|0),Cl=I;if($a&46!=(I|0)&44!=(I|0)&32!=(Cl|0))u=92;else{u=92;p=97;break f}I=32;ya=1;p=101;break f}else if(94==p){p=44!=(a[G>>2]|0)?95:96;95==p&&(Ya=0);var Jm=I,u=96,p=97;break f}while(0);f:do if(97==p){if(91!=((96==u?Jm:Cl)|0)){p=101;break f}p=2==(a[na>>2]|0)?100:99;if(99==p&&!(91==(a[na>>2]|0)&0!=(a[mr>>2]|0))){p=101;break f}Xa=8;a[X>>2]=a[X>>2]+1&4294967295;p=33;continue d}while(0);p=0!=(Sb(I)|0)?102:138;if(102==p){p=0!=(Sb(a[Pb>>2])|0)?103:106;f:do if(103==p){if(0==(b=h[(C&4294967295)+251&4294967295],128<=b?b-256:b)){p=118;break f}if(12352<(I|0)){p=106;break f}p=12352<(a[Pb>>2]|0)?106:118;break f}while(0);f:do if(106==p){p=0==(hk(a[(C+704&4294967295)>>2],a[Pb>>2])|0)?107:108;107==p&&(eb=0);p=32!=(a[Pb>>2]|0)?109:112;g:do if(109==p){if(0!=(hk(a[(C+704&4294967295)>>2],a[Pb>>2])|0)){p=112;break g}I=32;ya=1;if(0!=(Al(a[Pb>>2])|0)){p=118;break f}Va|=256;p=118;break f}while(0);p=0!=(ji(I)|0)?113:114;113==p&&(bb|=2);if(32!=(a[Pb>>2]|0)){p=118;break f}var Cn=(b=h[ac+(K-2&4294967295)&4294967295],128<=b?b-256:b);if(0==(Oc(Cn)|0)){p=118;break f}if(0!=(Oc(a[G>>2])|0)){p=118;break f}var bi=K,K=bi+1&4294967295;h[ac+bi&4294967295]=32;var Of=(Ra+12*Sa&4294967295)+4&4294967295;t[Of>>1]=t[Of>>1]+1&65535}while(0);eb=eb+1&4294967295;p=0!=(ji(I)|0)?119:130;if(119==p){var I=Yr(I),Se=a[(((C&4294967295)+24&4294967295)+52&4294967295)>>2],Ia=Se,p=0<(Se|0)?120:123;if(120==p){if(2!=(Ia|0)){p=195;break e}if(0!=(va|0)){p=195;break e}a[aa>>2]=I;I=712;va=1}else if(123==p)if(p=0!=(kk(a[G>>2])|0)?124:125,124==p)I=32,ya=1,Y=I;else if(125==p){if(32==(I|0)){p=195;break e}if(0==(ji(a[G>>2])|0)){p=195;break e}if(0==(kk(a[na>>2])|0)){p=195;break e}sc(fb,td+(ja+a[X>>2]&4294967295)&4294967295);if(0==(Sb(a[fb>>2])|0)){p=195;break e}I=32;ya=1;Y=I;Va|=256}}else if(130==p){p=0!=(qa|0)?131:137;f:do if(131==p){if(!(2<(eb|0))){p=137;break f}p=115==(I|0)?133:136;g:do if(133==p){if(32!=(a[na>>2]|0)){p=136;break g}I=32;qa|=4;if(39!=((b=h[ac+(K-1&4294967295)&4294967295],128<=b?b-256:b)|0)){p=195;break e}h[ac+(K-1&4294967295)&4294967295]=32;p=195;break e}while(0);qa=0;p=195;break e}while(0);qa=0}}else if(138==p)if(p=45==(I|0)?139:154,139==p){p=0!=(Sl(a[G>>2])|0)?146:140;f:do if(140==p){if(0==(Sb(a[na>>2])|0)){p=146;break f}p=32!=(a[Pb>>2]|0)?142:143;if(142==p){I=32;ya=1;p=195;break e}else if(143==p){bb|=128;p=0<(Sa|0)?144:145;if(144==p){var Gl=Ra+12*(Sa-1&4294967295)&-1;a[Gl>>2]|=16384}I=32;p=195;break e}}while(0);var Xj=a[na>>2],p=32==(a[G>>2]|0)&32==(Xj|0)?147:148;if(147==p)I=32,oa=4;else if(148==p)if(p=45==(Xj|0)?149:150,149==p)a[X>>2]=a[X>>2]+1&4294967295,I=32,oa=4;else if(150==p){if(32!=(a[Pb>>2]|0)){p=195;break e}var Yj=(b=h[ac+(K-2&4294967295)&4294967295],128<=b?b-256:b);if(0==(Sb(Yj)|0)){p=195;break e}if(0!=(Sb(a[G>>2])|0)){p=195;break e}var xm=K,K=xm+1&4294967295;h[ac+xm&4294967295]=32;var Hl=(Ra+12*Sa&4294967295)+4&4294967295;t[Hl>>1]=t[Hl>>1]+1&65535}}else if(154==p)if(p=46==(I|0)?155:162,155==p)if(p=46==(a[Pb>>2]|0)?156:157,156==p)I=32,ya=1;else{if(157==p){if(!(0<(Sa|0))){p=195;break e}if(0!=(a[(Ra+12*(Sa-1&4294967295)&-1)>>2]&256|0)){p=195;break e}if(0==(Sb(a[G>>2])|0)){p=195;break e}var ll=Ra+12*(Sa-1&4294967295)&-1;a[ll>>2]|=65536;if(!(0!=(Sl(a[na>>2])|0)|45==(a[na>>2]|0))){p=195;break e}I=32}}else if(162==p)if(p=39==(I|0)?163:178,163==p){p=46==(a[G>>2]|0)?165:164;f:do if(164==p){p=0!=(Mp(a[G>>2])|0)?165:167;break f}while(0);f:do if(165==p){if(0==(Sb(a[na>>2])|0)){p=167;break f}ua=0;p=195;break e}while(0);p=0!=(hk(a[(C+700&4294967295)>>2],a[G>>2])|0)?168:171;f:do if(168==p){if(32!=(S|0)){p=171;break f}ua=0;if(32!=(a[na>>2]|0)){p=195;break e}a[X>>2]=a[X>>2]+1&4294967295;p=195;break e}while(0);p=115==(a[Pb>>2]|0)?172:174;f:do if(172==p){if(0!=(ua|0)){p=174;break f}I=32;p=195;break e}while(0);p=0!=(Sl(a[Pb>>2])|0)?175:176;175==p?ua=1:176==p&&(ua=0);oa=4;I=32}else if(178==p)if(p=0!=(ik(Bz&4294967295,I)|0)?179:180,179==p)I=32;else if(180==p){if(0==(Oc(I)|0)){p=195;break e}p=0!=(b=h[(C&4294967295)+250&4294967295],128<=b?b-256:b)?182:184;f:do if(182==p){if(0==(Sb(a[Pb>>2])|0)){p=184;break f}if(0==(uq(a[na>>2])|0)){p=195;break e}}while(0);p=32!=(a[Pb>>2]|0)?185:192;if(185==p){var ci=0!=(Oc(a[Pb>>2])|0),Il=a[Pb>>2],p=ci?191:186;if(191==p){if(32!=(Il|0)){p=195;break e}}else if(186==p){p=(Il|0)!=(a[((C&4294967295)+208&4294967295)>>2]|0)?189:187;f:do if(187==p){p=0<(Ya|0)?188:190;if(188==p&&44==(a[((C&4294967295)+208&4294967295)>>2]|0)){p=189;break f}Ya=1;p=195;break e}while(0);I=32;ya=1;p=195;break e}}var Pm=(b=h[ac+(K-2&4294967295)&4294967295],128<=b?b-256:b);if(0==(Sb(Pm)|0)){p=195;break e}if(0!=(Sb(a[G>>2])|0)){p=195;break e}var Jl=K,K=Jl+1&4294967295;h[ac+Jl&4294967295]=32;var Kl=(Ra+12*Sa&4294967295)+4&4294967295;t[Kl>>1]=t[Kl>>1]+1&65535}}while(0);p=0!=(Sl(I)|0)?196:225;e:do if(196==p)if(p=32==(a[Pb>>2]|0)?197:198,197==p){bb|=262144;p=33;continue d}else{if(198==p){p=9==(a[N>>2]|0)|10==(a[N>>2]|0)?199:200;199==p&&(Va|=262144);p=0!=(ya|0)?201:208;if(201==p){Ia=0;for(ba=a[X>>2]-1&4294967295;;){if(!((ba|0)>=(R|0))){p=207;break}if(0==((b=t[(ob+2*ba&4294967295)>>1],32768<=b?b-65536:b)|0)){p=207;break}p=0<((b=t[(ob+2*ba&4294967295)>>1],32768<=b?b-65536:b)|0)?205:206;205==p&&(Ia=Ia+1&4294967295);ba=ba-1&4294967295;p=202}h[(Ra+12*Sa&4294967295)+10&4294967295]=Ia&255}var R=a[X>>2],ml=K,K=ml+1&4294967295;h[ac+ml&4294967295]=32;p=299>(Sa|0)?209:223;f:do if(209==p){if(!((K|0)>(P[((Ra+12*Sa&4294967295)+4&4294967295)>>1]&65535|0))){p=223;break f}p=0<(Ua|0)?211:212;if(211==p){var Dn=vf+4*(a[wf>>2]-1&4294967295)&4294967295;a[Dn>>2]|=128;var Ll=Ra+12*Sa&-1;a[Ll>>2]|=64;Ua=0}h[(Ra+12*Sa&4294967295)+8&4294967295]=a[Ee>>2]&255;var Yd=Ra+12*Sa&-1;a[Yd>>2]|=bb|qa|(l[Xm]?2048:0);h[(Ra+12*Sa&4294967295)+9&4294967295]=ia&255;p=0<(a[Ee>>2]|0)?213:216;if(213==p){var Xi=Ia=K;(Ia|0)>(P[((Ra+12*Sa&4294967295)+4&4294967295)>>1]&65535|0)?(u=213,p=214):(u=213,p=215);g:do if(214==p)for(;;){h[ac+Ia&4294967295]=h[ac+((214==u?Gn:Xi)-1&4294967295)&4294967295];var Gn=Ia=Ia-1&4294967295;if((Ia|0)>(P[((Ra+12*Sa&4294967295)+4&4294967295)>>1]&65535|0))p=u=214;else{u=214;p=215;break g}}while(0);h[ac+(213==u?Xi:Gn)&4294967295]=32;var zc=(Ra+12*Sa&4294967295)+4&4294967295;t[zc>>1]=t[zc>>1]+1&65535;K=K+1&4294967295}Sa=Sa+1&4294967295;t[((Ra+12*Sa&4294967295)+4&4294967295)>>1]=K&65535;a[(Ra+12*Sa&-1)>>2]=0;var Ia=a[X>>2],jn=0>=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0),hm=Ia;jn?(u=216,p=217):(u=216,p=218);g:do if(217==p)for(;;){var Ia=(217==u?im:hm)+1&4294967295,mn=0>=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0),im=Ia;if(mn)p=u=217;else{u=217;p=218;break g}}while(0);t[((Ra+12*Sa&4294967295)+6&4294967295)>>1]=t[(ob+2*(216==u?hm:im)&4294967295)>>1];ba=0;p=0!=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0)?219:222;g:do if(219==p)for(;;){var jm=Ia,Ia=jm+1&4294967295,p=-1!=((b=t[(ob+2*jm&4294967295)>>1],32768<=b?b-65536:b)|0)?220:221;220==p&&(ba=ba+1&4294967295);if(0!=((b=t[(ob+2*Ia&4294967295)>>1],32768<=b?b-65536:b)|0))p=219;else{p=222;break g}}while(0);h[(Ra+12*Sa&4294967295)+10&4294967295]=ba&255;bb=Va;Va=0;ia=a[Ee>>2]=0;qa=1;va=0}while(0);if(0==(ya|0)){p=227;break e}a[X>>2]=T;ya=a[aa>>2]=0}}else if(225==p){if(!(696>(K|0))){p=227;break e}var pn=De(I,ac+K&4294967295),K=K+pn&4294967295}while(0);p=(oa|0)>(a[Ee>>2]|0)?228:229;228==p&&(a[Ee>>2]=oa);oa=0;p=33}p=0==(Sa|0)?231:233;d:do if(231==p){if(!(0<(Ua|0))){p=233;break d}var lm=vf+4*(a[wf>>2]-1&4294967295)&4294967295;a[lm>>2]|=128;var mm=Ra+12*Sa&-1;a[mm>>2]|=64;Sa=1}while(0);a[(C+8292&4294967295)>>2]=ac+(K-1&4294967295)&4294967295;h[ac+K&4294967295]=0;h[(Ra&4294967295)+8&4294967295]=0;h[(Ra+12*Sa&4294967295)+8&4294967295]=8;p=0<(Sa|0)?234:241;d:do if(234==p){for(var nm=Sa-1&4294967295,K=nm,u=234;;){var om=K;if(0<((237==u?qm:nm)|0))u=235;else{u=235;p=238;break}var rn=(b=h[ac+(P[((Ra+12*om&4294967295)+4&4294967295)>>1]&65535)&4294967295],128<=b?b-256:b),un=0!=(Al(rn)|0),pm=K;if(un)u=236;else{u=236;p=238;break}var qm=pm-1&4294967295,K=qm,u=237,p=235}var mp=Ra+12*(236==u?pm:om)&-1;a[mp>>2]|=16;if(0==(Ta&4194304|0)){p=241;break d}if(0!=(a[(Ra+12*(Sa-1&4294967295)&-1)>>2]&256|0)){p=241;break d}var sm=Ra+12*(Sa-1&4294967295)&-1;a[sm>>2]|=65536}while(0);var zm=Ra&-1;a[zm>>2]|=512;K=0;p=(K|0)<(Sa|0)?242:296;d:do if(242==p){var ol=gc&4294967295,zn=gc+130&4294967295,En=gc&4294967295,Fn=gc&4294967295,Hn=gc&4294967295,Kn=gc+1&4294967295,Pn=gc+130&4294967295,Zn=gc+1&4294967295,so=gc&4294967295,uo=gc+2&4294967295,vo=gc+2&4294967295;for(;;){a[Nl>>2]=a[Nl>>2]+1&4294967295;p=0<(a[Ym>>2]|0)?244:246;f:do if(244==p){a[Ym>>2]=a[Ym>>2]-1&4294967295;if(0!=(a[Ym>>2]|0)){p=246;break f}a[xk>>2]=0;p=247;break f}while(0);f:do if(246==p){p=0!=(a[xk>>2]|0)?295:247;break f}while(0);f:do if(247==p){var yo=ac+(P[((Ra+12*K&4294967295)+4&4294967295)>>1]&65535)&4294967295,Na=Ga=yo,Ao=(b=h[Na&4294967295],128<=b?b-256:b),p=0!=(Oc(Ao)|0)?248:261;g:do if(248==p){if(1227133512==(a[((C&4294967295)+
192&4294967295)>>2]|0)){p=261;break g}for(Kb=ol;;){if(!(Kb>>>0<zn>>>0)){p=260;break}var Co=(b=h[Ga],128<=b?b-256:b),Go=0!=(Oc(Co)|0),sp=Ga,p=Go?252:253;if(252==p){var Ga=sp+1&4294967295,Jo=h[sp],Nn=Kb,Kb=Nn+1&4294967295;h[Nn]=Jo;p=250}else if(253==p){if(((b=h[sp],128<=b?b-256:b)|0)!=(a[((C&4294967295)+204&4294967295)>>2]|0)){p=259;break}if(32!=((b=h[Ga+1&4294967295],128<=b?b-256:b)|0)){p=259;break}var Lo=(b=h[Ga+2&4294967295],128<=b?b-256:b);if(0==(Oc(Lo)|0)){p=259;break}if(32==((b=h[Ga+3&4294967295],128<=b?b-256:b)|0)){p=259;break}if(32==((b=h[Ga+4&4294967295],128<=b?b-256:b)|0)){p=259;break}Ga=Ga+2&4294967295;K=K+1&4294967295;p=250}}if(259==p){var Bm=Q=Ga-Na&4294967295;ra=Na;Fc=ra+Bm;jc=32;0>jc&&(jc+=256);for(jc=jc+(jc<<8)+(jc<<16)+16777216*jc;0!==ra%4&&ra<Fc;)h[ra++]=32;ra>>=2;for(ze=Fc>>2;ra<ze;)a[ra++]=jc;for(ra<<=2;ra<Fc;)h[ra++]=32;var Q=Kb-En&4294967295,tp=Na,on=Q,La;La=Fn;ra=tp;Fc=La+on;if(ra%4==La%4&&8<on){for(;0!==La%4&&La<Fc;)h[ra++]=h[La++];La>>=2;ra>>=2;for(ze=Fc>>2;La<ze;)a[ra++]=a[La++];La<<=2;ra<<=2}for(;La<Fc;)h[ra++]=h[La++]}Ga=Na}while(0);var ta=0,Mo=(b=h[Na+ta&4294967295],128<=b?b-256:b),Po=0!=(Oc(Mo)|0),qn=ta;Po?(u=261,p=262):(u=261,p=263);g:do if(262==p)for(;;){var ta=(262==u?sn:qn)+1&4294967295,Xo=(b=h[Na+ta&4294967295],128<=b?b-256:b),Zo=0!=(Oc(Xo)|0),sn=ta;if(Zo)p=u=262;else{u=262;p=263;break g}}while(0);p=4<((261==u?qn:sn)|0)?264:284;g:do if(264==p){h[Hn]=32;Kb=Kn;Q=ta;Qb=0;p=(ta|0)>(a[((C&4294967295)+212&4294967295)>>2]|0)?266:265;h:do if(265==p){p=48==((b=h[Na&4294967295],128<=b?b-256:b)|0)?266:267;break h}while(0);if(266==p){var tn=Ra+12*K&-1;a[tn>>2]|=524288}h:for(;;){if(!(Kb>>>0<Pn>>>0)){p=278;break h}var vn=Ga,Ga=vn+1&4294967295,wn=(b=h[vn],128<=b?b-256:b),I=wn,p=0!=(10>(wn-48&4294967295)>>>0&1|0)?270:269;if(269==p&&(I|0)!=(a[((C&4294967295)+208&4294967295)>>2]|0)){p=278;break h}var fp=I&255,Cq=Kb,Kb=Cq+1&4294967295;h[Cq]=fp;var xn=Q-1&4294967295,Q=xn;if(!(0<(xn|0))){p=267;continue h}if(0==(1<<Q&a[((C&4294967295)+192&4294967295)>>2]|0)){p=267;continue h}var Dq=Qb,Qb=Dq+1&4294967295,gp=hb+12*Dq&4294967295;La=Ra+12*K&4294967295;ra=gp;Fc=La+12;if(ra%4==La%4){for(;0!==La%4&&La<Fc;)h[ra++]=h[La++];La>>=2;ra>>=2;for(ze=Fc>>2;La<ze;)a[ra++]=a[La++];La<<=2;ra<<=2}for(;La<Fc;)h[ra++]=h[La++];p=32!=(a[((C&4294967295)+204&4294967295)>>2]|0)?273:274;if(273==p){var pl=a[((C&4294967295)+204&4294967295)>>2]&255,Eq=Kb,Kb=Eq+1&4294967295;h[Eq]=pl}var di=Kb,Kb=di+1&4294967295;h[di]=32;p=0!=(1<<(Q-1&4294967295)&a[((C&4294967295)+192&4294967295)>>2]|0)?275:276;if(275==p){var Yi=Kb,Kb=Yi+1&4294967295;h[Yi]=48;var On=Kb,Kb=On+1&4294967295;h[On]=48}if(0==(1<<(Q-2&4294967295)&a[((C&4294967295)+192&4294967295)>>2]|0)){p=267;continue h}var Mc=Kb,Kb=Mc+1&4294967295;h[Mc]=48;p=267}var Ga=Ga+-1&4294967295,yg=hb+12*Qb&4294967295;La=Ra+12*K&4294967295;ra=yg;Fc=La+24;if(ra%4==La%4){for(;0!==La%4&&La<Fc;)h[ra++]=h[La++];La>>=2;ra>>=2;for(ze=Fc>>2;La<ze;)a[ra++]=a[La++];La<<=2;ra<<=2}for(;La<Fc;)h[ra++]=h[La++];Ia=1;p=(Ia|0)<=(Qb|0)?279:280;h:do if(279==p)for(;;){var ib=hb+12*Ia&-1;a[ib>>2]&=-262209;Ia=Ia+1&4294967295;if((Ia|0)<=(Qb|0))p=279;else{p=280;break h}}while(0);var nh=Kb;La=Ga;ra=nh;Fc=La+16;if(ra%4==La%4){for(;0!==La%4&&La<Fc;)h[ra++]=h[La++];La>>=2;ra>>=2;for(ze=Fc>>2;La<ze;)a[ra++]=a[La++];La<<=2;ra<<=2}for(;La<Fc;)h[ra++]=h[La++];Qb=h[Kb+16&4294967295]=0;Ga=Zn;if(!(Ga>>>0<Kb>>>0)){p=293;break g}for(;;){for(var ql=C,up=Ga,Fq=Qb,Qb=Fq+1&4294967295,Fa=Is(ql,up,hb+12*Fq&4294967295,l[(Ra+12*K&4294967295)+8&4294967295]&255,0);;){var Gq=Ga,Ga=Gq+1&4294967295;if(32!=((b=h[Gq],128<=b?b-256:b)|0))p=282;else{p=283;break}}h[(Ra+12*K&4294967295)+8&4294967295]=0;if(Ga>>>0<Kb>>>0)p=281;else{p=293;break g}}}else if(284==p){a[Ee>>2]=0;Fa=Is(C,Na,Ra+12*K&4294967295,l[(Ra+12*K&4294967295)+8&4294967295]&255,l[(Ra+12*(K+1&4294967295)&4294967295)+8&4294967295]&255);p=(a[Ee>>2]|0)>(l[(Ra+12*(K+1&4294967295)&4294967295)+8&4294967295]&255|0)?285:286;285==p&&(h[(Ra+12*(K+1&4294967295)&4294967295)+8&4294967295]=a[Ee>>2]&255,a[Ee>>2]=0);p=0!=(Fa&65536|0)?287:289;h:do if(287==p){Ga=Na;if(32==((b=h[Ga],128<=b?b-256:b)|0)){p=289;break h}for(;;){ra=so;Fc=ra+9;jc=32;0>jc&&(jc+=256);for(jc=jc+(jc<<8)+(jc<<16)+16777216*jc;0!==ra%4&&ra<Fc;)h[ra++]=32;ra>>=2;for(ze=Fc>>2;ra<ze;)a[ra++]=jc;for(ra<<=2;ra<Fc;)h[ra++]=32;var Hq=Q=sc(tb,Ga);La=Ga;ra=uo;Fc=La+Hq;if(ra%4==La%4&&8<Hq){for(;0!==La%4&&La<Fc;)h[ra++]=h[La++];La>>=2;ra>>=2;for(ze=Fc>>2;La<ze;)a[ra++]=a[La++];La<<=2;ra<<=2}for(;La<Fc;)h[ra++]=h[La++];Is(C,vo,Ra+12*K&4294967295,0,0);Ga=Ga+Q&4294967295;if(32!=((b=h[Ga],128<=b?b-256:b)|0))p=288;else{p=289;break h}}}while(0);if(0==(Fa&50331648|0)){p=293;break g}if((K|0)!=(Sa-1&4294967295|0)){p=293;break g}if(0==(Ta&4194304|0)){p=293;break g}V=10;sb=4}while(0);if(0==(Fa&128|0)){p=295;break f}K=K+a[kf>>2]&4294967295}while(0);K=K+1&4294967295;if((K|0)<(Sa|0))p=243;else{p=296;break d}}}while(0);var K=0,jp=a[ma>>2],u=296;d:for(;;){cb=ab+8*(K+(296==u?jp:Iq)&4294967295)&4294967295;h[cb&4294967295]=9;h[cb+1&4294967295]=0;t[(cb+6&4294967295)>>1]=a[X>>2]&65535;t[(cb+4&4294967295)>>1]=0;var yn=K+1&4294967295,K=yn,Iq=a[ma>>2];if(2>(yn|0))p=u=297;else{u=297;p=298;break d}}a[ma>>2]=Iq+2&4294967295;p=0==(a[Nl>>2]|0)?299:300;299==p&&(V=0);p=0!=(Kd()|0)?301:303;d:do if(301==p){if(!(0==(Sa|0)|0==(a[lr>>2]|0))){p=303;break d}V=10}while(0);var zg=C,lp=V,op=a[Rl>>2],Zd=s;s+=24152;la(Zd,0,24152);var W=void 0,re=null,wp=void 0,bc=void 0,Gc=void 0,Be=void 0,Hc=void 0,Ac=void 0,Cm=void 0,In=void 0,rl=void 0,sl=void 0,$j=void 0,Rn=void 0,jg=void 0,Te=void 0,fi=void 0,se=void 0,Yb=void 0,Zc=void 0,gi=Zd+152,Ag=void 0,Zi=void 0,Sn=void 0,tl=void 0,oh=void 0,Jq=void 0,Kq=void 0,ak=void 0,bk=void 0,wp=op,Zc=$j=sl=rl=Be=bc=0,Ag=ab&4294967295,Hc=fc&4294967295,Te=P[((Ag+8*(a[ma>>2]-1&4294967295)&4294967295)+6&4294967295)>>1]&65535,Rn=0,Lq=a[ma>>2]-3&4294967295,Gc=Lq,re=0;d:for(;;){if(!(0<=((5==re?Mq:Lq)|0)))break d;W=(l[(Ag+8*Gc&4294967295)+1&4294967295]&127|0)>(Rn|0)?3:4;3==W&&(Rn=l[(Ag+8*Gc&4294967295)+1&4294967295]&127);if(0!=(P[((Ag+8*Gc&4294967295)+6&4294967295)>>1]&65535|0))break d;var Mq=Gc-
1&4294967295,Gc=Mq,re=5}W=4>(Rn|0)?7:11;d:do if(7==W){for(;;){var Tn=Gc-1&4294967295,Gc=Tn;if(!(0<=(Tn|0)))break d;var ul=(Ag+8*Gc&4294967295)+1&4294967295;if(0!=(P[((Ag+8*Gc&4294967295)+4&4294967295)>>1]&64|0)){W=9;break}if(4<=(l[ul]&255|0))break d;else W=7}h[ul]=4}while(0);var Ad=a[(((zg&4294967295)+24&4294967295)+16&4294967295)>>2],W=0!=(Ad|0)?12:51;d:do if(12==W){var jg=Sn=0,Un=a[ma>>2]-1&4294967295,Gc=Un;if(!(0<=(Un|0)))break d;for(;;){var Sc=Ma[(Z+4*(l[Ag+8*Gc&-1]&255)&4294967295)>>2],Ac=Sc,W=0==(Sc|0)?50:14;f:do if(14==W){var Jn=$j;21==(l[Ac+10&4294967295]&255|0)?(re=14,W=15):(re=14,W=16);if(15==W)var Ln=Jn^1,$j=Ln,re=15;if(0!=((15==re?Ln:Jn)|0))break f;Zi=l[Ac+11&4294967295]&255;W=0!=(Ad&2|0)?18:24;g:do if(18==W){W=118==(a[(Ac&4294967295)>>2]|0)?21:19;h:do if(19==W){if(15222==(a[(Ac&4294967295)>>2]|0))break h;if(82!=(a[(Ac&4294967295)>>2]&255|0))break g}while(0);W=1==(Sn|0)?22:23;22==W?jg=0:23==W&&(Zi=3)}while(0);W=4==(Zi|0)|6==(Zi|0)?25:32;g:do if(25==W){var Mn=jg;0==(Mn|0)?(re=25,W=26):(re=25,W=29);if(26==W)if(W=0!=(Ad&15|0)?27:28,27==W){jg=1;break g}else if(28==W)var rp=jg,re=28;if(2!=((28==re?rp:Mn)|0))break g;if(0==(l[Ac+13&4294967295]&255|0))break g;h[Ag+8*Gc&-1]=h[Ac+13&4294967295]}else if(32==W)if(W=5==(Zi|0)|7==(Zi|0)?33:40,33==W){var Qn=jg;0==(Qn|0)?(re=33,W=34):(re=33,W=37);if(34==W)if(W=0!=(Ad&15|0)?35:36,35==W){jg=2;break g}else if(36==W)var xp=jg,re=36;if(1!=((36==re?xp:Qn)|0))break g;if(0==(l[Ac+13&4294967295]&255|0))break g;h[Ag+8*Gc&-1]=h[Ac+13&4294967295]}else if(40==W)if(W=0!=(Ad&8|0)?41:43,41==W){if(!(0==(Zi|0)|2==(Zi|0)))break g;jg=0}else 43==W&&(jg=0);while(0);Sn=0;if(0==(b=t[((Ag+8*Gc&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b))break f;W=0!=(Ad&4|0)?46:47;46==W&&(jg=0);if(0==(Ad&16|0))break f;if(0!=(jg|0))break f;Sn=jg=1}while(0);var Yn=Gc-1&4294967295,Gc=Yn;if(0<=(Yn|0))W=13;else break d}}while(0);var Nq=void 0;var $d=void 0,Vn=null,Em=void 0,vl=void 0,ck=void 0,Oq=void 0,aj=void 0,Pq=void 0,yp=void 0,te=void 0,Fm=void 0,Em=gi&4294967295,vl=Fm=yp=aj=0;e:for(;;){if(!((vl|0)<(a[ma>>2]|0)))break e;if(!(1E3>(aj|0)))break e;var te=ab+8*vl&4294967295,zp=yp;21==(l[te&4294967295]&255|0)?(Vn=3,$d=4):(Vn=3,$d=5);if(4==$d)var Ap=zp^1,yp=Ap,Vn=4;$d=0==((4==Vn?Ap:zp)|0)?6:24;f:do if(6==$d){$d=(vl|0)<(a[ma>>2]-1&4294967295|0)?7:8;7==$d&&(Fm=a[(Z+4*(l[ab+8*(vl+1&4294967295)&-1]&255)&4294967295)>>2]);Pq=0;$d=0!=(b=t[((te+8&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b)?11:9;g:do if(9==$d){if(0==(Fm|0)){$d=12;break g}$d=0==(l[Fm+11&4294967295]&255|0)?11:12;break g}while(0);11==$d&&(Pq=1);ck=0;g:for(;;){if(!((ck|0)<(a[Ck>>2]|0))){$d=23;break g}$d=(l[te&4294967295]&255|0)==(l[Dk+3*ck&-1]&255|0)?15:22;h:do if(15==$d){Oq=(b=h[(Dk+3*ck&4294967295)+2&4294967295],128<=b?b-256:b);$d=0!=(Oq&1|0)?16:17;if(16==$d&&0==(Pq|0))break h;if(0==(Oq&2|0)){$d=19;break g}if(!(3<(l[te+1&4294967295]&7|0))){$d=19;break g}}while(0);ck=ck+1&4294967295;$d=13}g:do if(19==$d){h[te&4294967295]=h[(Dk+3*ck&4294967295)+1&4294967295];if(!(1<(l[te+1&4294967295]&255|0)))break g;if(0==(a[(a[(Z+4*(l[te&4294967295]&255)&4294967295)>>2]+4&4294967295)>>2]&2|0))break g;h[te+1&4294967295]=0}while(0);$d=0==(l[te&4294967295]&255|0)?25:24;break f}while(0);if(24==$d){var Bp=Em+24*aj&4294967295,Wn,rg,wl;Wn=te;rg=Bp;for(wl=Wn+8;Wn<wl;)h[rg++]=h[Wn++];a[((Em+24*aj&4294967295)+8&4294967295)>>2]=a[(Z+4*(l[te&4294967295]&255)&4294967295)>>2];h[(Em+24*aj&4294967295)+15&4294967295]=h[a[((Em+24*aj&4294967295)+8&4294967295)>>2]+11&4294967295];aj=aj+1&4294967295}vl=vl+1&4294967295}Nq=aj;se=Nq-2&4294967295;Gc=0;d:for(;;){if(!((Gc|0)<(se|0)))break d;if(!(997>(bc|0)))break d;W=0!=(b=t[((gi+24*Gc&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b)?55:63;if(55==W){sl=0;oh=Gc;e:for(;;){if(!((oh|0)<(se|0)))break e;W=(l[(gi+24*oh&4294967295)+1&4294967295]&255|0)>(sl|0)?58:59;58==W&&(sl=l[(gi+24*oh&4294967295)+1&4294967295]&255);oh=oh+1&4294967295;if(0!=(b=t[((gi+24*oh&4294967295)+6&4294967295)>>1],32768<=b?b-65536:b))break e}tl=Gc;W=(tl|0)<(oh|0)?61:62;e:do if(61==W)for(;;)if(h[(gi+24*tl&4294967295)+2&4294967295]=sl&255,tl=tl+1&4294967295,(tl|0)<(oh|0))W=61;else break e;while(0);Gc=oh}else 63==W&&(Gc=Gc+1&4294967295)}Ac=a[(Z+36&4294967295)>>2];a[((gi&4294967295)+8&4294967295)>>2]=Ac;var Gc=$j=0,ve=(Zd+4&4294967295)+12&4294967295,Gp=(Zd+4&4294967295)+4&4294967295,Qq=(Zd+4&4294967295)+16&4294967295,bj=(Zd+4&4294967295)+16&4294967295,Op=(Zd+4&4294967295)+40&4294967295;d:for(;;){var fo=Be;0!=(fo|0)?(re=65,W=69):(re=65,W=66);if(66==W){if(!((Gc|0)<(se|0)))break d;if(!(997>(bc|0)))break d;var Pp=Be,re=68}var Qp=68==re?Pp:fo,Yb=gi+24*Gc&4294967295,kg=a[(Z+4*(l[Yb&4294967295]&255)&4294967295)>>2],W=0!=(Qp|0)?70:73;if(70==W){var Cm=kg,Gc=Gc-1&4294967295,Bg=gi+24*Gc&4294967295,Yb=Zc=Bg,W=0<(Gc|0)?71:72;if(71==W){var Dp=Yb+-24&4294967295,Ce,le,hi,Gm;Ce=Yb&4294967295;le=Dp;hi=Ce+24;if(le%4==Ce%4){for(;0!==Ce%4&&Ce<hi;)h[le++]=h[Ce++];Ce>>=2;le>>=2;for(Gm=hi>>2;Ce<Gm;)a[le++]=a[Ce++];Ce<<=2;le<<=2}for(;Ce<hi;)h[le++]=h[Ce++]}var ph;le=Yb&4294967295;hi=le+24;ph=0;0>ph&&(ph+=256);for(ph=ph+(ph<<8)+(ph<<16)+16777216*ph;0!==le%4&&le<hi;)h[le++]=0;le>>=2;for(Gm=hi>>2;le<Gm;)a[le++]=ph;for(le<<=2;le<hi;)h[le++]=0;h[Yb&4294967295]=Be&255;Ac=a[(Z+4*Be&4294967295)>>2];a[(Yb+8&4294967295)>>2]=Ac;Be=0}else 73==W&&(Ac=kg,a[((Yb&4294967295)+8&4294967295)>>2]=Ac,W=21==(l[Yb&4294967295]&255|0)?74:75,74==W&&(Xf(l[Yb+3&4294967295]&255),$j^=32),Cm=a[(Z+4*(l[Yb+24&-1]&255)&4294967295)>>2],a[((Yb+24&4294967295)+8&4294967295)>>2]=Cm);W=0==(Ac|0)?157:77;e:do if(77==W){Ed(zg,256,Yb,Zd);var go=a[ve>>2],fi=go,W=0<(go|0)?78:83;if(78==W){Jq=Ac;Be=l[Yb&4294967295]&255;Ac=a[(Z+4*fi&4294967295)>>2];a[(Yb+8&4294967295)>>2]=Ac;h[Yb&4294967295]=fi&255;var Qf=Yb+4&4294967295,Xn=P[Qf>>1]&65535,W=2==(l[Ac+11&4294967295]&255|0)?79:81;f:do if(79==W){t[Qf>>1]=(Xn|4)&65535;if(2==(l[Jq+11&4294967295]&255|0))break f;h[Yb+1&4294967295]=0}else 81==W&&(t[Qf>>1]=Xn&65531);while(0);Ed(zg,256,Yb,Zd)}var Rq=a[Gp>>2],fi=Rq,W=0<(Rq|0)?84:90;if(84==W){Kq=Ac;Ac=a[(Z+4*fi&4294967295)>>2];a[(Yb+8&4294967295)>>2]=Ac;h[Yb&4294967295]=fi&255;if(1==(fi|0))break e;var Cg=Yb+4&4294967295,cj=P[Cg>>1]&65535,W=2==(l[Ac+11&4294967295]&255|0)?86:88;f:do if(86==W){t[Cg>>1]=(cj|4)&65535;if(2==(l[Kq+11&4294967295]&255|0))break f;h[Yb+1&4294967295]=0}else 88==W&&(t[Cg>>1]=cj&65531);while(0);Ed(zg,256,Yb,Zd)}W=2==(l[Ac+11&4294967295]&255|0)?91:110;f:do if(91==W)if(W=1>=(l[Yb+1&4294967295]&255|0)?92:109,92==W)if(rl=rl+1&4294967295,W=0!=(a[((zg&4294967295)+12&4294967295)>>2]&8|0)?93:102,93==W){for(ak=Yb+24&4294967295;;){if(0==(l[ak+15&4294967295]&255|0))break f;var dk=ak;if(2==(l[ak+15&4294967295]&255|0))break;ak=dk+24&4294967295}if(!(1>=(l[dk+1&4294967295]&255|0)))break f;W=4>(l[Yb+2&4294967295]&255|0)?98:99;98==W&&(h[Yb+1&4294967295]=0);if(!(4>(l[ak+2&4294967295]&255|0)))break f;h[ak+1&4294967295]=0}else{if(102==W){if(!(1<(rl|0)))break f;if(0!=(rl&1|0))break f;W=0!=(a[((zg&4294967295)+12&4294967295)>>2]&2|0)?107:105;g:do if(105==W){W=3<(sl|0)?106:108;if(106==W&&0!=(P[((Yb+24&4294967295)+6&4294967295)>>1]&65535|0)){W=107;break g}h[Yb+1&4294967295]=0;break f}while(0);rl=1}}else 109==W&&(rl=0);while(0);W=0!=(P[((Yb+24&4294967295)+4&4294967295)>>1]&8|0)?113:115;f:do if(113==W){if(0==($g(Cz&4294967295,l[Cm+11&4294967295]&255)|0))break f;var Be=l[Cm+10&4294967295]&255,Ep=(Yb+24&4294967295)+4&4294967295;t[Ep>>1]=(P[Ep>>1]&65535^8)&65535}while(0);W=0!=(P[((Yb+24&4294967295)+6&4294967295)>>1]&65535|0)?116:141;f:do if(116==W){W=0!=(a[((zg&4294967295)+4&4294967295)>>2]|0)?117:134;g:do if(117==W){if(0==(l[Ac+11&4294967295]&255|0))break g;W=2!=(l[Ac+11&4294967295]&255|0)?119:121;h:do if(119==W){if(0==(a[((zg&4294967295)+4&4294967295)>>2]&512|0))break h;Be=11}while(0);if(2!=(l[Cm+11&4294967295]&255|0))break g;var dj=a[((zg&4294967295)+4&4294967295)>>2]&12,bk=dj,W=0!=(dj|0)?123:126;123==W&&(W=12==(bk|0)?124:125,124==W?Be=11:125==W&&(Be=23));W=2==(l[Ac+11&4294967295]&255|0)?127:131;h:do if(127==W){var Hm=a[((zg&4294967295)+4&4294967295)>>2]&3,bk=Hm;if(0==(Hm|0)){W=131;break h}W=2==(bk|0)?129:130;129==W?Be=10:130==W&&(Be=23)}while(0);if(!(4<=(l[(Yb+24&4294967295)+1&4294967295]&255|0)))break g;if(0==(a[((zg&4294967295)+4&4294967295)>>2]&256|0))break g;Be=10}while(0);if((Yb|0)==(Zc|0))break f;var Sq=a[(zg&-1)>>2]&7,bk=Sq,W=0!=(Sq|0)?136:139;g:do if(136==W){W=1<(bk|0)?138:137;if(137==W&&!(10!=(Be|0)&11!=(Be|0))){W=139;break g}Be=l[Dz+bk&4294967295]&255}while(0);if(!(0<(a[wo>>2]|0)))break f;Be=24}while(0);In=a[(Z+4*(l[Yb+48&-1]&255)&4294967295)>>2];a[((Yb+48&4294967295)+8&4294967295)>>2]=In;W=0==(Be|0)?142:144;f:do if(142==W){if(0==(a[Qq>>2]|0))break f;Be=a[bj>>2]}while(0);a[((Hc+24*bc&4294967295)+8&4294967295)>>2]=Ac;h[(Hc+24*bc&4294967295)+15&4294967295]=h[Ac+11&4294967295];h[(Hc+24*bc&4294967295)+14&4294967295]=0;t[((Hc+24*bc&4294967295)+4&4294967295)>>1]=(P[(Yb+4&4294967295)>>1]&65535|$j)&65535;h[(Hc+24*bc&4294967295)+1&4294967295]=l[Yb+1&4294967295]&15;h[(Hc+24*bc&4294967295)+2&4294967295]=h[Yb+2&4294967295];h[(Hc+24*bc&4294967295)+3&4294967295]=h[Yb+3&4294967295];t[((Hc+24*bc&4294967295)+6&4294967295)>>1]=0;h[Hc+24*bc&-1]=h[Ac+10&4294967295];W=0!=(P[(Yb+6&4294967295)>>1]&65535|0)?145:147;f:do if(145==W){t[((Hc+24*bc&4294967295)+6&4294967295)>>1]=t[(Yb+6&4294967295)>>1];h[(Hc+24*bc&4294967295)+19&4294967295]=1;if(0==(wp|0))break f;h[(Hc+24*bc&4294967295)+19&4294967295]=5;wp=0}else 147==W&&(h[(Hc+24*bc&4294967295)+19&4294967295]=0);while(0);t[((Hc+24*bc&4294967295)+12&4294967295)>>1]=2*a[Op>>2]&65535;W=24==(l[Ac+10&4294967295]&255|0)&0<(a[wo>>2]|0)?149:150;149==W&&(a[((Hc+24*bc&4294967295)+8&4294967295)>>2]=a[(Z+40&4294967295)>>2],t[((Hc+24*bc&4294967295)+12&4294967295)>>1]=14*a[wo>>2]&65535);W=2==(l[Ac+11&4294967295]&255|0)?155:151;f:do if(151==W){if(3==(l[Ac+11&4294967295]&255|0)){W=155;break f}if(8==(l[Ac+11&4294967295]&255|0)){W=155;break f}if(5==(l[Ac+11&4294967295]&255|0)){W=155;break f}W=7==(l[Ac+11&4294967295]&255|0)?155:156;break f}while(0);155==W&&(t[((Hc+24*bc&4294967295)+12&4294967295)>>1]=128,h[(Hc+24*bc&4294967295)+14&4294967295]=0);h[(Hc+24*bc&4294967295)+16&4294967295]=0;h[(Hc+24*bc&4294967295)+18&4294967295]=20;h[(Hc+24*bc&4294967295)+20&4294967295]=-1;h[(Hc+24*bc&4294967295)+21&4294967295]=-1;bc=bc+1&4294967295}while(0);Gc=Gc+1&4294967295}h[(Hc+24*bc&4294967295)+19&4294967295]=2;h[Hc+24*bc&-1]=9;h[(Hc+24*bc&4294967295)+15&4294967295]=0;t[((Hc+24*bc&4294967295)+12&4294967295)>>1]=lp&65535;t[((Hc+24*bc&4294967295)+6&4294967295)>>1]=Te&65535;t[((Hc+24*bc&4294967295)+4&4294967295)>>1]=0;var lg=a[(Z+36&4294967295)>>2],ii=bc,bc=ii+1&4294967295;a[((Hc+24*ii&4294967295)+8&4294967295)>>2]=lg;h[Hc+24*bc&-1]=9;h[(Hc+24*bc&4294967295)+15&4294967295]=0;t[((Hc+24*bc&4294967295)+12&4294967295)>>1]=0;t[((Hc+24*bc&4294967295)+6&4294967295)>>1]=0;t[((Hc+24*bc&4294967295)+4&4294967295)>>1]=0;var Fp=a[(Z+40&4294967295)>>2],Tq=bc,bc=Tq+1&4294967295;a[((Hc+24*Tq&4294967295)+8&4294967295)>>2]=Fp;a[Nc>>2]=bc;s=Zd;p=0!=(Ua|0)?304:305;if(304==p){t[((fc+24*(a[Nc>>2]-2&4294967295)&4294967295)+4&4294967295)>>1]=2;var ho=vf+4*(a[wf>>2]-1&4294967295)&4294967295;a[ho>>2]|=128}a[H>>2]=sb;a[Rl>>2]=0;p=0!=(Ta&524288|0)?306:307;306==p&&(a[Rl>>2]=1);p=0!=(D|0)?308:311;if(308==p){var Vq=D,p=0!=(Ta&131072|0)?309:310;309==p?a[Vq>>2]=Cs&4294967295:310==p&&(a[Vq>>2]=0)}p=0!=(Kd()|0)?313:312;d:do if(312==p){if(0==(B|0)){p=313;break d}p=3==(a[$e>>2]|0)?315:316;if(315==p){z=a[lj>>2];p=317;break c}else if(316==p){z=a[Lg>>2];p=317;break c}}while(0);z=0}while(0);var Rp=z;s=v;n=Rp;a[wk>>2]=n;var Sp=a[Rb>>2],Tp=a[d>>2],dn=s;s+=6E3;la(dn,0,6E3);var Oa=void 0,Xl=null,Tl=void 0,$q=void 0,ee=void 0,ti=void 0,Pc=void 0,ar=void 0,He=void 0,bg=void 0,Ul=void 0,Yl=void 0,en=void 0,fn=void 0,no=void 0,Fh=void 0,br=void 0,cr=void 0,Zl=void 0,$l=void 0,gn=void 0,hn=void 0,Wp=dn,Tl=Sp,$q=Tp,no=0,hn=a[Nc>>2];a[za>>2]=Wp&4294967295;Pc=Zl=bg=0;Oa=(Pc|0)<(a[Nc>>2]-1&4294967295|0)?1:8;c:do if(1==Oa)for(;;){ee=fc+24*Pc&4294967295;Oa=0!=(P[(ee+4&4294967295)>>1]&4|0)?2:4;e:do if(2==Oa){h[(a[za>>2]+6*bg&4294967295)+2&4294967295]=0;h[(a[za>>2]+6*bg&4294967295)+1&4294967295]=0;h[(a[za>>2]+6*bg&4294967295)+3&4294967295]=h[(fc+24*(Pc+1&4294967295)&4294967295)+15&4294967295];var Xp=h[ee+1&4294967295],oo=bg,bg=oo+1&4294967295;h[a[za>>2]+6*oo&-1]=Xp;if(!(4<=(l[ee+1&4294967295]&255|0))){Oa=7;break e}Zl=Zl+1&4294967295}else if(4==Oa){if(27!=(l[a[(ee+8&4294967295)>>2]+10&4294967295]&255|0)){Oa=7;break e}if(!(0<(bg|0))){Oa=7;break e}var po=(a[za>>2]+6*(bg-1&4294967295)&4294967295)+2&4294967295,Yp=((b=h[po],128<=b?b-256:b)|4)&255;h[po]=Yp}while(0);Pc=Pc+1&4294967295;if((Pc|0)<(a[Nc>>2]-1&4294967295|0))Oa=1;else{Oa=8;break c}}while(0);h[a[za>>2]+6*bg&-1]=0;Oa=0==(bg|0)?70:9;c:do if(9==Oa){var qo=Tl,Oa=1==(a[((Tl&4294967295)+224&4294967295)>>2]|0)?10:11;if(10==Oa){var ro=qo,yb=void 0,kd=void 0,xf=void 0,bm=void 0,Zm=void 0,Gh=void 0,cm=void 0,dm=void 0,$m=void 0,em=void 0,lo=void 0,dr=void 0,an=void 0,an=Zm=bm=0,kd=fc&4294967295,xf=0,yb=(xf|0)<(a[Nc>>2]|0)?1:8;d:do if(1==yb)for(;;){yb=2==(l[kd+15&4294967295]&255|0)?2:7;f:do if(2==yb){if(!(4<=(l[kd+1&4294967295]&255|0)))break f;yb=0==(bm|0)?4:5;4==yb&&(Zm=xf);if(!(4<=(l[kd+1&4294967295]&255|0)))break f;Zm=xf;bm=bm+1&4294967295}while(0);xf=xf+1&4294967295;kd=kd+24&4294967295;if((xf|0)<(a[Nc>>2]|0))yb=1;else break d}while(0);h[(fc+24*Zm&4294967295)+1&4294967295]=7;yb=30313==(a[(ro+280&4294967295)>>2]|0)?9:11;d:do if(9==yb){kd=fc+24*Zm&4294967295;if(0!=(l[kd+3&4294967295]&255|0))break d;var Zp=Bd(55)&255;h[kd+3&4294967295]=Zp}while(0);var cm=1,dm=0,kd=fc&4294967295,dr=fc&4294967295,$p=a[(Z+36&4294967295)>>2],em=lo=$p,xf=0,yb=(xf|0)<(a[Nc>>2]|0)?12:47;d:do if(12==yb)for(;;){yb=0==(l[kd+15&4294967295]&255|0)?13:15;f:do if(13==yb){if(!(50<(l[a[(kd+8&4294967295)>>2]+14&4294967295]&255|0)))break f;cm=1;lo=a[(Z+36&4294967295)>>2]}while(0);yb=0!=(b=h[kd+19&4294967295],128<=b?b-256:b)?16:17;16==yb&&(em=a[(Z+36&4294967295)>>2]);yb=0!=(P[(kd+4&4294967295)>>1]&4|0)?18:46;if(18==yb){Gh=l[kd+3&4294967295]&255;$m=a[(Z+4*Gh&4294967295)>>2];yb=31336==(a[(ro+280&4294967295)>>2]|0)?19:45;f:do if(19==yb){yb=0==(Gh|0)?20:25;if(20==yb){yb=0!=(cm|0)?22:21;g:do if(21==yb){if(0!=(dm|0)){yb=22;break g}Gh=Bd(12593);yb=24;break g}while(0);22==yb&&(Gh=Bd(13621),dm=1);h[kd+3&4294967295]=Gh&255;$m=a[(Z+4*Gh&4294967295)>>2]}else 25==yb&&(dm=0);yb=(xf|0)==(Zm|0)?27:30;g:do if(27==yb){yb=13621==(a[($m&4294967295)>>2]|0)?29:28;if(28==yb&&12597!=(a[($m&4294967295)>>2]|0))break g;h[(fc+24*Zm&4294967295)+1&4294967295]=6}while(0);yb=3420466==(a[(lo&4294967295)>>2]|0)?31:34;if(31==yb)if(yb=3420466==(a[($m&4294967295)>>2]|0)?32:33,32==yb){var aq=Bd(13619)&255;h[dr+3&4294967295]=aq}else if(33==yb){var bq=Bd(12594)&255;h[dr+3&4294967295]=bq}yb=12597==(a[(em&4294967295)>>2]|0)?35:37;g:do if(35==yb){if(12597!=(a[($m&4294967295)>>2]|0))break g;var cq=Bd(13109)&255;h[dr+3&4294967295]=cq}while(0);if(12593!=(a[($m&4294967295)>>2]|0))break f;yb=13621==(a[(lo&4294967295)>>2]|0)?39:40;if(39==yb){var dq=Bd(12850)&255;h[kd+3&4294967295]=dq}yb=13619==(a[(lo&4294967295)>>2]|0)?41:42;if(41==yb){var eq=Bd(13107)&255;h[kd+3&4294967295]=eq}yb=3420466==(a[(lo&4294967295)>>2]|0)?43:44;if(43==yb){var fq=Bd(13364)&255;h[kd+3&4294967295]=fq}h[kd+1&4294967295]=0}while(0);var dr=kd,gq=$m,lo=em=gq,cm=0}xf=xf+1&4294967295;kd=kd+24&4294967295;if((xf|0)<(a[Nc>>2]|0))yb=12;else break d}while(0);kd=fc&4294967295;xf=0;yb=(xf|0)<(a[Nc>>2]|0)?48:58;d:do if(48==yb)for(;;){yb=0!=(P[(kd+4&4294967295)>>1]&4|0)?49:57;if(49==yb){Gh=l[kd+3&4294967295]&255;yb=0!=(l[kd+1&4294967295]&255|0)?50:54;f:do if(50==yb)if(yb=(xf|0)==(Zm|0)?51:52,51==yb)an=0;else if(52==yb){an=an-0&4294967295;if(!(0>=(an|0)))break f;an=0}while(0);yb=0==(Gh|0)?55:56;55==yb&&(Gh=17,h[kd+3&4294967295]=Gh&255);h[kd+20&4294967295]=(l[a[(Z+4*Gh&4294967295)>>2]+12&4294967295]&255)+an&255;h[kd+21&4294967295]=(l[a[(Z+4*Gh&4294967295)>>2]+13&4294967295]&255)+an&255}xf=xf+1&4294967295;kd=kd+24&4294967295;if((xf|0)<(a[Nc>>2]|0))yb=48;else break d}while(0)}else if(11==Oa){var to=Ul=a[((qo&4294967295)+228&4294967295)>>2],Oa=8<=(to|0)?12:13;d:do if(12==Oa){var Ul=1,hq=$q,Xl=12,Oa=15;break d}else if(13==Oa){var xo=$q;if(0==(to|0))Xl=13;else{Xl=13;Oa=15;break d}Yl=l[((Tl&4294967295)+232&4294967295)+xo&4294967295]&255;en=l[((Tl&4294967295)+232&4294967295)+5&4294967295]&255;fn=l[((Tl&4294967295)+232&4294967295)+1&4294967295]&255;Oa=16;break d}while(0);15==Oa&&(Yl=l[((Tl+1E3&4294967295)+6*Ul&4294967295)+(12==Xl?hq:xo)&4294967295]&255,en=l[((Tl+1E3&4294967295)+6*Ul&4294967295)+5&4294967295]&255,fn=l[((Tl+1E3&4294967295)+6*Ul&4294967295)+1&4294967295]&255);Oa=4==($q|0)?17:18;17==Oa?h[hj]=1:18==Oa&&(h[hj]=0);He=$l=Fh=0;Oa=(He|0)<(bg|0)?20:54;d:do if(20==Oa)for(;;){ti=a[za>>2]+6*He&4294967295;Oa=4<=((b=h[ti&4294967295],128<=b?b-256:b)|0)?21:22;21==Oa&&($l=$l+1&4294967295);Oa=6==((b=h[ti&4294967295],128<=b?b-256:b)|0)?23:36;f:do if(23==Oa){Pc=He-1&4294967295;g:for(;;){if(!((Pc|0)>=(Fh|0))){Oa=30;break g}if(!((Pc|0)>=(He-3&4294967295|0))){Oa=30;break g}if(6==((b=h[a[za>>2]+6*Pc&-1],128<=b?b-256:b)|0)){Oa=30;break g}var jq=4==((b=h[a[za>>2]+6*Pc&-1],128<=b?b-256:b)|0),zo=Pc;if(jq){Oa=28;break g}Pc=zo-1&4294967295;Oa=24}28==Oa&&(h[a[za>>2]+6*zo&-1]=3);for(Pc=He+1&4294967295;;){if(!((Pc|0)<(bg|0))){Oa=36;break f}if(4==((b=h[a[za>>2]+6*Pc&-1],128<=b?b-256:b)|0)){Oa=36;break f}if(6==((b=h[a[za>>2]+6*Pc&-1],128<=b?b-256:b)|0)){Oa=34;break}Pc=Pc+1&4294967295;Oa=31}h[(a[za>>2]+6*He&4294967295)+2&4294967295]=2;h[ti&4294967295]=5}while(0);Oa=6==((b=h[ti&4294967295],128<=b?b-256:b)|0)?37:50;if(37==Oa){h[(a[za>>2]+6*He&4294967295)+2&4294967295]=2;cr=0;Oa=1<(Zl-$l&4294967295|0)?38:39;38==Oa&&(cr=1);Pc=He+1&4294967295;f:for(;;){if(!((Pc|0)<(bg|0))){Oa=45;break f}if(4<((b=h[a[za>>2]+6*Pc&-1],128<=b?b-256:b)|0)){Oa=45;break f}Oa=4==((b=h[a[za>>2]+6*Pc&-1],128<=b?b-256:b)|0)?43:44;if(43==Oa&&(cr=cr+1&4294967295,1<(cr|0))){Oa=45;break f}Pc=Pc+1&4294967295;Oa=40}Wr(Fh,Pc,bg);Oa=(Pc|0)<(bg|0)?47:46;f:do if(46==Oa){if(0==($q|0)){Oa=47;break f}Lp(Ul,Fh,Pc,Yl);Oa=49;break f}while(0);47==Oa&&Lp(Ul,Fh,Pc,en);Fh=Pc}Oa=(Fh|0)<(He|0)?51:53;f:do if(51==Oa){if(0==((b=h[ti+2&4294967295],128<=b?b-256:b)&4|0)){Oa=53;break f}br=He+1&4294967295;Wr(Fh,br,br);Lp(Ul,Fh,br,fn);Fh=br}while(0);He=He+1&4294967295;if((He|0)<(bg|0))Oa=20;else{Oa=54;break d}}while(0);Oa=(Fh|0)<(He|0)?55:56;55==Oa&&(Wr(Fh,He,bg),Lp(Ul,Fh,He,Yl));He=0;Pc=no;if(!((Pc|0)<(hn|0))){Oa=70;break c}for(;;){ee=fc+24*Pc&4294967295;h[ee+1&4294967295]=h[a[za>>2]+6*He&-1];Oa=0!=(P[(ee+4&4294967295)>>1]&4|0)?58:69;if(58==Oa){ti=a[za>>2]+6*He&4294967295;h[ee+20&4294967295]=h[ti+4&4294967295];h[ee+21&4294967295]=h[ti+5&4294967295];h[ee+14&4294967295]=0;var lq=0!=((b=h[ti+2&4294967295],128<=b?b-256:b)&1|0),Do=ee,Oa=lq?59:60;e:do if(59==Oa)h[Do+14&4294967295]=2;else if(60==Oa){if(!(5<(l[Do+1&4294967295]&255|0))){Oa=62;break e}h[ee+14&4294967295]=h[ti+1&4294967295]}while(0);Oa=(l[ee+20&4294967295]&255|0)>(l[ee+21&4294967295]&255|0)?63:64;63==Oa&&(ar=l[ee+20&4294967295]&255,h[ee+20&4294967295]=h[ee+21&4294967295],h[ee+21&4294967295]=ar&255);Oa=0!=(b=h[ee+3&4294967295],128<=b?b-256:b)?65:66;65==Oa&&(gn=a[(Z+4*(l[ee+3&4294967295]&255)&4294967295)>>2],ar=((l[ee+21&4294967295]&255)+(l[ee+20&4294967295]&255)&4294967295|0)/2|0,h[ee+21&4294967295]=(l[gn+13&4294967295]&255)+ar&255,h[ee+20&4294967295]=(l[gn+12&4294967295]&255)+ar&255);Oa=0!=((b=h[ti+2&4294967295],128<=b?b-256:b)&2|0)?67:68;if(67==Oa){var Eo=ee+1&4294967295;h[Eo]=(l[Eo]&255|8)&255}He=He+1&4294967295}Pc=Pc+1&4294967295;if((Pc|0)<(hn|0))Oa=57;else{Oa=70;break c}}}}while(0);s=dn;var mq=a[Rb>>2],Dr=s;s+=156;la(Dr,0,156);var J=void 0,Ek=null,cg=void 0,Hh=void 0,er=void 0,dd=void 0,fe=void 0,Fk=void 0,Er=void 0,Da=void 0,bn=void 0,Vl=void 0,Fr=void 0,fr=void 0,Up=void 0,Gk=void 0,mo=void 0,ed=void 0,Wl=void 0,nn=void 0,gr=void 0,Fo=Dr,Vp=void 0,Gr=void 0,Hr=void 0,Ho=void 0,Ir=void 0,Io=Dr+4,cg=mq,Gk=Up=fr=0,Ir=a[Fo>>2]=0,Hh=1,J=(Hh|0)<(a[Nc>>2]|0)?1:193;c:do if(1==J){var nq=Io+124&4294967295;for(;;){dd=fc+24*(Hh-1&4294967295)&4294967295;Da=fc+24*Hh&4294967295;Vl=l[Da+1&4294967295]&7;Hr=l[Da+1&4294967295]&8;fe=fc+24*(Hh+1&4294967295)&4294967295;J=0!=(P[(Da+4&4294967295)>>1]&2|0)?3:4;if(3==J)for(var oq=Fo,No=void 0,hr=void 0;;){var Oo=oq,Qo=a[Oo>>2];a[Oo>>2]=Qo+1&4294967295;hr=a[(vf+4*Qo&4294967295)>>2];No=2==(hr&31|0)?2:3;2==No&&(Qr(hr&127,hr>>>8),Nm(1));if(0!=(hr&128|0))break}Fr=l[Da+15&4294967295]&255;J=0!=(P[(Da+4&4294967295)>>1]&4|0)?5:6;e:do if(5==J){Fr=2;J=98;break e}else if(6==J){var cn=Fr;if(0==cn)J=7;else if(4==cn)J=8;else if(7==cn)J=23;else if(6==cn)J=23;else if(5==cn)J=49;else if(3==cn)J=74;else if(8==cn)J=74;else{J=2==cn?98:192;break e}if(7==J){Gk=0;J=192;break e}else if(8==J){Gk=0;J=6==(l[dd+15&4294967295]&255|0)?9:10;f:do if(9==J)h[Da+16&4294967295]=25;else if(10==J){J=0<(a[yf>>2]|0)?12:11;g:do if(11==J){if(4>(Vl|0)){J=12;break g}h[Da+16&4294967295]=60;J=14;break f}while(0);h[Da+16&4294967295]=48}while(0);J=4==(l[dd+15&4294967295]&255|0)?15:16;15==J&&(h[Da+16&4294967295]=60);J=0!=(a[(cg&-1)>>2]&16|0)?17:19;f:do if(17==J){if(0==(b=h[Da+19&4294967295],128<=b?b-256:b)){J=19;break f}h[Da+16&4294967295]=60}while(0);J=0!=(a[(a[(Da+8&4294967295)>>2]+4&4294967295)>>2]&4194304|0)?20:21;if(20==J){var Ro=Da+16&4294967295;h[Ro]=(l[Ro]&255)+30&255}if(0==(P[(Da+4&4294967295)>>1]&8|0)){J=192;break e}var So=Da+16&4294967295;h[So]=(l[So]&255)+a[((cg&4294967295)+
240&4294967295)>>2]&255;J=192;break e}else if(23==J){J=0!=(b=h[Da+19&4294967295],128<=b?b-256:b)?24:27;f:do if(24==J){J=2==(l[dd+15&4294967295]&255|0)?25:26;if(25==J&&0!=(a[(a[(Da+8&4294967295)>>2]+4&4294967295)>>2]&16777216|0)){J=27;break f}h[Da+16&4294967295]=15}while(0);J=0==(l[fe+15&4294967295]&255|0)?28:31;f:do if(28==J){if(8!=(l[dd+15&4294967295]&255|0)){J=31;break f}if(0!=(a[(a[(Da+8&4294967295)>>2]+4&4294967295)>>2]&8|0)){J=31;break f}h[Da+16&4294967295]=25}while(0);J=0!=(a[(a[(dd+8&4294967295)>>2]+4&4294967295)>>2]&16384|0)?32:33;32==J&&(h[Da+16&4294967295]=30);J=0!=(a[(cg&-1)>>2]&16|0)?34:36;f:do if(34==J){if(0==(b=h[Da+19&4294967295],128<=b?b-256:b)){J=36;break f}h[Da+16&4294967295]=30}while(0);J=0!=(a[(a[(Da+8&4294967295)>>2]+4&4294967295)>>2]&32|0)?37:42;f:do if(37==J){if(4!=(l[fe+15&4294967295]&255|0)){J=42;break f}if(0!=(b=h[fe+19&4294967295],128<=b?b-256:b)){J=42;break f}var To=Da+12&4294967295,J=2==(l[dd+15&4294967295]&255|0)?40:41;if(40==J){t[To>>1]=200;J=43;break f}else if(41==J){t[To>>1]=150;J=43;break f}}while(0);42==J&&(t[(Da+12&4294967295)>>1]=256);if(7!=(Fr|0)){J=192;break e}J=2==(l[fe+15&4294967295]&255|0)?45:46;45==J&&(Up=1);J=2==(l[dd+15&4294967295]&255|0)?48:47;if(47==J&&3!=(l[dd+15&4294967295]&255|0)){J=192;break e}var qq=(((b=t[(dd+12&4294967295)>>1],32768<=b?b-65536:b)+255&4294967295|0)/2|0)&65535;t[(Da+12&4294967295)>>1]=qq;J=192;break e}else if(49==J){J=7==(l[dd+15&4294967295]&255|0)?53:50;f:do if(50==J){if(6==(l[dd+15&4294967295]&255|0)){J=53;break f}if(0!=(a[(a[(dd+8&4294967295)>>2]+4&4294967295)>>2]&32|0)){J=53;break f}J=3==(l[dd+15&4294967295]&255|0)?53:54;break f}while(0);53==J&&(h[Da+16&4294967295]=30);J=2==(l[fe+15&4294967295]&255|0)?56:55;f:do if(55==J){J=3==(l[fe+15&4294967295]&255|0)?56:70;break f}while(0);f:do if(56==J){J=2==(l[fe+15&4294967295]&255|0)?58:57;g:do if(57==J){J=0!=(b=h[fe+19&4294967295],128<=b?b-256:b)?59:58;break g}while(0);58==J&&(Up=1);h[Da+16&4294967295]=40;J=0==(l[dd+15&4294967295]&255|0)?61:60;g:do if(60==J){if(2==(l[dd+
15&4294967295]&255|0)){J=61;break g}if(0!=(l[Da+19&4294967295]&255|0)){J=70;break f}J=3==(l[dd+15&4294967295]&255|0)?64:65;64==J&&(h[Da+16&4294967295]=20);J=8==(l[dd+15&4294967295]&255|0)?66:67;66==J&&(h[Da+16&4294967295]=12);if(4!=(l[dd+15&4294967295]&255|0)){J=70;break f}if(0!=(a[(a[(dd+8&4294967295)>>2]+4&4294967295)>>2]&8|0)){J=70;break f}h[Da+16&4294967295]=0;J=70;break f}while(0);h[Da+16&4294967295]=0}while(0);if(0==(a[(cg&-1)>>2]&16|0)){J=192;break e}if(0==(b=h[Da+19&4294967295],128<=b?b-256:b)){J=192;break e}if(!(20>(l[Da+16&4294967295]&255|0))){J=192;break e}h[Da+16&4294967295]=20;J=192;break e}else if(74==J){h[Da+18&4294967295]=h[cg+660&-1];t[(Da+12&4294967295)>>1]=256;Vp=0;J=0!=(b=h[Da+19&4294967295],128<=b?b-256:b)?75:80;f:do if(75==J){J=3==(l[dd+15&4294967295]&255|0)?76:77;76==J&&(h[Da+16&4294967295]=25);if(2!=(l[dd+15&4294967295]&255|0)){J=80;break f}if(0!=(a[(a[(Da+8&4294967295)>>2]+4&4294967295)>>2]&16777216|0)){J=80;break f}h[Da+16&4294967295]=12}while(0);J=2==(l[fe+15&4294967295]&255|0)?81:82;if(81==J){fr=1;J=192;break e}else if(82==J){h[Da+21&4294967295]=Gk&255;J=2==(l[dd+15&4294967295]&255|0)?84:83;f:do if(83==J){if(3==(l[dd+15&4294967295]&255|0)){J=84;break f}for(er=Hh;;){if(!((er|0)<(a[Nc>>2]|0))){J=95;break f}var Uo=er;if(2==(l[(fc+24*er&4294967295)+15&4294967295]&255|0)){J=93;break}er=Uo+1&4294967295;J=91}h[Da+21&4294967295]=h[(fc+24*Uo&4294967295)+21&4294967295];J=95;break f}while(0);f:do if(84==J){t[(Da+12&4294967295)>>1]=t[(dd+12&4294967295)>>1];J=3==(l[Da+15&4294967295]&255|0)?85:86;85==J&&(t[(Da+12&4294967295)>>1]=a[ok>>2]&65535);J=5==(l[fe+15&4294967295]&255|0)?87:88;if(87==J){var rq=((160*(b=t[(Da+12&4294967295)>>1],32768<=b?b-65536:b)&4294967295|0)/100|0)&65535;t[(Da+12&4294967295)>>1]=rq}if(7!=(l[fe+15&4294967295]&255|0)){J=95;break f}var tq=((120*(b=t[(Da+12&4294967295)>>1],32768<=b?b-65536:b)&4294967295|0)/100|0)&65535;t[(Da+12&4294967295)>>1]=tq}while(0);h[Da+20&4294967295]=(l[Da+21&4294967295]&255)-16&255;J=16>(l[Da+21&4294967295]&255|0)?96:97;96==J&&(h[Da+
20&4294967295]=0);Up=h[Da+14&4294967295]=0;J=192;break e}}}while(0);if(98==J){var Vp=0,Fk=fc+24*(Hh+2&4294967295)&4294967295,Er=fc+24*(Hh+3&4294967295)&4294967295,Wo=Vl,J=7<(Wo|0)?99:100;e:do if(99==J)Vl=7;else if(100==J){if(!(1>=(Wo|0))){J=102;break e}Vl^=1}while(0);var Yo=l[(cg+660&4294967295)+Vl&4294967295],J=0!=(fr|0)?103:104;103==J?h[Da+18&4294967295]=(Yo&255)-1&255:104==J&&(h[Da+18&4294967295]=Yo);J=0!=(Hr|0)?106:107;106==J&&(h[Da+18&4294967295]=25);J=(Hh|0)>=(a[Nc>>2]-3&4294967295|0)?108:110;e:do if(108==J){if(!((l[Da+18&4294967295]&255|0)>(a[(((cg&4294967295)+24&4294967295)+36&4294967295)>>2]|0))){J=110;break e}h[Da+18&4294967295]=a[(((cg&4294967295)+24&4294967295)+36&4294967295)>>2]&255}while(0);var gr=a[yf>>2]=0,$o=bn=Da+24&4294967295;0==(l[bn+19&4294967295]&255|0)?(Ek=110,J=111):(Ek=110,J=117);e:do if(111==J)for(;;){J=2==(l[(116==Ek?ap:$o)+15&4294967295]&255|0)?112:114;g:do if(112==J){if(0!=(a[(a[(bn+8&4294967295)>>2]+4&4294967295)>>2]&1048576|0)){J=114;break g}a[yf>>2]=a[yf>>2]+
1&4294967295}while(0);J=27==(l[a[(bn+8&4294967295)>>2]+10&4294967295]&255|0)?115:116;115==J&&(gr=2);var ap=bn=bn+24&4294967295;if(0==(l[bn+19&4294967295]&255|0))Ek=116,J=111;else{Ek=116;J=117;break e}}while(0);J=27==(l[a[((110==Ek?$o:ap)+8&4294967295)>>2]+10&4294967295]&255|0)?118:119;118==J&&(gr=2);J=0!=(l[bn+19&4294967295]&2|0)&0==(a[yf>>2]|0)?120:121;120==J&&(gr=2);J=23==(l[a[(fe+8&4294967295)>>2]+10&4294967295]&255|0)?122:124;e:do if(122==J){if(0!=(l[Fk+15&4294967295]&255|0)){J=124;break e}fe=Fk;Fk=Er;Er=fc+24*(Hh+4&4294967295)&4294967295}while(0);var bp=(l[a[(fe+8&4294967295)>>2]+15&4294967295]&255)+(10*(l[a[(Fk+8&4294967295)>>2]+15&4294967295]&255)&4294967295)&4294967295,cp=cg&4294967295,J=0==(a[yf>>2]|0)?125:129;e:do if(125==J){Wl=l[a[(cp+180&4294967295)>>2]+bp&4294967295]&255;J=0!=(b=h[fe+19&4294967295],128<=b?b-256:b)?126:128;f:do if(126==J){if(0==(a[(cg&-1)>>2]&32|0)){J=128;break f}ed=((l[a[((cg&4294967295)+180&4294967295)>>2]+((10*(l[a[(fe+8&4294967295)>>2]+15&4294967295]&255)&4294967295)+1&4294967295)&4294967295]&255)+Wl&4294967295|0)/2|0;J=134;break e}while(0);ed=Wl}else if(129==J){ed=l[a[(cp+176&4294967295)>>2]+bp&4294967295]&255;if(8!=(l[fe+15&4294967295]&255|0)){J=134;break e}J=4==(l[Fk+15&4294967295]&255|0)?132:131;if(131==J&&5!=(l[Fk+15&4294967295]&255|0)){J=134;break e}if(0==(a[(a[(Er+8&4294967295)>>2]+4&4294967295)>>2]&8|0)){J=134;break e}ed=ed-15&4294967295}while(0);J=0==(a[yf>>2]|0)?135:136;135==J?ed=ed*a[ok>>2]&4294967295:136==J&&(J=1==(a[yf>>2]|0)?137:138,137==J?ed=ed*a[Om>>2]&4294967295:138==J&&(ed=ed*a[eo>>2]&4294967295));var dp=(ed|0)/128|0,ed=dp,J=8>(dp|0)?140:141;140==J&&(ed=8);J=7<=(Vl|0)?142:144;e:do if(142==J){ed=ed+20&4294967295;if(0==(Hr|0)){J=146;break e}ed=ed+10&4294967295}else if(144==J){if(0==(Hr|0)){J=146;break e}ed=ed+20&4294967295}while(0);var ep=(b=t[((cg+676&4294967295)+2*Vl&4294967295)>>1],32768<=b?b-65536:b),Wl=ep,J=0==(ep|0)?147:148;147==J&&(Wl=(b=t[((cg+676&4294967295)+12&4294967295)>>1],32768<=b?b-65536:b));ed=Wl*ed&4294967295;J=0!=(l[Da+3&4294967295]&255|0)?149:151;e:do if(149==J){var hp=l[a[(Z+4*(l[Da+3&4294967295]&255)&4294967295)>>2]+14&4294967295]&255,Ho=hp;if(!(0<(hp|0))){J=151;break e}ed=(Ho*ed&4294967295|0)/100|0}while(0);J=2==(gr|0)?152:155;152==J&&(Wl=2*(l[a[(Da+8&4294967295)>>2]+14&4294967295]&255)&4294967295,J=0!=(a[((cg&4294967295)+12&4294967295)>>2]&262144|0)?153:154,153==J&&(Wl=200),ed=((((280-Wl&4294967295|0)/3|0)+256&4294967295)*ed&4294967295|0)/256|0);J=(ed|0)>(a[ok>>2]*a[((cg&4294967295)+272&4294967295)>>2]&4294967295|0)?156:157;156==J&&(ed=a[ok>>2]*a[((cg&4294967295)+272&4294967295)>>2]&4294967295);ed=(ed|0)/128|0;J=2!=(l[Da+15&4294967295]&255|0)?158:159;158==J&&(ed=256,Vp=16);t[(Da+12&4294967295)>>1]=ed&65535;J=19<=(l[Da+14&4294967295]&255|0)?160:161;160==J&&(Nd(Ez&4294967295,28,1,a[(a[lb>>2]+12&4294967295)>>2]),h[Da+14&4294967295]=0);nn=(l[Da+14&4294967295]&255)+1&4294967295;J=0!=(l[Da+3&4294967295]&255|0)?162:163;162==J?(Vr(l[Da+3&4294967295]&255,Io),Ir=rs(a[nq>>2])):163==J&&(Ir=a[(xb+4*nn&4294967295)>>2]);var ip=(((l[Ir&4294967295]&255)*((l[Da+21&4294967295]&255)-(l[Da+20&4294967295]&255)&4294967295)&4294967295|0)/256|0)+(l[Da+20&4294967295]&255)&4294967295,mo=ip;0!=(fr|0)?(Ek=164,J=167):(Ek=164,J=165);e:do if(165==J){if(0==(Up|0)){J=177;break e}var Bq=mo,Ek=166,J=167;break e}while(0);e:do if(167==J){J=255==((166==Ek?Bq:ip)|0)?168:169;168==J&&(Gk=mo);J=16<(mo-Gk&4294967295|0)?170:171;170==J&&(Gk=mo-16&4294967295);h[dd+20&4294967295]=Gk&255;h[dd+21&4294967295]=mo&255;var kp=dd+14&4294967295,J=(Gk|0)<(mo|0)?172:173;172==J?(h[kp]=2,h[Da+14&4294967295]=nn&255):173==J&&(h[kp]=0);t[(dd+12&4294967295)>>1]=ed&65535;h[dd+18&4294967295]=h[Da+18&4294967295];if(3==(l[dd+15&4294967295]&255|0)){J=177;break e}if(!(18<(l[dd+18&4294967295]&255|0))){J=177;break e}h[dd+18&4294967295]=18}while(0);var np=fe+4&4294967295;t[np>>1]=P[np>>1]&65534;J=8==(l[fe+15&4294967295]&255|0)?178:180;e:do if(178==J){if(2==(l[Fk+15&4294967295]&255|0)){J=180;break e}var pp=fe+4&4294967295;t[pp>>1]=(P[pp>>1]&65535|1)&65535}while(0);J=3==(l[fe+15&4294967295]&255|0)?181:186;e:do if(181==J){var qp=fe+4&4294967295;t[qp>>1]=(P[qp>>1]&65535|1)&65535;J=2==(l[Fk+15&4294967295]&255|0)?182:183;if(182==J){var vp=fe+4&4294967295;t[vp>>1]=P[vp>>1]&65534}if(2==(l[Fk+15&4294967295]&255|0)){J=186;break e}if(12146!=(a[(a[(fe+8&4294967295)>>2]&4294967295)>>2]|0)){J=186;break e}var Cp=fe+4&4294967295;t[Cp>>1]=P[Cp>>1]&65534}while(0);J=0<(Vp|0)?187:191;e:do if(187==J){if(!(((l[Da+21&4294967295]&255)-(l[Da+20&4294967295]&255)&4294967295|0)<(Vp|0))){J=191;break e}Gr=(l[Da+21&4294967295]&255)-Vp&4294967295;J=0>(Gr|0)?189:190;189==J&&(Gr=0);h[Da+20&4294967295]=Gr&255}while(0);Gk=(((l[a[(xb+4*(l[Da+14&4294967295]&255)&4294967295)>>2]+127&4294967295]&255)*((l[Da+21&4294967295]&255)-(l[Da+20&4294967295]&255)&4294967295)&4294967295|0)/256|0)+(l[Da+20&4294967295]&255)&4294967295;Up=fr=0}Hh=Hh+1&4294967295;if((Hh|0)<(a[Nc>>2]|0))J=2;else{J=193;break c}}}while(0);s=Dr;i=0<(a[Hd>>2]|0)|0!=(a[Jr>>2]|0)?26:31;b:do if(26==i){var Uq=a[Rb>>2]+332&-1,$n=s;s+=4;la($n,0,4);var Md=void 0,Hk=void 0,Kr=void 0,ir=void 0,dg=$n,jr=void 0,kr=void 0,ao=void 0,Ih=void 0,Hk=Uq,Kr=300;a[dg>>2]=0;Md=0!=(Hk|0)?1:28;if(1==Md){ir=1;d:for(;;){if(!((ir|0)<(a[Nc>>2]-2&4294967295|0))){Md=25;break d}if(!((a[dg>>2]|0)<(Kr-6&4294967295|0))){Md=25;break d}Ih=fc+24*ir&4294967295;Md=0!=(b=h[Ih+19&4294967295],128<=b?b-256:b)?5:6;if(5==Md){var Hp=a[dg>>2];a[dg>>2]=Hp+1&4294967295;h[Hk+Hp&4294967295]=32}Md=0!=(P[(Ih+4&4294967295)>>1]&4|0)?7:15;e:do if(7==Md){var Ip=l[Ih+1&4294967295]&255,jr=Ip;if(!(1<(Ip|0))){Md=15;break e}kr=0;Md=5<(jr|0)?9:10;9==Md&&(jr=5);Md=3==(a[Hd>>2]|0)?11:13;f:do if(11==Md){kr=716;if(!(3<(jr|0))){Md=14;break f}kr=712}else if(13==Md){var Jp=(b=h[(Fz&4294967295)+jr&4294967295],128<=b?b-256:b),kr=Jp;if(0==(Jp|0)){Md=15;break e}}while(0);var Wq=De(kr,Hk+a[dg>>2]&4294967295);a[dg>>2]=a[dg>>2]+Wq&4294967295}while(0);Md=21==(l[a[(Ih+8&4294967295)>>2]+10&4294967295]&255|0)?16:17;e:do if(16==Md){ao=Me+48*(l[Ih+3&4294967295]&255)&-1;U(Hk+a[dg>>2]&4294967295,Gz&4294967295,e([ao,0,0,0],["i8*",0,0,0],y));var Xq=$(ao);a[dg>>2]=(Xq+2&4294967295)+a[dg>>2]&4294967295}else if(17==Md){bo(Hk,dg,a[(Ih+8&4294967295)>>2],Ih);Md=0!=(P[(Ih+4&4294967295)>>1]&8|0)?18:19;18==Md&&bo(Hk,dg,a[(Z+48&4294967295)>>2],0);Md=0!=(P[(Ih+4&4294967295)>>1]&4|0)?20:22;f:do if(20==Md){if(2==(l[Ih+15&4294967295]&255|0)){Md=22;break f}bo(Hk,dg,a[(Z+80&4294967295)>>2],0)}while(0);if(!(0<(l[Ih+3&4294967295]&255|0))){Md=24;break e}bo(Hk,dg,a[(Z+4*(l[Ih+3&4294967295]&255)&4294967295)>>2],0)}while(0);ir=ir+1&4294967295;Md=2}Md=(a[dg>>2]|0)>=(Kr|0)?26:27;26==Md&&(a[dg>>2]=Kr-1&4294967295);h[Hk+a[dg>>2]&4294967295]=0}s=$n;i=0<(a[Hd>>2]|0)?27:29;c:do if(27==i){Ea(a[Le>>2],Hz&4294967295,e([a[Rb>>2]+332&-1,0,0,0],["i8*",0,0,0],y));if(0!=(jf(269)|0)){i=29;break c}Nd(Iz&4294967295,88,1,a[(a[lb>>2]+12&4294967295)>>2])}while(0);if(0==(a[Jr>>2]|0)){i=31;break b}Bi[a[Jr>>2]](a[Rb>>2]+332&-1)}while(0);i=0!=(a[xk>>2]|0)?32:33;if(32==i)a[Nc>>2]=0,j=1;else if(33==i){Ur(fc&4294967295,Nc,0);i=0!=(a[q>>2]|0)?34:35;if(34==i){var Kp=lv(a[q>>2],0);a[Lr>>2]=Kp;g=34}else if(35==i)var Yq=a[Lr>>2],g=35;i=0!=((35==g?Yq:Kp)|0)?37:38;37==i&&(wq(a[M>>2]),a[Lr>>2]=0);j=1}}}while(0);var Zq=j;s=d;return Zq}function Js(b,c){var f=a[(ud+4*((c|0)%100)&4294967295)>>2];a[((b&4294967295)+176&4294967295)>>2]=f;a[((b&4294967295)+180&4294967295)>>2]=f;f=(c|0)/100|0;1==(0!=(f|0)?1:2)&&(a[((b&4294967295)+180&4294967295)>>2]=a[(ud+4*f&4294967295)>>2])}function Sb(a){var b,f;b=0!=(jf(a)|0)?1:2;1==b?f=1:2==b&&(b=2305<=a>>>0&3575>=a>>>0?3:10,3==b?(b=100>(a&127)>>>0?4:5,4==b?f=1:5==b&&(b=0!=(ik(Jz&4294967295,a)|0)?6:7,6==b?f=1:7==b&&(b=3450<=a>>>0&3455>=a>>>0?8:9,8==b?f=1:9==b&&(f=0)))):10==b&&(b=1611<=a>>>0&1630>=a>>>0?11:12,11==b?f=1:12==b&&(b=768<=a>>>0&879>=a>>>0?13:14,13==b?f=1:14==b&&(b=1920<=a>>>0&1969>=a>>>0?15:16,15==b?f=1:16==b&&(b=4352<=a>>>0&4607>=a>>>0?17:18,17==b?f=1:18==b&&(b=12352<a>>>0&42752>=a>>>0?19:20,19==b?f=1:20==b&&(f=0)))))));return f}function ik(a,b){var f,d,i;for(i=0;;){if(0==(P[(a+2*i&4294967295)>>1]&65535|0)){f=5;break}var g=i+1&4294967295;if((P[(a+2*i&4294967295)>>1]&65535|0)==(b|0)){f=3;break}i=g;f=1}5==f?d=0:3==f&&(d=g);return d}function uq(a){var b,f;b=0!=(Oc(a)|0)?1:2;1==b?f=1:2==b&&(b=2406<=a>>>0&2415>=a>>>0?3:4,3==b?f=1:4==b&&(f=0));return f}function Sl(a){var b,f;b=0==(a|0)?1:2;1==b?f=0:2==b&&(b=9472<=a>>>0&9632>a>>>0?3:4,3==b?f=1:4==b&&(f=kc(a)));return f}function Al(a){var b,f;b=8212<=(a|0)&8223>=(a|0)?1:2;1==b?f=1:2==b&&(f=ik(Kz&4294967295,a));return f}function De(a,b){var f,d,i,g;f=128>a>>>0?1:2;if(1==f)h[b&4294967295]=a&255,d=1;else if(2==f)if(f=1114112<=a>>>0?3:4,3==f)h[b&4294967295]=32,d=1;else if(4==f){f=2048>a>>>0?5:6;5==f?i=1:6==f&&(f=65536>a>>>0?7:8,7==f?i=2:8==f&&(i=3));g=6*i&4294967295;h[b&4294967295]=(a>>>(g>>>0)|l[Lz+i&4294967295]&255)&255;d=0;f=(d|0)<(i|0)?10:11;a:do if(10==f)for(;;)if(g=g-6&4294967295,h[b+(d+1&4294967295)&4294967295]=(a>>>(g>>>0)&63)+128&255,d=d+1&4294967295,(d|0)<(i|0))f=10;else break a;while(0);d=i+1&4294967295}return d}function Bl(c,e,f){var d,i,g;d=128==((b=h[e],128<=b?b-256:b)&192|0)?1:5;a:do if(1==d)for(;;)if(g=e,d=0!=(f|0)?2:3,2==d?e=g+-1&4294967295:3==d&&(e=g+1&4294967295),128==((b=h[e],128<=b?b-256:b)&192|0))d=1;else break a;while(0);f=0;d=e;e=d+1&4294967295;i=d=(b=h[d],128<=b?b-256:b);d=0!=(d&128|0)?6:14;a:do if(6==d){d=192==(i&224|0)?7:8;b:do if(7==d)f=1;else if(8==d)if(d=224==(i&240|0)?9:10,9==d)f=2;else if(10==d){if(240!=(i&248|0)){d=12;break b}f=3}while(0);i&=l[as+f&4294967295]&255;g=0;if(!((g|0)<(f|0)))break a;for(;;)if(d=64*i&4294967295,i=e,e=i+1&4294967295,i=((b=h[i],128<=b?b-256:b)&63)+d&4294967295,g=g+1&4294967295,(g|0)<(f|0))d=13;else break a}while(0);a[c>>2]=i;return f+1&4294967295}function sc(a,b){return Bl(a,b,0)}function zz(a,b){var f,d;f=128<=(b|0)?1:2;1==f?d=0:2==f&&(d=$g(a,b));return d}function ej(c,m,f,d){var i=s;s+=1656;la(i,0,1656);var g,j=null,q,n,k,w,r,t,x,v=i+4,p=i+12,u,z,C,E=i+20,B=i+24,H=i+184,D=i+344,K=i+504,I=i+664,M=i+824,X,P=i+984,R,G,N,S=i+1052,Y=i+1056,na,T,Z,V,ja,ia,ma,oa,qa=i+1060,wa,xa,bb,Va=i+1156,ua,za,ya=i+1160,va=i+1320,Fa=i+1480,Xa=i+1484,Ma=i+1496,Ia;n=d;R=z=u=0;oa=ja=na=a[Y>>2]=0;g=0==(n|0)?1:2;if(1==g){var ba,ta,qb,ob;ba=qa&4294967295;ta=ba+96;ob=0;0>ob&&(ob+=256);for(ob=ob+(ob<<8)+(ob<<16)+16777216*ob;0!==ba%4&&ba<ta;)h[ba++]=0;ba>>=2;for(qb=ta>>2;ba<qb;)a[ba++]=ob;for(ba<<=2;ba<ta;)h[ba++]=0;n=qa&4294967295}ia=a[(n&4294967295)>>2];ma=l[n+9&4294967295]&255;a[(v&4294967295)>>2]=0;a[(v+4&4294967295)>>2]=0;a[(p&4294967295)>>2]=0;a[(p+4&4294967295)>>2]=0;a[kf>>2]=0;h[B&4294967295]=0;h[D&4294967295]=0;h[H&4294967295]=0;h[K&4294967295]=0;g=0==(a[(c+1052&4294967295)>>2]|0)?3:4;a:do if(3==g)q=h[Ua&4294967295]=0;else if(4==g){a[i>>2]=m;g=32==((b=h[a[i>>2]],128<=b?b-256:b)|0)?5:6;5==g&&(a[i>>2]=a[i>>2]+1&4294967295);a[E>>2]=a[i>>2];sc(S,a[E>>2]);k=0;b:for(;;){var Ra=0!=((b=h[a[E>>2]],128<=b?b-256:b)|0),Sa=a[E>>2];if(Ra)j=7;else{j=7;g=10;break b}var Na=32!=((b=h[Sa],128<=b?b-256:b)|0),ab=a[E>>2];if(Na)j=8;else{j=8;g=10;break b}var eb=sc(Y,ab);a[E>>2]=a[E>>2]+eb&4294967295;k=k+1&4294967295;g=7}var Ya=(8==j?ab:Sa)-m&4294967295;X=Ya;g=160<=(Ya|0)?11:12;11==g&&(X=159);var Ta=M&4294967295,lb=X,Q;Q=m;ba=Ta;ta=Q+lb;if(ba%4==Q%4&&8<lb){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++];Z=0;g=36==(a[mg>>2]|0)?13:16;13==g&&(g=1==(k|0)?14:15,14==g?Z=4:15==g&&(a[i>>2]=a[i>>2]+-1&4294967295,h[a[i>>2]]=95,R=Pd(c,i,B&4294967295,v&4294967295,0,n)));g=0!=(a[mg>>2]&16|0)?17:18;b:do if(17==g){var sb=a[mg>>2]&15;Z=sb;j=17;g=70;break b}else if(18==g){g=0!=(R|0)?20:19;19==g&&(R=Pd(c,i,B&4294967295,v&4294967295,2,n));g=0!=(a[(v&4294967295)>>2]&1|0)?21:23;c:do if(21==g){if(46!=((b=h[a[E>>2]+1&4294967295],128<=b?b-256:b)|0)){g=23;break c}h[a[E>>2]+1&4294967295]=32}while(0);g=0!=(a[(v&4294967295)>>2]&536870912|0)?24:27;c:do if(24==g){var Kb=(b=h[a[i>>2]&4294967295],128<=b?b-256:b);a[S>>2]=Kb;V=a[(v&4294967295)>>2]&127;R=Pd(c,i,B&4294967295,p&4294967295,0,n);if(0==(a[(p&4294967295)>>2]|0)){g=33;break c}a[(v&4294967295)>>2]=a[(p&4294967295)>>2];a[(v+
4&4294967295)>>2]=a[(p+4&4294967295)>>2];if(0==(V|0)){g=33;break c}a[(v&4294967295)>>2]=a[(v&4294967295)>>2]&-128|V}else if(27==g){if(0!=(R|0)){g=33;break c}if(0==(a[(v&4294967295)>>2]&128|0)){g=33;break c}a[E>>2]=a[i>>2];w=0;if(!((w|0)<(a[kf>>2]|0))){g=33;break c}for(;;)if(g=32==((b=h[a[E>>2]],128<=b?b-256:b)|0)?31:32,31==g&&(h[a[E>>2]]=45,w=w+1&4294967295),a[E>>2]=a[E>>2]+1&4294967295,(w|0)<(a[kf>>2]|0))g=30;else{g=33;break c}}while(0);g=1==(k|0)&0==(a[kf>>2]|0)?34:37;c:do if(34==g){var Ga;var Qb=a[i>>2],gc=s;s+=84;la(gc,0,84);var hb=void 0,cb=void 0,ga=gc,ka=void 0,Aa=void 0,rb=void 0,Ba=void 0,Dc=void 0,pb=void 0,hc=gc+4,cb=Qb,ka=0,Dc=cb,pb=hc&4294967295,Ba=0;e:for(;;){rb=0;Aa=sc(ga,Dc);hb=32==((b=h[Dc+Aa&4294967295],128<=b?b-256:b)|0)?2:11;f:do if(2==hb){if(0==(Sb(a[ga>>2])|0)){hb=11;break f}hb=46==((b=h[Dc+(Aa+1&4294967295)&4294967295],128<=b?b-256:b)|0)?4:8;if(4==hb)if(hb=32==((b=h[Dc+(Aa+2&4294967295)&4294967295],128<=b?b-256:b)|0)?5:6,5==hb){rb=1;hb=12;break f}else{if(6==hb){if(39!=((b=h[Dc+(Aa+2&4294967295)&4294967295],128<=b?b-256:b)|0)){hb=11;break f}Aa=Aa+2&4294967295;rb=2;hb=12;break f}}else if(8==hb){if(!(0<(ka|0))){hb=11;break f}if(32!=((b=h[Dc+Aa&4294967295],128<=b?b-256:b)|0)){hb=11;break f}rb=2;hb=12;break f}}while(0);if(11==hb&&0==(rb|0)){hb=17;break e}Ba=0;hb=(Ba|0)<(Aa|0)?13:14;f:do if(13==hb)for(;;){var Rb=h[Dc+Ba&4294967295],ha=pb,pb=ha+1&4294967295;h[ha]=Rb;Ba=Ba+1&4294967295;if((Ba|0)<(Aa|0))hb=13;else{hb=14;break f}}while(0);var ka=ka+1&4294967295,A=Aa;if(2==(rb|0)){hb=15;break e}Dc=Dc+(A+3&4294967295)&4294967295;hb=1}15==hb&&(Dc=Dc+A&4294967295);hb=1<(ka|0)?18:21;if(18==hb){var Ba=pb-(hc&4294967295)&4294967295,mb=cb,ic=Ba,sa=void 0,Wa=void 0,xb=void 0,jb=void 0,sa=hc&4294967295,Wa=mb,xb=sa+ic;if(Wa%4==sa%4&&8<ic){for(;0!==sa%4&&sa<xb;)h[Wa++]=h[sa++];sa>>=2;Wa>>=2;for(jb=xb>>2;sa<jb;)a[Wa++]=a[sa++];sa<<=2;Wa<<=2}for(;sa<xb;)h[Wa++]=h[sa++];hb=(cb+Ba&4294967295)>>>0<Dc>>>0?19:20;e:do if(19==hb)for(;;){var Ja=Ba,Ba=Ja+1&4294967295;h[cb+Ja&4294967295]=32;if((cb+Ba&4294967295)>>>0<Dc>>>0)hb=19;else{hb=20;break e}}while(0);a[kf>>2]=2*(ka-1&4294967295)&4294967295}var ca=ka;s=gc;Ga=ca;if(0==(Ga|0)){g=37;break c}a[(v&4294967295)>>2]=0;a[(v+4&4294967295)>>2]=0;Z=1;if(0==(a[kf>>2]|0)){g=37;break c}a[(v&4294967295)>>2]=128}while(0);g=21==((b=h[B&4294967295],128<=b?b-256:b)|0)?38:39;if(38==g){fa(Ua&4294967295,B&4294967295);q=0;g=236;break a}else if(39==g){g=0<(ma|0)&8>(ma|0)?40:41;40==g&&(a[(v&4294967295)>>2]=a[(v&4294967295)>>2]&-16|ma);g=0!=(R|0)?49:42;c:do if(42==g){g=0!=(a[(v&4294967295)>>2]&131072|0)?43:44;43==g&&(Z=1);if(0!=(R|0)){g=49;break c}if(0==(Oc(a[S>>2])|0)){g=49;break c}aa(c,Mz&4294967295,Ua&4294967295);g=21==((b=h[Ua&4294967295],128<=b?b-256:b)|0)?47:48;if(47==g){q=0;g=236;break a}else 48==g&&(R=Ex(c,a[i>>2],B&4294967295,v&4294967295,n,0))}while(0);g=0!=(2!=(ia&3|0)&1&(0!=(R|0)^1)&1|0)?50:57;c:do if(50==g){g=0!=(a[((c&4294967295)+184&4294967295)>>2]&16777216|0)?53:51;if(51==g){if(0==(a[((c&4294967295)+184&4294967295)>>2]&33554432|0)){g=57;break c}if(0==(ia&1|0)){g=57;break c}}g=0!=(ia&16|0)?55:54;if(54==g&&0!=(a[(n+12&-1)>>2]&256|0)){g=57;break c}var Ab;var Lb=c,ec=a[i>>2],Bb=B&4294967295,Ha=n,vb=s;s+=200;la(vb,0,200);var da=void 0,$c=null,fb=void 0,Vb=void 0,Db=void 0,nc=void 0,zb=void 0,Eb=void 0,db=void 0,Hb=void 0,Ib=void 0,Wb=void 0,ea=void 0,Mb=void 0,kb=void 0,Ca=void 0,Gb=void 0,Jb=vb,$b=vb+8,oc=vb+40,Vb=Lb,Db=ec,nc=Bb,zb=Ha,Wb=Ib=Gb=kb=0,Mb=32767;h[nc&4294967295]=0;a[(Jb&4294967295)>>2]=0;a[(Jb+4&4294967295)>>2]=0;da=0!=(a[((Vb&4294967295)+184&4294967295)>>2]&33554432|0)?1:2;e:do if(1==da){da=0!=(a[(zb&-1)>>2]&1|0)?2:3;break e}while(0);e:do if(2==da){if(0!=(10>((b=h[Db+-2&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)){da=3;break e}Ca=Db;f:for(;;){var tb=Db,Db=tb+1&4294967295,ub=(b=h[tb],128<=b?b-256:b),Eb=ub;if(32==(ub|0)){da=25;break f}var Zb=$t(Ks&4294967295,Eb,8),Hb=Zb;if(0==(Zb|0)){da=7;break f}ea=a[(Nz+4*(Hb-Ks&4294967295)&4294967295)>>2];da=(ea|0)==(Wb|0)?9:11;if(9==da){if(kb=kb+1&4294967295,3<=(kb|0)){da=10;break f}}else 11==da&&(kb=0);var mc=Wb;1<(Wb|0)&10!=(Wb|0)&100!=(mc|0)?($c=12,da=13):($c=12,da=15);if(13==da){var rc=Wb;if((ea|0)>=(rc|0)){$c=13;da=14;break f}else $c=13}da=0!=((13==$c?rc:mc)|0)?16:21;g:do if(16==da){if(!((Wb|0)<(ea|0))){da=21;break g}if(0!=((Ib|0)%10|0)){da=19;break f}if((10*Wb&4294967295|0)<(ea|0)){da=19;break f}Mb=Wb;ea=ea-Mb&4294967295;da=24;break g}while(0);if(21==da){if((ea|0)>=(Mb|0)){da=22;break f}Ib=Ib+Wb&4294967295}Wb=ea;da=5}if(25==da)if(da=0!=(10>((b=h[Db&4294967295],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?26:27,26==da){fb=0;da=48;break e}else{if(27==da)if(Ib=Ib+Wb&4294967295,da=(Ib|0)<(a[((Vb&4294967295)+200&4294967295)>>2]|0)?28:29,28==da){fb=0;da=48;break e}else if(29==da)if(da=(Ib|0)>(a[((Vb&4294967295)+196&4294967295)>>2]|0)?30:31,30==da){fb=0;da=48;break e}else if(31==da){aa(Vb,Oz&4294967295,$b&4294967295);db=nc&4294967295;da=0==(a[((Vb&4294967295)+184&4294967295)>>2]&67108864|0)?32:33;if(32==da){fa(nc,$b&4294967295);var vc=$($b&4294967295),db=nc+vc&4294967295}U(oc&4294967295,Pz&4294967295,e([Ib,0,0,0],["i32",0,0,0],y));da=46==((b=h[Db&4294967295],128<=b?b-256:b)|0)?34:35;if(34==da){fb=0;da=48;break e}else if(35==da){da=0!=(Cx(Vb,Ca,Db,zb,1)|0)?36:37;if(36==da){var xc=zb&-1;a[xc>>2]|=32768}da=0!=(a[((Vb&4294967295)+184&4294967295)>>2]&134217728|0)?38:45;f:do if(38==da){var pa=zb&-1,qe=a[pa>>2],da=26741==(a[(Vb+280&4294967295)>>2]|0)?39:44;if(39==da){if(0!=(qe&32768|0)){da=45;break f}da=0!=(a[(zb&-1)>>2]&16384|0)?41:43;g:do if(41==da){if(0==(Dx(Db,0,Ib)|0)){da=43;break g}Gb|=1;da=45;break f}while(0);fb=0;da=48;break e}else 44==da&&(a[pa>>2]=qe|32768)}while(0);a[(Vb+8320&4294967295)>>2]=0;Ex(Vb,oc+2&4294967295,db,Jb&4294967295,zb,Gb);da=0!=(a[((Vb&4294967295)+184&4294967295)>>2]&67108864|0)?46:47;46==da&&md(nc,$b&4294967295);fb=1;da=48;break e}}}else if(7==da){fb=0;da=48;break e}else if(10==da){fb=0;da=48;break e}else if(14==da){fb=0;da=48;break e}else if(19==da){fb=0;da=48;break e}else if(22==da){fb=0;da=48;break e}}while(0);3==da&&(fb=0);var fc=fb;s=vb;Ab=fc;R=Ab;if(0==(Ab|0)){g=57;break c}var Ub=v&4294967295;a[Ub>>2]|=131072}while(0);g=0!=(ia&1|0)?58:69;c:do if(58==g){if(!(1<(k|0))){g=69;break c}if(0==(jf(a[S>>2])|0)){g=69;break c}g=0!=(a[rh>>2]&256|0)?61:63;d:do if(61==g){if(0!=(a[(v&4294967295)>>2]&131072|0)){g=63;break d}ja=2048;g=69;break c}while(0);if(0!=(R|0)){g=69;break c}if(0!=(a[(v&4294967295)>>2]&128|0)){g=69;break c}if(!(4>(k|0))){g=69;break c}if(!(3<(a[(c+8308&4294967295)>>2]|0))){g=69;break c}if(!((a[(c+8304&4294967295)>>2]|0)<=(a[(c+8308&4294967295)>>2]|0))){g=69;break c}Z=1;g=71;break b}while(0);var Jc=Z,j=69;g=70;break b}}while(0);b:do if(70==g){if(0<((69==j?Jc:sb)|0)){g=71;break b}if(0!=(R|0)){g=166;break b}xa=wa=0;bb=999;a[E>>2]=a[i>>2];var kc=D&4294967295,Tb=D&4294967295;c:for(;;){g=3>(bb|0)&0<(bb|0)?80:78;if(78==g){if(!(1<(k|0))){g=89;break c}var xe;var wb=c,pc=a[E>>2],Bc=wa,Fb=s;s+=4;la(Fb,0,4);var Pa=void 0,yc=null,Cd=void 0,Vc=void 0,Wc=void 0,Qc=void 0,xd=Fb,Rc=void 0,Kc=void 0,cf=void 0,uc=void 0,Vc=wb,Wc=pc,Qc=Bc,Rc=0,Kc=9;sc(xd,Wc);Pa=0<(a[(Vc+964&4294967295)>>2]|0)?1:3;e:do if(1==Pa){if(!(577>(a[xd>>2]|0))){Pa=3;break e}Cd=0;Pa=30;break e}while(0);e:do if(3==Pa)if(Pa=1==(a[(((Vc&4294967295)+24&4294967295)+20&4294967295)>>2]|0)?4:5,4==Pa)Cd=0;else if(5==Pa){var Ne=(b=h[Wc],128<=b?b-256:b);a[xd>>2]=Ne;Pa=32==(Ne|0)?7:6;f:do if(6==Pa){if(0==(a[xd>>2]|0)|39==(a[xd>>2]|0)){Pa=7;break f}uc=cf=0;g:for(;;){var Ic=sc(xd,Wc+cf&4294967295),cf=cf+Ic&4294967295;if(0==(a[xd>>2]|0)|32==(a[xd>>2]|0)){Pa=21;break g}Pa=39==(a[xd>>2]|0)?11:13;if(11==Pa){if(1<(uc|0)){Pa=21;break g}if(0<(Qc|0)){Pa=21;break g}}Pa=0==(uc|0)?14:15;14==Pa&&(Rc=a[xd>>2]);uc=uc+1&4294967295;if(0!=(Rf(Vc,a[xd>>2],7)|0)){Pa=16;break g}Pa=39==(a[xd>>2]|0)?18:19;if(18==Pa)Pa=9;else if(19==Pa)if(0!=(jf(a[xd>>2])|0))Pa=9;else{Pa=20;break g}}if(21==Pa)var Lc=Kc,yc=21;else if(16==Pa)var Za=uc,Kc=Za,yc=16;else if(20==Pa){Cd=0;Pa=30;break e}Pa=2<((21==yc?Lc:Za)|0)?23:25;g:do if(23==Pa){if(2!=(a[(((Vc&4294967295)+24&4294967295)+
20&4294967295)>>2]|0)){Pa=25;break g}var Nc=Vc,yd=Wc,O=s;s+=160;la(O,0,160);var gb=void 0,fd=void 0,wc=void 0,od=void 0;h[O&4294967295]=0;wc=(b=h[yd+-1&4294967295],128<=b?b-256:b);h[yd+-1&4294967295]=32;od=Gf(Nc,yd,O&4294967295,160,0,-2147483648,0);h[yd+-1&4294967295]=wc&255;gb=0==(od|0)?2:1;h:do if(1==gb){if(0!=(od&32768|0)){gb=2;break h}fd=0;gb=4;break h}while(0);2==gb&&(fd=1);var lc=fd;s=O;Cd=lc;Pa=30;break e}while(0);Pa=(Rc|0)==(a[(((Vc&4294967295)+24&4294967295)+20&4294967295)>>2]|0)?26:27;26==Pa&&(Kc=Kc-1&4294967295);var pd=Kc,Ec=(b=h[(Vc&4294967295)+248&4294967295],128<=b?b-256:b)+1&4294967295,Pa=(pd|0)>(Ec|0)?28:29;if(28==Pa){Cd=1;Pa=30;break e}else if(29==Pa){Cd=0;Pa=30;break e}}while(0);Cd=0}while(0);var wd=Cd;s=Fb;xe=wd;if(0==(xe|0)){g=89;break c}}oa=67108864;ja=0;if(39==((b=h[a[E>>2]&4294967295],128<=b?b-256:b)|0)){g=89;break c}g=0<(wa|0)?82:83;82==g&&(xa=1);var Tc=yx(c,a[E>>2],kc,xa);a[E>>2]=a[E>>2]+Tc&4294967295;wa=wa+1&4294967295;if(21==((b=h[Tb],128<=b?b-256:b)|0)){g=84;break c}bb=0;if(32==((b=h[a[E>>2]+bb&4294967295],128<=b?b-256:b)|0)){g=77;continue c}for(;;)if(bb=bb+1&4294967295,32!=((b=h[a[E>>2]+bb&4294967295],128<=b?b-256:b)|0))g=88;else{g=77;continue c}}if(89==g){Bx(c,D&4294967295,0,wa);if(32==((b=h[a[E>>2]],128<=b?b-256:b)|0)){g=166;break b}g=0!=((b=h[D&4294967295],128<=b?b-256:b)|0)?91:93;c:do if(91==g){if(39==((b=h[a[E>>2]&4294967295],128<=b?b-256:b)|0)){g=93;break c}h[a[E>>2]+-1&4294967295]=32}while(0);u=Gf(c,a[E>>2],B&4294967295,160,K&4294967295,ia,v&4294967295);var Vd=21==((b=h[B&4294967295],128<=b?b-256:b)|0),qc=B&4294967295;g=Vd?94:95;if(94==g){fa(Ua&4294967295,qc);q=0;g=236;break a}else if(95==g){g=0==((b=h[qc],128<=b?b-256:b)|0)?96:101;c:do if(96==g){if(0!=((b=h[K&4294967295],128<=b?b-256:b)|0)){g=101;break c}sc(Va,a[E>>2]);if(1!=(k|0)){g=101;break c}if(0==(Sb(a[Va>>2])|0)){g=101;break c}var ad=Ls(c,a[E>>2],B&4294967295,Z);a[E>>2]=ad;if(0!=(ad|0)){g=101;break c}q=0;g=236;break a}while(0);N=h[a[E>>2]+-1&4294967295];R=0;T=1;ua=0;var Nd=ya&4294967295,nd=ya&4294967295,Uc=va&4294967295,Yc=v&4294967295,jd=I&4294967295,bd=B&4294967295,Wd=K&4294967295,gd=v&4294967295,Ka=I&4294967295,td=I&4294967295,ud=B&4294967295,Od=ya&4294967295,qd=K&4294967295,ge=va&4294967295,Sd=K&4294967295,Ed=va&4294967295,Kd=va&4294967295,Ld=Xa&4294967295,Fd=K&4294967295,Jd=P+1&4294967295,Gd=H&4294967295,Xb=B&4294967295,pe=B&4294967295,Ud=v&4294967295,Oe=H&4294967295,Dd=B&4294967295,Xd=v&4294967295,be=H&4294967295,ce=H&4294967295,Xc=K&4294967295,Qd=B&4294967295,Td=p&4294967295,ae=v&4294967295,me=p&4294967295,de=v&4294967295,ne=p+4&4294967295,oe=v+4&4294967295,we=B&4294967295,Ee=K&4294967295,Pe=v&4294967295,Qa=B&4294967295,Je=H&4294967295,hd=K&4294967295,he=P&4294967295,j=101;c:for(;;){var Id=u;if(!(50>((136==j?Ge:0)|0))){g=137;break c}if(0==(Id&1024|0)){g=137;break c}g=0!=(T|0)?105:111;d:do if(105==g){if(0!=(u&131072|0)){g=111;break d}h[Nd]=0;za=Gf(c,a[E>>2],nd,160,Uc,ia|805306368,Yc);if(0==(za|0)){g=111;break d}Nw(c,a[E>>2],za,jd);u=Gf(c,a[E>>2],bd,160,Wd,ia|268435456,gd);var Ke=a[E>>2],cd=$(td);Q=Ka;ba=Ke;ta=Q+cd;if(ba%4==Q%4&&8<cd){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++];g=0==(u&1024|0)?108:110;e:do if(108==g){u=za;fa(ud,Od);fa(qd,ge);if(2!=(a[Hd>>2]|0)){g=110;break e}gk(Sd,Ed);Ea(a[Le>>2],Qz&4294967295,e([Kd,0,0,0],["i8*",0,0,0],y))}while(0);T=0;g=136;break d}while(0);d:do if(111==g){z=u;g=0!=(z&2048|0)?112:113;112==g&&(a[(c+8272&4294967295)>>2]=1);h[a[E>>2]+-1&4294967295]=N;g=0==(z&131072|0)?114:118;e:do if(114==g){var ye=z&15;w=ye;if(!(0<(ye|0))){g=124;break e}for(;;){a[E>>2]=a[E>>2]+1&4294967295;g=128==((b=h[a[E>>2]],128<=b?b-256:b)&192|0)?116:117;g:do if(116==g)for(;;)if(a[E>>2]=a[E>>2]+1&4294967295,128==((b=h[a[E>>2]],128<=b?b-256:b)&192|0))g=116;else{g=117;break g}while(0);var Ae=w-1&4294967295;w=Ae;if(0<(Ae|0))g=115;else{g=124;break e}}}else if(118==g){t=1;h[he]=0;x=z&63;w=0;g=(w|0)<(x|0)?119:123;f:do if(119==g)for(;;){var De=a[E>>2];a[E>>2]=De+1&4294967295;var Ue=h[De],Fe=t;t=Fe+1&4294967295;h[P+Fe&4294967295]=Ue;g=0!=(z&131072|0)?120:122;h:do if(120==g){if((w|0)!=(x-1&4294967295|0)){g=122;break h}h[P+(t-1&4294967295)&4294967295]=0}while(0);w=w+1&4294967295;if((w|0)<(x|0))g=119;else{g=123;break f}}while(0);h[P+t&4294967295]=0}while(0);N=h[a[E>>2]+-1&4294967295];h[a[E>>2]+-1&4294967295]=32;T=1;g=0!=(z&131072|0)?125:129;e:do if(125==g){Af(Ld,Fd,12);a[Fa>>2]=Jd;fa(Gd,Xb);R=Pd(c,Fa,pe,Ud,0,n);g=0!=(R|0)?126:127;126==g&&fa(Oe,Dd);if(0==(a[Xd>>2]&131072|0)){g=130;break e}h[be]=0;Ls(c,a[Fa>>2],ce,1)}else 129==g&&md(Je,hd);while(0);u=h[Xc]=0;R=Pd(c,E,Qd,Td,1024,n);g=0==(a[ae>>2]|0)?131:132;131==g?(a[de>>2]=a[me>>2],a[oe>>2]=a[ne>>2]):132==g&&(na=1);if(0!=(R|0)){g=136;break d}u=Gf(c,a[E>>2],we,160,Ee,0,Pe);if(21==((b=h[Qa],128<=b?b-256:b)|0)){g=135;break c}}while(0);var Ge=ua+1&4294967295;ua=Ge;j=136;g=102}if(137==g){g=0!=(Id|0)?138:165;c:do if(138==g){if(0!=(u&1024|0)){g=165;break c}fa(Ma&4294967295,B&4294967295);G=Nw(c,a[E>>2],u,I&4294967295);h[B&4294967295]=0;g=0!=((b=h[H&4294967295],128<=b?b-256:b)|0)?140:148;d:do if(140==g)if(h[a[E>>2]+-1&4294967295]=N,R=Pd(c,i,B&4294967295,p&4294967295,G,n),h[a[E>>2]+-1&4294967295]=32,g=21==((b=h[B&4294967295],128<=b?b-256:b)|0)?141:142,141==g){var We=a[E>>2],Xe=I&4294967295,Ie=$(I&4294967295);Q=Xe;ba=We;ta=Q+Ie;if(ba%4==Q%4&&8<Ie){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++];fa(Ua&4294967295,B&4294967295);q=0;g=236;break a}else if(142==g){g=0==(a[(v&4294967295)>>2]|0)?143:144;143==g&&(a[(v&4294967295)>>2]=a[(p&4294967295)>>2],a[(v+4&4294967295)>>2]=a[(p+4&4294967295)>>2]);g=0!=(R|0)?145:146;if(145==g&&(h[H&4294967295]=0,0!=(R|0))){g=162;break d}if(0==(a[(p&4294967295)>>2]|0)){g=148;break d}na=1;g=148;break d}while(0);d:do if(148==g){if(0!=(R|0)){g=162;break d}R=Pd(c,E,B&4294967295,p&4294967295,G,n);g=21==((b=h[B&4294967295],128<=b?b-256:b)|0)?150:151;if(150==g){var Ye=a[E>>2],af=I&4294967295,Me=$(I&4294967295);Q=af;ba=Ye;ta=Q+Me;if(ba%4==Q%4&&8<Me){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++];fa(Ua&4294967295,B&4294967295);q=0;g=236;break a}else if(151==g){g=0==(a[(v&4294967295)>>2]|0)?152:153;152==g&&(a[(v&4294967295)>>2]=a[(p&4294967295)>>2],a[(v+4&4294967295)>>2]=a[(p+4&4294967295)>>2]);if(0!=(R|0)){g=162;break d}g=0!=(u&16384|0)?155:156;if(155==g)fa(B&4294967295,Ma&4294967295),ww(c,B&4294967295,a[(v&4294967295)>>2]);else if(156==g){g=0!=(G&4|0)?157:158;157==g&&(ia|=8192);g=0!=(u&262144|0)?159:160;159==g&&(ia|=134217728);Gf(c,a[E>>2],B&4294967295,160,0,ia,v&4294967295);if(21!=((b=h[B&4294967295],128<=b?b-256:b)|0)){g=162;break d}fa(Ua&4294967295,B&4294967295);var ff=a[E>>2],lf=I&4294967295,Ve=$(I&4294967295);Q=lf;ba=ff;ta=Q+Ve;if(ba%4==Q%4&&8<Ve){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++];h[a[E>>2]+-1&4294967295]=N;q=0;g=236;break a}}}while(0);g=0==(u&65536|0)?163:164;163==g&&(Wq(c,B&4294967295,160,K&4294967295),h[K&4294967295]=0);var nf=a[E>>2],of=I&4294967295,bf=$(I&4294967295);Q=of;ba=nf;ta=Q+bf;if(ba%4==Q%4&&8<bf){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++]}while(0);h[a[E>>2]+-1&4294967295]=N;g=166;break b}else if(135==g){h[a[E>>2]+-1&4294967295]=N;fa(Ua&4294967295,B&4294967295);q=0;g=236;break a}}}else if(84==g)if(fa(Ua&4294967295,D&4294967295),g=0==(nb(D+1&4294967295,Gg&4294967295)|0)?85:86,85==g){q=65536;g=236;break a}else if(86==g){q=0;g=236;break a}}while(0);b:do if(71==g){u=h[B&4294967295]=0;if(0!=(Ls(c,a[i>>2],B&4294967295,Z)|0)){g=166;break b}g=1<(k|0)?73:74;if(73==g){q=65536;g=236;break a}else if(74==g){q=0;g=236;break a}}while(0);g=167;b:do if(167==g){g=0!=(ia&4|0)?168:174;break b}while(0);b:do if(168==g)if(g=102==(a[Y>>2]|0)?169:170,169==g)Gf(c,Rz+1&4294967295,B&4294967295,160,0,0,0);else if(170==g){g=0==(a[Y>>2]|0)?172:171;c:do if(171==g){if(0==(zz(Sz&4294967295,a[Y>>2])|0)){g=172;break c}Gf(c,Tz+1&4294967295,B&4294967295,160,0,0,0);g=174;break b}while(0);Gf(c,Uz+1&4294967295,B&4294967295,160,0,0,0)}while(0);ia|=ja;C=0;r=H&4294967295;g=0!=((b=h[r],128<=b?b-256:b)|0)?175:179;b:do if(175==g)for(;;){g=6==((b=h[r],128<=b?b-256:b)|0)?177:176;d:do if(176==g){g=7==((b=h[r],128<=b?b-256:b)|0)?177:178;break d}while(0);177==g&&(C=(b=h[r],128<=b?b-256:b));r=r+1&4294967295;if(0!=((b=h[r],128<=b?b-256:b)|0))g=175;else{g=179;break b}}while(0);g=0!=(na|0)?181:180;b:do if(180==g){if(0!=(C|0)){g=181;break b}Hg(c,B&4294967295,v&4294967295,-1,0);Rd(Ua&4294967295,160,pk&4294967295,e([D&4294967295,0,0,0,H&4294967295,0,0,0,B&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));h[Ua+159&4294967295]=0;g=192;break b}while(0);b:do if(181==g){g=0!=(a[(((c&4294967295)+24&4294967295)+12&4294967295)>>2]|0)?183:182;c:do if(182==g){if(0!=(z&65536|0)){g=183;break c}Rd(Ua&4294967295,160,pk&4294967295,e([D&4294967295,0,0,0,H&4294967295,0,0,0,B&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));h[Ua+159&4294967295]=0;Hg(c,Ua&4294967295,v&4294967295,-1,0);g=192;break b}while(0);Hg(c,B&4294967295,v&4294967295,3,0);w=0;Ia=H&4294967295;g=0!=((b=h[Ia],128<=b?b-256:b)|0)?184:189;c:do if(184==g)for(;;)if(g=6==((b=h[Ia],128<=b?b-256:b)|0)?185:188,185==g&&(g=0==(w|0)?186:187,186==g?w=1:187==g&&(h[Ia]=5)),Ia=Ia+1&4294967295,0!=((b=h[Ia],128<=b?b-256:b)|0))g=184;else{g=189;break c}while(0);Rd(Ua&4294967295,160,pk&4294967295,e([D&4294967295,0,0,0,H&4294967295,0,0,0,B&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));h[Ua+159&4294967295]=0;Hg(c,Ua&4294967295,v&4294967295,-1,0)}while(0);g=0!=((b=h[K&4294967295],128<=b?b-256:b)|0)?193:194;193==g&&(w=$(Ua&4294967295),h[K+(159-w&4294967295)&4294967295]=0,fa(Ua+w&4294967295,K&4294967295));g=0!=(ia&16|0)?195:196;if(195==g){var hf=v&4294967295;a[hf>>2]&=-268435457}g=0!=(ia&128|0)?197:199;b:do if(197==g){if(0==(a[((c&4294967295)+12&4294967295)>>2]&1048576|0)){g=199;break b}zl(c,Ua&4294967295,3);g=208;break b}while(0);b:do if(199==g)if(g=0!=(ia&3072|0)?200:202,200==g){zl(c,Ua&4294967295,6);if(0==(ia&2048|0)){g=208;break b}var mf=v&4294967295;a[mf>>2]|=268435456}else if(202==g){if(0==(a[(n+12*a[kf>>2]&-1)>>2]&16|0)){g=208;break b}g=0!=(a[(v&4294967295)>>2]&6144|0)?204:205;if(204==g)zl(c,Ua&4294967295,4);else if(205==g){if(0==(a[(v&4294967295)>>2]&8192|0)){g=208;break b}if(0==(l[wr]&1|0)){g=208;break b}zl(c,Ua&4294967295,3)}}while(0);g=0!=(u&8192|0)?209:210;209==g&&(a[(c+8272&4294967295)>>2]=2,a[(c+8280&4294967295)>>2]=2);g=0!=(a[(v+4&4294967295)>>2]&8|0)?211:212;b:do if(211==g)a[(c+8276&4294967295)>>2]=3,a[(c+8272&4294967295)>>2]=0,a[(c+8284&4294967295)>>2]=0;else if(212==g)if(g=0!=(a[(v+4&4294967295)>>2]&1|0)?213:214,213==g)a[(c+8272&4294967295)>>2]=2,a[(c+8280&4294967295)>>2]=0,a[(c+8284&4294967295)>>2]=0;else if(214==g)if(g=0!=(a[(v+4&4294967295)>>2]&2|0)?215:216,215==g)a[(c+8272&4294967295)>>2]=0,a[(c+8280&4294967295)>>2]=2,a[(c+8276&4294967295)>>2]=0,a[(c+8284&4294967295)>>2]=0;else if(216==g){if(0==(a[(v+4&4294967295)>>2]&4|0)){g=218;break b}a[(c+8284&4294967295)>>2]=2;a[(c+8272&4294967295)>>2]=0;a[(c+8280&4294967295)>>2]=0;a[(c+8276&4294967295)>>2]=0}while(0);g=0!=((b=h[a[E>>2]&4294967295],128<=b?b-256:b)|0)?219:228;b:do if(219==g){if(0!=(a[(v+4&4294967295)>>2]&256|0)){g=228;break b}g=0<(a[(c+8272&4294967295)>>2]|0)?221:222;if(221==g){var tf=c+8272&4294967295;a[tf>>2]=a[tf>>2]-1&4294967295}g=0<(a[(c+8280&4294967295)>>2]|0)?223:224;if(223==g){var uf=c+8280&4294967295;a[uf>>2]=a[uf>>2]-1&4294967295}g=0<(a[(c+8284&4294967295)>>2]|0)?225:226;if(225==g){var vf=c+8284&4294967295;a[vf>>2]=a[vf>>2]-1&4294967295}if(!(0<(a[(c+8276&4294967295)>>2]|0))){g=228;break b}var wf=c+8276&4294967295;a[wf>>2]=a[wf>>2]-1&4294967295}while(0);g=1==(k|0)?229:232;b:do if(229==g){if(25966!=(a[(c+280&4294967295)>>2]|0)){g=232;break b}if(!(0!=(jf(a[S>>2])|0)&105!=(a[S>>2]|0))){g=232;break b}var yf=v&4294967295;a[yf>>2]|=16777216}while(0);g=0!=(a[(((c&4294967295)+24&4294967295)+60&4294967295)>>2]&2|0)?233:235;b:do if(233==g){if(0==(a[(v&4294967295)>>2]&3145728|0)){g=235;break b}var If=a[(v&4294967295)>>2];var ld=void 0,zf=void 0,$e=void 0,Ef=void 0,Re=void 0,df=void 0,Qe=void 0,zf=c,$e=Ua&4294967295,Ef=If,df=$($e),ld=0!=(a[(((zf&4294967295)+24&4294967295)+60&4294967295)>>2]&2|0)?1:14;d:do if(1==ld){for(Re=0;;){if(!((Re|0)<(df-1&4294967295|0)))break d;var Pf=6==((b=h[$e+Re&4294967295],128<=b?b-256:b)|0),Ff=Re+1&4294967295;if(Pf)break;Re=Ff}var Qe=$e+Ff&4294967295,Bf=0!=(Ef&2097152|0),Hf=(b=h[Qe],128<=b?b-256:b),ld=Bf?5:9;if(5==ld){var Sf=Bd(69),ld=(Hf|0)==(Sf|0)?6:7;if(6==ld){var Tf=Bd(101)&255;h[Qe]=Tf}var Uf=(b=h[Qe],128<=b?b-256:b),Vf=Bd(79);if((Uf|0)!=(Vf|0))break d;var Wf=Bd(111)&255;h[Qe]=Wf}else if(9==ld){var Xf=Bd(101),ld=(Hf|0)==(Xf|0)?10:11;if(10==ld){var Yf=Bd(69)&255;h[Qe]=Yf}var Zf=(b=h[Qe],128<=b?b-256:b),$f=Bd(111);if((Zf|0)!=($f|0))break d;var ag=Bd(79)&255;h[Qe]=ag}}while(0)}while(0);var Jf=v&4294967295;a[Jf>>2]|=oa;var eg=m,Lf=X;Q=M&4294967295;ba=eg;ta=Q+Lf;if(ba%4==Q%4&&8<Lf){for(;0!==Q%4&&Q<ta;)h[ba++]=h[Q++];Q>>=2;ba>>=2;for(qb=ta>>2;Q<qb;)a[ba++]=a[Q++];Q<<=2;ba<<=2}for(;Q<ta;)h[ba++]=h[Q++];q=a[(v&4294967295)>>2]}while(0);var gg=q;s=i;return gg}function Ls(a,c,f,d){var i,g=null,e,l,n,k;k=n=l=0;i=2<(d|0)?1:2;1==i&&(n=2);a:for(;;){if(32==((b=h[c],128<=b?b-256:b)|0)){i=3;break a}var g=0!=((b=h[c],128<=b?b-256:b)|0),s=a;if(g)g=4;else{g=4;i=7;break a}k=yx(s,c,f,k|n);c=c+k&4294967295;l=l+1&4294967295;k=1;if(21==((b=h[f&4294967295],128<=b?b-256:b)|0)){i=6;break a}else i=2}a:do if(3==i){var r=a,g=3;i=7;break a}else if(6==i){fa(Ua&4294967295,f);e=0;i=8;break a}while(0);7==i&&(Bx(3==g?r:s,f,d,l),e=c);return e}function El(b){var c,f;f=c=Ah(b);c=0<=(c|0)?1:7;a:do if(1==c){c=0!=(a[tf>>2]|0)?2:5;if(2==c){c=0!=(nb(b,dn&4294967295)|0);var d=a[tf>>2];c=c?3:4;if(3==c)a[tf>>2]=0;else if(4==c&&0!=(d|0))break a}d=Xl(b);a[tf>>2]=d;fa(dn&4294967295,b);if(0==(ap(a[tf>>2],b,0)|0))break a;Xf(a[(a[M>>2]+40&4294967295)>>2]);f=-1;h[dn&4294967295]=0}while(0);return f}function Hs(a){var b,a=48<=a>>>0&57>=a>>>0?1:2;1==a?b=1:2==a&&(b=0);return b}function Is(c,m,f,d,i){var g=s;s+=392;la(g,0,392);var j,q=null,n,k,w,r,v,x,H,p,u,z,C,E,B,N,D,K,I,U,X,T,R,G,aa,S,Y,na,V,ja,oa=g+4,qa=g+168,ia,wa=g+208,xa,ua,za,Fa=g+220,bb=g+228,Va=g+232;k=m;w=d;I=H=r=0;U=-1;X=0;T=-1;R=1;j=0!=(a[Li>>2]|0)?1:7;a:do if(1==j){if(0==(a[pq>>2]&8|0)){j=7;break a}Ea(a[Li>>2],Vz&4294967295,e([a[(f&4294967295)>>2],0,0,0,l[f+10&4294967295]&255,0,0,0],["i32",0,0,0,"i32",0,0,0],y));S=0;for(q=2;;){if(!(40>((5==q?Ma:0)|0))){j=6;break}if(0==((b=h[k+S&4294967295],128<=b?b-256:b)|0)){j=6;break}var Xa=(b=h[k+S&4294967295],128<=b?b-256:b);xc(Xa,a[Li>>2]);var Ma=S+1&4294967295;S=Ma;q=5;j=3}Nd(Wz&4294967295,2,1,a[Li>>2])}while(0);var ya=l[f+10&4294967295]&255;aa=ya;j=31<(ya|0)?8:9;8==j&&(aa=31);G=P[(f+6&4294967295)>>1]&2047|aa<<11;V=a[(f&-1)>>2];j=0!=(V&64|0)?10:18;a:do if(10==j)for(h[ne]=1;;){var va=a[vr>>2];a[vr>>2]=va+1&4294967295;z=a[(vf+4*va&4294967295)>>2];C=z>>8;var Na=z&31;j=9==Na?12:13==Na?13:12==Na?14:17;12==j?a[mg>>2]=C:13==j?a[Yl>>2]=C:14==j&&(j=0==(C|0)?15:16,15==j?w=0:16==j&&(w=w+C&4294967295));if(0==(z&128|0))j=11;else{j=18;break a}}while(0);j=0==((b=h[k&4294967295],128<=b?b-256:b)|0)?19:20;a:do if(19==j)n=h[Ua&4294967295]=0;else if(20==j){j=0<(a[(c+8312&4294967295)>>2]|0)?21:22;if(21==j){var eb=c+8312&4294967295;a[eb>>2]=a[eb>>2]-1&4294967295}j=16==(a[mg>>2]&240|0)?23:25;b:do if(23==j){if(0!=(V&512|0)){j=25;break b}w=w+4&4294967295}while(0);j=0!=(V&2|0)?26:32;b:do if(26==j){if(!(2<(a[bl>>2]|0)&244>(a[wf>>2]|0))){j=32;break b}j=0!=((l[ne]?2:0)|0)?28:29;if(28==j){var Ya=vf+4*(a[wf>>2]-1&4294967295)&4294967295;a[Ya>>2]&=-129}var Ia=a[bl>>2];X=Ia;j=3==(Ia|0)?30:31;30==j&&(X=20);var ba=(256*X&4294967295)+193&4294967295,ta=a[wf>>2];a[wf>>2]=ta+1&4294967295;a[(vf+4*ta&4294967295)>>2]=ba;h[ne]=1}while(0);p=Ua&4294967295;j=0!=(V&8|0)?33:40;b:do if(33==j){var qb=0==($b(k,Xz&4294967295,3)|0),ob=k;j=qb?34:38;c:do if(34==j){k=ob+3&4294967295;S=0;var Ra=k;k=Ra+1&4294967295;ia=(b=h[Ra],128<=b?b-256:b);j=32==(ia|0)|0==(ia|0)?36:35;d:do if(35==j)for(;;){var Sa=$k(ia)&255,ac=S;S=ac+1&4294967295;h[wa+ac&4294967295]=Sa;var fb=k;k=fb+1&4294967295;ia=(b=h[fb],128<=b?b-256:b);if(32==(ia|0)|0==(ia|0)){j=36;break d}else j=35}while(0);h[wa+S&4294967295]=0;var Ta=wy(wa&4294967295);S=Ta;if(!(0<(Ta|0))){j=39;break c}Xf(S);h[Ua&4294967295]=21;h[Ua+1&4294967295]=S&255;h[Ua+2&4294967295]=0}else 38==j&&Yo(ob,Ua&4294967295,g&4294967295);while(0);r=-2147483648}else if(40==j){S=0;c:for(;;){var lb=h[k+S&4294967295];h[oa+S&4294967295]=lb;var cc=(b=lb,128<=b?b-256:b);xa=cc;if(32==(cc|0)){j=43;break c}if(0==(xa|0)){j=43;break c}var zb=S;if(160>(S|0))q=44;else{q=44;j=46;break c}S=zb+1&4294967295;j=41}if(43==j)var Q=S,q=43;ja=43==q?Q:zb;r=ej(a[Rb>>2],k,i,f);j=0!=(r&65536|0)?47:48;if(47==j){var pb=k,Kb=ja,Ga,Qb,gc,hb;Ga=oa&4294967295;Qb=pb;gc=Ga+Kb;if(Qb%4==Ga%4&&8<Kb){for(;0!==Ga%4&&Ga<gc;)h[Qb++]=h[Ga++];Ga>>=2;Qb>>=2;for(hb=gc>>2;Ga<hb;)a[Qb++]=a[Ga++];Ga<<=2;Qb<<=2}for(;Ga<gc;)h[Qb++]=h[Ga++];n=r;j=171;break a}else if(48==j){j=0!=(r&8388608|0)?49:72;c:do if(49==j){if(0!=(a[(f+12&-1)>>2]&8|0)){j=72;break c}za=1;a[(Fa&4294967295)>>2]=0;Y=a[(((c&4294967295)+24&4294967295)+44&4294967295)>>2];ua=k;var cb=32!=((b=h[ua],128<=b?b-256:b)|0),ga=ua+1&4294967295;cb?(q=50,j=51):(q=50,j=52);d:do if(51==j)for(;;){ua=51==q?Aa:ga;var ka=32!=((b=h[ua],128<=b?b-256:b)|0),Aa=ua+1&4294967295;if(ka)j=q=51;else{q=51;j=52;break d}}while(0);sc(bb,50==q?ga:Aa);j=0!=(jf(a[bb>>2])|0)?54:53;if(54==j){if(0==(za|0)){j=72;break c}fa(Va&4294967295,Ua&4294967295);var rb=ej(a[Rb>>2],ua+1&4294967295,0,f+12&4294967295);a[(Fa&4294967295)>>2]=rb;j=0!=(a[(Fa&4294967295)>>2]&67108864|0)?56:57;56==j&&(za=0);j=0!=(Y&256|0)?58:60;d:do if(58==j){if(0!=(a[(Fa&4294967295)>>2]&1048576|0)){j=60;break d}za=0}while(0);j=0!=(Y&512|0)?61:63;d:do if(61==j){if(0==(a[(f+12&-1)>>2]&16|0)){j=63;break d}za=0;j=64;break d}while(0);d:do if(63==j){j=0==(za|0)?64:65;break d}while(0);if(64==j&&(fa(Ua&4294967295,Va&4294967295),0==(za|0))){j=72;break c}h[ua]=45;var Ba=ej(a[Rb>>2],k,i,f);r=Ba;0<(Y|0)?(q=65,j=66):(q=65,j=69);if(66==j){var xb;var sb=void 0,hc=void 0,nb=void 0,ha=void 0,hc=p,nb=0,A=hc,hc=A+1&4294967295,mb=l[A]&255,ha=mb,sb=0!=(mb|0)?1:4;e:do if(1==sb)for(;;){sb=2==(l[a[(Z+4*ha&4294967295)>>2]+11&4294967295]&255|0)?2:3;2==sb&&(nb=nb+1&4294967295);var ic=hc,hc=ic+1&4294967295,sa=l[ic]&255,ha=sa;if(0!=(sa|0))sb=1;else break e}while(0);xb=nb;j=(xb|0)>(Y&31|0)?67:68;if(67==j){h[ua]=32;r=ej(a[Rb>>2],k,i,f);j=72;break c}else if(68==j)var Wa=r,q=68}j=0==((68==q?Wa:Ba)|0)?70:71;70==j&&(r=a[(Fa&4294967295)>>2]);r|=128;a[kf>>2]=1}else 53==j&&(za=0)}while(0);j=21==(l[p&4294967295]&255|0)?73:84;c:do if(73==j){var Gb=k,jb=ja;Ga=oa&4294967295;Qb=Gb;gc=Ga+jb;if(Qb%4==Ga%4&&8<jb){for(;0!==Ga%4&&Ga<gc;)h[Qb++]=h[Ga++];Ga>>=2;Qb>>=2;for(hb=gc>>2;Ga<hb;)a[Qb++]=a[Ga++];Ga<<=2;Qb<<=2}for(;Ga<gc;)h[Qb++]=h[Ga++];na=p+1&4294967295;j=0==((b=h[na&4294967295],128<=b?b-256:b)|0)?74:75;74==j&&(na=Gg&4294967295);fa(qa&4294967295,Mi&4294967295);var Ja=El(na);T=Ja;j=0<=(Ja|0)?76:79;d:do if(76==j)if(r=ej(a[tf>>2],k,i,f),j=21==(l[p&4294967295]&255|0)?77:78,77==j){T=-1;j=79;break d}else if(78==j){j=0>(T|0)?79:80;break d}while(0);79==j&&(h[p&4294967295]=13,h[p+1&4294967295]=13,h[p+2&4294967295]=0);var ca;var Ab=c,Lb=T,ec=p,Bb=s;s+=160;la(Bb,0,160);var Ha=void 0,vb=void 0,da=void 0,Eb=void 0,Jb=void 0,Vb=void 0,Db=void 0,nc=void 0,tb=void 0,ub=void 0,db=void 0,Hb=void 0,Ib=void 0,Wb=void 0,ea=Bb,da=Ab,Eb=Lb,Jb=ec,Wb=0,Mb=a[((Me+48*a[(da+656&4294967295)>>2]&4294967295)+44&4294967295)>>2],Vb=Mb,Ha=0==(Mb|0)?1:2;if(1==Ha)vb=0;else if(2==Ha){ub=a[Jj>>2]+Vb&4294967295;e:for(;;){if(0==(l[ub&4294967295]&255|0)){Ha=4;break e}var kb=ub;if((l[ub&4294967295]&255|0)==(Eb|0)){Ha=7;break e}Db=(l[ub+3&4294967295]&255)+(256*(l[kb+2&4294967295]&255)&4294967295)&4294967295;ub=ub+(4*Db&4294967295)&4294967295;Ha=3}if(4==Ha)vb=0;else if(7==Ha){Wb=l[kb+1&4294967295]&255;Ha=2==(a[Hd>>2]|0)?8:9;8==Ha&&(gk(Jb,ea&4294967295),Ea(a[Le>>2],Yz&4294967295,e([Me+48*Eb&-1,0,0,0,ea&4294967295,0,0,0,Me+48*a[(da+656&4294967295)>>2]&-1,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y)));var Ib=Jb,db=ub+8&4294967295,Hb=ea&4294967295,Ca=Ib,Ib=Ca+1&4294967295,Zb=h[Ca],nc=Zb,Ha=0!=((b=Zb,128<=b?b-256:b)|0)?10:20;e:do if(10==Ha)for(;;){Ha=0!=(Wb|0)?11:13;g:do if(11==Ha){Ha=8>((b=nc,128<=b?b-256:b)&255|0)?12:13;break g}while(0);g:do if(13==Ha){for(tb=db;;){if(0==((b=h[tb],128<=b?b-256:b)|0)){Ha=18;break}var Db=$(tb+1&4294967295),mc=(b=h[tb],128<=b?b-256:b),rc=(b=nc,128<=b?b-256:b);if((mc|0)==(rc|0)){Ha=16;break}tb=tb+(Db+2&4294967295)&4294967295;Ha=14}16==Ha&&(fa(Hb,tb+1&4294967295),Hb=Hb+Db&4294967295);if(0!=((b=h[tb],128<=b?b-256:b)|0)){Ha=12;break g}var oc=nc,uc=Hb,Hb=uc+1&4294967295;h[uc]=oc}while(0);var vc=Ib,Ib=vc+1&4294967295,Ub=h[vc],nc=Ub;if(0!=((b=Ub,128<=b?b-256:b)|0))Ha=10;else{Ha=20;break e}}while(0);h[Hb]=0;Ha=0!=(Wb|0)?21:22;21==Ha&&Hg(da,ea&4294967295,0,-1,0);fa(Jb,ea&4294967295);Ha=2==(a[Hd>>2]|0)?23:24;23==Ha&&(Xf(a[(da+656&4294967295)>>2]),gk(Jb,ea&4294967295),Ea(a[Le>>2],Zz&4294967295,e([ea&4294967295,0,0,0],["i8*",0,0,0],y)));vb=1}}var fc=vb;s=Bb;ca=fc;j=0!=(ca|0)?81:82;if(81==j)T=-1;else if(82==j&&-1!=(T|0)){j=84;break c}fa(Mi&4294967295,qa&4294967295);Xf(a[(a[M>>2]+40&4294967295)>>2]);T=a[(a[M>>2]+40&4294967295)>>2]}while(0);j=0!=(V&128|0)?95:85;c:do if(85==j){j=0!=(r&268435456|0)?86:88;d:do if(86==j){if(!(1>(w|0))){j=88;break d}w=1}while(0);if(0==(r&256|0)){j=95;break c}if(0!=(V|0)){j=95;break c}if(0!=(a[(f+-12&-1)>>2]&512|0)){j=95;break c}if(0!=(a[(c+8312&4294967295)>>2]|0)){j=95;break c}j=4>(w|0)?93:94;93==j&&(w=4);a[(c+8312&4294967295)>>2]=3}while(0);if(!(3<=(a[Yl>>2]|0))){j=98;break b}if(!(1>(w|0))){j=98;break b}w=1}}while(0);N=ab+8*a[ma>>2]&4294967295;v=0;x=1;u=0;K=-1;E=0;j=0!=(r&-2147483648|0)?99:101;b:do if(99==j){if(0!=(r&536870912|0)){j=101;break b}E=16}while(0);var Fb=w;0<(Fb|0)&996>(a[ma>>2]|0)?(q=101,j=102):(q=101,j=106);b:do if(102==j)for(;;){var kc=1<((101==q?Fb:qe)|0),Tb=a[ma>>2];a[ma>>2]=Tb+1&4294967295;var pa=ab+8*Tb&4294967295;j=kc?103:104;103==j?(If(pa,9),w=w-2&4294967295):104==j&&(If(pa,11),w=w-1&4294967295);a[(c+8316&4294967295)>>2]=0;a[(c+8320&4294967295)>>2]=0;var qe=w;if(0<(qe|0)&996>(a[ma>>2]|0))q=105,j=102;else{q=105;j=106;break b}}while(0);j=1==(a[bl>>2]|0)?107:111;b:do if(107==j){if(0==(V&2|0)){j=111;break b}var Qc=a[ma>>2];a[ma>>2]=Qc+1&4294967295;If(ab+8*Qc&4294967295,10);var wc=a[ma>>2];a[ma>>2]=wc+1&4294967295;If(ab+8*wc&4294967295,18);if(0==(V&1|0)){j=111;break b}var Jc=(b=h[k+1&4294967295],128<=b?b-256:b);if(0==(Sb(Jc)|0)){j=111;break b}var Bc=a[ma>>2];a[ma>>2]=Bc+
1&4294967295;If(ab+8*Bc&4294967295,10);var Ic=a[ma>>2];a[ma>>2]=Ic+1&4294967295;If(ab+8*Ic&4294967295,18)}while(0);j=0<=(T|0)?112:113;if(112==j){If(ab+8*a[ma>>2]&4294967295,21);var xe=T&255,wb=a[ma>>2];a[ma>>2]=wb+1&4294967295;h[(ab+8*wb&4294967295)+3&4294967295]=xe}j=0!=(V&128|0)?114:116;b:do if(114==j){if(0!=(l[a[(Z+4*(l[p]&255)&4294967295)>>2]+11&4294967295]&255|0)){j=116;break b}p=p+1&4294967295}while(0);j=0==(l[p&4294967295]&255|0)?117:119;b:do if(117==j){if(0==((l[ne]?2:0)|0)){j=119;break b}h[p&4294967295]=23;h[p+1&4294967295]=0}while(0);var pc=p;p=pc+1&4294967295;var Nc=l[pc];B=Nc;j=0!=(Nc&255|0)&996>(a[ma>>2]|0)?120:157;b:do if(120==j)for(;;){j=255==(B&255|0)?121:122;d:do if(122==j)if(D=a[(Z+4*(B&255)&4294967295)>>2],j=21==(B&255|0)?123:124,123==j){h[ab+8*a[ma>>2]&-1]=B;t[((ab+8*a[ma>>2]&4294967295)+6&4294967295)>>1]=0;t[((ab+8*a[ma>>2]&4294967295)+4&4294967295)>>1]=(l[ne]?2:0)&65535;var Oc=p;p=Oc+1&4294967295;var Pa=h[Oc],yc=a[ma>>2];a[ma>>2]=yc+1&4294967295;h[(ab+8*yc&4294967295)+3&4294967295]=Pa}else if(124==j)if(j=1==(l[D+11&4294967295]&255|0)?125:130,125==j)if(j=0==(P[(D+8&4294967295)>>1]&65535|0)?126:127,126==j)x=l[D+14&4294967295]&255;else{if(127==j){var Cd=B;j=0<=(U|0)?128:129;128==j?h[(ab+8*U&4294967295)+3&4294967295]=Cd:129==j&&(H=Cd&255)}}else if(130==j)if(j=20==(B&255|0)?131:132,131==j){U=a[ma>>2]-1&4294967295;var Vc=(ab+8*U&4294967295)+4&4294967295;t[Vc>>1]=(P[Vc>>1]&65535|4)&65535;h[(ab+8*U&4294967295)+1&4294967295]=x&255}else if(132==j)if(j=12==(B&255|0)?133:134,133==j){var Wc=(ab+8*(a[ma>>2]-1&4294967295)&4294967295)+4&4294967295;t[Wc>>1]=(P[Wc>>1]&65535|8)&65535}else if(134==j)if(j=15==(B&255|0)?135:136,135==j)u=G+1&4294967295;else if(136==j)if(j=22==(B&255|0)?137:139,137==j){if(0==(a[(((c&4294967295)+24&4294967295)+56&4294967295)>>2]|0)){j=121;break d}r|=524288}else if(139==j){h[ab+8*a[ma>>2]&-1]=B;h[(ab+8*a[ma>>2]&4294967295)+3&4294967295]=0;t[((ab+8*a[ma>>2]&4294967295)+4&4294967295)>>1]=((l[ne]?2:0)|E)&65535;h[ne]=0;t[((ab+8*a[ma>>2]&4294967295)+6&4294967295)>>1]=u&65535;u=0;j=2==(l[D+11&4294967295]&255|0)?140:149;e:do if(140==j){v=x;x=1;j=4<=(v|0)?141:142;141==j&&(h[wr]=1);j=0<=(U|0)?143:145;f:do if(143==j){if((a[ma>>2]-1&4294967295|0)==(U|0)){j=145;break f}h[(ab+8*(a[ma>>2]-1&4294967295)&4294967295)+1&4294967295]=v&255}while(0);var lc=(ab+8*a[ma>>2]&4294967295)+4&4294967295;t[lc>>1]=(P[lc>>1]&65535|4)&65535;U=a[ma>>2];j=(v|0)>(K|0)?146:147;146==j&&(K=v,I=a[ma>>2]);if(0==(H|0)){j=156;break e}h[(ab+8*a[ma>>2]&4294967295)+3&4294967295]=H&255;H=0}else if(149==j){if(0==(R|0)){j=156;break e}if(0==(a[(((c&4294967295)+24&4294967295)+56&4294967295)>>2]|0)){j=156;break e}j=0!=(a[(c+8320&4294967295)>>2]&524288|0)?152:153;f:do if(152==j){j=0!=(a[(((c&4294967295)+24&4294967295)+56&4294967295)>>2]&1|0)?155:153;break f}while(0);if(153==j){if(0==(a[(c+8316&4294967295)>>2]|0)){j=156;break e}if(0==(a[(((c&4294967295)+24&4294967295)+56&4294967295)>>2]&2|0)){j=156;break e}}var xd=(ab+8*a[ma>>2]&4294967295)+4&4294967295;t[xd>>1]=(P[xd>>1]&65535|8)&65535}while(0);h[(ab+8*a[ma>>2]&4294967295)+1&4294967295]=v&255;a[ma>>2]=a[ma>>2]+1&4294967295;R=0}while(0);var Rc=p;p=Rc+1&4294967295;var Kc=l[Rc];B=Kc;if(0!=(Kc&255|0)&996>(a[ma>>2]|0))j=120;else{j=157;break b}}while(0);j=0!=(V&131072|0)?158:159;if(158==j){var md=a[ma>>2];a[ma>>2]=md+1&4294967295;If(ab+8*md&4294967295,27)}j=0==(V&128|0)?160:161;160==j&&(t[(N+6&4294967295)>>1]=G&65535);a[(c+8316&4294967295)>>2]=0;j=4<=(v|0)?162:164;b:do if(162==j){if(2!=(l[a[(Z+4*(l[ab+8*(a[ma>>2]-1&4294967295)&-1]&255)&4294967295)>>2]+11&4294967295]&255|0)){j=164;break b}a[(c+8316&4294967295)>>2]=1}while(0);j=0<=(T|0)?165:166;if(165==j){fa(Mi&4294967295,qa&4294967295);Xf(a[(a[M>>2]+40&4294967295)>>2]);If(ab+8*a[ma>>2]&4294967295,21);var wd=a[(a[M>>2]+40&4294967295)>>2]&255,Tc=a[ma>>2];a[ma>>2]=Tc+1&4294967295;h[(ab+8*Tc&4294967295)+3&4294967295]=wd}j=0<(X|0)?167:168;if(167==j){var nd=(256*X&4294967295)+225&4294967295,Lc=a[wf>>2];a[wf>>2]=Lc+1&4294967295;a[(vf+4*Lc&4294967295)>>2]=nd;If(ab+8*a[ma>>2]&4294967295,10);var Za=a[ma>>2];a[ma>>2]=Za+1&4294967295;t[((ab+8*Za&4294967295)+4&4294967295)>>1]=2}j=0!=(r&4096|0)?169:170;if(169==j){var Uc=(ab+8*I&4294967295)+4&4294967295;t[Uc>>1]=(P[Uc>>1]&65535|64)&65535}n=a[(c+8320&4294967295)>>2]=r}while(0);var yd=n;s=g;return yd}function pv(b){a[uk>>2]=0;a[Nl>>2]=0;a[xr>>2]=0;a[Wm>>2]=0;h[yr&4294967295]=0;a[Ym>>2]=0;a[Tm>>2]=0;a[xk>>2]=0;a[Rl>>2]=1;a[mg>>2]=0;a[wj>>2]=0;a[Yl>>2]=0;h[Xm]=0;h[ne]=0;var c;a[lk>>2]=0;a[ag>>2]=0;a[Yc>>2]=1;a[Yf>>2]=1;for(c=a[(Vf&4294967295)>>2]=0;;){a[(kj+
4*c&4294967295)>>2]=a[((dl+4&4294967295)+4*c&4294967295)>>2];var f=c+1&4294967295;c=f;if(!(15>(f|0)))break}a[Fi>>2]=a[(kj+20&4294967295)>>2];a[bl>>2]=a[(kj+24&4294967295)>>2];h[Mm&4294967295]=0;h[uj]=0;h[jo]=0;h[Rm]=0;a[lf>>2]=-1;a[si>>2]=0;a[vj>>2]=0;if(1==(0==(b&8192|0)?1:2))if(a[Uf>>2]=0,1==(0!=(a[mk>>2]|0)?1:2))a[mk>>2]=0,a[sh>>2]=0}function If(a,b){h[a&4294967295]=b;h[a+1&4294967295]=0;h[a+3&4294967295]=0;t[(a+4&4294967295)>>1]=(l[ne]?2:0)&65535;t[(a+6&4294967295)>>1]=0;h[ne]=0}function ny(b){var c=s;s+=48;la(c,0,48);var f,d,i;f=s;s+=44;la(f,0,44);var g,j,t;i=f+8;var n=f+16,k=f+24;g=0!=(a[Fe>>2]|0)?1:2;b:do if(1==g)We($z&4294967295,e(1,"i32",y)),j=-1;else if(2==g){g=f&4294967295;t=i&4294967295;var w=n&4294967295,r=void 0,v=void 0,x=void 0,r=-1!=(gq(g)|0)?1:7;c:do if(1==r){r=-1!=(gq(t)|0)?2:5;if(2==r)if(r=-1!=(gq(w)|0)?3:4,3==r){v=0;r=9;break c}else 4==r&&(x=a[N.ret>>2],mc(a[(t&4294967295)>>2]),mc(a[(t+4&4294967295)>>2]));else 5==r&&(x=a[N.ret>>2]);mc(a[(g&4294967295)>>2]);mc(a[(g+4&4294967295)>>2]);r=8;break c}else if(7==r){x=a[N.ret>>2];r=8;break c}while(0);8==r&&(g=Ud(x),We(aA&4294967295,e([g,0,0,0],["i8*",0,0,0],y)),v=-1);t=v;g=0!=(t|0)?3:4;if(3==g)j=-1;else if(4==g)if(N(T.EAGAIN),a[Tb>>2]=-1,g=-1==(a[Tb>>2]|0)?5:6,5==g)t=a[N.ret>>2],Ms(f&4294967295,i&4294967295,n&4294967295),j=Ud(t),We(bA&4294967295,e([j,0,0,0],["i8*",0,0,0],y)),j=-1;else if(6==g){g=0==(a[Tb>>2]|0)?7:14;if(7==g){g=-1==(fq(a[(f&4294967295)>>2],0)|0)?10:8;c:do if(8==g){if(-1==(fq(a[(i+4&4294967295)>>2],1)|0)){g=10;break c}g=-1==(fq(a[(n+4&4294967295)>>2],2)|0)?10:11;break c}while(0);10==g&&(g=Ud(a[N.ret>>2]),Rd(Xe&4294967295,160,cA&4294967295,e([g,0,0,0],["i8*",0,0,0],y)),g=a[(n+4&4294967295)>>2],t=$(Xe&4294967295),Gj(g,Xe&4294967295,t),Zg(1));t=g=a[(n+4&4294967295)>>2];g=2<(g|0)?12:13;c:do if(12==g)for(;;)if(mc(t),t=g=t-1&4294967295,2<(g|0))g=12;else break c;while(0);Rd(k&4294967295,20,dA&4294967295,e([q[qk>>2],0,0,0,0,0,0,0],["double",0,0,0,0,0,0,0],y));e([eA&4294967295,0,0,0,fA&4294967295,0,0,0,k&4294967295,0,0,0,b,0,0,0,Ns&4294967295,0,0,0,gA&4294967295,0,0,0,0,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y);N(T.ENOEXEC);g=Ud(a[N.ret>>2]);Rd(Xe&4294967295,160,hA&4294967295,e([g,0,0,0],["i8*",0,0,0],y));g=$(Xe&4294967295);Gj(2,Xe&4294967295,g);Zg(1)}Rd(k&4294967295,20,iA&4294967295,e([a[Tb>>2],0,0,0],["i32",0,0,0],y));g=Tt(k&4294967295,0,e(1,"i32",y));a[Ik>>2]=g;g=-1==(g|0)?15:16;if(15==g)t=a[N.ret>>2],Ms(f&4294967295,i&4294967295,n&4294967295),en(a[Tb>>2],0,0),a[Tb>>2]=0,j=Ud(t),We(jA&4294967295,e([j,0,0,0],["i8*",0,0,0],y)),j=-1;else if(16==g){g=-1==(al(a[(f+4&4294967295)>>2],4,e([16384,0,0,0],["i32",0,0,0],y))|0)?19:17;c:do if(17==g){if(-1==(al(a[(i&4294967295)>>2],4,e([16384,0,0,0],["i32",0,0,0],y))|0)){g=19;break c}if(-1==(al(a[(n&4294967295)>>2],4,e([16384,0,0,0],["i32",0,0,0],y))|0)){g=19;break c}a[ui>>2]=a[(f+4&4294967295)>>2];a[Tg>>2]=a[(i&4294967295)>>2];a[Jk>>2]=a[(n&4294967295)>>2];mc(a[(f&4294967295)>>2]);mc(a[(i+4&4294967295)>>2]);mc(a[(n+
4&4294967295)>>2]);a[Fe>>2]=1;j=0;break b}while(0);t=a[N.ret>>2];Ms(f&4294967295,i&4294967295,n&4294967295);en(a[Tb>>2],0,0);a[Tb>>2]=0;j=Ud(t);We(kA&4294967295,e([j,0,0,0],["i8*",0,0,0],y));j=-1}}}while(0);s=f;f=0!=(j|0)?1:2;a:do if(1==f)d=-1;else if(2==f)if(i=ys(lA&4294967295),f=2!=(i|0)?3:4,3==f)oj(),d=-1;else if(4==f)if(i=xv(c&4294967295,45),f=44!=(i|0)?5:8,5==f)f=0<=(i|0)?6:7,6==f&&We(mA&4294967295,e(1,"i32",y)),oj(),d=-1;else if(8==f){f=0!=($b(c&4294967295,nA&4294967295,4)|0)?10:9;b:do if(9==f){if(0!=($b((c&4294967295)+8&4294967295,oA&4294967295,8)|0)){f=10;break b}a[pA>>2]=(((256*(l[c+25&4294967295]&255)&4294967295)+(l[c+24&4294967295]&255)&4294967295)+(65536*(l[c+26&4294967295]&255)&4294967295)&4294967295)+(16777216*(l[c+27&4294967295]&255)&4294967295)&4294967295;f=(a[rk>>2]|0)!=(b|0)?12:13;if(12==f){d=$(b);f=Qd(d+1);j=k=n=i=void 0;i=b;n=f;k=i+d;if(n%4==i%4&&8<d){for(;0!==i%4&&i<k;)h[n++]=h[i++];i>>=2;n>>=2;for(j=k>>2;i<j;)a[n++]=a[i++];i<<=2;n<<=2}for(;i<k;)h[n++]=h[i++];h[f+d]=0;a[rk>>2]=f}d=0;break a}while(0);We(qA&4294967295,e(1,"i32",y));oj();d=-1}while(0);s=c;return d}function ys(b){var c,f=null,d,i,g;c=0!=(a[Tb>>2]|0)?2:1;a:do if(2==c){d=$(b);i=Gj(a[ui>>2],b,d);c=-1==(i|0)?3:10;if(3==c){var j=g=a[N.ret>>2];32==(j|0)?(f=3,c=4):(f=3,c=7);if(4==c)if(c=0!=(fn()|0)?5:6,5==c){d=-1;break a}else if(6==c)var l=g,f=6;c=11==((6==f?l:j)|0)?8:9;if(8==c)i=0;else if(9==c){b=Ud(g);We(Os&4294967295,e([b,0,0,0],["i8*",0,0,0],y));d=-1;break a}}c=(i|0)!=(d|0)?11:16;b:do if(11==c){f=Qd((d+
16&4294967295)+(-i&4294967295)&4294967295);if(0==(f|0)){c=16;break b}a[(f&4294967295)>>2]=0;a[(f+4&4294967295)>>2]=0;a[(f+8&4294967295)>>2]=d-i&4294967295;g=f+12&-1;c=d-i&4294967295;i=b+i&4294967295;j=i+c;if(g%4==i%4&&8<c){for(;0!==i%4&&i<j;)h[g++]=h[i++];i>>=2;g>>=2;for(c=j>>2;i<c;)a[g++]=a[i++];i<<=2;g<<=2}for(;i<j;)h[g++]=h[i++];i=d;g=f;c=0!=(a[ld>>2]|0)?14:13;14==c?a[(a[vi>>2]&4294967295)>>2]=g:13==c&&(a[ld>>2]=g);a[vi>>2]=f}while(0);d=i}else 1==c&&(d=-1);while(0);return d}function oj(){var b;b=0==(a[Fe>>2]|0)?4:1;1==b&&(mc(a[Ik>>2]),mc(a[ui>>2]),mc(a[Tg>>2]),mc(a[Jk>>2]),b=0!=(a[Tb>>2]|0)?2:3,2==b&&(Zt(a[Tb>>2],15),en(a[Tb>>2],0,0),a[Tb>>2]=0),a[Fe>>2]=0)}function xv(c,m){var f=s;s+=24;la(f,0,24);var d,i,g,j,l,n,k;j=1;l=0;d=0!=(a[Tb>>2]|0)?1:2;a:do if(1==d){i=f&-1;var q=(f&4294967295)+4&4294967295,r=f+8&-1,v=(f+8&4294967295)+4&4294967295,x=f+16&-1,M=(f+16&4294967295)+4&4294967295,p=f&4294967295,u=(f+8&4294967295)+6&4294967295,z=(f+16&4294967295)+6&4294967295,C=(f&4294967295)+6&4294967295;b:for(;;){g=0;a[i>>2]=a[Tg>>2];t[q>>1]=1;g=g+1&4294967295;a[r>>2]=a[Jk>>2];t[v>>1]=1;g=g+1&4294967295;d=0!=(a[ld>>2]|0)?4:5;4==d&&(a[x>>2]=a[ui>>2],t[M>>1]=2,g=g+1&4294967295);n=s;s+=20;la(n,0,20);d=void 0;var E=null;k=E=void 0;var B=n;d=0!=(Vt(a[Ik>>2],0,0)|0)?1:2;d:do if(1==d)E=0;else if(2==d)if(d=20!=(Ci(a[Ik>>2],B&4294967295,20)|0)?3:4,3==d)E=0;else if(4==d){k=$t(B&4294967295,41,20);d=0!=(k|0)?5:6;e:do if(5==d){if(18<=(k-(B&4294967295)&4294967295)>>>0){d=6;break e}32==((b=h[k+1&4294967295],128<=b?b-256:b)|0)?(E=7,d=8):(E=7,d=9);if(8==d)var P=83==((b=h[k+2&4294967295],128<=b?b-256:b)|0),E=8;E=(7==E?0:P)&1;break d}while(0);E=0}while(0);d=E;s=n;n=d;d=p;k=rA;for(B=E=0;B<g;B++){var D=d+rA.__size__*B,K=t[D+k.events>>1],I=0;a[D+k.fd>>2]in H.streams?(K&1&&(I|=1),K&2&&(I|=2)):K&4&&(I|=4);I&&E++;t[D+k.revents>>1]=I}g=d=E;if(-1==(d|0)){d=6;break b}d=0==(g|0)?8:13;c:do if(8==d){if(0!=(n|0)){d=9;break b}if(3750<=(j|0)){d=11;break b}j=4*j&4294967295}else if(13==d){j=1;d=0!=(b=t[u>>1],32768<=b?b-65536:b)?14:16;if(14==d&&0!=(fn()|0)){d=15;break b}d=0!=(a[ld>>2]|0)?17:27;d:do if(17==d){if(0==(b=t[z>>1],32768<=b?b-65536:b)){d=27;break d}k=a[ld>>2];g=(k+12&-1)+a[(k+4&4294967295)>>2]&4294967295;d=a[(k+8&4294967295)>>2]-a[(k+4&4294967295)>>2]&4294967295;g=Gj(a[ui>>2],g,d);if(-1==(g|0)){d=19;break b}d=(g|0)!=(d|0)?24:25;if(24==d)k=k+4&4294967295,a[k>>2]=a[k>>2]+g&4294967295;else if(25==d){a[ld>>2]=a[(k&4294967295)>>2];if(0!=(a[ld>>2]|0))break c;a[vi>>2]=0}}while(0);if(0==(b=t[C>>1],32768<=b?b-65536:b))break c;g=c+l&4294967295;k=m-l&4294967295;g=Ci(a[Tg>>2],g,k);if(-1==(g|0)){d=29;break b}l=l+g&4294967295;a[Fe>>2]=3}while(0);if(l>>>0<m>>>0)d=3;else{d=32;break b}}if(6==d){j=Ud(a[N.ret>>2]);We(sA&4294967295,e([j,0,0,0],["i8*",0,0,0],y));i=-1;break a}else if(9==d)a[Fe>>2]=1;else if(11==d)a[Fe>>2]=4,We(tA&4294967295,e(1,"i32",y));else if(15==d){i=-1;break a}else if(19==d){j=a[N.ret>>2];d=32==(j|0)?20:22;b:do if(20==d){if(0==(fn()|0))break b;i=-1;break a}while(0);j=Ud(j);We(Os&4294967295,e([j,0,0,0],["i8*",0,0,0],y));i=-1;break a}else if(29==d){j=Ud(a[N.ret>>2]);We(uA&4294967295,e([j,0,0,0],["i8*",0,0,0],y));i=-1;break a}i=l}else 2==d&&(i=-1);while(0);s=f;return i}function We(b){var c=s;s+=4;la(c,0,4);a[c>>2]=arguments[We.length];eI(Xe&4294967295,160,b,a[c>>2]);no(Ps&4294967295,e([Xe&4294967295,0,0,0],["i8*",0,0,0],y));s=c}function py(){oj();vA();a[rk>>2]=0;q[qk>>2]=1}function vA(){var b,c;c=b=a[ld>>2];b=0!=(b|0)?1:2;a:do if(1==b)for(;;)if(c=a[(c&4294967295)>>2],0!=(c|0))b=1;else break a;while(0);a[ld>>2]=0;a[vi>>2]=0}function fn(){var b=s;s+=256;la(b,0,256);var c,f,d,i,g;i=b&4294967295;var j=(-(-(b&4294967295)&4294967295)&4294967295)+255&4294967295,l=b&4294967295,n=b&4294967295;a:for(;;){d=g=Ci(a[Jk>>2],i,j+(-i&4294967295)&4294967295);if(-1==(g|0)){c=2;break a}if(0==(d|0)){c=6;break a}h[i+d&4294967295]=0;b:for(;;){g=c=$g(i,10);var k=i;if(0==(c|0))break b;c=0==(aq(k,wA&4294967295,18)|0)?13:10;c:do if(10==c){if(0==(aq(i,xA&4294967295,18)|0))break c;h[g]=0;no(yA&4294967295,e([i,0,0,0],["i8*",0,0,0],y));if((g|0)==(i+(d-1&4294967295)&4294967295|0)){c=12;break a}}while(0);i=g+1&4294967295}Yn(l,k,d,1,0);i=n+d&4294967295;c=1}if(2==c)if(c=11==(a[N.ret>>2]|0)?3:4,3==c)f=0;else{if(4==c){var q=Ud(a[N.ret>>2]);We(zA&4294967295,e([q,0,0,0],["i8*",0,0,0],y));f=-1}}else if(6==c){f=s;s+=84;la(f,0,84);i=f+4;j=en(a[Tb>>2],f,1);d=0!=(j|0)?2:1;b:do if(2==d)if(d=(j|0)!=(a[Tb>>2]|0)?3:4,3==d)q=AA&4294967295;else{if(4==d){a[Tb>>2]=0;d=0<(a[f>>2]&127|0)?5:7;c:do if(5==d){if(!(127>(a[f>>2]&127|0)))break c;q=a[f>>2]&127;Rd(i&4294967295,80,BA&4294967295,e([q,0,0,0],["i32",0,0,0],y));q=i&4294967295;break b}while(0);d=0==(a[f>>2]&255|0)?8:9;8==d?(q=a[f>>2]>>8&255,Rd(i&4294967295,80,CA&4294967295,e([q,0,0,0],["i32",0,0,0],y)),q=i&4294967295):9==d&&(q=DA&4294967295)}}else 1==d&&(q=EA&4294967295);while(0);no(Ps&4294967295,e([q,0,0,0],["i8*",0,0,0],y));i=$(Xe&4294967295);d=0!=(i|0)?12:11;12==d?Rd((Xe&4294967295)+i&4294967295,160-i&4294967295,FA&4294967295,e([q,0,0,0],["i8*",0,0,0],y)):11==d&&Rd(Xe&4294967295,160,wi&4294967295,e([q,0,0,0],["i8*",0,0,0],y));s=f;f=-1}else 12==c&&(Rd(Xe&4294967295,160,wi&4294967295,e([i,0,0,0],["i8*",0,0,0],y)),f=0);s=b;return f}function no(b){var c=s;s+=4;la(c,0,4);a[c>>2]=arguments[no.length];fI(a[(a[lb>>2]+12&4294967295)>>2],b,a[c>>2]);xc(10,a[(a[lb>>2]+12&4294967295)>>2]);s=c}function Ms(b,c,f){mc(a[(b&4294967295)>>2]);mc(a[(b+4&4294967295)>>2]);mc(a[(c&4294967295)>>2]);mc(a[(c+4&4294967295)>>2]);mc(a[(f&4294967295)>>2]);mc(a[(f+4&4294967295)>>2])}function Qs(b){var c,f,d,i;c=b+708&-1;f=c+256;i=0;0>i&&(i+=256);for(i=i+(i<<8)+(i<<16)+16777216*i;0!==c%4&&c<f;)h[c++]=0;c>>=2;for(d=f>>2;c<d;)a[c++]=i;for(c<<=2;c<f;)h[c++]=0;Bc(b,0,4,20);Bc(b,0,62,77);Bc(b,0,85,87);Bc(b,1,62,77);Bc(b,1,85,87);Bc(b,2,21,57);eb(b,2,GA&4294967295);Bc(b,6,4,20);Bc(b,6,62,76);Bc(b,6,85,87);a[(((b&4294967295)+24&4294967295)+20&4294967295)>>2]=1;a[((b&4294967295)+276&4294967295)>>2]=a[(b+964&4294967295)>>2]+77&4294967295}function Bc(a,b,f,d){var c,b=1<<b;c=(f|0)<=(d|0)?1:2;a:do if(1==c)for(;;)if(c=(a+708&4294967295)+f&4294967295,h[c]=(l[c]&255|b)&255,f=f+1&4294967295,(f|0)<=(d|0))c=1;else break a;while(0)}function eb(a,b,f){var d,c,b=1<<b;c=f;f=c+1&4294967295;c=d=l[c];d=0!=(d&255|0)?1:2;a:do if(1==d)for(;;)if(c=(a+708&4294967295)+(c&255)&4294967295,h[c]=(l[c]&255|b)&255,c=f,f=c+1&4294967295,c=d=l[c],0!=(d&255|0))d=1;else break a;while(0)}function qa(b,c,f){var d,i=null;0!=(c|0)?(i=0,d=1):(i=0,d=2);if(1==d){var g;d=b+676&-1;i=c+16;if(d%4==c%4){for(;0!==c%4&&c<i;)h[d++]=h[c++];c>>=2;d>>=2;for(g=i>>2;c<g;)a[d++]=a[c++];c<<=2;d<<=2}for(;c<i;)h[d++]=h[c++];g=f;i=1}if(3==(0!=((1==i?g:f)|0)?3:4)){c=f;d=b+660&-1;for(i=c+8;c<i;)h[d++]=h[c++]}}function Xl(c){var e,f=null,d;d=c;c=0;e=0!=((b=h[d],128<=b?b-256:b)|0)?1:2;a:do if(1==e)for(;;)if(c=256*c&4294967295,e=d,d=e+1&4294967295,c=(b=h[e],128<=b?b-256:b)+c&4294967295,0!=((b=h[d],128<=b?b-256:b)|0))e=1;else break a;while(0);var i;d=uo(8328);e=0==(d|0)?1:2;if(1==e)i=0;else if(2==e){a[(d+696&4294967295)>>2]=a[(Xa+4&4294967295)>>2];h[Mi&4294967295]=0;a[(d+692&4294967295)>>2]=0;a[(d+1048&4294967295)>>2]=0;a[(d+1052&4294967295)>>2]=0;a[(d+288&4294967295)>>2]=97;a[(d+284&4294967295)>>2]=122;a[(d+8268&4294967295)>>2]=0;a[(d+964&4294967295)>>2]=0;var g;e=d+708&-1;i=e+256;g=0;0>g&&(g+=256);for(g=g+(g<<8)+(g<<16)+16777216*g;0!==e%4&&e<i;)h[e++]=0;e>>=2;for(f=i>>2;e<f;)a[e++]=g;for(e<<=2;e<i;)h[e++]=0;e=d+968&-1;i=e+32;g=0;0>g&&(g+=256);for(g=g+(g<<8)+(g<<16)+16777216*g;0!==e%4&&e<i;)h[e++]=0;e>>=2;for(f=i>>2;e<f;)a[e++]=g;for(e<<=2;e<i;)h[e++]=0;eb(d,0,HA&4294967295);eb(d,1,IA&4294967295);eb(d,2,JA&4294967295);eb(d,3,KA&4294967295);eb(d,4,LA&4294967295);eb(d,5,MA&4294967295);eb(d,6,NA&4294967295);eb(d,7,Rs&4294967295);a[(d+700&4294967295)>>2]=OA&4294967295;a[(d+704&4294967295)>>2]=PA&4294967295;for(e=0;!(h[(d+660&4294967295)+e&4294967295]=h[Ss+e&4294967295],h[(d+668&4294967295)+e&4294967295]=(l[Ss+e&4294967295]&255)-1&255,t[((d+676&4294967295)+2*e&4294967295)>>1]=t[(QA+2*e&4294967295)>>1],e=i=e+1&4294967295,!(8>(i|0))););e=d&4294967295;i=e+280;g=0;0>g&&(g+=256);for(g=g+(g<<8)+(g<<16)+16777216*g;0!==e%4&&e<i;)h[e++]=0;e>>=2;for(f=i>>2;e<f;)a[e++]=g;for(e<<=2;e<i;)h[e++]=0;a[((d&4294967295)+272&4294967295)>>2]=500;a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+16&4294967295)>>2]=1;a[((d&4294967295)+20&4294967295)>>2]=3;a[(((d&4294967295)+24&4294967295)+28&4294967295)>>2]=95;a[(((d&4294967295)+24&4294967295)+72&4294967295)>>2]=95;a[(((d&4294967295)+24&4294967295)+36&4294967295)>>2]=19;a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=115;a[(((d&4294967295)+24&4294967295)+64&4294967295)>>2]=4;a[(((d&4294967295)+100&4294967295)+64&4294967295)>>2]=2;h[(d&4294967295)+248&4294967295]=3;a[((d&4294967295)+264&4294967295)>>2]=0;a[((d&4294967295)+268&4294967295)>>2]=bf&4294967295;Js(d,201);a[((d&4294967295)+240&4294967295)>>2]=100;a[((d&4294967295)+196&4294967295)>>2]=49;a[((d&4294967295)+200&4294967295)>>2]=2;a[((d&4294967295)+204&4294967295)>>2]=44;a[((d&4294967295)+208&4294967295)>>2]=46;a[((d&4294967295)+192&4294967295)>>2]=1227133512;a[((d&4294967295)+212&4294967295)>>2]=14;g=RA&4294967295;e=d+1E3&-1;i=g+48;if(e%4==g%4){for(;0!==g%4&&g<i;)h[e++]=h[g++];g>>=2;e>>=2;for(f=i>>2;g<f;)a[e++]=a[g++];g<<=2;e<<=2}for(;g<i;)h[e++]=h[g++];g=SA&4294967295;e=(d&4294967295)+232&-1;for(i=g+6;g<i;)h[e++]=h[g++];i=d}d=i;i=c;e=24934==i?3:24941==i?4:24946==i?5:25191==i?6:25198==i?7:25465==i?8:25697==i?9:25701==i?10:25718==i?11:25966==i?12:25964==i?13:6779491==i?13:25967==i?15:25971==i?16:25441==i?16:7364976==i?16:25973==i?21:26209==i?22:25972==i?23:26217==i?24:26226==i?25:26729==i?26:28261==i?26:28769==i?26:26738==i?29:25203==i?29:29554==i?29:26740==i?33:26741==i?34:26745==i?35:26980==i?36:26995==i?37:26996==i?38:6972015==i?39:27489==i?40:27503==i?41:27509==i?42:27745==i?43:27766==i?44:28011==i?45:28268==i?46:28271==i?47:28525==i?48:28780==i?49:28788==i?50:29295==i?51:29301==i?52:29303==i?53:29547==i?54:25459==i?54:29545==i?57:29548==i?58:29553==i?59:29558==i?60:29559==i?61:29806==i?61:29793==i?62:28012==i?62:27502==i?62:28018==i?62:29797==i?62:29810==i?73:30066==i?74:30313==i?75:30575==i?76:31336==i?77:8022137==i?77:79;a:do if(79==e){a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;e=80;break a}else if(3==e){qa(d,TA&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+4&4294967295)>>2]=48;a[(((d&4294967295)+24&4294967295)+4&4294967295)>>2]=1;a[(((d&4294967295)+24&4294967295)+12&4294967295)>>2]=1;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=16779472;a[((d&4294967295)+220&4294967295)>>2]=1;e=80;break a}else if(4==e){qa(d,Ts&4294967295,Us&4294967295);a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=36;a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;e=80;break a}else if(5==e){a[(d+964&4294967295)>>2]=1536;a[((d&4294967295)+184&4294967295)>>2]=2884720;a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;e=80;break a}else if(6==e){UA(d);Zb(d,42);a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1074;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=23;a[(((d&4294967295)+24&4294967295)+40&4294967295)>>2]=2;a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+184&4294967295)>>2]=184554728;a[((d&4294967295)+204&4294967295)>>2]=32;e=80;break a}else if(7==e){qa(d,VA&4294967295,WA&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=65540;a[(d+964&4294967295)>>2]=2432;Qs(d);Bc(d,4,62,76);a[((d&4294967295)+184&4294967295)>>2]=1;a[((d&4294967295)+192&4294967295)>>2]=613567144;e=80;break a}else if(8==e){qa(d,XA&4294967295,YA&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+56&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=22;a[((d&4294967295)+16&4294967295)>>2]=0;a[((d&4294967295)+20&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+28&4294967295)>>2]=120;a[((d&4294967295)+184&4294967295)>>2]=1024;Zb(d,119);Zb(d,121);e=80;break a}else if(9==e){qa(d,ZA&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=0;a[(((d&4294967295)+24&4294967295)+12&4294967295)>>2]=1;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=184618072;e=80;break a}else if(10==e){qa(d,$A&4294967295,aB&4294967295);a[((d&4294967295)+8&4294967295)>>2]=0;a[(d&-1)>>2]=8;a[((d&4294967295)+4&4294967295)>>2]=48;a[(((d&4294967295)+24&4294967295)+12&4294967295)>>2]=1;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=16;a[(((d&4294967295)+24&4294967295)+72&4294967295)>>2]=87;a[((d&4294967295)+184&4294967295)>>2]=16846872;Zb(d,121);a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=2;e=80;break a}else if(11==e){qa(d,Kk&4294967295,Lk&4294967295);a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[(d+964&4294967295)>>2]=1920;a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=65540;Bc(d,1,38,48);a[((d&4294967295)+192&4294967295)>>2]=5288;a[((d&4294967295)+184&4294967295)>>2]=1;e=80;break a}else if(12==e){qa(d,bB&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=8;a[((d&4294967295)+184&4294967295)>>2]=16779328;a[(((d&4294967295)+24&4294967295)+44&4294967295)>>2]=2;a[((d&4294967295)+276&4294967295)>>2]=101;a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=2;eb(d,6,Rs&4294967295);e=80;break a}else if(13==e){qa(d,cB&4294967295,dB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+28&4294967295)>>2];a[(d+700&4294967295)>>2]=eB&4294967295;a[(d+964&4294967295)>>2]=896;var j;j=d+708&-1;e=j+256;f=0;0>f&&(f+=256);for(f=f+(f<<8)+(f<<16)+16777216*f;0!==j%4&&j<e;)h[j++]=0;j>>=2;for(i=e>>2;j<i;)a[j++]=f;for(j<<=2;j<e;)h[j++]=0;eb(d,0,Vs&4294967295);eb(d,7,Vs&4294967295);eb(d,1,fB&4294967295);eb(d,2,gB&4294967295);eb(d,6,hB&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=6;a[((d&4294967295)+16&4294967295)>>2]=0;a[((d&4294967295)+
20&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+28&4294967295)>>2]=130;a[((d&4294967295)+184&4294967295)>>2]=264;a[((d&4294967295)+188&4294967295)>>2]=4098;if(6779491!=(c|0)){e=80;break a}a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;e=80;break a}else if(15==e){qa(d,iB&4294967295,jB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+12&4294967295)>>2];a[(d+700&4294967295)>>2]=kB&4294967295;a[((d&4294967295)+4&4294967295)>>2]=2;a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=22;a[((d&4294967295)+20&4294967295)>>2]=2;a[((d&4294967295)+184&4294967295)>>2]=16782344;e=80;break a}else if(16==e)if(qa(d,lB&4294967295,mB&4294967295),a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2],a[((d&4294967295)+8&4294967295)>>2]=2,a[((d&4294967295)+12&4294967295)>>2]=534,a[((d&4294967295)+16&4294967295)>>2]=0,a[((d&4294967295)+20&4294967295)>>2]=2,a[(((d&4294967295)+24&4294967295)+28&4294967295)>>2]=120,a[((d&4294967295)+184&4294967295)>>2]=85984552,a[((d&4294967295)+
188&4294967295)>>2]=4096,e=25441==(c|0)?17:18,17==e){a[(d+704&4294967295)>>2]=nB&4294967295;a[((d&4294967295)+12&4294967295)>>2]=566;e=80;break a}else{if(18==e)if(f=d&4294967295,e=7364976==(c|0)?19:20,19==e){a[(f+12&4294967295)>>2]=310;e=80;break a}else if(20==e){a[((f+24&4294967295)+20&4294967295)>>2]=2;e=80;break a}}else if(21==e){qa(d,oB&4294967295,pB&4294967295);a[((d&4294967295)+8&4294967295)>>2]=1;a[((d&4294967295)+184&4294967295)>>2]=1049960;e=80;break a}else if(22==e){a[(d+964&4294967295)>>2]=1536;a[((d&4294967295)+184&4294967295)>>2]=96;a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;e=80;break a}else if(23==e){a[(d+696&4294967295)>>2]=a[(Xa+16&4294967295)>>2];e=24;break a}else if(25==e){qa(d,Ts&4294967295,Us&4294967295);a[((d&4294967295)+8&4294967295)>>2]=3;a[((d&4294967295)+12&4294967295)>>2]=36;a[(((d&4294967295)+24&4294967295)+8&4294967295)>>2]=1;a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+220&4294967295)>>2]=2;a[((d&4294967295)+
184&4294967295)>>2]=118658312;Zb(d,121);e=80;break a}else if(26==e){qa(d,qB&4294967295,rB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+76&4294967295)>>2];a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=6;a[((d&4294967295)+12&4294967295)>>2]=65540;a[((d&4294967295)+184&4294967295)>>2]=16;a[((d&4294967295)+192&4294967295)>>2]=84648;a[(d+964&4294967295)>>2]=2304;e=28769==(c|0)?27:28;27==e&&(a[(d+964&4294967295)>>2]=2560);Qs(d);e=80;break a}else if(29==e){j=d;e=29554==(i|0)?30:31;30==e?qa(j,sB&4294967295,Ws&4294967295):31==e&&qa(j,tB&4294967295,Ws&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+8&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=16;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=3;h[(d&4294967295)+248&4294967295]=5;h[(d&4294967295)+249&4294967295]=1;a[((d&4294967295)+220&4294967295)>>2]=1;a[((d&4294967295)+184&4294967295)>>2]=33572172;a[((d&4294967295)+188&4294967295)>>2]=74;a[((d&4294967295)+
264&4294967295)>>2]=uB&4294967295;Zb(d,121);Zb(d,114);e=80;break a}else if(33==e){a[((d&4294967295)+8&4294967295)>>2]=3;a[((d&4294967295)+12&4294967295)>>2]=36;a[((d&4294967295)+184&4294967295)>>2]=17990912;e=80;break a}else if(34==e){qa(d,vB&4294967295,wB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+8&4294967295)>>2];a[((d&4294967295)+4&4294967295)>>2]=32;a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=1081398;a[((d&4294967295)+16&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+56&4294967295)>>2]=1;a[(((d&4294967295)+24&4294967295)+68&4294967295)>>2]=2;a[((d&4294967295)+184&4294967295)>>2]=186758144;a[((d&4294967295)+204&4294967295)>>2]=32;a[((d&4294967295)+208&4294967295)>>2]=44;a[((d&4294967295)+196&4294967295)>>2]=899;a[((d&4294967295)+200&4294967295)>>2]=1;Zb(d,121);h[(d&4294967295)+249&4294967295]=1;Js(d,3);e=80;break a}else if(35==e){qa(d,xB&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=3;a[(d+964&4294967295)>>2]=1328;j=d+708&-1;e=j+256;f=0;0>f&&(f+=256);for(f=f+(f<<8)+(f<<16)+16777216*f;0!==j%4&&j<e;)h[j++]=0;j>>=2;for(i=e>>2;j<i;)a[j++]=f;for(j<<=2;j<e;)h[j++]=0;eb(d,0,Xs&4294967295);eb(d,7,Xs&4294967295);eb(d,2,yB&4294967295);h[(d&4294967295)+248&4294967295]=6;a[((d&4294967295)+184&4294967295)>>2]=1032;e=80;break a}else if(36==e){qa(d,zB&4294967295,AB&4294967295);a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+184&4294967295)>>2]=16781320;a[((d&4294967295)+12&4294967295)>>2]=22;a[((d&4294967295)+220&4294967295)>>2]=2;e=80;break a}else if(37==e){qa(d,BB&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=16;a[(((d&4294967295)+24&4294967295)+8&4294967295)>>2]=17;a[(((d&4294967295)+24&4294967295)+40&4294967295)>>2]=2;Ys(d,24);eb(d,4,CB&4294967295);eb(d,3,DB&4294967295);a[((d+968&4294967295)+4&4294967295)>>2]=EB&4294967295;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=2280;a[((d&4294967295)+188&4294967295)>>2]=2;e=80;break a}else if(38==e){qa(d,FB&4294967295,GB&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=131088;a[((d&4294967295)+4&4294967295)>>2]=1;a[((d&4294967295)+16&4294967295)>>2]=2;a[((d&4294967295)+20&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+8&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+56&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+28&4294967295)>>2]=130;a[(((d&4294967295)+24&4294967295)+40&4294967295)>>2]=1;a[(((d&4294967295)+24&4294967295)+60&4294967295)>>2]=2;a[((d&4294967295)+184&4294967295)>>2]=16786952;a[((d&4294967295)+220&4294967295)>>2]=2;Zb(d,121);e=80;break a}else if(39==e){qa(d,HB&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+4&4294967295)>>2]=524;a[(d+704&4294967295)>>2]=IB&4294967295;a[(((d&4294967295)+24&4294967295)+52&4294967295)>>2]=2;Zb(d,121);a[((d&4294967295)+272&4294967295)>>2]=368;e=80;break a}else if(40==e){qa(d,Kk&4294967295,Lk&4294967295);j=d+708&-1;e=j+256;f=0;0>f&&(f+=256);for(f=f+(f<<8)+(f<<16)+16777216*f;0!==j%4&&j<e;)h[j++]=0;j>>=2;for(i=e>>2;j<i;)a[j++]=f;for(j<<=2;j<e;)h[j++]=0;eb(d,0,Zs&4294967295);eb(d,2,JB&4294967295);eb(d,7,Zs&4294967295);a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=16;a[(d+964&4294967295)>>2]=4224;h[(d&4294967295)+248&4294967295]=7;a[((d&4294967295)+184&4294967295)>>2]=3187744;e=80;break a}else if(41==e){a[(d+964&4294967295)>>2]=4352;j=d+708&-1;e=j+256;f=0;0>f&&(f+=256);for(f=f+(f<<8)+(f<<16)+16777216*f;0!==j%4&&j<e;)h[j++]=0;j>>=2;for(i=e>>2;j<i;)a[j++]=f;for(j<<=2;j<e;)h[j++]=0;Bc(d,0,97,117);eb(d,6,KB&4294967295);eb(d,5,LB&4294967295);a[((d&4294967295)+8&4294967295)>>2]=8;a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;a[((d&4294967295)+184&4294967295)>>2]=1024;e=80;break a}else if(42==e){qa(d,MB&4294967295,NB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+36&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=7;a[((d&4294967295)+184&4294967295)>>2]=263264;h[(d&4294967295)+248&4294967295]=2;e=80;break a}else if(43==e){a[(d+696&4294967295)>>2]=a[(Xa+16&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=32;a[((d&4294967295)+16&4294967295)>>2]=0;a[((d&4294967295)+20&4294967295)>>2]=2;a[(((d&4294967295)+24&4294967295)+4&4294967295)>>2]=1;a[((d&4294967295)+184&4294967295)>>2]=16777216;a[((d&4294967295)+196&4294967295)>>2]=5E3;e=80;break a}else if(44==e){qa(d,OB&4294967295,PB&4294967295);a[((d&4294967295)+8&4294967295)>>2]=0;h[(d&4294967295)+249&4294967295]=1;a[(d+696&4294967295)>>2]=a[(Xa+
16&4294967295)>>2];a[((d&4294967295)+184&4294967295)>>2]=99336;a[((d&4294967295)+12&4294967295)>>2]=262166;e=80;break a}else if(45==e){qa(d,QB&4294967295,RB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+20&4294967295)>>2];a[((d+968&4294967295)+28&4294967295)>>2]=$s&4294967295;a[(d+968&-1)>>2]=$s&4294967295;a[((d&4294967295)+8&4294967295)>>2]=4;a[((d&4294967295)+184&4294967295)>>2]=2114600;a[((d&4294967295)+188&4294967295)>>2]=138;e=80;break a}else if(46==e){a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+4&4294967295)>>2]=48;a[(((d&4294967295)+24&4294967295)+4&4294967295)>>2]=1;a[(((d&4294967295)+24&4294967295)+12&4294967295)>>2]=1;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=16;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=2169880;a[((d&4294967295)+216&4294967295)>>2]=SB&4294967295;a[((d&4294967295)+12&4294967295)>>2]=128;j=d+676&-1;f=TB;e=f+16;if(j%4==f%4){for(;0!==f%4&&f<e;)h[j++]=h[f++];f>>=2;j>>=2;for(i=e>>2;f<i;)a[j++]=a[f++];f<<=2;j<<=2}for(;f<e;)h[j++]=h[f++];e=80;break a}else if(47==e){qa(d,UB&4294967295,0);a[((d&4294967295)+8&4294967295)>>2]=0;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=71752;e=80;break a}else if(48==e){qa(d,VB&4294967295,WB&4294967295);a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=524310;e=80;break a}else if(49==e){qa(d,XB&4294967295,YB&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+8&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=6;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=8;h[(d&4294967295)+248&4294967295]=7;a[((d&4294967295)+184&4294967295)>>2]=20488;a[((d&4294967295)+188&4294967295)>>2]=64;a[(((d&4294967295)+24&4294967295)+44&4294967295)>>2]=260;Zb(d,121);e=80;break a}else if(50==e){qa(d,ZB&4294967295,$B&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=3;a[((d&4294967295)+12&4294967295)>>2]=139286;a[((d&4294967295)+184&4294967295)>>2]=16793704;Zb(d,121);Ys(d,2);eb(d,1,aC&4294967295);a[(((d&4294967295)+24&4294967295)+60&4294967295)>>2]=2;e=80;break a}else if(51==e){qa(d,bC&4294967295,cC&4294967295);a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=262;a[(d+696&4294967295)>>2]=a[(Xa+8&4294967295)>>2];a[((d&4294967295)+184&4294967295)>>2]=16805928;a[((d&4294967295)+188&4294967295)>>2]=30;e=80;break a}else if(52==e){j=void 0;j=d;qa(j,dC&4294967295,eC&4294967295);UA(j);eb(j,6,fC&4294967295);a[(((j&4294967295)+24&4294967295)+20&4294967295)>>2]=1074;a[(((j&4294967295)+
24&4294967295)+16&4294967295)>>2]=1;a[(((j&4294967295)+24&4294967295)+40&4294967295)>>2]=2;a[((j&4294967295)+8&4294967295)>>2]=5;a[((j&4294967295)+12&4294967295)>>2]=32;a[((j&4294967295)+184&4294967295)>>2]=1032;a[((j&4294967295)+188&4294967295)>>2]=194;a[((j&4294967295)+244&4294967295)>>2]=1;a[((j&4294967295)+256&4294967295)>>2]=2;e=80;break a}else if(53==e){a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=22;a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+184&4294967295)>>2]=278624;a[((d&4294967295)+188&4294967295)>>2]=512;e=80;break a}else if(54==e){qa(d,gC&4294967295,hC&4294967295);a[(d+696&4294967295)>>2]=a[(Xa+8&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=22;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=3;h[(d&4294967295)+248&4294967295]=5;h[(d&4294967295)+249&4294967295]=1;a[(((d&4294967295)+24&4294967295)+44&4294967295)>>2]=4;a[((d&4294967295)+184&4294967295)>>2]=16794624;a[((d&4294967295)+188&4294967295)>>2]=256;a[((d&4294967295)+204&4294967295)>>2]=0;a[((d&4294967295)+208&4294967295)>>2]=44;e=25459==(c|0)?55:56;55==e&&(a[((d&4294967295)+188&4294967295)>>2]=264);Zb(d,121);Zb(d,114);Ys(d,32);eb(d,5,iC&4294967295);e=80;break a}else if(57==e){qa(d,Kk&4294967295,Lk&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=65556;h[(d&4294967295)+249&4294967295]=1;a[(d+
964&4294967295)>>2]=3456;j=d+708&-1;e=j+256;f=0;0>f&&(f+=256);for(f=f+(f<<8)+(f<<16)+16777216*f;0!==j%4&&j<e;)h[j++]=0;j>>=2;for(i=e>>2;j<i;)a[j++]=f;for(j<<=2;j<e;)h[j++]=0;Bc(d,0,5,22);Bc(d,0,74,115);Bc(d,1,74,115);Bc(d,2,26,70);a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;a[((d&4294967295)+276&4294967295)>>2]=a[(d+964&4294967295)>>2]+74&4294967295;a[((d&4294967295)+184&4294967295)>>2]=2097152;e=80;break a}else if(58==e){a[(d+696&4294967295)>>2]=a[(Xa+8&4294967295)>>2];a[((d&4294967295)+
8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=32;a[(((d&4294967295)+24&4294967295)+16&4294967295)>>2]=19;a[((d&4294967295)+184&4294967295)>>2]=16864280;a[((d&4294967295)+188&4294967295)>>2]=256;a[((d&4294967295)+204&4294967295)>>2]=32;Zb(d,114);e=80;break a}else if(59==e){qa(d,jC&4294967295,kC&4294967295);a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=278;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=32872;a[((d&4294967295)+220&4294967295)>>2]=2;e=80;break a}else if(60==e){qa(d,lC&4294967295,mC&4294967295);a[((d&4294967295)+8&4294967295)>>2]=0;Zb(d,121);a[((d&4294967295)+184&4294967295)>>2]=6408;a[((d&4294967295)+220&4294967295)>>2]=1;e=80;break a}else if(61==e){qa(d,nC&4294967295,oC&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+4&4294967295)>>2]=1;a[((d&4294967295)+8&4294967295)>>2]=2;a[((d&4294967295)+12&4294967295)>>2]=22;a[((d&4294967295)+184&4294967295)>>2]=1248;a[((d&4294967295)+192&4294967295)>>2]=1227133544;e=80;break a}else if(62==e){qa(d,Kk&4294967295,Lk&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+12&4294967295)>>2]=65540;h[(d&4294967295)+249&4294967295]=1;a[((d&4294967295)+192&4294967295)>>2]=5288;i=c;29793==(i|0)?(f=62,e=63):(f=62,e=64);63==e&&(a[(d+964&4294967295)>>2]=2944,a[((d&4294967295)+184&4294967295)>>2]=2097152,j=c,f=63);e=28018==((63==f?j:i)|0)?65:66;b:do if(65==e)a[(d+964&4294967295)>>2]=2304;else if(66==e)if(e=28012==(c|0)?67:68,67==e)a[(d+964&4294967295)>>2]=3328,a[((d&4294967295)+184&4294967295)>>2]=2097152;else if(68==e)if(e=27502==(c|0)?69:70,69==e)a[(d+964&4294967295)>>2]=3200,a[((d&4294967295)+184&4294967295)>>2]=1;else if(70==e){if(29797!=(c|0))break b;a[(d+964&4294967295)>>2]=3072;a[((d&4294967295)+184&4294967295)>>2]=1}while(0);a[(((d&4294967295)+24&4294967295)+32&4294967295)>>2]=1;Qs(d);Bc(d,1,78,78);e=80;break a}else if(73==e){qa(d,pC&4294967295,qC&4294967295);a[(d+
696&4294967295)>>2]=a[(Xa+36&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=7;a[((d&4294967295)+12&4294967295)>>2]=32;a[((d&4294967295)+184&4294967295)>>2]=2114824;h[(d&4294967295)+248&4294967295]=2;e=80;break a}else if(74==e){a[(d+964&4294967295)>>2]=1536;a[(((d&4294967295)+24&4294967295)+20&4294967295)>>2]=1;a[((d&4294967295)+184&4294967295)>>2]=16;a[((d&4294967295)+192&4294967295)>>2]=21160;e=80;break a}else if(75==e){qa(d,rC&4294967295,sC&4294967295);a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];a[((d&4294967295)+8&4294967295)>>2]=0;a[(d&-1)>>2]=33;a[((d+968&4294967295)+28&4294967295)>>2]=at&4294967295;a[(d+968&-1)>>2]=at&4294967295;a[((d&4294967295)+224&4294967295)>>2]=1;a[((d&4294967295)+16&4294967295)>>2]=2;a[((d&4294967295)+184&4294967295)>>2]=12615688;e=80;break a}else if(76==e){a[((d&4294967295)+8&4294967295)>>2]=0;a[((d&4294967295)+184&4294967295)>>2]=2098528;e=80;break a}else if(77==e){qa(d,tC&4294967295,uC&4294967295);a[((d&4294967295)+8&4294967295)>>2]=3;a[((d&4294967295)+12&4294967295)>>2]=2;a[((d&4294967295)+4&4294967295)>>2]=0;a[((d&4294967295)+224&4294967295)>>2]=1;a[((d&4294967295)+180&4294967295)>>2]=a[((d&4294967295)+176&4294967295)>>2];h[(d&4294967295)+250&4294967295]=1;h[(d&4294967295)+251&4294967295]=1;a[(d&-1)>>2]=33;if(31336!=(c|0)){e=80;break a}h[(d&4294967295)+252&4294967295]=1;a[((d&4294967295)+260&4294967295)>>2]=1;e=80;break a}while(0);24==e&&(qa(d,vC&4294967295,wC&4294967295),a[((d&4294967295)+8&4294967295)>>2]=0,a[((d&4294967295)+
12&4294967295)>>2]=86,a[(((d&4294967295)+24&4294967295)+56&4294967295)>>2]=1,a[((d&4294967295)+240&4294967295)>>2]=130,a[((d&4294967295)+184&4294967295)>>2]=4104,Zb(d,121),h[(d&4294967295)+249&4294967295]=1,a[((d&4294967295)+228&4294967295)>>2]=3);a[(d+280&4294967295)>>2]=c;e=0!=(a[((d&4294967295)+184&4294967295)>>2]&8|0)?81:82;81==e&&(a[((d&4294967295)+204&4294967295)>>2]=46,a[((d&4294967295)+208&4294967295)>>2]=44);e=0!=(a[((d&4294967295)+184&4294967295)>>2]&4|0)?83:84;83==e&&(a[((d&4294967295)+
204&4294967295)>>2]=0);return d}function Zb(a,b){h[(a+708&4294967295)+b&4294967295]=(l[(a+708&4294967295)+b&4294967295]&64|129)&255}function UA(b){a[(b+696&4294967295)>>2]=a[(Xa+72&4294967295)>>2];a[(b+288&4294967295)>>2]=1072;a[(b+284&4294967295)>>2]=1105;a[(b+8268&4294967295)>>2]=xC&4294967295;a[(b+964&4294967295)>>2]=1056;var c,f,d,e;c=b+708&-1;f=c+256;e=0;0>e&&(e+=256);for(e=e+(e<<8)+(e<<16)+16777216*e;0!==c%4&&c<f;)h[c++]=0;c>>=2;for(d=f>>2;c<d;)a[c++]=e;for(c<<=2;c<f;)h[c++]=0;eb(b,0,bt&4294967295);eb(b,1,yC&4294967295);eb(b,2,zC&4294967295);eb(b,3,AC&4294967295);eb(b,4,BC&4294967295);eb(b,5,CC&4294967295);eb(b,6,DC&4294967295);eb(b,7,bt&4294967295)}function Ys(a,b){var f,d;d=b^-1;for(f=0;;){var c=(a+708&4294967295)+f&4294967295;h[c]=l[c]&255&d&255;f=c=f+1&4294967295;if(!(256>c>>>0))break}}function Eu(b,c){var f;for(f=0;;){a[(c+4*f&4294967295)>>2]=-1;var d=f+1&4294967295;f=d;if(!(12>(d|0)))break}zb(b,EC&4294967295,e([c&4294967295,0,0,0,c+4&4294967295,0,0,0,c+8&4294967295,0,0,0,c+12&4294967295,0,0,0,c+16&4294967295,0,0,0,c+20&4294967295,0,0,0,c+24&4294967295,0,0,0,c+28&4294967295,0,0,0,c+32&4294967295,0,0,0,c+36&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],y))}function FC(b,c){var f,d,e,g,j,l,n,k,q;j=0;n=a[(c+4&4294967295)>>2];e=0;a:for(;;){f=-1==(a[(c+4*e&4294967295)>>2]|0)?2:4;b:do if(2==f){a[(c+4*e&4294967295)>>2]=8E3;if(!(0<(e|0)))break b;a[(c+4*(e+1&4294967295)&4294967295)>>2]=a[(c+4*(e-1&4294967295)&4294967295)>>2]}while(0);l=(a[(c+4*e&4294967295)>>2]|0)/8|0;k=a[(c+4*(e+1&4294967295)&4294967295)>>2];f=0<(l-j&4294967295|0)?5:9;b:do if(5==f){q=(k-n&4294967295|0)/(l-j&4294967295|0);d=j;if(!((d|0)<(l|0)))break b;for(;;)if(g=f=(q*(d-j&4294967295|0)|0)+n&4294967295,f=255<(f|0)?7:8,7==f&&(g=255),h[(b+344&4294967295)+d&4294967295]=g&255,d=d+1&4294967295,(d|0)<(l|0))f=6;else break b}while(0);j=l;n=k;e=d=e+2&4294967295;if(!(12>(d|0)))break a}}function el(c,m){var f=s;s+=1260;la(f,0,1260);var d,i=null,g,j,v,n,k,w,r=f+4,x,L,H,p,u,z,C,E,B,N,D=f+8,K=f+48,I=f+88,P=f+128,X=f+168,T=f+208,R,G=f+248,V=f+448,S=f+612,Y=f+616,na=f+648,Z=f+680,aa=f+712,ja=f+1032,ma=f+1036,ia,oa=f+1040,qa=f+1044,za=f+1048,xa,Fa=f+1128,bb=f+1176,Va=f+1180,Ma=f+1220;x=j=0;L=m&2;N=B=E=C=z=u=p=H=0;fa(D&4294967295,c);d=0==((b=h[D&4294967295],128<=b?b-256:b)|0)?1:2;if(1==d){var Na=D&4294967295,ya,va,Ua;ya=hh&4294967295;va=Na;for(Ua=ya+8;ya<Ua;)h[va++]=h[ya++]}d=0!=(m&16|0)?3:5;a:do if(3==d){fa(G&4294967295,c);if(!(0>=(of(G&4294967295)|0))){d=9;break a}g=0;d=137;break a}else if(5==d){U(V&4294967295,GC&4294967295,e([wd&4294967295,0,0,0,47,0,0,0,47,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0],y));U(G&4294967295,Dg&4294967295,e([V&4294967295,0,0,0,D&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));if(!(0>=(of(G&4294967295)|0))){d=9;break a}h[S&4294967295]=h[D&4294967295];h[S+1&4294967295]=h[D+1&4294967295];h[S+2&4294967295]=0;U(G&4294967295,HC&4294967295,e([V&4294967295,0,0,0,S&4294967295,0,0,0,47,0,0,0,D&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));if(!(0>=(of(G&4294967295)|0))){d=9;break a}U(G&4294967295,IC&4294967295,e([V&4294967295,0,0,0,47,0,0,0,D&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));if(!(0>=(of(G&4294967295)|0))){d=9;break a}U(G&4294967295,JC&4294967295,e([V&4294967295,0,0,0,47,0,0,0,D&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));d=9;break a}while(0);a:do if(9==d){var ab=pe(G&4294967295,Mh&4294967295);j=ab;R=Gg&4294967295;d=0==(ab|0)?10:14;b:do if(10==d)if(d=0!=(m&3|0)?11:12,11==d){g=0;d=137;break a}else if(12==d){if(!(0<=(Ah(D&4294967295)|0))){d=14;break b}R=D&4294967295}while(0);d=0==(L|0)&0!=(a[Rb>>2]|0)?15:16;15==d&&(a[Rb>>2]=0);fa(I&4294967295,R);fa(P&4294967295,R);fa(X&4294967295,R);d=0!=(L|0)?18:17;if(18==d){var eb=$g(Mk&4294967295,43);v=eb;d=0!=(eb|0)?19:20;19==d&&(h[v]=0);U(G&4294967295,KC&4294967295,e([c+3&4294967295,0,0,0],["i8*",0,0,0],y));md(Mk&4294967295,G&4294967295);B=a[Rb>>2]&4294967295}else 17==d&&(a[M>>2]=ct,Af(Mk&4294967295,c,40),h[Zl&4294967295]=0,h[xi&4294967295]=0,a[(xj+8&4294967295)>>2]=Mk&4294967295,a[(xj&4294967295)>>2]=Zl&4294967295,a[(xj+4&4294967295)>>2]=xi&4294967295);var Ia=void 0,ba=void 0,ta=void 0,ba=L;a[(a[M>>2]+44&4294967295)>>2]=290816;a[(a[M>>2]+48&4294967295)>>2]=4104;a[(a[M>>2]+96&4294967295)>>2]=256;a[(a[M>>2]+64&4294967295)>>2]=100;a[(a[M>>2]+76&4294967295)>>2]=0;a[(a[M>>2]+80&4294967295)>>2]=0;a[(a[M>>2]+68&4294967295)>>2]=64;a[(a[M>>2]+84&4294967295)>>2]=5;a[(a[M>>2]+88&4294967295)>>2]=0;a[(a[M>>2]+92&4294967295)>>2]=64;a[(a[M>>2]+100&4294967295)>>2]=100;a[(a[M>>2]+104&4294967295)>>2]=100;a[(a[M>>2]+108&4294967295)>>2]=22050;var qb=void 0,ob=void 0,Ra=void 0,Sa=void 0,qb=a[M>>2]+112&-1,ob=qb+32,Sa=0;0>Sa&&(Sa+=256);for(Sa=Sa+(Sa<<8)+(Sa<<16)+16777216*Sa;0!==qb%4&&qb<ob;)h[qb++]=0;qb>>=2;for(Ra=ob>>2;qb<Ra;)a[qb++]=Sa;for(qb<<=2;qb<ob;)h[qb++]=0;a[(wa+32&4294967295)>>2]=450;a[(wa+32+4&4294967295)>>2]=800;a[(wa+32+8&4294967295)>>2]=175;a[(a[M>>2]+72&4294967295)>>2]=2;var Ya=void 0;q[$l>>2]=-3.1415927/(a[Jb>>2]|0);q[dt>>2]=-2*q[$l>>2];for(Ya=0;;){Cv(In+40*Ya&4294967295,2E3,200,1);var fb=Ya+1&4294967295,Ya=fb;if(!(9>(fb|0)))break}for(ta=0;;){t[((a[M>>2]+144&4294967295)+2*ta&4294967295)>>1]=256;t[((a[M>>2]+162&4294967295)+2*ta&4294967295)>>1]=2*(l[LC+ta&4294967295]&255)&65535;t[((a[M>>2]+180&4294967295)+2*ta&4294967295)>>1]=2*(l[MC+ta&4294967295]&255)&65535;a[((a[M>>2]+272&4294967295)+4*ta&4294967295)>>2]=0;a[((a[M>>2]+308&4294967295)+4*ta&4294967295)>>2]=a[(NC+
4*ta&4294967295)>>2];t[((a[M>>2]+198&4294967295)+2*ta&4294967295)>>1]=0;a[(Rp+4*ta&4294967295)>>2]=(22050*a[(OC+4*ta&4294967295)>>2]&4294967295|0)/(a[Jb>>2]|0)|0;var Ta=ta+1&4294967295,ta=Ta;if(9>(Ta|0))Ia=1;else{Ia=2;break}}t[((a[M>>2]+162&4294967295)+4&4294967295)>>1]=240;FC(a[M>>2],Oo&4294967295);a[(a[M>>2]+52&4294967295)>>2]=256;a[(a[M>>2]+56&4294967295)>>2]=238;a[(a[M>>2]+60&4294967295)>>2]=232;Ia=0==(ba|0)?3:4;3==Ia&&(a[Ck>>2]=0,a[Gp>>2]=0,iy(0,0,0));d=0!=(L|0)?23:22;22==d&&Ah(X&4294967295);var sb=G&4294967295,xb=G&4294967295,pb=G&4294967295,Q=G&4294967295,tb=G&4294967295,Kb=K&4294967295,Ga=K&4294967295,Qb=K&4294967295,gc=K&4294967295,hb=K&4294967295,cb=K&4294967295,ga=I&4294967295,ka=P&4294967295,Aa=X&4294967295,rb=X&4294967295,Ba=I&4294967295,ub=za&4294967295,Eb=za&4294967295,hc=I&4294967295,Gb=I&4294967295,ha=P&4294967295,A=X&4294967295,mb=na&4294967295,ic=Y&4294967295,sa=Z&4294967295,Wa=aa&-1,$b=aa+40&-1,jb=aa+80&-1,Ja=aa+120&-1,ca=aa+160&-1,Ab=aa+200&-1,Lb=X&4294967295,ec=T&4294967295,Bb=T&4294967295,Ha=G&4294967295,vb=Fa&4294967295,da=Fa&4294967295,Zb=Ma&4294967295,uc=Va&4294967295,Vb=Ma&4294967295,Db=Va&4294967295,nc=Ma&4294967295;b:for(;;){if(0==(j|0)){d=114;break b}if(0==(et(sb,200,j)|0)){d=112;break b}v=xb;c:for(;;){if(0==((b=h[v],128<=b?b-256:b)|0)){d=30;break c}var mc=(b=h[v],128<=b?b-256:b);if(!(0!=(Qc(mc)|0)^1)){d=30;break c}v=v+1&4294967295;d=27}var rc=v;v=rc+1&4294967295;h[rc]=0;if(0==((b=h[pb],128<=b?b-256:b)|0)){d=24;continue b}var db=n=Ff(ua&4294967295,Q);d=2==db?33:1==db?41:3==db?45:4==db?46:6==db?50:5==db?51:7==db?52:8==db?53:20==db?54:21==db?55:22==db?56:18==db?57:19==db?59:23==db?32:32==db?73:17==db?76:24==db?77:25==db?78:26==db?80:27==db?81:9==db?85:10==db?86:11==db?88:12==db?90:13==db?94:14==db?95:15==db?97:16==db?101:33==db?102:31==db?103:28==db?104:29==db?107:30==db?108:109;if(109==d)d=256==(n&65280|0)?110:111,110==d?(zb(v,Lh&4294967295,e([(B+24&4294967295)+4*(n&255)&4294967295,0,0,0],["i32*",0,0,0],y)),d=24):111==d&&(Ea(a[(a[lb>>2]+12&4294967295)>>2],PC&4294967295,e([tb,0,0,0],["i8*",0,0,0],y)),d=24);else if(33==d){if(0!=(L|0)){d=24;continue b}a[oa>>2]=5;h[Kb]=0;zb(v,Nk&4294967295,e([Ga,0,0,0,oa,0,0,0],["i8*",0,0,0,"i32*",0,0,0],y));if(0==(nb(Qb,Gl&4294967295)|0)){d=24;continue b}ia=$(gc)+2&4294967295;d=ia>>>0<((-x&4294967295)+99&4294967295)>>>0?36:37;36==d&&(h[xi+x&4294967295]=a[oa>>2]&255,fa(xi+(x+1&4294967295)&4294967295,hb),x=x+ia&4294967295);if(0!=(H|0)){d=24;continue b}var Hb;var Ib=cb,Wb=Ns&4294967295,ea=s;s+=4;la(ea,0,4);var Mb=void 0,kb=void 0,Ca=ea,Mb=Ib,kb=Wb,sc,vc=kb,Ub=Ca,oc=void 0,Sb=void 0,Fb=void 0,fc=void 0,Tb=void 0,xc=void 0,kc=void 0,Fb=Mb,oc=0==(Fb|0)?1:3;d:do if(1==oc){var wc=a[Ub>>2],Fb=wc;if(0!=(wc|0)){oc=3;break d}Sb=0;oc=18;break d}while(0);if(3==oc){d:for(;;){for(var pa=Fb,Fb=pa+1&4294967295,Tb=(b=h[pa],128<=b?b-256:b),fc=vc;;){var Bc=fc,fc=Bc+1&4294967295,Ic=(b=h[Bc],128<=b?b-256:b),xc=Ic,Nc=Tb;if(0==(Ic|0)){oc=8;break d}if((Nc|0)==(xc|0))break}oc=3}if(8==oc)if(oc=0==(Nc|0)?9:10,9==oc)Sb=a[Ub>>2]=0;else{if(10==oc){kc=Fb+-1&4294967295;d:for(;;)for(var Jc=Fb,Fb=Jc+1&4294967295,Tb=(b=h[Jc],128<=b?b-256:b),fc=vc;;){var Oc=fc,fc=Oc+1&4294967295,lc=(b=h[Oc],128<=b?b-256:b),xc=lc;if((lc|0)==(Tb|0))break d;if(0==(xc|0))continue d}oc=0==(Tb|0)?14:15;14==oc?Fb=0:15==oc&&(h[Fb+-1&4294967295]=0);a[Ub>>2]=Fb;Sb=kc}}else 7==oc&&(a[Ub>>2]=Fb,h[Fb+-1&4294967295]=0,Sb=Fb+-1&4294967295)}sc=Sb;s=ea;Hb=sc;R=Hb;H=1;fa(ga,R);fa(ka,R);fa(Aa,R);Ah(rb);d=0!=(N|0)?39:40;N=Xl(Ba);B=N&4294967295;d=24}else if(41==d){if(0!=(L|0)){d=24;continue b}var Tc=(b=h[v],128<=b?b-256:b),wb=0!=(Qc(Tc)|0),pc=v;wb?(i=42,d=43):(i=42,d=44);c:do if(43==d)for(;;){v=(43==i?Pa:pc)+1&4294967295;var Uc=(b=h[v],128<=b?b-256:b),nd=0!=(Qc(Uc)|0),Pa=v;if(nd)d=i=43;else{i=43;d=44;break c}}while(0);Af(Zl&4294967295,42==i?pc:Pa,40);d=24}else if(45==d){a[qa>>2]=0;zb(v,Nk&4294967295,e([ub,0,0,0,qa,0,0,0],["i8*",0,0,0,"i32*",0,0,0],y));var yc=Ff(yj&4294967295,Eb)&255;h[xj+12&4294967295]=yc;h[xj+13&4294967295]=a[qa>>2]&255;d=24}else if(46==d){if(0!=(L|0)){d=24;continue b}zb(v,wi&4294967295,e([hc,0,0,0],["i8*",0,0,0],y));d=0!=(N|0)?48:49;N=Xl(Gb);B=N&4294967295;d=24}else if(50==d)zb(v,wi&4294967295,e([ha,0,0,0],["i8*",0,0,0],y)),d=24;else if(51==d)zb(v,wi&4294967295,e([A,0,0,0],["i8*",0,0,0],y)),d=24;else if(52==d){var Cd=v,Vc=s;s+=20;la(Vc,0,20);var Wc=void 0,Bd=void 0,xd=void 0,Rc=Vc,Kc=Vc+4,Yc=Vc+8,jd=Vc+12,td=Vc+16,Bd=Cd;a[Kc>>2]=100;a[Yc>>2]=100;a[jd>>2]=100;a[td>>2]=0;xd=zb(Bd,QC&4294967295,e([Rc,0,0,0,Kc,0,0,0,Yc,0,0,0,jd,0,0,0,td,0,0,0],["i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],y));Wc=2>(xd|0)?9:1;d:do if(1==Wc){if(0>(a[Rc>>2]|0)|8<(a[Rc>>2]|0))break d;Wc=0<=(a[Kc>>2]|0)?3:4;3==Wc&&(t[((a[M>>2]+144&4294967295)+2*a[Rc>>2]&4294967295)>>1]=(2.56001*(a[Kc>>2]|0)|0)&65535);Wc=0<=(a[Yc>>2]|0)?5:6;5==Wc&&(t[((a[M>>2]+162&4294967295)+2*a[Rc>>2]&4294967295)>>1]=(2.56001*(a[Yc>>2]|0)|0)&65535);Wc=0<=(a[jd>>2]|0)?7:8;7==Wc&&(t[((a[M>>2]+180&4294967295)+2*a[Rc>>2]&4294967295)>>1]=(2.56001*(a[jd>>2]|0)|0)&65535);t[((a[M>>2]+
198&4294967295)+2*a[Rc>>2]&4294967295)>>1]=a[td>>2]&65535}while(0);s=Vc;d=24}else if(53==d)w=zb(v,yi&4294967295,e([ja,0,0,0,ma,0,0,0],["i32*",0,0,0,"i32*",0,0,0],y)),a[(a[M>>2]+44&4294967295)>>2]=(a[ja>>2]-9&4294967295)<<12,a[(a[M>>2]+48&4294967295)>>2]=108*(a[ma>>2]-a[ja>>2]&4294967295)&4294967295,xa=(a[ja>>2]-82&4294967295|0)/82,a[(a[M>>2]+96&4294967295)>>2]=256*(1+xa/4)|0,d=24;else if(54==d)z=zi(v,mb),d=24;else if(55==d)u=zi(v,ic),d=24;else if(56==d)C=zi(v,sa),d=24;else if(57==d){zb(v,yi&4294967295,e([rh,0,0,0,RC,0,0,0],["i32*",0,0,0,"i32*",0,0,0],y));if(0==(a[rh>>2]&255|0)){d=24;continue b}a[(B+228&4294967295)>>2]=a[rh>>2]&255;d=24}else if(59==d){w=zb(v,SC&4294967295,e([Wa,0,0,0,$b,0,0,0,jb,0,0,0,Ja,0,0,0,ca,0,0,0,Ab,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));k=a[(B+228&4294967295)>>2]=0;if(!((k|0)<(w|0))){d=24;continue b}for(;;){d=0==(nb(aa+40*k&-1,ft&4294967295)|0)?64:61;if(61==d){var ud;for(var Lc=void 0,Za=void 0,Ed=void 0,yd=void 0,Ed=aa+40*k&-1,yd=0;;){if(!((yd|0)<(a[oq>>2]|0))){Lc=5;break}var O=0==(nb(Ed,a[jm>>2]+68*yd&-1)|0),gb=yd;if(O){Lc=3;break}yd=gb+1&4294967295;Lc=1}5==Lc?Za=-1:3==Lc&&(Za=gb);ud=Za;a[f>>2]=ud;d=0>(ud|0)?62:63;62==d?Ea(a[(a[lb>>2]+12&4294967295)>>2],TC&4294967295,e([aa+40*k&-1,0,0,0],["i8*",0,0,0],y)):63==d&&(h[(B+232&4294967295)+k&4294967295]=a[f>>2]&255)}k=k+1&4294967295;if((k|0)<(w|0))d=60;else{d=24;continue b}}}else if(32==d){if(0==((b=h[v],128<=b?b-256:b)|0)){d=24;continue b}for(;;){var fd=(b=h[v],128<=b?b-
256:b);d=0!=(Qc(fd)|0)?67:68;d:do if(67==d)for(;;){v=v+1&4294967295;var Kd=(b=h[v],128<=b?b-256:b);if(0!=(Qc(Kd)|0))d=67;else{d=68;break d}}while(0);w=-1;var od=Ke(v);w=od;d=0<(od|0)?69:71;d:do if(69==d){if(!(32>(w|0))){d=71;break d}v=v+1&4294967295;E|=1<<w}while(0);var Ld=(b=h[v],128<=b?b-256:b);d=0!=(cq(Ld)|0)?72:65;d:do if(72==d)for(;;){v=v+1&4294967295;var pd=(b=h[v],128<=b?b-256:b);if(0!=(cq(pd)|0))d=72;else{d=65;break d}}while(0);if(0!=((b=h[v],128<=b?b-256:b)|0))d=66;else{d=24;continue b}}}else if(73==d){d=0==(p|0)?74:75;74==d&&(Ah(Lb),p=1);var Ec=v,ld=s;s+=28;la(ld,0,28);var Hd=void 0,Vd=void 0,qc=void 0,ad=void 0,Fd=ld,Jd=ld+4,Gd=ld+16,Vd=Ec;a[Fd>>2]=0;for(var Ud=Gd&4294967295,Dd=void 0,bd=void 0,Wd=void 0,Dd=ft&4294967295,bd=Ud,Wd=Dd+5;Dd<Wd;)h[bd++]=h[Dd++];qc=zb(Vd,UC&4294967295,e([Fd,0,0,0,Jd&4294967295,0,0,0,Gd&4294967295,0,0,0],["i32*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));Hd=2>(qc|0)|60<=(a[Ck>>2]|0)?3:1;d:do if(1==Hd){var gd=ty(Jd&4294967295),ad=gd;if(0==(gd|0))break d;h[Dk+3*a[Ck>>2]&-1]=ad&255;var Ka=ty(Gd&4294967295)&255;h[(Dk+3*a[Ck>>2]&4294967295)+1&4294967295]=Ka;var Xd=a[Fd>>2]&255,Pd=a[Ck>>2];a[Ck>>2]=Pd+1&4294967295;h[(Dk+3*Pd&4294967295)+2&4294967295]=Xd}while(0);s=ld;d=24}else if(76==d)zb(v,yi&4294967295,e([B&4294967295,0,0,0,B+4&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0],y)),d=24;else if(77==d)zb(v,VC&4294967295,e([B+8&4294967295,0,0,0,B+12&4294967295,0,0,0,B+16&4294967295,0,0,0,B+20&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],y)),d=24;else if(78==d){if(!(1==(zb(v,Lh&4294967295,e([f,0,0,0],["i32*",0,0,0],y))|0)&20>(a[f>>2]|0))){d=24;continue b}a[(N+696&4294967295)>>2]=a[(Xa+4*a[f>>2]&4294967295)>>2];d=24}else if(80==d)zb(v,yi&4294967295,e([B+184&4294967295,0,0,0,B+188&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0],y)),d=24;else if(81==d){a[r>>2]=0;d=2<=(zb(v,WC&4294967295,e([ec,0,0,0,f,0,0,0,r,0,0,0],["i8*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],y))|0)?82:84;c:do if(82==d){var Od=Ff(gn&4294967295,Bb);k=Od;if(!(0<=(Od|0))){d=84;break c}a[((B+24&4294967295)+
4*k&4294967295)>>2]=a[f>>2];a[((B+100&4294967295)+4*k&4294967295)>>2]=a[r>>2];d=24;continue b}while(0);Ea(a[(a[lb>>2]+12&4294967295)>>2],XC&4294967295,e([Ha,0,0,0,v,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));d=24}else if(85==d)a[f>>2]=0,a[(a[M>>2]+80&4294967295)>>2]=0,zb(v,yi&4294967295,e([a[M>>2]+76&4294967295,0,0,0,a[M>>2]+80&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0],y)),d=24;else if(86==d){if(1!=(zb(v,Lh&4294967295,e([f,0,0,0],["i32*",0,0,0],y))|0)){d=24;continue b}a[(a[M>>2]+68&4294967295)>>2]=32*a[f>>2]&4294967295;d=24}else if(88==d){if(1!=(zb(v,Lh&4294967295,e([f,0,0,0],["i32*",0,0,0],y))|0)){d=24;continue b}a[(a[M>>2]+72&4294967295)>>2]=a[f>>2];d=24}else if(90==d){if(1!=(zb(v,Lh&4294967295,e([f,0,0,0],["i32*",0,0,0],y))|0)){d=24;continue b}d=4<(a[f>>2]|0)?92:93;92==d&&(a[(a[M>>2]+88&4294967295)>>2]=1,a[f>>2]=4);a[(a[M>>2]+84&4294967295)>>2]=a[f>>2]+1&4294967295;d=24}else if(94==d)Eu(v,vb),FC(a[M>>2],da),d=24;else if(95==d){if(1!=(zb(v,Lh&4294967295,e([f,0,0,0],["i32*",0,0,0],y))|0)){d=24;continue b}a[(a[M>>2]+92&4294967295)>>2]=(64*a[f>>2]&4294967295|0)/100|0;d=24}else if(97==d){var qd=zi(v,(a[M>>2]+272&4294967295)+4&4294967295);a[(a[M>>2]+272&-1)>>2]=qd;for(k=1;;){d=0!=((k|0)%2|0)?99:100;99==d&&(a[((a[M>>2]+272&4294967295)+4*k&4294967295)>>2]=-a[((a[M>>2]+272&4294967295)+4*k&4294967295)>>2]&4294967295);var ge=k+1&4294967295;k=ge;if(8>(ge|0))d=98;else{d=24;continue b}}}else if(101==d){var be=zi(v,(a[M>>2]+308&4294967295)+4&4294967295);a[(a[M>>2]+308&-1)>>2]=be;d=24}else if(102==d){var ce=zb(v,yi&4294967295,e([a[M>>2]+100&4294967295,0,0,0,a[M>>2]+104&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0],y));a[f>>2]=ce;d=24}else if(103==d)zb(v,Lh&4294967295,e([a[M>>2]+64&4294967295,0,0,0],["i32*",0,0,0],y)),d=24;else if(104==d)a[bb>>2]=16E3,h[Zb]=0,zb(v,YC&4294967295,e([uc,0,0,0,Vb,0,0,0,bb,0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i32*",0,0,0],y)),d=0!=(iy(Db,nc,a[bb>>2])|0)?105:106,105==d&&Nd(ZC&4294967295,23,1,a[(a[lb>>2]+12&4294967295)>>2]),a[(a[M>>2]+108&4294967295)>>2]=a[bb>>2],d=24;else if(107==d){a[(a[M>>2]+112&-1)>>2]=1;zi(v,a[M>>2]+112&-1);var Qd=(a[M>>2]+112&4294967295)+20&4294967295;a[Qd>>2]=a[Qd>>2]-40&4294967295;d=24}else 108==d&&(zi(v,wa+32&4294967295),Nm(3),d=24)}b:do if(112==d){if(0==(j|0)){d=114;break b}Sd(j)}while(0);d=0==(N|0)?115:117;b:do if(115==d){if(0!=(L|0)){d=117;break b}N=Xl(I&4294967295)}while(0);Nm(3);k=0;b:for(;;){t[((a[M>>2]+216&4294967295)+2*k&4294967295)>>1]=t[((a[M>>2]+144&4294967295)+2*k&4294967295)>>1];t[((a[M>>2]+234&4294967295)+2*k&4294967295)>>1]=t[((a[M>>2]+162&4294967295)+2*k&4294967295)>>1];t[((a[M>>2]+252&4294967295)+2*k&4294967295)>>1]=t[((a[M>>2]+180&4294967295)+2*k&4294967295)>>1];var Rd=k+1&4294967295;k=Rd;if(9>(Rd|0))d=118;else{d=119;break b}}d=0!=(L|0)?120:121;if(120==d)N=a[Rb>>2];else if(121==d){var Td=Ah(X&4294967295);k=Td;d=0>(Td|0)?122:123;122==d&&Ea(a[(a[lb>>2]+12&4294967295)>>2],$C&4294967295,e([X&4294967295,0,0,0],["i8*",0,0,0],y));a[(a[M>>2]+40&4294967295)>>2]=k;a[(N+656&4294967295)>>2]=k;ap(N,P&4294967295,m&4);d=0==((b=h[Mi&4294967295],128<=b?b-256:b)|0)?124:125;if(124==d){g=0;d=137;break a}else 125==d&&(a[(N+692&4294967295)>>2]=E,h[xi+x&4294967295]=0)}B=N&4294967295;var ae=a[((B+24&4294967295)+24&4294967295)>>2];a[f>>2]=ae;d=0!=(ae|0)?127:128;127==d&&Js(N,a[f>>2]);var me=((105*(b=t[(a[M>>2]+180&-1)>>1],32768<=b?b-65536:b)&4294967295|0)/100|0)&65535;t[(a[M>>2]+180&-1)>>1]=me;d=0!=(L|0)?130:129;129==d&&(a[Rb>>2]=N);k=0;d=(k|0)<(z|0)?131:132;b:do if(131==d)for(;;)if(t[((a[Rb>>2]+676&4294967295)+2*k&4294967295)>>1]=a[(na+4*k&4294967295)>>2]&65535,k=k+1&4294967295,(k|0)<(z|0))d=131;else{d=132;break b}while(0);k=0;d=(k|0)<(C|0)?133:134;b:do if(133==d)for(;;){var Xb=a[(Z+4*k&4294967295)>>2],de=(a[Rb>>2]+676&4294967295)+2*k&4294967295,ne=(b=t[de>>1],32768<=b?b-65536:b)+Xb&65535;t[de>>1]=ne;k=k+1&4294967295;if((k|0)<(C|0))d=133;else{d=134;break b}}while(0);k=0;d=(k|0)<(u|0)?135:136;b:do if(135==d)for(;;)if(h[(a[Rb>>2]+660&4294967295)+k&4294967295]=a[(Y+4*k&4294967295)>>2]&255,h[(a[Rb>>2]+668&4294967295)+k&4294967295]=a[(Y+4*k&4294967295)>>2]-1&255,k=k+1&4294967295,(k|0)<(u|0))d=135;else{d=136;break b}while(0);g=a[M>>2]}while(0);var oe=g;s=f;return oe}function et(a,c,f){var d,c=0==(jn(a,c,f)|0)?1:2;if(1==c)d=0;else if(2==c){for(d=$(a);;){d=c=d-1&4294967295;if(!(0<(c|0)))break;c=(b=h[a+d&4294967295],128<=b?b-256:b);if(0==(Qc(c)|0))break;h[a+d&4294967295]=0}d=Xt(a,Wo&4294967295);7==(0!=(d|0)?7:8)&&(h[d]=0);d=a}return d}function zi(b,c){var f,d,i,g;f=c;d=f+12;g=0;0>g&&(g+=256);for(g=g+(g<<8)+(g<<16)+16777216*g;0!==f%4&&f<d;)h[f++]=0;f>>=2;for(i=d>>2;f<i;)a[f++]=g;for(f<<=2;f<d;)h[f++]=0;return zb(b,aD&4294967295,e([c&4294967295,0,0,0,c+4&4294967295,0,0,0,c+8&4294967295,0,0,0,c+12&4294967295,0,0,0,c+16&4294967295,0,0,0,c+20&4294967295,0,0,0,c+24&4294967295,0,0,0,c+28&4294967295,0,0,0],["i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0,"i32*",0,0,0],y))}function lv(a,c){var f=s;s+=60;la(f,0,60);var d,e,g,j;Af(f&4294967295,a,60);sn(f&4294967295,c);j=Vh&4294967295;g=d=el(f&4294967295,0);d=0==(d|0)?1:2;1==d?e=0:2==d&&(d=0!=((b=h[j&4294967295],128<=b?b-256:b)|0)?3:4,3==d&&(g=el(j,2)),e=g);s=f;return e}function sn(a,c){var f=s;s+=8;la(f,0,8);var d,i=null,g,j;g=c;h[Vh&4294967295]=0;U(f&4294967295,bD&4294967295,e([47,0,0,0],["i32",0,0,0],y));d=0!=(a|0)?1:5;a:do if(1==d){j=d=$g(a,43);if(0==(d|0)){d=5;break a}d=j;j=d+1&4294967295;h[d]=0;d=0!=(10>((b=h[j],128<=b?b-256:b)-48&4294967295)>>>0&1|0)?3:4;if(3==d){var l=Ke(j);g=l;i=3;d=6;break a}else if(4==d){fa(Vh&4294967295,f&4294967295);Af(Vh+3&4294967295,j,17);d=5;break a}}while(0);if(5==d)var n=g,i=5;if(7==(0<((5==i?n:l)|0)?7:10))i=f&4294967295,j=g,d=10>(g|0)?8:9,8==d?U(Vh&4294967295,cD&4294967295,e([i,0,0,0,j,0,0,0],["i8*",0,0,0,"i32",0,0,0],y)):9==d&&U(Vh&4294967295,dD&4294967295,e([i,0,0,0,j-10&4294967295,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));s=f}function tn(b,c){var f=s;s+=44;la(f,0,44);var d,i=null,g,h,l,n,k,q,r,t;h=b;q=k=n=-1;d=0==(h|0)?1:4;1==d&&(d=0==(a[ff>>2]|0)?2:3,2==d&&mn(0),h=gg&4294967295);U(f&4294967295,Zo&4294967295,e([47,0,0,0,c,0,0,0],["i32",0,0,0,"i8*",0,0,0],y));t=$(f&4294967295);l=0;var v=f&4294967295;a:for(;;){if(0==(a[(h+4*l&4294967295)>>2]|0)){d=13;break a}if(0==(nb(c,a[(a[(h+4*l&4294967295)>>2]&4294967295)>>2])|0)){d=7;break a}d=c;var x=a[(a[(h+4*l&4294967295)>>2]+8&4294967295)>>2];r=x;d=0==(nb(d,x)|0)?9:10;b:do if(9==d)n=l;else if(10==d){x=$(r);if(0!=(nb(v,r+(x-t&4294967295)&4294967295)|0))break b;k=l}while(0);l=l+1&4294967295;d=5}if(13==d)var p=q,i=13;else if(7==d){var u=l;q=u;i=7}d=0>((13==i?p:u)|0)?15:17;a:do if(15==d){q=n;if(!(0>(q|0))){d=20;break a}var z=k;q=z;i=16;d=18;break a}else if(17==d){var C=q,i=17;d=18;break a}while(0);a:do if(18==d){if(!(0>((17==i?C:z)|0))){d=20;break a}g=0;d=21;break a}while(0);20==d&&(g=a[(h+4*q&4294967295)>>2]);s=f;return g}function mn(c){var m=s;s+=164;la(m,0,164);var f,d,i;d=0;f=(d|0)<(a[ff>>2]|0)?1:4;a:do if(1==f)for(;;)if(d=d+1&4294967295,(d|0)<(a[ff>>2]|0))f=1;else break a;while(0);a[ff>>2]=0;U(m&4294967295,eD&4294967295,e([wd&4294967295,0,0,0,47,0,0,0],["i8*",0,0,0,"i32",0,0,0],y));d=$(m&4294967295)+1&4294967295;a[gt>>2]=d;fD(m&4294967295);a[(gg+4*a[ff>>2]&4294967295)>>2]=0;so(gg,a[ff>>2],4,6);f=0!=(c|0)?5:6;if(5==f)gD(c,cl&4294967295,1);else if(6==f){d=c=0;i=f=a[(gg+4*d&4294967295)>>2];f=0!=(f|0)?7:12;a:do if(7==f)for(;;){f=0!=((b=h[a[(i+4&4294967295)>>2]&4294967295],128<=b?b-256:b)|0)?8:11;c:do if(8==f){if(0==(nb(a[(i+4&4294967295)>>2]+1&4294967295,Gl&4294967295)|0))break c;if(0==($b(a[(i+8&4294967295)>>2],hn&4294967295,3)|0))break c;var g=i,j=c,c=j+1&4294967295;a[(cl+4*j&4294967295)>>2]=g}while(0);d=d+1&4294967295;i=f=a[(gg+4*d&4294967295)>>2];if(0!=(f|0))f=7;else break a}while(0);a[(cl+4*c&4294967295)>>2]=0}s=m;return cl&4294967295}function kv(c,m){var f=s;s+=1272;la(f,0,1272);var d,i,g,j,q,n,k,t,r,v,x,H,p,u=f+24,z=f+624;v=1;p=0;a[m>>2]=1;var C,E,B,N;C=c;E=f;B=C+24;if(E%4==C%4){for(;0!==C%4&&C<B;)h[E++]=h[C++];C>>=2;E>>=2;for(N=B>>2;C<N;)a[E++]=a[C++];C<<=2;E<<=2}for(;C<B;)h[E++]=h[C++];d=0==(a[ff>>2]|0)?1:2;1==d&&mn(0);d=0==(a[(f+
4&4294967295)>>2]|0)?4:3;a:do if(3==d){d=0==((b=h[a[(f+4&4294967295)>>2]&4294967295],128<=b?b-256:b)|0)?4:14;break a}while(0);a:do if(4==d){d=0==(a[(f&4294967295)>>2]|0)?5:7;b:do if(5==d){p=a[(f+8&4294967295)>>2];a[(f&4294967295)>>2]=p;if(0!=(p|0))break b;a[(f&4294967295)>>2]=hh&4294967295}while(0);Af(Wp&4294967295,a[(f&4294967295)>>2],60);sn(Wp&4294967295,0);q=Vh&4294967295;p=k=tn(gg&4294967295,Wp&4294967295);if(0==(k|0)){d=14;break a}a[(f+4&4294967295)>>2]=a[(p+4&4294967295)>>2]+1&4294967295;if(0!=(l[f+12&4294967295]&255|0)){d=14;break a}if(0!=(l[f+13&4294967295]&255|0)){d=14;break a}if(0!=(l[f+14&4294967295]&255|0)){d=14;break a}g=0!=((b=h[q&4294967295],128<=b?b-256:b)|0);k=a[(p+8&4294967295)>>2];d=g?12:13;if(12==d){U(Ok&4294967295,ht&4294967295,e([k,0,0,0,q+3&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y));i=Ok&4294967295;d=53;break a}else if(13==d){i=k;d=53;break a}}while(0);if(14==d){g=q=gD(f,u&4294967295,0);d=0==(q|0)?15:17;a:do if(15==d){a[m>>2]=0;q=tn(gg&4294967295,hh&4294967295);a[(u&4294967295)>>2]=q;if(0==(q|0))break a;g=1}while(0);r=0;d=2==(l[f+12&4294967295]&255|0)?20:18;a:do if(18==d){d=0<(l[f+13&4294967295]&255|0)?19:21;if(19==d&&13>(l[f+13&4294967295]&255|0)){d=20;break a}if(1!=(l[f+12&4294967295]&255|0)){d=23;break a}r=1;d=23;break a}while(0);20==d&&(r=2);d=60>(l[f+13&4294967295]&255|0)?24:25;a:do if(24==d){v=0;H=x=a[(zj+4*r&4294967295)>>2];d=26;break a}else if(25==d){q=v;H=x=a[(zj+4*r&4294967295)>>2];d=0==(q|0)?26:27;break a}while(0);26==d&&(x=x+1&4294967295);q=j=k=0;d=(j|0)<(g|0)?28:44;a:do if(28==d)for(;;){p=a[(u+4*j&4294967295)>>2];t=0;d=0!=(r|0)?29:31;c:do if(29==d){if((l[p+12&4294967295]&255|0)==(r|0))break c;t=1}while(0);d=0==(q|0)?32:35;c:do if(32==d){if(0==(v|0)){d=35;break c}if(!(60>(l[p+13&4294967295]&255|0))){d=35;break c}t=1;d=37;break c}while(0);c:do if(35==d){if(0!=(t|0))break c;n=p;C=q;q=C+1&4294967295;a[(z+4*C&4294967295)>>2]=n}while(0);for(n=0;(n|0)<(l[p+15&4294967295]&255|0)&&12>(k|0);)if(t=d=(b=h[x],128<=b?b-256:b),d=0==(d|0)?41:42,41==d)x=H;else if(42==d){d=k;k=d+1&4294967295;E=d=it+24*d&4294967295;C=p;B=C+24;if(E%4==C%4){for(;0!==C%4&&C<B;)h[E++]=h[C++];C>>=2;E>>=2;for(N=B>>2;C<N;)a[E++]=a[C++];C<<=2;E<<=2}for(;C<B;)h[E++]=h[C++];h[d+14&4294967295]=t&255;t=d;d=q;q=d+1&4294967295;a[(z+4*d&4294967295)>>2]=t;x=x+1&4294967295;n=n+1&4294967295}j=j+1&4294967295;if((j|0)<(g|0))d=28;else break a}while(0);for(;0!=(p|0);){v=x;x=v+1&4294967295;t=v=(b=h[v],128<=b?b-256:b);if(0==(v|0))break;if(!(12>(k|0)))break;v=k;k=v+1&4294967295;v=d=it+24*v&4294967295;C=p;E=v;B=C+24;if(E%4==C%4){for(;0!==C%4&&C<B;)h[E++]=h[C++];C>>=2;E>>=2;for(N=B>>2;C<N;)a[E++]=a[C++];C<<=2;E<<=2}for(;C<B;)h[E++]=h[C++];h[d+14&4294967295]=t&255;v=d;H=q;q=H+1&4294967295;a[(z+4*H&4294967295)>>2]=v}d=0==(q|0)?49:50;49==d?i=0:50==d&&(z=p=a[(z+4*((l[f+14&4294967295]&255|0)%(q|0))&4294967295)>>2],d=0!=(l[p+14&4294967295]&255|0)?51:52,51==d?(sn(0,l[z+14&4294967295]&255),q=Vh&4294967295,U(Ok&4294967295,ht&4294967295,e([a[(p+8&4294967295)>>2],0,0,0,q+3&4294967295,0,0,0],["i8*",0,0,0,"i8*",0,0,0],y)),i=Ok&4294967295):52==d&&(i=a[(z+8&4294967295)>>2]))}s=f;return i}function gD(c,e,f){var d=s;s+=80;la(d,0,80);var i,g,j,q,n,k,t,r;t=k=0;i=0!=(a[(c+4&4294967295)>>2]|0)?1:6;a:do if(1==i){if(0==((b=h[a[(c+4&4294967295)>>2]&4294967295],128<=b?b-256:b)|0))break a;k=1;t=$(a[(c+4&4294967295)>>2]);j=0;if(!((j|0)<=(t|0)&80>j>>>0))break a;for(;;)if(i=(b=h[a[(c+4&4294967295)>>2]+j&4294967295],128<=b?b-256:b),i=$k(i)&255,h[d+j&4294967295]=i,i=45==((b=i,128<=b?b-256:b)|0)?4:5,4==i&&(k=k+
1&4294967295),j=j+1&4294967295,(j|0)<=(t|0)&80>j>>>0)i=3;else break a}while(0);j=n=0;i=(j|0)<(a[ff>>2]|0)?7:13;a:do if(7==i){var v=d&4294967295;for(;;){r=a[(gg+4*j&4294967295)>>2];i=0==(f&1|0)?9:10;c:do if(9==i){i=0==($b(a[(r+8&4294967295)>>2],hn&4294967295,3)|0)?12:10;break c}while(0);c:do if(10==i){var x=k,y=t,p=a[(gg+4*j&4294967295)>>2],u;var z=void 0;q=null;var C=void 0,E=u=void 0,B=void 0,H=void 0,D=void 0,K=void 0,I=void 0,N=void 0,M=void 0,P=void 0,R=void 0,G=void 0,T=void 0,S=void 0,Y=P=K=void 0,G=void 0;u=c;E=v;B=x;H=y;D=p;S=0;I=a[(D+4&4294967295)>>2];z=0==(nb(E,jt&4294967295)|0)?1:4;e:do if(1==z)z=0==($b(a[(D+8&4294967295)>>2],hn&4294967295,3)|0)?2:3,2==z?C=100:3==z&&(C=0);else if(4==z){z=0==(B|0)?5:6;f:do if(5==z)S=100;else if(6==z){z=0==((b=h[I],128<=b?b-256:b)|0)?7:9;g:do if(7==z){if(0!=(nb(E,kt&4294967295)|0))break g;S=100}while(0);z=0!=((b=h[I],128<=b?b-256:b)|0)?10:31;g:do if(10==z)for(;;){P=I;I=P+1&4294967295;P=(b=h[P],128<=b?b-256:b);G=1;T=0;R=1;K=0;i:for(;;){z=(K|0)>=(H|0)?13:12;j:do if(12==z){var U=(b=h[E+K&4294967295],128<=b?b-256:b),N=U,z=45==(U|0)?13:14;break j}while(0);13==z&&(N=0);M=U=(b=h[I+K&4294967295],128<=b?b-256:b);z=45==(U|0)?15:16;15==z&&(M=0);z=(N|0)!=(M|0)?17:18;17==z&&(G=0);z=45==((b=h[I+K&4294967295],128<=b?b-256:b)|0)?19:21;j:do if(19==z){R=R+1&4294967295;if(0==(G|0))break j;T=T+1&4294967295}while(0);z=0==((b=h[I+K&4294967295],128<=b?b-256:b)|0);U=K+1&4294967295;if(z)break i;K=U}I=I+U&4294967295;T=T+G&4294967295;z=0==(T|0)?24:25;i:do if(25==z){K=5;G=z=B-T&4294967295;z=0<(z|0)?26:27;26==z&&(K=K-G&4294967295);G=z=R-T&4294967295;z=0<(z|0)?28:29;28==z&&(K=K-G&4294967295);K=(100*K&4294967295)-(2*P&4294967295)&4294967295;if(!((K|0)>(S|0)))break i;S=K}while(0);if(0!=((b=h[I],128<=b?b-256:b)|0))z=10;else break g}while(0);if(0!=(S|0))break f;C=0;break e}while(0);z=0!=(a[(u&4294967295)>>2]|0)?34:38;f:do if(34==z)if(z=0==(nb(a[(u&4294967295)>>2],a[(D&4294967295)>>2])|0)?35:36,35==z)S=S+500&4294967295;else if(36==z){if(0!=(nb(a[(u&4294967295)>>2],a[(D+
8&4294967295)>>2])|0))break f;S=S+400&4294967295}while(0);z=1==(l[u+12&4294967295]&255|0)?40:39;f:do if(39==z){z=2==(l[u+12&4294967295]&255|0)?40:45;break f}while(0);f:do if(40==z){z=1==(l[D+12&4294967295]&255|0)?42:41;if(41==z&&2!=(l[D+12&4294967295]&255|0))break f;P=S;z=(l[u+12&4294967295]&255|0)==(l[D+12&4294967295]&255|0)?43:44;43==z?S=P+50&4294967295:44==z&&(S=P-50&4294967295)}while(0);z=12>=(l[u+13&4294967295]&255|0)?46:49;f:do if(46==z){if(2!=(l[D+12&4294967295]&255|0))break f;if(!(12<(l[D+
13&4294967295]&255|0)))break f;S=S+5&4294967295}while(0);z=0!=(l[D+13&4294967295]&255|0)?50:59;f:do if(50==z){z=0==(l[u+13&4294967295]&255|0)?51:52;51==z?Y=30:52==z&&(Y=l[u+13&4294967295]&255);P=R=(100*Y&4294967295|0)/(l[D+13&4294967295]&255|0)|0;z=100>(R|0)?54:55;54==z&&(P=1E4/(P|0)|0);P=(P-100&4294967295|0)/10|0;K=P=5-P&4294967295;z=0<(P|0)?56:57;56==z&&(K=0);S=K+S&4294967295;if(!(0<(l[u+13&4294967295]&255|0))){z=59;break f}var V=S+10&4294967295,S=V;q=58;z=60;break f}while(0);if(59==z){var Z=S;q=59}z=1>((59==q?Z:V)|0)?61:62;61==z&&(S=1);C=S}while(0);u=C;q=u;if(!(0<(u|0)))break c;u=r;E=n;n=E+1&4294967295;a[(e+4*E&4294967295)>>2]=u;a[(r+16&4294967295)>>2]=q}while(0);j=j+1&4294967295;if((j|0)<(a[ff>>2]|0))i=8;else break a}}while(0);a[(e+4*n&4294967295)>>2]=0;i=0==(n|0)?14:15;14==i?g=0:15==i&&(so(e,n,4,8),g=n);s=d;return g}function fD(c){var m=s;s+=252;la(m,0,252);var f,d=null,i,g,j=OH(c);if(1==(0==(j|0)?13:1)){var l=Jf(j);i=l;f=0==(l|0)|148<=(a[ff>>2]|0)?12:2;a:do if(2==f){var l=m&4294967295,n=m&4294967295,k=m&4294967295,q=m&4294967295,r=m&4294967295;for(;;){U(l,Mo&4294967295,e([c,0,0,0,47,0,0,0,i+4&-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],y));var t=of(n);g=t;-2==(t|0)?(d=3,f=4):(d=3,f=7);c:do if(4==f)if(f=46!=((b=h[i+4&-1],128<=b?b-256:b)|0)?5:6,5==f){fD(k);f=9;break c}else if(6==f){var v=g,d=6;f=7;break c}while(0);c:do if(7==f){if(!(0<((6==d?v:t)|0)))break c;i=g=pe(q,Mh&4294967295);if(0==(g|0))break c;var x=i,p=r+a[gt>>2]&4294967295;g=s;s+=672;la(g,0,672);var u=void 0,z=void 0,C=void 0,E=void 0,B=g,P=g+120,D=g+200,K=g+280,I=g+360,M=void 0,X=void 0,V=void 0,V=M=void 0,R=g+660,G=g+664,Z=g+668,C=void 0,C=x,E=p,V=X=0;a[Z>>2]=3;h[P&4294967295]=0;h[D&4294967295]=0;a[G>>2]=0;x=B&4294967295;u=0!=(et(x,120,C)|0)?1:14;e:do if(1==u){var p=B&4294967295,S=B+4&4294967295,Y=P&4294967295,aa=B&4294967295,ja=K&4294967295,ma=B+8&4294967295,oa=K&4294967295,qa=K&4294967295,ia=K&4294967295,wa=B&4294967295,ua=B+6&4294967295,za=D&4294967295,xa=B&4294967295,Fa=B+8&4294967295;for(;;){u=0==($b(p,Lm&4294967295,4)|0)?3:6;g:do if(3==u){M=S;u=(b=h[M],128<=b?b-256:b);u=0!=(Qc(u)|0)?4:5;h:do if(4==u)for(;;)if(M=M+1&4294967295,u=(b=h[M],128<=b?b-256:b),0!=(Qc(u)|0))u=4;else{u=5;break h}while(0);Af(Y,M,80)}else if(6==u)if(u=0==($b(aa,lt&4294967295,8)|0)?7:10,7==u){a[R>>2]=5;h[ja]=0;zb(ma,Nk&4294967295,e([oa,0,0,0,R,0,0,0],["i8*",0,0,0,"i32*",0,0,0],y));M=$(qa)+2&4294967295;if(!(M>>>0<((-X&4294967295)+299&4294967295)>>>0))break g;h[I+X&4294967295]=a[R>>2]&255;fa(I+(X+1&4294967295)&4294967295,ia);X=X+M&4294967295;V=V+1&4294967295}else if(10==u)if(u=0==($b(wa,Hl&4294967295,6)|0)?11:12,11==u)zb(ua,Nk&4294967295,e([za,0,0,0,G,0,0,0],["i8*",0,0,0,"i32*",0,0,0],y));else if(12==u){if(0!=($b(xa,kt&4294967295,8)|0))break g;zb(Fa,Lh&4294967295,e([Z,0,0,0],["i32*",0,0,0],y))}while(0);if(0!=(et(x,120,C)|0))u=2;else break e}}while(0);M=X;X=M+1&4294967295;h[I+M&4294967295]=0;C=Ff(yj&4294967295,D&4294967295);u=0==(V|0)?15:16;if(15==u)z=0;else if(16==u){M=X;z=$(E);D=$(P&4294967295);V=M=gm(((M+27&4294967295)+
z&4294967295)+D&4294967295,1);z=M=M+24&4294967295;D=X;u=R=K=B=void 0;B=I&4294967295;K=z;R=B+D;if(K%4==B%4&&8<D){for(;0!==B%4&&B<R;)h[K++]=h[B++];B>>=2;K>>=2;for(u=R>>2;B<u;)a[K++]=a[B++];B<<=2;K<<=2}for(;B<R;)h[K++]=h[B++];a[(V+4&4294967295)>>2]=M;fa(M+X&4294967295,E);a[(V+8&4294967295)>>2]=M+X&4294967295;a[(V&4294967295)>>2]=M+X&4294967295;u=0!=((b=h[P&4294967295],128<=b?b-256:b)|0)?17:18;17==u&&(X=($(E)+1&4294967295)+X&4294967295,fa(M+X&4294967295,P&4294967295),a[(V&4294967295)>>2]=M+X&4294967295);h[V+13&4294967295]=a[G>>2]&255;h[V+12&4294967295]=C&255;h[V+14&4294967295]=0;h[V+15&4294967295]=a[Z>>2]&255;z=V}E=z;s=g;g=E;Sd(i);if(0==(g|0))break c;i=g;g=a[ff>>2];a[ff>>2]=g+1&4294967295;a[(gg+4*g&4294967295)>>2]=i}while(0);i=f=Jf(j);if(0==(f|0)|148<=(a[ff>>2]|0))break a;else f=3}}while(0);!H.streams[j]||!H.streams[j].object.isFolder?N(T.EBADF):delete H.streams[j]}s=m}function gI(c,e){var f,d,i,g,j;g=a[c>>2];j=a[e>>2];i=f=nb(a[(g+4&4294967295)>>2]+1&4294967295,a[(j+4&4294967295)>>2]+1&4294967295);f=0!=(f|0)?1:2;1==f?d=i:2==f&&(f=(b=h[a[(g+4&4294967295)>>2]&4294967295],128<=b?b-256:b),i=(b=h[a[(j+4&4294967295)>>2]&4294967295],128<=b?b-256:b),i=f-i&4294967295,f=0!=(i|0)?3:4,3==f?d=i:4==f&&(d=nb(a[(g&4294967295)>>2],a[(j&4294967295)>>2])));return d}function hI(b,c){var f,d,e,g;e=a[b>>2];g=a[c>>2];var h=a[(g+16&4294967295)>>2]-a[(e+16&4294967295)>>2]&4294967295;f=0!=(h|0)?1:2;1==f?d=h:2==f&&(d=nb(a[(e&4294967295)>>2],a[(g&4294967295)>>2]));return d}function Ry(){var c;a[Xh>>2]=0;a[V>>2]=0;c=0!=(a[Pf>>2]|0)?1:2;1==c&&(a[Pf>>2]=0);c=0!=((b=h[Hj&4294967295],128<=b?b-256:b)|0)?3:4;if(3==c){c=s;s+=4096;la(c,0,4096);var e,f;f=1;e=1==(a[Fe>>2]|0)?1:2;if(1!=e&&2==e&&(e=0!=(a[Tb>>2]|0)?4:3,4==e)){e=-1==(Zt(a[Tb>>2],30)|0)?5:6;5==e&&(f=0);vA();var d=Gj(a[ui>>2],zs&4294967295,3);e=d;7==(3!=(d|0)?7:8)&&(f=0);d=c&4294967295;b:for(;;){var i=Ci(a[Tg>>2],d,4096);e=i;if(!(0<(i|0)))break b}e=-1!=(e|0)?12:11;b:do if(11==e){e=11!=(a[N.ret>>2]|0)?12:13;break b}while(0);12==e&&(f=0);e=0!=(fn()|0)?16:14;b:do if(14==e){if(0==(f|0))break b;a[Fe>>2]=1}while(0)}s=c}}function dp(){var b;b=a[Xh>>2]-a[V>>2]&4294967295;1==(0>=(b|0)?1:2)&&(b=b+160&4294967295);return b}function lc(){var b=a[V>>2]+1&4294967295;a[V>>2]=b;1==(160<=(b|0)?1:2)&&(a[V>>2]=0)}function Il(){a[kh>>2]=((l[hD+a[(Ub+52&4294967295)>>2]&4294967295]&255)*((55*a[(Ub+12&4294967295)>>2]&4294967295|0)/100|0)&4294967295|0)/16|0;return a[kh>>2]}function Av(b,c,f,d){var e,g,h,q,n,k,s,r,t;e=0==(a[Ya>>2]|0)?1:2;if(1==e)g=1;else if(2==e){g=(a[((b+80*a[(a[Ya>>2]+84&4294967295)>>2]&4294967295)+12&4294967295)>>2]+a[(b+80*a[(a[Ya>>2]+84&4294967295)>>2]&-1)>>2]&4294967295|0)/(c|0)|0;3==(400<=(g|0)?3:4)&&(g=399);t=(((19*a[Jb>>2]&4294967295|0)/40|0)<<16|0)/(c|0)|0;5==((g|0)>(t|0)?5:6)&&(g=t);s=0;e=(s|0)<=(g|0)?7:8;a:do if(7==e)for(;;)if(a[(f+4*s&4294967295)>>2]=0,s=s+1&4294967295,(s|0)<=(g|0))e=7;else break a;while(0);r=0;e=(r|0)<=(a[(a[Ya>>2]+84&4294967295)>>2]|0)?9:18;a:do if(9==e)for(;;){q=b+80*r&4294967295;e=0==(a[(q+4&4294967295)>>2]|0)?17:10;c:do if(10==e){n=s=a[(q&4294967295)>>2];if(0==(s|0))break c;k=a[(q+12&4294967295)>>2]+a[(q&4294967295)>>2]&4294967295;s=((a[(q&4294967295)>>2]-a[(q+8&4294967295)>>2]&4294967295|0)/(c|0)|0)+1&4294967295;e=0>=(s|0)?12:13;12==e&&(s=1);h=s*c&4294967295;e=(h|0)<(n|0)?14:15;d:do if(14==e)for(;;){e=a[(q+4&4294967295)>>2]*(l[a[Ki>>2]+((n-h&4294967295|0)/(a[(q+8&4294967295)>>2]>>8|0)|0)&4294967295]&255)&4294967295;var v=s;s=v+1&4294967295;v=f+4*v&4294967295;a[v>>2]=a[v>>2]+e&4294967295;h=h+c&4294967295;if((h|0)<(n|0))e=14;else{e=15;break d}}while(0);if(!((h|0)<(k|0)))break c;for(;;)if(e=a[(q+4&4294967295)>>2]*(l[a[Ki>>2]+((h-n&4294967295|0)/(a[(q+12&4294967295)>>2]>>8|0)|0)&4294967295]&255)&4294967295,v=s,s=v+1&4294967295,v=f+4*v&4294967295,a[v>>2]=a[v>>2]+e&4294967295,h=h+c&4294967295,(h|0)<(k|0))e=16;else break c}while(0);r=r+1&4294967295;if((r|0)<=(a[(a[Ya>>2]+84&4294967295)>>2]|0))e=9;else break a}while(0);h=10*a[((b+80&4294967295)+4&4294967295)>>2]&4294967295;n=65536E3/(c|0)|0;e=0<(n|0)?19:21;a:do if(19==e){k=h;q=(k|0)/(n|0)|0;s=1;if(!(0<(k|0)))break a;for(;;)if(e=h,k=s,s=k+1&4294967295,k=f+4*k&4294967295,a[k>>2]=a[k>>2]+e&4294967295,h=e=h-q&4294967295,0<(e|0))e=20;else break a}while(0);e=9>(r|0)?22:27;a:do if(22==e)for(;;)if(q=a[((b+80*r&4294967295)+4&4294967295)>>2]>>14,a[(Mn+4*r&4294967295)>>2]=((5*q&4294967295)*q&4294967295|0)/2|0,e=0==(d|0)?23:24,23==e&&(a[(Kn+4*r&4294967295)>>2]=(a[(b+80*r&-1)>>2]|0)/(c|0)|0),e=(a[(Kn+4*r&4294967295)>>2]|0)>=(t|0)?25:26,25==e&&(a[(Mn+4*r&4294967295)>>2]=0),r=s=r+
1&4294967295,9>(s|0))e=22;else break a;while(0);s=h=0;e=(s|0)<=(g|0)?28:31;a:do if(28==e)for(;;)if(q=a[(f+4*s&4294967295)>>2]>>15,a[(f+4*s&4294967295)>>2]=(q*q&4294967295)>>8,b=r=h>>19,e=1E3>(r|0)?29:30,29==e&&(a[(f+4*s&4294967295)>>2]=((l[(a[Ya>>2]+344&4294967295)+b&4294967295]&255)*a[(f+4*s&4294967295)>>2]&4294967295)>>13),s=s+1&4294967295,h=h+c&4294967295,(s|0)<=(g|0))e=28;else break a;while(0);c=(l[ip]?6:10)*a[(f+4&4294967295)>>2]&4294967295;a[(f+4&4294967295)>>2]=(c|0)/8|0;e=0!=(d&1|0)?32:34;a:do if(32==e)for(s=1;;)if(a[(qp+4*s&4294967295)>>2]=(a[(f+4*s&4294967295)>>2]-a[(a[Zj>>2]+4*s&4294967295)>>2]&4294967295)>>3,s=d=s+1&4294967295,30>(d|0))e=33;else break a;while(0)}return g}function Cv(a,b,c,d){if(1==(0!=(d|0)?1:2))q[(a+24&4294967295)>>2]=0,q[(a+32&4294967295)>>2]=0;d=q[$l>>2]*(c|0);c=mt(d);q[(a+16&4294967295)>>2]=-(c*c);d=q[dt>>2]*(b|0);b=Go(d);q[(a+8&4294967295)>>2]=2*c*b;q[(a&4294967295)>>2]=1-q[(a+8&4294967295)>>2]-q[(a+16&4294967295)>>2]}function Qr(b,c){var f,d=null,e,g;e=0;g=b&31;f=96==(b&96|0)?1:2;a:do if(1==f)e=-1;else if(2==f){if(64!=(b&96|0))break a;e=1}while(0);15>(g|0)?(d=4,f=5):(d=4,f=9);if(5==f){f=0==(e|0)?6:7;6==f?a[(Ub+4*g&4294967295)>>2]=c:7==f&&(f=Ub+4*g&4294967295,a[f>>2]=a[f>>2]+(e*c&4294967295)&4294967295);e=a[(iD+4*g&4294967295)>>2];var h,d=a[(Ub+4*g&4294967295)>>2];f=0>(d|0)?1:2;1==f?h=0:2==f&&(f=(d|0)>(e|0)?3:4,3==f?h=e:4==f&&(h=d));a[(Ub+4*g&4294967295)>>2]=h;var l=g,d=8}g=8==d?l:g;f=6==g?10:1==g?11:3==g?12:13==g?13:5==g?14:15;a:do if(10==f){Bq();f=11;break a}else if(12==f){g=Il();a[kh>>2]=g;f=15;break a}else if(13==f){g=Il();a[kh>>2]=g;f=15;break a}else if(14==f){Bq();f=15;break a}while(0);11==f&&wv()}function Bq(){var b,c=null,f,d;a[rp>>2]=a[(a[Ya>>2]+92&4294967295)>>2];f=a[(a[Ya>>2]+76&4294967295)>>2];var e=a[(a[Ya>>2]+80&4294967295)>>2];d=e;5500<=(f|0)?(c=0,b=1):(c=0,b=2);if(1==b){f=5499;var g=d,c=1}3==(100<((1==c?g:e)|0)?3:4)&&(d=100);b=lh;c=b+11E3;g=0;0>g&&(g+=256);for(g=g+(g<<8)+(g<<16)+16777216*g;0!==b%4&&b<c;)h[b++]=0;b>>=2;for(e=c>>2;b<e;)a[b++]=g;for(b<<=2;b<c;)h[b++]=0;a[Xd>>2]=0;b=0<(a[(Ub+20&4294967295)>>2]|0)?5:6;a:do if(5==b)d=a[(Ub+20&4294967295)>>2],f=130;else if(6==b){if(0!=(f|0))break a;d=0}while(0);a[uc>>2]=(a[Jb>>2]*f&4294967295|0)/1E3|0;a[Rj>>2]=a[uc>>2];f=d;0==(f|0)?(c=8,b=9):(c=8,b=10);if(9==b){a[Rj>>2]=0;var j=d,c=9}11==(20<((9==c?j:f)|0)?11:12)&&(a[Rj>>2]=2*a[uc>>2]&4294967295);a[Wi>>2]=d;j=Il();a[kh>>2]=j;a[kh>>2]=((500-d&4294967295)*a[kh>>2]&4294967295|0)/500|0}function wv(){var c,e;e=c=a[(Ub+4&4294967295)>>2];1==(101<(c|0)?1:2)&&(e=101);e=((25*(e-50&4294967295)&4294967295|0)/50|0)+256&4294967295;for(c=0;;){var f=(b=t[((a[Ya>>2]+216&4294967295)+2*c&4294967295)>>1],32768<=b?b-65536:b);t[((a[Ya>>2]+144&4294967295)+2*c&4294967295)>>1]=((f*e&4294967295|0)/256|0)&65535;c=f=c+1&4294967295;if(!(5>=(f|0)))break}e=3*a[(Ub+24&4294967295)>>2]&4294967295;c=(b=t[(a[Ya>>2]+234&-1)>>1],32768<=b?b-65536:b);t[(a[Ya>>2]+162&-1)>>1]=(((256-(2*e&4294967295)&4294967295)*c&4294967295|0)/256|0)&65535;c=(b=t[((a[Ya>>2]+234&4294967295)+2&4294967295)>>1],32768<=b?b-65536:b);t[((a[Ya>>2]+162&4294967295)+2&4294967295)>>1]=(((256-e&4294967295)*c&4294967295|0)/256|0)&65535}function rv(b,c,f,d,e){var g,h;if(1==((c|0)>(f|0)?1:2))g=c,c=f,f=g;g=h=a[(Ub+4&4294967295)>>2];3==(101<(h|0)?3:4)&&(g=101);g=h=g-a[(Ub+24&4294967295)>>2]&4294967295;5==(0>(h|0)?5:6)&&(g=0);g=((l[jD+g&4294967295]&255)*a[(b+44&4294967295)>>2]&4294967295|0)/128|0;h=(a[(Ub+16&4294967295)>>2]*a[(b+48&4294967295)>>2]&4294967295|0)/50|0;g=g-(18*(h-a[(b+48&4294967295)>>2]&4294967295)&4294967295)&4294967295;a[d>>2]=((h*c&4294967295|0)/2|0)+g&4294967295;a[e>>2]=(((h*f&4294967295|0)/2|0)+g&4294967295)+(-a[d>>2]&4294967295)&4294967295}function Oh(a,b){var c,d;c=b;for(d=0;;){xc(c&255,a);c>>=8;var e=d+1&4294967295;d=e;if(!(4>(e|0)))break}}function sv(c,e){var f,d=null,i,g;a[Hi>>2]=0;a[ch>>2]=0;a[Ii>>2]=2147483647;f=0==(c|0)?1:2;if(1==f)i=0;else if(2==f){f=0==(e|0)?3:4;a:do if(3==f){var j=c;a[Xp>>2]=j;d=3;f=5;break a}while(0);for(;;)if(5==f){g=4==d?n:j;a[Xp>>2]=g-1&4294967295;if(!(0<(g|0))){f=12;break}g=a[Xd>>2];a[Xd>>2]=g+1&4294967295;g=((b=t[(lh+2*g&4294967295)>>1],32768<=b?b-65536:b)*a[Wi>>2]&4294967295)>>8;f=5500<=(a[Xd>>2]|0)?7:8;7==f&&(a[Xd>>2]=0);f=g&255;var l=a[Na>>2];a[Na>>2]=l+1&4294967295;h[l]=f;f=g>>8&255;l=a[Na>>2];a[Na>>2]=l+1&4294967295;h[l]=f;g&=65535;f=a[uc>>2];a[uc>>2]=f+1&4294967295;t[(lh+2*f&4294967295)>>1]=g;f=5500<=(a[uc>>2]|0)?9:10;9==f&&(a[uc>>2]=0);if(Ma[Na>>2]>>>0>=Ma[jh>>2]>>>0){f=11;break}else f=4}else if(4==f){var n=a[Xp>>2],d=4;f=5}12==f?i=0:11==f&&(i=1)}return i}function Jo(b){var c,f=null;2==(b|0)?(f=0,c=1):(f=0,c=2);if(1==c){a[(x+12&4294967295)>>2]=(950*a[(x+8&4294967295)>>2]&4294967295|0)/1E4|0;a[(x+16&4294967295)>>2]=(630*a[(x+8&4294967295)>>2]&4294967295|0)/1E4|0;q[(x+72&4294967295)>>2]=-3.1415927/(a[(x+8&4294967295)>>2]|0);q[(x+80&4294967295)>>2]=-2*q[(x+72&4294967295)>>2];Dm(a[(x+12&4294967295)>>2],a[(x+16&4294967295)>>2],x+188+1152&4294967295);var d=b,f=1}c=0<((1==f?d:b)|0)?3:5;a:do if(3==c){a[(x+32&4294967295)>>2]=0;a[(x+
40&4294967295)>>2]=0;a[(x+44&4294967295)>>2]=0;a[(x+48&4294967295)>>2]=0;for(b=17;;)if(q[(((x+188&4294967295)+64*b&4294967295)+24&4294967295)>>2]=0,q[(((x+188&4294967295)+64*b&4294967295)+32&4294967295)>>2]=0,b=c=b+1&4294967295,20>(c|0))c=4;else break a}while(0);for(b=0;!(q[(((x+188&4294967295)+64*b&4294967295)+24&4294967295)>>2]=0,q[(((x+188&4294967295)+64*b&4294967295)+32&4294967295)>>2]=0,b=c=b+1&4294967295,!(16>=(c|0))););}function Dm(a,b,c){var d;d=q[(x+72&4294967295)>>2]*(b|0);b=mt(d);q[(c+
16&4294967295)>>2]=-(b*b);d=q[(x+80&4294967295)>>2]*(a|0);a=Go(d);q[(c+8&4294967295)>>2]=2*b*a;q[(c&4294967295)>>2]=1-q[(c+8&4294967295)>>2]-q[(c+16&4294967295)>>2]}function Gv(){var c,e=null,f,d,i,g,j,s;d=sb;i=(a[(x+24&4294967295)>>2]|0)/50;e=(a[(x+176&4294967295)>>2]|0)/100;g=nt(39.898227289999994*(a[Pk>>2]|0));j=nt(22.305308169999996*(a[Pk>>2]|0));var n=nt(14.76548569*(a[Pk>>2]|0));a[(d&4294967295)>>2]=(10*i*e*(g+j+n)|0)+a[(d&4294967295)>>2]&4294967295;a[Pk>>2]=a[Pk>>2]+1&4294967295;a[(x+36&4294967295)>>2]=0;a:for(;;){if(!((a[(x+36&4294967295)>>2]|0)<(a[(x+28&4294967295)>>2]|0))){c=36;break a}i=i=void 0;i=(au()|0)%16383-8191&4294967295;a[(x+52&4294967295)>>2]=i;i=(a[(x+52&4294967295)>>2]|0)+0.75*q[ot>>2];q[ot>>2]=i;q[Aj>>2]=i;c=(a[(x+32&4294967295)>>2]|0)>(a[(x+48&4294967295)>>2]|0)?3:4;3==c&&(q[Aj>>2]*=0.5);i=q[(x+136&4294967295)>>2]*q[Aj>>2];e=0;b:for(;;){c=a[(x+20&4294967295)>>2];c=1==c?6:2==c?7:3==c?8:9;6==c?(c=void 0,c=3>(a[(x+32&4294967295)>>2]|0)?1:2,1==c?q[oo>>2]=q[(kD+8*a[(x+32&4294967295)>>2]&4294967295)>>2]:2==c&&(q[oo>>2]=0),c=zf(x+188+1088&4294967295,q[oo>>2]),q[Ie>>2]=c):7==c?(g=c=g=void 0,g=(a[(x+32&4294967295)>>2]|0)<(a[(x+44&4294967295)>>2]|0)?1:2,1==g?(q[(x+56&4294967295)>>2]-=q[(x+64&4294967295)>>2],q[Qk>>2]+=q[(x+56&4294967295)>>2],c=g=0.028*q[Qk>>2]):2==g&&(c=q[Qk>>2]=0),q[Ie>>2]=c):8==c&&(g=n=j=j=c=g=c=g=void 0,g=0!=(a[(x+40&4294967295)>>2]|0)?1:2,1==g?(g=a[(x+32&4294967295)>>2]|0,g/=a[(x+40&4294967295)>>2]|0,g*=a[(x+160&4294967295)>>2]|0,c=g|0,g-=c|0,j=(b=t[(a[(x+172&4294967295)>>2]+2*c&4294967295)>>1],32768<=b?b-65536:b),n=(b=t[(a[(x+172&4294967295)>>2]+2*(c+1&4294967295)&4294967295)>>1],32768<=b?b-65536:b),j=(n|0)-(j|0),j*=g,c=((b=t[(a[(x+172&4294967295)>>2]+2*c&4294967295)>>1],32768<=b?b-65536:b)|0)+j,c*=q[(x+164&4294967295)>>2]):2==g&&(c=0),q[Ie>>2]=c);c=(a[(x+32&4294967295)>>2]|0)>=(a[(x+40&4294967295)>>2]|0)?10:11;if(10==c){a[(x+32&4294967295)>>2]=0;g=void 0;j=null;g=j=c=void 0;c=d;g=0<(a[(c&4294967295)>>2]|0)?1:15;if(1==g){a[(x+40&4294967295)>>2]=(40*a[(x+8&4294967295)>>2]&4294967295|0)/(a[(c&4294967295)>>2]|0)|0;g=$i(a[(c+204&4294967295)>>2]);q[(x+112&4294967295)>>2]=g;a[(x+48&4294967295)>>2]=a[(x+40&4294967295)>>2];g=0<(a[(c+204&4294967295)>>2]|0)?2:3;2==g&&(a[(x+48&4294967295)>>2]>>=1);g=0.1*$i(a[(c+176&4294967295)>>2]);q[(x+144&4294967295)>>2]=g;a[(x+44&4294967295)>>2]=4*a[(c+172&4294967295)>>2]&4294967295;g=1==(a[(x+20&4294967295)>>2]|0)&263<(a[(x+44&4294967295)>>2]|0)?4:5;4==g&&(a[(x+44&4294967295)>>2]=263);n=a[(x+44&4294967295)>>2];(n|0)>=(a[(x+40&4294967295)>>2]-1&4294967295|0)?(j=5,g=6):(j=5,g=7);if(6==g){var k=a[(x+40&4294967295)>>2]-2&4294967295;a[(x+44&4294967295)>>2]=k;j=6}g=40>((6==j?k:n)|0)?8:9;8==g&&(a[(x+44&4294967295)>>2]=40);g=(b=t[(lD+2*(a[(x+44&4294967295)>>2]-40&4294967295)&4294967295)>>1],32768<=b?b-65536:b);q[(x+64&4294967295)>>2]=g;q[(x+56&4294967295)>>2]=0.333*q[(x+64&4294967295)>>2]*(a[(x+44&4294967295)>>2]|0);j=(a[(x+8&4294967295)>>2]|0)/(a[(x+44&4294967295)>>2]|0)|0;Dm(0,j,x+188+1088&4294967295);g=0.00833*(a[(x+44&4294967295)>>2]|0);q[(x+188+1088&4294967295)>>2]*=g*g;j=a[(x+40&4294967295)>>2]-a[(x+44&4294967295)>>2]&4294967295;g=(a[(c+188&4294967295)>>2]|0)>(j|0)?10:11;10==g&&(a[(c+188&4294967295)>>2]=j);j=a[(c+188&4294967295)>>2];g=0<=(a[Jh>>2]|0)?12:13;12==g?a[Jh>>2]=j:13==g&&(a[Jh>>2]=-j&4294967295);a[(x+40&4294967295)>>2]=a[Jh>>2]+a[(x+40&4294967295)>>2]&4294967295;a[Jh>>2]=-a[Jh>>2]&4294967295}else 15==g&&(a[(x+40&4294967295)>>2]=4,q[(x+112&4294967295)>>2]=0,a[(x+48&4294967295)>>2]=a[(x+40&4294967295)>>2],q[(x+144&4294967295)>>2]=0,q[(x+56&4294967295)>>2]=0,q[(x+64&4294967295)>>2]=0);g=4!=(a[(x+40&4294967295)>>2]|0)|0==(a[(x+36&4294967295)>>2]|0)?17:20;17==g&&(q[(x+96&4294967295)>>2]=0.033*(a[(c+180&4294967295)>>2]|0),g=0<q[(x+96&4294967295)>>2]?18:19,18==g?q[(x+88&4294967295)>>2]=1-q[(x+96&4294967295)>>2]:19==g&&(q[(x+88&4294967295)>>2]=1))}c=zf(x+188+1152&4294967295,q[Ie>>2]);q[Ie>>2]=c;a[(x+32&4294967295)>>2]=a[(x+32&4294967295)>>2]+1&4294967295;e=c=e+1&4294967295;if(!(4>(c|0)))break b}q[Ie>>2]=q[Ie>>2]*q[(x+88&4294967295)>>2]+q[pt>>2]*q[(x+96&4294967295)>>2];q[pt>>2]=q[Ie>>2];c=(a[(x+32&4294967295)>>2]|0)<(a[(x+44&4294967295)>>2]|0)?13:14;13==c&&(q[Ie>>2]+=q[(x+144&4294967295)>>2]*(a[(x+52&4294967295)>>2]|0));j=q[(x+112&4294967295)>>2]*q[Ie>>2];e=q[(x+120&4294967295)>>2]*q[Ie>>2];c=q[(x+128&4294967295)>>2]*q[Aj>>2];j+=c;e+=c;g=0;c=2!=(a[(x&4294967295)>>2]|0)?15:16;15==c&&(g=n=c=void 0,c=x+188&4294967295,n=j,g=q[(c&4294967295)>>2]*n+q[(c+8&4294967295)>>2]*q[(c+24&4294967295)>>2]+q[(c+16&4294967295)>>2]*q[(c+32&4294967295)>>2],q[(c+32&4294967295)>>2]=q[(c+24&4294967295)>>2],q[(c+24&4294967295)>>2]=n,j=c&4294967295,q[j>>2]+=q[(c+40&4294967295)>>2],j=c+8&4294967295,q[j>>2]+=q[(c+48&4294967295)>>2],j=c+16&4294967295,q[j>>2]+=q[(c+56&4294967295)>>2],c=g,c=zf(x+188+576&4294967295,c),c=zf(x+188+512&4294967295,c),c=zf(x+188+448&4294967295,c),c=zf(x+188+384&4294967295,c),c=am(x+188+320&4294967295,c),c=am(x+188+256&4294967295,c),c=am(x+188+192&4294967295,c),c=am(x+188+128&4294967295,c),g=am(x+188+64&4294967295,c));q[Ug>>2]=e;c=zf(x+188+704&4294967295,q[Ug>>2]);g+=c;c=zf(x+188+640&4294967295,q[Ug>>2]);g+=c;q[Ug>>2]=i+e-q[qt>>2];q[qt>>2]=e;i=12;b:for(;;)if(g=zf((x+188&4294967295)+64*i&4294967295,q[Ug>>2])-g,i=e=i+1&4294967295,!(16>=(e|0)))break b;i=q[(x+104&4294967295)>>2]*q[Ug>>2];g=i-g;g=zf(x+188+1216&4294967295,g);i=g*(a[(v+52&4294967295)>>2]|0)*q[(x+152&4294967295)>>2]|0;c=(a[(v+40&4294967295)>>2]|0)<(a[(v+28&4294967295)>>2]|0)?19:23;19==c&&(e=Ma[(v+40&4294967295)>>2],g=e+1&4294967295,c=0==(a[(v+32&4294967295)>>2]|0)?20:21,20==c?(s=h[a[(v+24&4294967295)>>2]+g&4294967295],e=l[a[(v+24&4294967295)>>2]+a[(v+40&4294967295)>>2]&4294967295]&255,s=(256*(b=s,128<=b?b-256:b)&4294967295)+e&4294967295,a[(v+40&4294967295)>>2]=a[(v+40&4294967295)>>2]+2&4294967295):21==c&&(a[(v+40&4294967295)>>2]=g,s=(b=h[a[(v+24&4294967295)>>2]+e&4294967295],128<=b?b-256:b)*a[(v+32&4294967295)>>2]&4294967295),e=(a[(v+56&4294967295)>>2]*s&4294967295|0)/1024|0,e=(a[(v+36&4294967295)>>2]*e&4294967295|0)/40|0,i+=e|0);c=0<(a[(x+180&4294967295)>>2]|0)?24:25;24==c&&(a[(x+180&4294967295)>>2]=a[(x+180&4294967295)>>2]-1&4294967295,i=i*(a[(x+180&4294967295)>>2]|0)/64);i|=0;e=a[Xd>>2];a[Xd>>2]=e+1&4294967295;i=g=(((b=t[(lh+2*e&4294967295)>>1],32768<=b?b-65536:b)*a[Wi>>2]&4294967295)>>8)+i&4294967295;5500<=(a[Xd>>2]|0)?(e=25,c=26):(e=25,c=27);if(26==c){a[Xd>>2]=0;var w=i,e=26}c=-32768>((26==e?w:g)|0)?28:29;b:do if(28==c)i=-32768;else if(29==c){if(!(32767<(i|0)))break b;i=32767}while(0);e=i&255;c=a[Na>>2];a[Na>>2]=c+1&4294967295;h[c]=e;e=i>>8&255;c=a[Na>>2];a[Na>>2]=c+1&4294967295;h[c]=e;i&=65535;e=a[uc>>2];a[uc>>2]=e+1&4294967295;t[(lh+2*e&4294967295)>>1]=i;c=5500<=(a[uc>>2]|0)?32:33;32==c&&(a[uc>>2]=0);a[eg>>2]=a[eg>>2]+1&4294967295;if(Ma[Na>>2]>>>0>=Ma[jh>>2]>>>0){c=34;break a}a[(x+36&4294967295)>>2]=a[(x+36&4294967295)>>2]+1&4294967295;c=1}36==c?f=0:34==c&&(f=1);return f}function zf(a,b){var c;c=q[(a&4294967295)>>2]*b+q[(a+8&4294967295)>>2]*q[(a+24&4294967295)>>2]+q[(a+16&4294967295)>>2]*q[(a+32&4294967295)>>2];q[(a+32&4294967295)>>2]=q[(a+24&4294967295)>>2];return q[(a+24&4294967295)>>2]=c}function am(a,b){var c;c=q[(a&4294967295)>>2]*b+q[(a+8&4294967295)>>2]*q[(a+24&4294967295)>>2]+q[(a+16&4294967295)>>2]*q[(a+32&4294967295)>>2];q[(a+32&4294967295)>>2]=q[(a+24&4294967295)>>2];q[(a+24&4294967295)>>2]=c;var d=a&4294967295;q[d>>2]+=q[(a+40&4294967295)>>2];d=a+8&4294967295;q[d>>2]+=q[(a+48&4294967295)>>2];d=a+16&4294967295;q[d>>2]+=q[(a+56&4294967295)>>2];return c}function $i(a){var c,e;c=0>(a|0)|87<(a|0)?1:2;1==c?e=0:2==c&&(e=0.0010*(b=t[(mD+2*a&4294967295)>>1],32768<=b?b-65536:b));return e}function Fv(a,b,c){var d,a=-a&4294967295;1==(0<=(a|0)?1:2)&&(a=-1);d=q[(x+72&4294967295)>>2]*(b|0);b=mt(d);q[(c+16&4294967295)>>2]=-(b*b);d=q[(x+80&4294967295)>>2]*(a|0);a=Go(d);q[(c+8&4294967295)>>2]=2*b*a;q[(c&4294967295)>>2]=1-q[(c+8&4294967295)>>2]-q[(c+16&4294967295)>>2];q[(c&4294967295)>>2]=1/q[(c&4294967295)>>2];a=c+16&4294967295;q[a>>2]*=-q[(c&4294967295)>>2];a=c+8&4294967295;q[a>>2]*=-q[(c&4294967295)>>2]}function Cp(c,e,f){var d,i,g;var j,l;j=0==(f|0)?1:2;if(1==j)l=1;else if(2==j){var n,k;n=(f+a[(c+44&4294967295)>>2]&4294967295|0)>(a[(c+32&4294967295)>>2]|0)?1:3;b:do if(1==n){var s=c+32&4294967295;a[s>>2]=((a[(c+32&4294967295)>>2]>>1)+f&4294967295)+a[s>>2]&4294967295;var r=ah(a[(c&4294967295)>>2],(2*a[(c+32&4294967295)>>2]&4294967295)*a[(c+28&4294967295)>>2]&4294967295);a[(c&4294967295)>>2]=r;if(0!=(a[(c&4294967295)>>2]|0)){n=3;break b}k=0;n=4;break b}while(0);3==n&&(k=1);j=0!=(k|0)?4:3;if(4==j){var v=a[(c&4294967295)>>2]+
2*(a[(c+28&4294967295)>>2]*a[(c+44&4294967295)>>2]&4294967295)&4294967295,x=(2*f&4294967295)*a[(c+28&4294967295)>>2]&4294967295,y,p,u,z;y=e;p=v;u=y+x;if(p%4==y%4&&8<x){for(;0!==y%4&&y<u;)h[p++]=h[y++];y>>=2;p>>=2;for(z=u>>2;y<z;)a[p++]=a[y++];y<<=2;p<<=2}for(;y<u;)h[p++]=h[y++];var C=c+44&4294967295;a[C>>2]=a[C>>2]+f&4294967295;l=1}else 3==j&&(l=0)}g=l;d=0!=(g|0)?2:1;if(2==d){var E,B,H,D;H=a[(c+48&4294967295)>>2];D=q[(c+16&4294967295)>>2]/q[(c+24&4294967295)>>2];E=1.00001<D?2:1;a:do if(1==E){if(0.99999>D){E=2;break a}E=0!=(nD(c,a[(c&4294967295)>>2],a[(c+44&4294967295)>>2])|0)?5:4;if(5==E){a[(c+44&4294967295)>>2]=0;E=6;break a}else if(4==E){B=0;E=12;break a}}while(0);a:do if(2==E){var K=D;var I=void 0,M=null,N=void 0,P=void 0,R=void 0,G=void 0,T=void 0,S=void 0,U=void 0,V=void 0,N=c,P=K,G=a[(N+44&4294967295)>>2],T=0,V=a[(N+64&4294967295)>>2],I=(a[(N+44&4294967295)>>2]|0)<(V|0)?1:2;if(1!=I&&2==I){for(;;){var $=N,I=0<(a[(N+68&4294967295)>>2]|0)?3:4;if(3==I){var Z=$,aa=void 0,fa=void 0,ia=void 0,ia=a[(Z+68&4294967295)>>2],aa=(ia|0)>(a[(Z+64&4294967295)>>2]|0)?1:2;1==aa&&(ia=a[(Z+64&4294967295)>>2]);aa=0!=(nD(Z,a[(Z&4294967295)>>2]+2*(a[(Z+28&4294967295)>>2]*T&4294967295)&4294967295,ia)|0)?4:3;if(4==aa){var ja=Z+68&4294967295;a[ja>>2]=a[ja>>2]-ia&4294967295;fa=ia}else 3==aa&&(fa=0);var la=U=fa,T=T+la&4294967295,M=3}else if(4==I){var R=a[($&4294967295)>>2]+2*(a[(N+28&4294967295)>>2]*T&4294967295)&4294967295,S=oD(N,R),ma=N,oa=R,qa=P,wa=S,I=1<P?5:6;if(5==I){var ua=ma,za=oa,xa=qa,ya=wa,va=void 0,Fa=void 0,Ea=void 0,Ma=void 0,Ma=a[(ua+28&4294967295)>>2],va=2<=xa?1:2;c:do if(1==va)Ea=(ya|0)/(xa-1)|0;else if(2==va){if(!(1<xa))break c;Ea=ya;a[(ua+68&4294967295)>>2]=(ya|0)*(2-xa)/(xa-1)|0}while(0);va=0!=(po(ua,Ea)|0)?6:5;if(6==va){rt(Ea,Ma,a[(ua+4&4294967295)>>2]+2*(Ma*a[(ua+48&4294967295)>>2]&4294967295)&4294967295,za,za+2*(Ma*ya&4294967295)&4294967295);var Ia=ua+48&4294967295;a[Ia>>2]=a[Ia>>2]+Ea&4294967295;Fa=Ea}else 5==va&&(Fa=0);var ba=U=Fa,T=(ba+S&4294967295)+T&4294967295,M=5}else if(6==I){var ta=ma,Xa=oa,Na=wa,Ra=void 0,Sa=void 0,Ua=void 0,ab=void 0,Ya=void 0,Ya=a[(ta+28&4294967295)>>2],Ra=0.5>qa?1:2;1==Ra?Ua=(Na|0)*qa/(1-qa)|0:2==Ra&&(Ua=Na,a[(ta+68&4294967295)>>2]=(Na|0)*(2*qa-1)/(1-qa)|0);Ra=0!=(po(ta,Ua+Na&4294967295)|0)?5:4;if(5==Ra){var eb=ab=a[(ta+4&4294967295)>>2]+2*(Ya*a[(ta+48&4294967295)>>2]&4294967295)&4294967295,fb=(2*Na&4294967295)*Ya&4294967295,Ta=void 0,Q=void 0,lb=void 0,sb=void 0,Ta=Xa,Q=eb,lb=Ta+fb;if(Q%4==Ta%4&&8<fb){for(;0!==Ta%4&&Ta<lb;)h[Q++]=h[Ta++];Ta>>=2;Q>>=2;for(sb=lb>>2;Ta<sb;)a[Q++]=a[Ta++];Ta<<=2;Q<<=2}for(;Ta<lb;)h[Q++]=h[Ta++];ab=a[(ta+4&4294967295)>>2]+2*((Na+a[(ta+48&4294967295)>>2]&4294967295)*Ya&4294967295)&4294967295;rt(Ua,Ya,ab,Xa+2*(Ya*Na&4294967295)&4294967295,Xa);var Ga=ta+48&4294967295;a[Ga>>2]=(Ua+Na&4294967295)+a[Ga>>2]&4294967295;Sa=Ua}else 4==Ra&&(Sa=0);var xb=U=Sa,T=T+xb&4294967295,M=6}}if(0==((5==M?ba:6==M?xb:la)|0)){I=8;break}if((V+T&4294967295|0)<=(G|0))I=2;else{I=10;break}}if(8!=I&&10==I){var pb=N,hb=void 0,hb=a[(pb+44&4294967295)>>2]-T&4294967295;1==(0<(hb|0)?1:2)&&Yn(a[(pb&4294967295)>>2],a[(pb&4294967295)>>2]+2*(a[(pb+28&4294967295)>>2]*T&4294967295)&4294967295,(2*hb&4294967295)*a[(pb+28&4294967295)>>2]&4294967295,1,0);a[(pb+44&4294967295)>>2]=hb}}E=6;break a}while(0);a:do if(6==E){E=1!=q[(c+24&4294967295)>>2]?7:9;b:do if(7==E){var cb=H,ga;var ka=void 0,Aa=void 0,rb=void 0,Ba=void 0,zb=void 0,nb=void 0,tb=void 0,ub=void 0,ha=void 0,A=void 0,mb=void 0,Eb=void 0,sa=void 0,rb=c,Ba=cb,zb=q[(rb+24&4294967295)>>2],nb=a[(rb+28&4294967295)>>2],A=0,ka=(a[(rb+48&4294967295)>>2]|0)==(Ba|0)?1:2;if(1==ka)Aa=1;else if(2==ka){var Wa=rb,Fb=Ba,jb=void 0,Ja=void 0,ca=void 0,Ab=void 0,ca=a[(Wa+48&4294967295)>>2]-Fb&4294967295,Ab=a[(Wa+28&4294967295)>>2],jb=(ca+a[(Wa+52&4294967295)>>2]&4294967295|0)>(a[(Wa+36&4294967295)>>2]|0)?1:3;d:do if(1==jb){var Lb=Wa+36&4294967295;a[Lb>>2]=((a[(Wa+36&4294967295)>>2]>>1)+ca&4294967295)+a[Lb>>2]&4294967295;var Jb=ah(a[(Wa+8&4294967295)>>2],(2*a[(Wa+36&4294967295)>>2]&4294967295)*Ab&4294967295);a[(Wa+8&4294967295)>>2]=Jb;if(0!=(a[(Wa+8&4294967295)>>2]|0)){jb=3;break d}Ja=0;jb=4;break d}while(0);if(3==jb){var Bb=a[(Wa+8&4294967295)>>2]+2*(Ab*a[(Wa+52&4294967295)>>2]&4294967295)&4294967295,Ha=(2*ca&4294967295)*Ab&4294967295,vb=void 0,da=void 0,Gb=void 0,Rb=void 0,vb=a[(Wa+4&4294967295)>>2]+2*(Ab*Fb&4294967295)&4294967295,da=Bb,Gb=vb+Ha;if(da%4==vb%4&&8<Ha){for(;0!==vb%4&&vb<Gb;)h[da++]=h[vb++];vb>>=2;da>>=2;for(Rb=Gb>>2;vb<Rb;)a[da++]=a[vb++];vb<<=2;da<<=2}for(;vb<Gb;)h[da++]=h[vb++];a[(Wa+48&4294967295)>>2]=Fb;var Vb=Wa+52&4294967295;a[Vb>>2]=a[Vb>>2]+ca&4294967295;Ja=1}ka=0!=(Ja|0)?4:3;if(4==ka){for(;;){var Db=rb;if(!((a[(rb+52&4294967295)>>2]-A&4294967295|0)>=(a[(rb+64&4294967295)>>2]|0))){ka=11;break}tb=oD(Db,a[(rb+8&4294967295)>>2]+2*(nb*A&4294967295)&4294967295);ub=(tb|0)/zb|0;if(0==(po(rb,ub)|0)){ka=6;break}var mb=a[(rb+4&4294967295)>>2]+2*(nb*a[(rb+48&4294967295)>>2]&4294967295)&4294967295,$b=1<=zb,Eb=a[(rb+8&4294967295)>>2]+2*(nb*A&4294967295)&4294967295,Zb=a[(rb+
8&4294967295)>>2],fc=A,ka=$b?8:9;if(8==ka)sa=Zb+2*(((tb+fc&4294967295)+(-ub&4294967295)&4294967295)*nb&4294967295)&4294967295,rt(ub,nb,mb,Eb,sa);else if(9==ka){var sa=Zb+2*(nb*fc&4294967295)&4294967295,ha=ub-tb&4294967295,db=tb,Hb=nb,Ib=ha,Wb=mb,ea=Eb,Mb=sa,kb=void 0,Ca=void 0,Sb=void 0,Ub=void 0,Tb=void 0,oc=void 0,Tb=0,kb=(Tb|0)<(Hb|0)?1:9;d:do if(1==kb)for(;;){Ca=Wb+2*Tb&4294967295;Sb=Mb+2*Tb&4294967295;Ub=ea+2*Tb&4294967295;oc=0;kb=(oc|0)<(Ib+db&4294967295|0)?2:8;f:do if(2==kb)for(;;){kb=(oc|0)<(Ib|0)?3:4;if(3==kb){var rc=(b=t[Ub>>1],32768<=b?b-65536:b);t[Ca>>1]=(((db-oc&4294967295)*rc&4294967295|0)/(db|0)|0)&65535;Ub=Ub+2*Hb&4294967295}else if(4==kb)if(kb=(oc|0)<(db|0)?5:6,5==kb){var sc=(b=t[Ub>>1],32768<=b?b-65536:b),uc=(db-oc&4294967295)*sc&4294967295,vc=(b=t[Sb>>1],32768<=b?b-65536:b);t[Ca>>1]=((((oc-Ib&4294967295)*vc&4294967295)+uc&4294967295|0)/(db|0)|0)&65535;Ub=Ub+2*Hb&4294967295;Sb=Sb+2*Hb&4294967295}else if(6==kb){var xc=(b=t[Sb>>1],32768<=b?b-65536:b);t[Ca>>1]=(((oc-Ib&4294967295)*xc&4294967295|0)/(db|0)|0)&65535;Sb=Sb+2*Hb&4294967295}Ca=Ca+2*Hb&4294967295;oc=oc+1&4294967295;if((oc|0)<(Ib+db&4294967295|0))kb=2;else break f}while(0);Tb=Tb+1&4294967295;if((Tb|0)<(Hb|0))kb=1;else break d}while(0)}var mc=rb+48&4294967295;a[mc>>2]=a[mc>>2]+ub&4294967295;A=A+tb&4294967295;ka=4}if(11==ka){var kc=Db,pa=A,wc=void 0,Bc=void 0,Ic=void 0,Bc=a[(kc+28&4294967295)>>2],Ic=a[(kc+8&4294967295)>>2]+2*(Bc*pa&4294967295)&4294967295,wc=0==(pa|0)?4:1;if(1==wc){wc=(pa|0)!=(a[(kc+52&4294967295)>>2]|0)?2:3;2==wc&&Yn(a[(kc+8&4294967295)>>2],Ic,(2*Bc&4294967295)*(a[(kc+52&4294967295)>>2]-pa&4294967295)&4294967295,1,0);var Jc=kc+52&4294967295;a[Jc>>2]=a[Jc>>2]-pa&4294967295}Aa=1}else 6==ka&&(Aa=0)}else 3==ka&&(Aa=0)}ga=Aa;if(0!=(ga|0))break b;B=0;break a}while(0);E=1!=q[(c+20&4294967295)>>2]?10:11;if(10==E){var Nc=a[(c+28&4294967295)>>2]*(a[(c+48&4294967295)>>2]-H&4294967295)&4294967295,Oc=q[(c+20&4294967295)>>2];var lc=void 0,wb=void 0,pc=void 0,Qc=void 0,Tc=void 0,Pa=void 0,wb=a[(c+4&4294967295)>>2]+2*(a[(c+28&4294967295)>>2]*H&4294967295)&4294967295,pc=Nc,Qc=Oc,Tc=4096*Qc|0,yc=pc,pc=yc-1&4294967295,lc=0!=(yc|0)?1:6;c:do if(1==lc)for(;;){var Uc=((b=t[wb>>1],32768<=b?b-65536:b)*Tc&4294967295)>>12,Pa=Uc,lc=32767<(Uc|0)?2:3;e:do if(2==lc)Pa=32767;else if(3==lc){if(!(-32767>(Pa|0)))break e;Pa=-32767}while(0);var Vc=Pa&65535,Wc=wb,wb=Wc+2&4294967295;t[Wc>>1]=Vc;var Yc=pc,pc=Yc-1&4294967295;if(0!=(Yc|0))lc=1;else break c}while(0)}B=1}while(0);i=B}else 1==d&&(i=0);return i}function nD(b,c,e){var d,i;d=0!=(po(b,e)|0)?2:1;if(2==d){i=a[(b+4&4294967295)>>2]+2*(a[(b+28&4294967295)>>2]*a[(b+48&4294967295)>>2]&4294967295)&4294967295;d=(2*e&4294967295)*a[(b+28&4294967295)>>2]&4294967295;var g;g=c+d;if(i%4==c%4&&8<d){for(;0!==c%4&&c<g;)h[i++]=h[c++];c>>=2;i>>=2;for(d=g>>2;c<d;)a[i++]=a[c++];c<<=2;i<<=2}for(;c<g;)h[i++]=h[c++];b=b+48&4294967295;a[b>>2]=a[b>>2]+e&4294967295;i=e}else 1==d&&(i=0);return i}function oD(b,c){var e=s;s+=8;la(e,0,8);var d,h,g,j=e+4,l,n,k;h=a[(b+56&4294967295)>>2];g=a[(b+60&4294967295)>>2];d=a[(b+72&4294967295)>>2];n=1;1==(4E3<(d|0)?1:2)&&(n=(d|0)/4E3|0);d=1==(a[(b+28&4294967295)>>2]|0)?3:5;a:do if(3==d){if(1!=(n|0)){d=5;break a}k=Yp(c,h,g,e,j);d=13;break a}while(0);a:do if(5==d){pD(b,c,n);k=Yp(a[(b+12&4294967295)>>2],(h|0)/(n|0)|0,(g|0)/(n|0)|0,e,j);if(1==(n|0))break a;k=k*n&4294967295;h=k-(n<<2)&4294967295;g=(4*n&4294967295)+k&4294967295;d=(h|0)<(a[(b+56&4294967295)>>2]|0)?7:8;7==d&&(h=a[(b+56&4294967295)>>2]);d=(g|0)>(a[(b+60&4294967295)>>2]|0)?9:10;9==d&&(g=a[(b+
60&4294967295)>>2]);d=1==(a[(b+28&4294967295)>>2]|0)?11:12;11==d?k=Yp(c,h,g,e,j):12==d&&(pD(b,c,1),k=Yp(a[(b+12&4294967295)>>2],h,g,e,j))}while(0);h=a[e>>2];g=a[j>>2];var q;n=((3*g&4294967295|0)/2|0)<(a[(b+80&4294967295)>>2]|0)?1:3;b:do if(1==n){if(!(3*(g|0)*(a[(b+84&4294967295)>>2]|0)<2*(a[(b+80&4294967295)>>2]|0)*(h|0))){n=3;break b}q=1;n=4;break b}while(0);3==n&&(q=0);d=0!=(q|0)?14:15;14==d?l=a[(b+76&4294967295)>>2]:15==d&&(l=k);a[(b+84&4294967295)>>2]=a[e>>2];a[(b+80&4294967295)>>2]=a[j>>2];a[(b+
76&4294967295)>>2]=k;s=e;return l}function po(b,c){var e,d;e=(c+a[(b+48&4294967295)>>2]&4294967295|0)>(a[(b+40&4294967295)>>2]|0)?1:3;a:do if(1==e){e=b+40&4294967295;a[e>>2]=((a[(b+40&4294967295)>>2]>>1)+c&4294967295)+a[e>>2]&4294967295;e=ah(a[(b+4&4294967295)>>2],(2*a[(b+40&4294967295)>>2]&4294967295)*a[(b+28&4294967295)>>2]&4294967295);a[(b+4&4294967295)>>2]=e;if(0!=(a[(b+4&4294967295)>>2]|0)){e=3;break a}d=0;e=4;break a}while(0);3==e&&(d=1);return d}function rt(a,c,e,d,h){var g,j,l,n,k,q;k=0;g=(k|0)<(c|0)?1:4;a:do if(1==g)for(;;){j=e+2*k&4294967295;l=h+2*k&4294967295;n=d+2*k&4294967295;q=0;g=(q|0)<(a|0)?2:3;c:do if(2==g)for(;;){g=(b=t[n>>1],32768<=b?b-65536:b);g=(a-q&4294967295)*g&4294967295;var r=(b=t[l>>1],32768<=b?b-65536:b);t[j>>1]=(((r*q&4294967295)+g&4294967295|0)/(a|0)|0)&65535;j=j+2*c&4294967295;n=n+2*c&4294967295;l=l+2*c&4294967295;q=q+1&4294967295;if((q|0)<(a|0))g=2;else break c}while(0);k=k+1&4294967295;if((k|0)<(c|0))g=1;else break a}while(0)}function Yp(c,e,f,d,h){var g,j=null,l,n,k,q,r,s,v,y,p;l=0;v=1;y=0;g=(e|0)<=(f|0)?1:11;a:do if(1==g)for(;;){s=0;n=c;k=c+2*e&4294967295;p=0;g=(p|0)<(e|0)?2:6;c:do if(2==g)for(;;){q=n;n=q+2&4294967295;q=t[q>>1];r=k;k=r+2&4294967295;r=t[r>>1];g=(b=q,32768<=b?b-65536:b);var u=(b=r,32768<=b?b-65536:b);g=(g|0)>=(u|0)?3:4;if(3==g)var z=(b=q,32768<=b?b-65536:b),j=(b=r,32768<=b?b-65536:b),z=z-j&65535,j=3;else if(4==g)var x=(b=r,32768<=b?b-65536:b),j=(b=q,32768<=b?b-65536:b),x=x-j&65535,j=4;s=s+((3==j?z:x)&65535)&4294967295;p=p+1&4294967295;if((p|0)<(e|0))g=2;else break c}while(0);g=(l*s&4294967295)>>>0<(e*v&4294967295)>>>0?7:8;7==g&&(v=s,l=e);g=(l*s&4294967295)>>>0>(e*y&4294967295)>>>0?9:10;9==g&&(y=s);e=e+1&4294967295;if((e|0)<=(f|0))g=1;else break a}while(0);a[d>>2]=v;a[h>>2]=y;return l}function pD(c,e,f){var d,h,g,j,l;h=(a[(c+64&4294967295)>>2]|0)/(f|0)|0;f=f*a[(c+28&4294967295)>>2]&4294967295;l=a[(c+12&4294967295)>>2];c=0;d=(c|0)<(h|0)?1:4;a:do if(1==d)for(;;){g=j=0;d=(g|0)<(f|0)?2:3;c:do if(2==d)for(;;)if(d=e,e=d+2&4294967295,d=(b=t[d>>1],32768<=b?b-65536:b),j=j+d&4294967295,g=g+1&4294967295,(g|0)<(f|0))d=2;else break c;while(0);j=(j|0)/(f|0)|0;g=j&65535;j=l;l=j+2&4294967295;t[j>>1]=g;c=c+1&4294967295;if((c|0)<(h|0))d=1;else break a}while(0)}function fu(c,m,f,d,i){var g=s;s+=20;la(g,0,20);a[(g&4294967295)>>2]=a[yo>>2];a[(g+4&4294967295)>>2]=a[un>>2];a[(g+8&4294967295)>>2]=a[st>>2];a[(g+12&4294967295)>>2]=a[tt>>2];a[(g+16&4294967295)>>2]=a[ut>>2];var j,l=null,n,k,q,r,t,v,x,p,u,z;k=f;x=v=r=f=q=0;u=p=-1;z=0;j=0==(c|0)?6:1;a:do if(1==j){if(0==(m|0)){j=6;break a}j=0==(k|0)?3:4;if(3==j&&0==(d|0)){j=6;break a}if((a[(g+4&4294967295)>>2]|0)>=(c|0)){j=6;break a}if(0==(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]|0)){j=6;break a}j=0==(nb(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],Rk&4294967295)|0);t=g+4&4294967295;var C=a[t>>2];j=j?8:9;if(8==j){a[t>>2]=C+1&4294967295;n=-1;j=96;break a}else if(9==j){j=0==(C|0)?10:11;10==j&&(a[(g+16&4294967295)>>2]=1,a[(g+4&4294967295)>>2]=1);j=0!=(k|0)?12:15;b:do if(12==j){j=45==((b=h[k],128<=b?b-256:b)|0)?14:13;if(13==j&&43!=((b=h[k],128<=b?b-256:b)|0)){j=15;break b}q=45==((b=h[k],128<=b?b-256:b)|0)?1:2;k=k+1&4294967295;j=16;break b}while(0);15==j&&(q=0!=(Yk(qD&4294967295)|0)?2:0);j=1==(a[(g+16&4294967295)>>2]|0)?17:28;b:do if(17==j)if(j=q,j=2==j?26:1==j?24:18,18==j){f=a[(g+4&4294967295)>>2];r=0;l=0!=(qo(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],0)|0)^1;t=g+4&4294967295;C=a[t>>2];l?(l=18,j=19):(l=18,j=20);c:do if(19==j)for(;;){a[(19==l?E:t)>>2]=(19==l?B:C)+1&4294967295;r=r+1&4294967295;var l=0!=(qo(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],0)|0)^1,E=g+4&4294967295,B=a[E>>2];if(l)j=l=19;else{l=19;break c}}while(0);j=0==(a[(m+4*(18==l?C:B)&4294967295)>>2]|0)?21:22;if(21==j){a[(g+4&4294967295)>>2]=f;n=-1;j=96;break a}else if(22==j){if(0!=(nb(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],Rk&4294967295)|0))break b;m=m+4*f&4294967295;d=r;Sk(m,d);Sk(m,1+d&4294967295);Sk(m,1);a[(g+4&4294967295)>>2]=f+1&4294967295;n=-1;j=96;break a}}else if(26==j){if(0!=(qo(a[(m+4*a[(g+
4&4294967295)>>2]&4294967295)>>2],0)|0))break b;n=-1;j=96;break a}else if(24==j){if(0!=(qo(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],0)|0))break b;d=g+4&4294967295;f=a[d>>2];a[d>>2]=f+1&4294967295;a[(g&4294967295)>>2]=a[(m+4*f&4294967295)>>2];n=a[(g+12&4294967295)>>2]=1;j=96;break a}while(0);j=0!=(d|0)?29:52;b:do if(29==j){j=0==($b(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],Rk&4294967295,2)|0)?32:30;if(30==j)break b;if(1!=(a[(g+16&4294967295)>>2]|0))break b;j=0==($b(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],Rk&4294967295,2)|0)?34:35;34==j&&(a[(g+16&4294967295)>>2]=2);p=-1;x=j=$g(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295,61);j=0==(j|0)?36:37;36==j?(v=$(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]),x=a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+v&4294967295,v=v-a[(g+16&4294967295)>>2]&4294967295):37==j&&(v=((-a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]&4294967295)+x&4294967295)+(-a[(g+16&4294967295)>>2]&4294967295)&4294967295);for(t=0;;){if(0==(a[(d+16*t&-1)>>2]|0)){j=49;break}j=0==($b(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295,a[(d+16*t&-1)>>2],v)|0)?41:48;if(41==j){j=v;C=$(a[(d+16*t&-1)>>2]);if((j|0)==(C|0)){j=42;break}if(!(0>(p|0))){j=45;break}p=t}t=t+1&4294967295;j=39}if(49==j)var H=p,l=49;else if(42==j){var D=t;p=D;l=42}else if(45==j){j=0!=(a[(g+8&4294967295)>>2]|0)?46:47;46==j&&Ea(a[(a[lb>>2]+12&4294967295)>>2],rD&4294967295,e([a[(m&4294967295)>>2],0,0,0,a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2],0,0,0,a[(d+16*p&-1)>>2],0,0,0,a[(d+16*t&-1)>>2],0,0,0],["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0],y));n=a[(g+12&4294967295)>>2]=63;j=96;break a}if(!(0<=((49==l?H:D)|0)))break b;u=a[((d+16*p&4294967295)+4&4294967295)>>2]}while(0);j=0>(p|0)?53:63;b:do if(53==j){if(0==(k|0))break b;z=k;j=(b=h[a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295],128<=b?b-256:b);z=$g(z,j);j=0==(z|0)?55:60;if(55==j){j=0!=(a[(g+8&4294967295)>>2]|0)?56:57;56==j&&(d=a[(a[lb>>2]+12&4294967295)>>2],f=a[(m&4294967295)>>2],c=(b=h[a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295],128<=b?b-256:b),Ea(d,sD&4294967295,e([f,0,0,0,c,0,0,0],["i8*",0,0,0,"i32",0,0,0],y)));d=g+16&4294967295;a[d>>2]=a[d>>2]+1&4294967295;j=0==((b=h[a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295],128<=b?b-256:b)|0)?58:59;58==j&&(m=g+4&4294967295,a[m>>2]=a[m>>2]+1&4294967295,a[(g+16&4294967295)>>2]=1);n=a[(g+12&4294967295)>>2]=63;j=96;break a}else if(60==j){58==((b=h[z+1&4294967295],128<=b?b-256:b)|0)?(l=60,j=61):(l=60,j=62);if(61==j)var K=58==((b=h[z+2&4294967295],128<=b?b-256:b)|0)?2:1,l=61;u=61==l?K:0;x=(a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295)+1&4294967295;t=(b=h[z],128<=b?b-256:b);a[(g+12&4294967295)>>2]=t}}while(0);t=0;j=u;j=2==j?64:1==j?67:78;if(78==j){C=g+16&4294967295;j=0>(p|0)?79:81;b:do if(79==j){a[C>>2]=a[C>>2]+1&4294967295;if(0!=((b=h[a[(m+4*a[(g+4&4294967295)>>2]&4294967295)>>2]+a[(g+16&4294967295)>>2]&4294967295],128<=b?b-256:b)|0))break b;a[(g+16&4294967295)>>2]=1}else 81==j&&(a[C>>2]=1);while(0);a[(g&4294967295)>>2]=0}else if(64==j)j=61==((b=h[x],128<=b?b-256:b)|0)?65:66,65==j&&(x=x+1&4294967295),j=0!=((b=h[x],128<=b?b-256:b)|0),C=x,a[(g&4294967295)>>2]=j?C:0,a[(g+16&4294967295)>>2]=1;else if(67==j)if(j=61==((b=h[x],128<=b?b-256:b)|0)?68:69,68==j&&(x=x+1&4294967295),j=0!=((b=h[x],128<=b?b-256:b)|0)?70:71,70==j)a[(g&4294967295)>>2]=x,a[(g+16&4294967295)>>2]=1;else if(71==j)if(C=g,j=(a[(g+4&4294967295)>>2]+1&4294967295|0)>=(c|0)?72:77,72==j){j=0!=(a[(C+8&4294967295)>>2]|0)?73:76;73==j&&(Ea(a[(a[lb>>2]+12&4294967295)>>2],tD&4294967295,e([a[(m&4294967295)>>2],0,0,0],["i8*",0,0,0],y)),m=a[(a[lb>>2]+12&4294967295)>>2],j=0<=(p|0)?74:75,74==j?Ea(m,uD&4294967295,e([a[(d+16*p&-1)>>2],0,0,0],["i8*",0,0,0],y)):75==j&&(d=(b=h[z],128<=b?b-256:b),Ea(m,vD&4294967295,e([d,0,0,0],["i32",0,0,0],y))));m=g+4&4294967295;a[m>>2]=a[m>>2]+1&4294967295;n=a[(g+12&4294967295)>>2]=58;j=96;break a}else 77==j&&(a[(g&4294967295)>>2]=a[(m+4*(a[(C+4&4294967295)>>2]+1&4294967295)&4294967295)>>2],t=1,a[(g+16&4294967295)>>2]=1);j=0==(q|0)?84:87;b:do if(84==j){if(1!=(a[(g+16&4294967295)>>2]|0)){j=87;break b}if(0==(r|0)){j=87;break b}j=m+4*f&4294967295;var C=r,I=t+1&4294967295;Sk(j,C);Sk(j,I+C&4294967295);Sk(j,I);a[(g+4&4294967295)>>2]=(f+1&4294967295)+t&4294967295;j=89;break b}while(0);b:do if(87==j){if(1!=(a[(g+16&4294967295)>>2]|0))break b;a[(g+4&4294967295)>>2]=(a[(g+4&4294967295)>>2]+1&4294967295)+t&4294967295}while(0);j=0<=(p|0)?90:95;if(90==j)if(j=0!=(i|0)?91:92,91==j&&(a[i>>2]=p),t=a[((d+16*p&4294967295)+12&4294967295)>>2],j=0!=(a[((d+16*p&4294967295)+8&4294967295)>>2]|0)?93:94,93==j){a[a[((d+16*p&4294967295)+8&4294967295)>>2]>>2]=t;n=0;j=96;break a}else{if(94==j){n=t;j=96;break a}}else if(95==j){n=a[(g+12&4294967295)>>2];j=96;break a}}}while(0);6==j&&(n=-1);a[yo>>2]=a[(g&4294967295)>>2];a[un>>2]=a[(g+4&4294967295)>>2];a[st>>2]=a[(g+8&4294967295)>>2];a[tt>>2]=a[(g+12&4294967295)>>2];a[ut>>2]=a[(g+16&4294967295)>>2];s=g;return n}function qo(a,c){var e,d=null;0==(a|0)?(d=0,e=4):(d=0,e=1);a:do if(1==e){if(45==((b=h[a&4294967295],128<=b?b-256:b)|0)){d=1;break a}if(0==(c|0)){d=2;break a}var i=43==((b=h[a&4294967295],128<=b?b-256:b)|0),d=3}while(0);return(1==d?1:0==d?1:2==d?0:i)&1}function Sk(b,c){var e,d;d=0;e=(d|0)<(c>>1|0)?1:2;a:do if(1==e)for(;;)if(e=a[(b+4*d&4294967295)>>2],a[(b+4*d&4294967295)>>2]=a[(b+4*((c-1&4294967295)+(-d&4294967295)&4294967295)&4294967295)>>2],a[(b+4*((c-1&4294967295)+(-d&4294967295)&4294967295)&4294967295)>>2]=e,d=d+1&4294967295,(d|0)<(c>>1|0))e=1;else break a;while(0)}function vt(b){b=b||fb.arguments;wd=e(150,"i8",c);cp=e(5,"i8",c);bh=e(200,"i8",c);Fs=e(1,"i32 (i32, i8*, i8*)*",c);Jr=e(1,"i32 (i8*)*",c);Ic=e(1,"%struct.__sFILE*",c);hm=e(1,"i32",c);Zn=e(1,"i32",c);Gi=e(1,"i32",c);Uq=e(1,"i32",c);vo=e(1,"i32",c);e(60,"i16",c);ku=e([32,77,70,32],"i8",c);hu=e([80,116,121,32,76,97,110,103,117,97,103,101,32,65,103,101,47,71,101,110,100,101,114,32,86,111,105,99,101,78,97,109,101,32,32,32,32,32,32,32,70,105,108,101,32,32,32,32,32,32,32,32,79,116,104,101,114,32,76,97,110,103,115,10,0],"i8",c);ju=e([37,51,100,0],"i8",c);lu=e([37,50,100,32,32,37,45,49,50,115,37,115,37,99,32,32,37,45,49,55,115,32,37,45,49,49,115,32,0],"i8",c);mu=e([40,37,115,32,37,100,41,0],"i8",c);af=e([0,0,0,0,0,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,256,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,257,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,261,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,262,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,264,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,265,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,266,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32*",0,0,0,"i32",0,0,0],c);wD=e([104,101,108,112,0],"i8",c);xD=e([115,116,100,105,110,0],"i8",c);yD=e([99,111,109,112,105,108,101,45,100,101,98,117,103,0],"i8",c);zD=e([99,111,109,112,105,108,101,0],"i8",c);AD=e([112,117,110,99,116,0],"i8",c);BD=e([118,111,105,99,101,115,0],"i8",c);Co=e([115,116,100,111,117,116,0],"i8",c);CD=e([115,112,108,105,116,0],"i8",c);DD=e([112,97,116,104,0],"i8",c);ED=e([112,104,111,110,111,117,116,0],"i8",c);FD=e([112,104,111,0],"i8",c);GD=e([105,112,97,0],"i8",c);eu=e([70,97,105,108,101,100,32,116,111,32,114,101,97,100,32,0],"i8",c);xo=e([97,58,98,58,102,58,103,58,104,107,58,108,58,112,58,113,115,58,118,58,119,58,120,88,109,122,0],"i8",c);gu=e([10,115,112,101,97,107,32,116,101,120,116,45,116,111,45,115,112,101,101,99,104,58,32,37,115,32,32,32,68,97,116,97,32,97,116,58,32,37,115,10,37,115,0],"i8",c);nu=e([67,97,110,39,116,32,119,114,105,116,101,32,116,111,58,32,37,115,10,0],"i8",c);mv=e([37,115,118,111,105,99,101,32,39,37,115,39,10,0],"i8",c);nv=e([37,115,102,105,108,101,32,39,37,115,39,10,0],"i8",c);ov=e([67,97,110,39,116,32,119,114,105,116,101,32,116,111,32,111,117,116,112,117,116,32,102,105,108,101,32,39,37,115,39,10,39,0],"i8",c);Jv=e([45,119,32,111,112,116,105,111,110,32,109,117,115,116,32,98,101,32,117,115,101,100,32,98,101,99,97,117,115,101,32,116,104,101,32,112,114,111,103,114,97,109,32,119,97,115,32,98,117,105,108,116,32,119,105,116,104,111,117,116,32,97,32,115,111,117,110,100,32,105,110,116,101,114,102,97,99,101,10,0],"i8",c);Hv=e([37,115,95,37,46,50,100,37,115,0],"i8",c);$n=e([82,73,70,70,36,240,255,127,87,65,86,69,102,109,116,32,16,0,0,0,1,0,1,0,9,61,0,0,18,122,0,0,2,0,16,0,100,97,116,97,0,240,255,127],"i8",c);ou=e([101,110,95,85,83,46,85,84,70,45,56,0],"i8",c);pu=e([85,84,70,45,56,0],"i8",c);zu=e([70,97,105,108,101,100,32,116,111,32,108,111,97,100,32,101,115,112,101,97,107,45,100,97,116,97,10,0],"i8",c);Au=e([87,114,111,110,103,32,118,101,114,115,105,111,110,32,111,102,32,101,115,112,101,97,107,45,100,97,116,97,32,48,120,37,120,32,40,101,120,112,101,99,116,115,32,48,120,37,120,41,32,97,116,32,37,115,10,0],"i8",c);du=e([10,115,112,101,97,107,32,91,111,112,116,105,111,110,115,93,32,91,34,60,119,111,114,100,115,62,34,93,10,10,45,102,32,60,116,101,120,116,32,102,105,108,101,62,32,32,32,84,101,120,116,32,102,105,108,101,32,116,111,32,115,112,101,97,107,10,45,45,115,116,100,105,110,32,32,32,32,82,101,97,100,32,116,101,120,116,32,105,110,112,117,116,32,102,114,111,109,32,115,116,100,105,110,32,105,110,115,116,101,97,100,32,111,102,32,97,32,102,105,108,101,10,10,73,102,32,110,101,105,116,104,101,114,32,45,102,32,110,111,114,32,45,45,115,116,100,105,110,44,32,116,104,101,110,32,60,119,111,114,100,115,62,32,97,114,101,32,115,112,111,107,101,110,44,32,111,114,32,105,102,32,110,111,110,101,32,116,104,101,110,32,116,101,120,116,10,105,115,32,115,112,111,107,101,110,32,102,114,111,109,32,115,116,100,105,110,44,32,101,97,99,104,32,108,105,110,101,32,115,101,112,97,114,97,116,101,108,121,46,10,10,45,97,32,60,105,110,116,101,103,101,114,62,10,9,32,32,32,65,109,112,108,105,116,117,100,101,44,32,48,32,116,111,32,50,48,48,44,32,100,101,102,97,117,108,116,32,105,115,32,49,48,48,10,45,103,32,60,105,110,116,101,103,101,114,62,10,9,32,32,32,87,111,114,100,32,103,97,112,46,32,80,97,117,115,101,32,98,101,116,119,101,101,110,32,119,111,114,100,115,44,32,117,110,105,116,115,32,111,102,32,49,48,109,83,32,97,116,32,116,104,101,32,100,101,102,97,117,108,116,32,115,112,101,101,100,10,45,107,32,60,105,110,116,101,103,101,114,62,10,9,32,32,32,73,110,100,105,99,97,116,101,32,99,97,112,105,116,97,108,32,108,101,116,116,101,114,115,32,119,105,116,104,58,32,49,61,115,111,117,110,100,44,32,50,61,116,104,101,32,119,111,114,100,32,34,99,97,112,105,116,97,108,115,34,44,10,9,32,32,32,104,105,103,104,101,114,32,118,97,108,117,101,115,32,105,110,100,105,99,97,116,101,32,97,32,112,105,116,99,104,32,105,110,99,114,101,97,115,101,32,40,116,114,121,32,45,107,50,48,41,46,10,45,108,32,60,105,110,116,101,103,101,114,62,10,9,32,32,32,76,105,110,101,32,108,101,110,103,116,104,46,32,73,102,32,110,111,116,32,122,101,114,111,32,40,119,104,105,99,104,32,105,115,32,116,104,101,32,100,101,102,97,117,108,116,41,44,32,99,111,110,115,105,100,101,114,10,9,32,32,32,108,105,110,101,115,32,108,101,115,115,32,116,104,97,110,32,116,104,105,115,32,108,101,110,103,116,104,32,97,115,32,101,110,100,45,111,102,45,99,108,97,117,115,101,10,45,112,32,60,105,110,116,101,103,101,114,62,10,9,32,32,32,80,105,116,99,104,32,97,100,106,117,115,116,109,101,110,116,44,32,48,32,116,111,32,57,57,44,32,100,101,102,97,117,108,116,32,105,115,32,53,48,10,45,115,32,60,105,110,116,101,103,101,114,62,10,9,32,32,32,83,112,101,101,100,32,105,110,32,119,111,114,100,115,32,112,101,114,32,109,105,110,117,116,101,44,32,56,48,32,116,111,32,52,53,48,44,32,100,101,102,97,117,108,116,32,105,115,32,49,55,53,10,45,118,32,60,118,111,105,99,101,32,110,97,109,101,62,10,9,32,32,32,85,115,101,32,118,111,105,99,101,32,102,105,108,101,32,111,102,32,116,104,105,115,32,110,97,109,101,32,102,114,111,109,32,101,115,112,101,97,107,45,100,97,116,97,47,118,111,105,99,101,115,10,45,119,32,60,119,97,118,101,32,102,105,108,101,32,110,97,109,101,62,10,9,32,32,32,87,114,105,116,101,32,115,112,101,101,99,104,32,116,111,32,116,104,105,115,32,87,65,86,32,102,105,108,101,44,32,114,97,116,104,101,114,32,116,104,97,110,32,115,112,101,97,107,105,110,103,32,105,116,32,100,105,114,101,99,116,108,121,10,45,98,9,32,32,32,73,110,112,117,116,32,116,101,120,116,32,101,110,99,111,100,105,110,103,44,32,49,61,85,84,70,56,44,32,50,61,56,32,98,105,116,44,32,52,61,49,54,32,98,105,116,32,10,45,109,9,32,32,32,73,110,116,101,114,112,114,101,116,32,83,83,77,76,32,109,97,114,107,117,112,44,32,97,110,100,32,105,103,110,111,114,101,32,111,116,104,101,114,32,60,32,62,32,116,97,103,115,10,45,113,9,32,32,32,81,117,105,101,116,44,32,100,111,110,39,116,32,112,114,111,100,117,99,101,32,97,110,121,32,115,112,101,101,99,104,32,40,109,97,121,32,98,101,32,117,115,101,102,117,108,32,119,105,116,104,32,45,120,41,10,45,120,9,32,32,32,87,114,105,116,101,32,112,104,111,110,101,109,101,32,109,110,101,109,111,110,105,99,115,32,116,111,32,115,116,100,111,117,116,10,45,88,9,32,32,32,87,114,105,116,101,32,112,104,111,110,101,109,101,115,32,109,110,101,109,111,110,105,99,115,32,97,110,100,32,116,114,97,110,115,108,97,116,105,111,110,32,116,114,97,99,101,32,116,111,32,115,116,100,111,117,116,10,45,122,9,32,32,32,78,111,32,102,105,110,97,108,32,115,101,110,116,101,110,99,101,32,112,97,117,115,101,32,97,116,32,116,104,101,32,101,110,100,32,111,102,32,116,104,101,32,116,101,120,116,10,45,45,99,111,109,112,105,108,101,61,60,118,111,105,99,101,32,110,97,109,101,62,10,9,32,32,32,67,111,109,112,105,108,101,32,112,114,111,110,117,110,99,105,97,116,105,111,110,32,114,117,108,101,115,32,97,110,100,32,100,105,99,116,105,111,110,97,114,121,32,102,114,111,109,32,116,104,101,32,99,117,114,114,101,110,116,10,9,32,32,32,100,105,114,101,99,116,111,114,121,46,32,60,118,111,105,99,101,32,110,97,109,101,62,32,115,112,101,99,105,102,105,101,115,32,116,104,101,32,108,97,110,103,117,97,103,101,10,45,45,105,112,97,32,32,32,32,32,32,87,114,105,116,101,32,112,104,111,110,101,109,101,115,32,116,111,32,115,116,100,111,117,116,32,117,115,105,110,103,32,73,110,116,101,114,110,97,116,105,111,110,97,108,32,80,104,111,110,101,116,105,99,32,65,108,112,104,97,98,101,116,10,45,45,112,97,116,104,61,34,60,112,97,116,104,62,34,10,9,32,32,32,83,112,101,99,105,102,105,101,115,32,116,104,101,32,100,105,114,101,99,116,111,114,121,32,99,111,110,116,97,105,110,105,110,103,32,116,104,101,32,101,115,112,101,97,107,45,100,97,116,97,32,100,105,114,101,99,116,111,114,121,10,45,45,112,104,111,32,32,32,32,32,32,87,114,105,116,101,32,109,98,114,111,108,97,32,112,104,111,110,101,109,101,32,100,97,116,97,32,40,46,112,104,111,41,32,116,111,32,115,116,100,111,117,116,32,111,114,32,116,111,32,116,104,101,32,102,105,108,101,32,105,110,32,45,45,112,104,111,110,111,117,116,10,45,45,112,104,111,110,111,117,116,61,34,60,102,105,108,101,110,97,109,101,62,34,10,9,32,32,32,87,114,105,116,101,32,112,104,111,110,101,109,101,32,111,117,116,112,117,116,32,102,114,111,109,32,45,120,32,45,88,32,45,45,105,112,97,32,97,110,100,32,45,45,112,104,111,32,116,111,32,116,104,105,115,32,102,105,108,101,10,45,45,112,117,110,99,116,61,34,60,99,104,97,114,97,99,116,101,114,115,62,34,10,9,32,32,32,83,112,101,97,107,32,116,104,101,32,110,97,109,101,115,32,111,102,32,112,117,110,99,116,117,97,116,105,111,110,32,99,104,97,114,97,99,116,101,114,115,32,100,117,114,105,110,103,32,115,112,101,97,107,105,110,103,46,32,32,73,102,10,9,32,32,32,61,60,99,104,97,114,97,99,116,101,114,115,62,32,105,115,32,111,109,105,116,116,101,100,44,32,97,108,108,32,112,117,110,99,116,117,97,116,105,111,110,32,105,115,32,115,112,111,107,101,110,46,10,45,45,115,112,108,105,116,61,34,60,109,105,110,117,116,101,115,62,34,10,9,32,32,32,83,116,97,114,116,115,32,97,32,110,101,119,32,87,65,86,32,102,105,108,101,32,101,118,101,114,121,32,60,109,105,110,117,116,101,115,62,46,32,32,85,115,101,100,32,119,105,116,104,32,45,119,10,45,45,115,116,100,111,117,116,32,32,32,87,114,105,116,101,32,115,112,101,101,99,104,32,111,117,116,112,117,116,32,116,111,32,115,116,100,111,117,116,10,45,45,118,111,105,99,101,115,61,60,108,97,110,103,117,97,103,101,62,10,9,32,32,32,76,105,115,116,32,116,104,101,32,97,118,97,105,108,97,98,108,101,32,118,111,105,99,101,115,32,102,111,114,32,116,104,101,32,115,112,101,99,105,102,105,101,100,32,108,97,110,103,117,97,103,101,46,10,9,32,32,32,73,102,32,60,108,97,110,103,117,97,103,101,62,32,105,115,32,111,109,105,116,116,101,100,44,32,116,104,101,110,32,108,105,115,116,32,97,108,108,32,118,111,105,99,101,115,46,10,0],"i8",c);xl=e([37,115,47,101,115,112,101,97,107,45,100,97,116,97,0],"i8",c);Kv=e([69,83,80,69,65,75,95,68,65,84,65,95,80,65,84,72,0],"i8",c);Lv=e([72,79,77,69,0],"i8",c);Mv=e([47,117,115,114,47,115,104,97,114,101,47,101,115,112,101,97,107,45,100,97,116,97,0],"i8",c);Ta=e(1,"%struct.__sFILE*",c);HD=e([117,110,112,114,0],"i8",c);ID=e([119,95,97,108,116,50,0],"i8",c);JD=e([119,95,97,108,116,51,0],"i8",c);KD=e([119,95,97,108,116,0],"i8",c);LD=e([112,95,97,108,116,50,0],"i8",c);MD=e([112,95,97,108,116,51,0],"i8",c);ND=e([112,95,97,108,116,0],"i8",c);Fg=e([0,0,0,0,1,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);OD=e([36,49,0],"i8",c);PD=e([36,50,0],"i8",c);QD=e([36,51,0],"i8",c);RD=e([36,52,0],"i8",c);SD=e([36,53,0],"i8",c);TD=e([36,54,0],"i8",c);UD=e([36,55,0],"i8",c);VD=e([36,117,0],"i8",c);WD=e([36,117,49,0],"i8",c);XD=e([36,117,50,0],"i8",c);YD=e([36,117,51,0],"i8",c);ZD=e([36,117,43,0],"i8",c);$D=e([36,117,49,43,0],"i8",c);aE=e([36,117,50,43,0],"i8",c);bE=e([36,117,51,43,0],"i8",c);cE=e([36,112,97,117,115,101,0],"i8",c);dE=e([36,111,110,108,121,0],"i8",c);eE=e([36,111,110,108,121,115,0],"i8",c);fE=e([36,115,116,114,101,110,100,0],"i8",c);gE=e([36,115,116,114,101,110,100,50,0],"i8",c);hE=e([36,117,110,115,116,114,101,115,115,101,110,100,0],"i8",c);iE=e([36,97,116,101,110,100,0],"i8",c);jE=e([36,97,116,115,116,97,114,116,0],"i8",c);kE=e([36,97,98,98,114,101,118,0],"i8",c);lE=e([36,115,116,101,109,0],"i8",c);mE=e([36,100,111,117,98,108,101,0],"i8",c);nE=e([36,97,108,116,0],"i8",c);oE=e([36,97,108,116,49,0],"i8",c);pE=e([36,97,108,116,50,0],"i8",c);qE=e([36,97,108,116,51,0],"i8",c);rE=e([36,99,111,109,98,105,110,101,0],"i8",c);sE=e([36,100,111,116,0],"i8",c);tE=e([36,104,97,115,100,111,116,0],"i8",c);uE=e([36,109,97,120,51,0],"i8",c);vE=e([36,98,114,107,0],"i8",c);wE=e([36,116,101,120,116,0],"i8",c);xE=e([36,118,101,114,98,102,0],"i8",c);yE=e([36,118,101,114,98,115,102,0],"i8",c);zE=e([36,110,111,117,110,102,0],"i8",c);AE=e([36,112,97,115,116,102,0],"i8",c);BE=e([36,118,101,114,98,0],"i8",c);CE=e([36,110,111,117,110,0],"i8",c);DE=e([36,112,97,115,116,0],"i8",c);EE=e([36,118,101,114,98,101,120,116,101,110,100,0],"i8",c);FE=e([36,99,97,112,105,116,97,108,0],"i8",c);GE=e([36,97,108,108,99,97,112,115,0],"i8",c);HE=e([36,97,99,99,101,110,116,0],"i8",c);IE=e([36,115,101,110,116,101,110,99,101,0],"i8",c);JE=e([36,63,0],"i8",c);KE=e([36,116,101,120,116,109,111,100,101,0],"i8",c);LE=e([36,112,104,111,110,101,109,101,109,111,100,101,0],"i8",c);ja=e([0,0,0,0,65,0,0,0,0,0,0,0,66,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,68,0,0,0,0,0,0,0,69,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,73,0,0,0,0,0,0,0,74,0,0,0,0,0,0,0,75,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,77,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,79,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,35,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,40,0,0,0,0,0,0,0,41,0,0,0,0,0,0,0,42,0,0,0,0,0,0,0,43,0,0,0,0,0,0,0,45,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,200,0,0,0,0,0,0,0,201,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);ek=e(20,"i8",c);Pv=e([37,115,32,32,48,120,37,120,47,37,120,0],"i8",c);ki=e(60,"i8",c);Cw=e([32,32,32,32,32,32,32,32,32,32,38,37,43,35,83,68,90,65,76,33,32,64,63,74,78,75,86,63,84,88,63,87],"i8",c);Bw=e([65,66,67,72,70,71,89],"i8",c);yw=e([32,40,0],"i8",c);Aw=e([101,105,112,118,100,102,113,32,116,98,97,32,0],"i8",c);zw=e([37,99,37,100,0],"i8",c);Dw=e([37,53,100,58,9,0],"i8",c);Ew=e([63,37,100,32,0],"i8",c);pb=e(1,"i32",c);mm=e(1,"i32",c);nm=e(26,"i8",c);Ro=e(1,"i32",c);Lu=e([37,115,37,115,95,0],"i8",c);Mu=e([37,115,114,117,108,101,115,46,116,120,116,0],"i8",c);Nu=e([37,115,114,117,108,101,115,0],"i8",c);Ou=e([119,98,43,0],"i8",c);Pu=e([37,115,37,99,116,101,109,112,0],"i8",c);Qu=e([85,115,105,110,103,32,112,104,111,110,101,109,101,116,97,98,108,101,58,32,39,37,115,39,10,0],"i8",c);Ru=e([114,111,111,116,115,0],"i8",c);qq=e([108,105,115,116,0],"i8",c);Uo=e([108,105,115,116,120,0],"i8",c);Su=e([101,120,116,114,97,0],"i8",c);rq=e([67,111,109,112,105,108,105,110,103,58,32,39,37,115,39,10,0],"i8",c);rc=e(1,"i32",c);Dd=e(13,"i8",c);tq=e([119,98,0],"i8",c);om=e(1,"i32",c);bv=e([46,76,0],"i8",c);fv=e([46,114,101,112,108,97,99,101,0],"i8",c);gv=e([46,103,114,111,117,112,0],"i8",c);hv=e([48,120,37,120,0],"i8",c);iv=e([37,53,100,58,32,71,114,111,117,112,32,110,97,109,101,32,108,111,110,103,101,114,32,116,104,97,110,32,50,32,98,121,116,101,115,32,40,85,84,70,56,41,0],"i8",c);jv=e([9,37,100,32,114,117,108,101,115,44,32,37,100,32,103,114,111,117,112,115,32,40,37,100,41,10,10,0],"i8",c);gl=e(80,"i8",c);Rh=e(80,"i8",c);Sh=e(80,"i8",c);eh=e(80,"i8",c);Pi=e(80,"i8",c);Vu=e([37,53,100,58,32,83,121,110,116,97,120,32,101,114,114,111,114,46,32,83,112,97,99,101,32,97,102,116,101,114,32,40,10,0],"i8",c);Wu=e([36,103,114,111,117,112,0],"i8",c);Xu=e([37,53,100,58,32,83,121,110,116,97,120,32,101,114,114,111,114,10,0],"i8",c);Yu=e([37,53,100,58,32,66,97,100,32,112,104,111,110,101,109,101,32,91,37,99,93,32,105,110,32,37,115,10,0],"i8",c);Zu=e([37,53,100,58,32,87,114,111,110,103,32,105,110,105,116,105,97,108,32,108,101,116,116,101,114,115,32,39,37,115,39,32,102,111,114,32,103,114,111,117,112,32,39,37,115,39,10,0],"i8",c);$u=e([37,53,100,58,32,98,97,100,32,99,111,110,100,105,116,105,111,110,32,110,117,109,98,101,114,32,63,37,100,10,0],"i8",c);Eg=e(20,"i8*",c);ew=e([2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Hp=e([0,1,2,0,0,4,5,3,6],"i8",c);bw=e([37,53,100,58,32,69,120,112,101,99,116,101,100,32,50,32,100,105,103,105,116,115,32,97,102,116,101,114,32,39,76,39,10,0],"i8",c);cw=e([37,53,100,58,32,76,101,116,116,101,114,32,103,114,111,117,112,32,76,37,46,50,100,32,110,111,116,32,100,101,102,105,110,101,100,10,0],"i8",c);dw=e([37,53,100,58,32,36,32,99,111,109,109,97,110,100,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,10,0],"i8",c);ev=e([37,53,100,58,32,69,120,112,101,99,116,101,100,32,50,32,100,105,103,105,116,115,32,97,102,116,101,114,32,39,46,76,39,10,0],"i8",c);cv=e([37,53,100,58,32,108,101,116,116,101,114,103,114,111,117,112,32,111,117,116,32,111,102,32,114,97,110,103,101,32,40,48,49,45,37,46,50,100,41,10,0],"i8",c);dv=e([37,53,100,58,32,108,101,116,116,101,114,103,114,111,117,112,32,76,37,46,50,100,32,105,115,32,97,108,114,101,97,100,121,32,100,101,102,105,110,101,100,10,0],"i8",c);av=e([57,0],"i8",c);Mj=e(4096,"i8*",c);qn=e(4096,"i32",c);fk=e(1,"i1",c);Rv=e([37,115,37,115,46,116,120,116,0],"i8",c);hq=e([67,97,110,39,116,32,97,108,108,111,99,97,116,101,32,109,101,109,111,114,121,10,0],"i8",c);aw=e([9,37,100,32,101,110,116,114,105,101,115,10,0],"i8",c);ao=e(1,"i8",c);Sv=e([95,45,0],"i8",c);Tv=e([37,53,100,58,32,85,110,107,110,111,119,110,32,107,101,121,119,111,114,100,58,32,37,115,10,0],"i8",c);Vv=e([32,0],"i8",c);Wv=e([37,53,100,58,32,78,101,101,100,32,116,111,32,99,111,109,112,105,108,101,32,100,105,99,116,105,111,110,97,114,121,32,97,103,97,105,110,10,0],"i8",c);Uv=e([37,53,100,58,32,66,97,100,32,112,104,111,110,101,109,101,32,91,37,99,93,32,40,48,120,37,120,41,32,105,110,58,32,37,115,32,32,37,115,10,0],"i8",c);Xv=e([85,43,37,120,0],"i8",c);$v=e([37,53,100,58,32,84,119,111,32,109,97,110,121,32,112,97,114,116,115,32,105,110,32,97,32,109,117,108,116,105,45,119,111,114,100,32,101,110,116,114,121,58,32,37,100,10,0],"i8",c);Qv=e([67,97,110,39,116,32,97,99,99,101,115,115,32,40,37,115,41,32,102,105,108,101,32,39,37,115,39,10,0],"i8",c);kf=e(1,"i32",c);Mi=e(40,"i8",c);Ip=e([97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,100,110,111,111,111,111,111,0,111,117,117,117,117,121,116,115,97,97,97,97,97,97,97,99,101,101,101,101,105,105,105,105,100,110,111,111,111,111,111,0,111,117,117,117,117,121,116,121,97,97,97,97,97,97,99,99,99,99,99,99,99,99,100,100,100,100,101,101,101,101,101,101,101,101,101,101,103,103,103,103,103,103,103,103,104,104,104,104,105,105,105,105,105,105,105,105,105,105,105,105,106,106,107,107,107,108,108,108,108,108,108,108,108,108,108,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,114,114,114,114,114,114,115,115,115,115,115,115,115,115,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,119,119,121,121,121,122,122,122,122,122,122,115,98,98,98,98,0,0,111,99,99,100,100,100,100,100,101,101,101,102,102,103,103,104,105,105,107,107,108,108,109,110,110,111,111,111,111,111,112,112,121,0,0,115,115,116,116,116,116,117,117,117,118,121,121,122,122,122,122,122,122,122,0,0,0,119,116,116,116,107,100,100,100,108,108,108,110,110,110,97,97,105,105,111,111,117,117,117,117,117,117,117,117,117,117,101,97,97,97,97,97,97,103,103,103,103,107,107,111,111,111,111,122,122,106,100,100,100,103,103,119,119,110,110,97,97,97,97,111,111,97,97,97,97,101,101,101,101,105,105,105,105,111,111,111,111,114,114,114,114,117,117,117,117,115,115,116,116,121,121,104,104,110,100,111,111,122,122,97,97,101,101,111,111,111,111,111,111,111,111,121,121,108,110,116,106,100,113,97,99,99,108,116,115,122,0,0,98,117,118,101,101,106,106,113,113,114,114,121,121,97,97,97,98,111,99,100,100,101,101,101,101,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",c);To=e([37,115,37,99,37,115,95,100,105,99,116,0],"i8",c);jw=e([67,97,110,39,116,32,114,101,97,100,32,100,105,99,116,105,111,110,97,114,121,32,102,105,108,101,58,32,39,37,115,39,10,0],"i8",c);fw=e([69,109,112,116,121,32,95,100,105,99,116,32,102,105,108,101,58,32,39,37,115,10,0],"i8",c);iw=e([66,97,100,32,100,97,116,97,58,32,39,37,115,39,32,40,37,120,32,108,101,110,103,116,104,61,37,120,41,10,0],"i8",c);hw=e([69,114,114,111,114,32,105,110,32,37,115,95,114,117,108,101,115,44,32,110,111,32,100,101,102,97,117,108,116,32,114,117,108,101,32,103,114,111,117,112,10,0],"i8",c);kw=e([61,61,44,44,39,42,32,32,0],"i8",c);mw=e([32,0,33,0,34,0,688,0,36,0,37,0,230,0,712,0,40,0,638,0,42,0,43,0,716,0,45,0,46,0,47,0,594,0,49,0,50,0,604,0,52,0,53,0,54,0,55,0,629,0,57,0,720,0,690,0,60,0,61,0,62,0,660,0,601,0,593,0,946,0,231,0,240,0,603,0,70,0,610,0,295,0,618,0,607,0,75,0,76,0,625,0,331,0,596,0,934,0,611,0,640,0,643,0,952,0,650,0,652,0,339,0,967,0,248,0,658,0,810,0,92,0,93,0,94,0,95,0,96,0,97,0,98,0,99,0,100,0,101,0,102,0,609,0,104,0,105,0,106,0,107,0,108,0,109,0,110,0,111,0,112,0,113,0,114,0,115,0,116,0,117,0,118,0,119,0,120,0,121,0,122,0,123,0,124,0,125,0,771,0,127,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Fz=e([61,61,44,44,39,39,0],"i8",c);Gz=e([40,37,115,41,0],"i8",c);Jp=e([3,2,4,5,6,7,26],"i8",c);ow=e([0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0],"i8",c);rw=e([0,0,1,1,2,3,3,4,5,6,7,7,8,9,10,11],"i8",c);pw=e([0,0,1,1,2,2,3,3,4,5,6,7,7,8,9,10],"i8",c);qw=e([0,0,1,2,3,3,3,4,5,6,7,7,7,8,9,10],"i8",c);uw=e([11,0],"i8",c);sw=e([85,110,112,114,111,110,111,117,110,99,97,98,108,101,63,32,39,37,115,39,10,0],"i8",c);tw=e([84,114,97,110,115,108,97,116,101,32,39,37,115,39,10,0],"i8",c);vw=e([228,0,235,0,239,0,246,0,252,0,255,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Ig=e(160,"i8",c);Hw=e([37,115,32,0],"i8",c);Iw=e([82,101,112,108,97,99,101,58,32,37,115,32,32,37,115,10,0],"i8",c);jk=e(8,"i32",c);li=e(12,"i8",c);Kp=e(8,"i8*",c);ME=e([105,111,110,0],"i8",c);Sf=e(32,"i8*",c);NE=e([99,0],"i8",c);OE=e([114,115,0],"i8",c);PE=e([105,114,0],"i8",c);QE=e([117,114,0],"i8",c);RE=e([97,116,104,0],"i8",c);SE=e([110,115,0],"i8",c);TE=e([117,0],"i8",c);Ow=e([97,100,100,32,101,10,0],"i8",c);Pw=e([101,115,0],"i8",c);Jw=e([70,108,97,103,115,58,32,32,37,115,32,32,37,115,10,0],"i8",c);Kw=e([70,111,117,110,100,58,32,39,37,115,32,37,115,0],"i8",c);Lw=e([70,111,117,110,100,58,32,39,37,115,0],"i8",c);Mw=e([39,32,91,37,115,93,32,32,37,115,10,0],"i8",c);Hf=e(16,["i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0],c);Fw=e([37,51,100,9,37,115,32,91,37,115,93,10,0],"i8",c);gw=e([66,97,100,32,114,117,108,101,115,32,100,97,116,97,32,105,110,32,39,37,115,95,100,105,99,116,39,32,97,116,32,48,120,37,120,10,0],"i8",c);wn=e([255,253,250,248,246,244,242,240,238,236,234,232,230,228,226,224,222,220,218,216,214,212,210,208,206,204,202,200,198,196,194,192,190,188,186,184,182,180,178,176,174,172,170,168,166,164,162,160,158,156,154,152,150,148,146,144,142,140,138,136,134,132,130,128,126,124,122,120,118,116,114,112,110,108,106,104,102,100,98,96,94,92,90,88,86,84,82,80,78,76,74,72,70,68,66,64,62,60,58,56,54,52,50,48,46,44,42,40,38,36,34,32,30,28,26,24,22,20,18,16,14,12,10,8,6,4,2,0],"i8",c);wt=e([0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,253,255],"i8",c);UE=e([255,244,234,224,214,204,195,186,177,168,159,151,143,135,127,120,113,106,99,92,86,80,74,68,63,57,52,47,43,38,34,30,26,23,19,16,13,11,8,6,4,2,1,0,0,0,0,0,0,0,1,2,3,4,5,7,8,10,12,14,16,19,21,23,26,29,31,34,37,40,44,46,48,50,52,54,57,59,61,64,66,69,71,74,76,79,81,84,87,90,93,95,98,101,104,107,110,113,116,120,123,126,129,133,136,139,143,146,150,153,157,160,164,168,172,175,179,183,187,191,195,199,203,207,211,215,219,224],"i8",c);VE=e([207,204,201,198,195,192,189,185,180,176,171,167,162,156,151,146,140,134,129,123,117,111,105,99,93,87,80,74,68,62,56,51,45,39,34,28,23,18,13,8,4,2,2,1,0,0,0,0,0,1,1,2,3,4,5,7,8,10,12,13,15,18,20,22,25,27,30,33,36,39,42,45,48,52,54,56,58,60,63,65,67,70,72,75,77,80,82,85,88,90,93,96,99,102,105,108,111,114,117,120,123,126,129,133,136,139,143,146,150,153,157,160,164,168,172,175,179,183,187,191,195,199,203,207,211,215,219,224],"i8",c);WE=e([255,249,244,238,233,228,223,218,213,208,203,198,193,189,184,179,175,170,166,161,157,153,149,144,140,136,132,128,125,121,117,113,110,106,103,99,96,93,89,86,83,80,77,74,71,68,65,62,60,57,55,52,50,47,45,43,40,38,36,34,32,30,28,26,25,23,21,20,18,17,15,14,13,12,10,9,8,7,6,5,5,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,21,23,24,26,28,30,32],"i8",c);XE=e([208,206,205,204,202,200,199,197,195,193,192,189,187,184,181,179,176,173,170,167,163,160,157,153,150,146,143,139,135,132,128,124,120,116,112,109,105,101,97,93,89,85,81,77,74,70,66,62,59,55,52,49,47,45,42,40,38,36,34,32,30,28,26,25,23,21,20,18,17,15,14,13,12,10,9,8,7,6,5,5,4,3,2,2,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,2,2,3,4,4,5,6,7,8,9,10,11,12,14,15,16,18,19,21,23,24,26,28,30,32],"i8",c);xt=e([152,153,153,154,156,157,159,161,164,167,169,172,176,179,182,186,190,193,197,201,205,209,212,216,220,223,227,230,234,237,240,242,245,247,249,251,252,253,254,254,255,255,255,255,255,255,254,253,251,250,248,246,243,241,238,236,233,230,228,224,221,218,215,211,208,204,200,196,192,188,184,180,176,172,167,163,159,154,150,145,141,136,132,127,123,118,114,109,105,101,96,92,88,84,80,76,72,68,64,60,57,53,50,47,43,40,38,35,32,29,26,23,21,18,15,13,10,8,7,5,3,2,1,0,0,0,0,0],"i8",c);yt=e([254,255,255,255,255,255,254,253,252,250,248,246,244,241,238,235,232,229,225,222,218,214,210,205,201,196,191,186,182,176,171,166,161,156,150,145,139,134,128,123,117,111,106,100,95,89,84,79,73,68,63,58,53,48,43,38,34,29,25,21,17,13,10,7,4,3,1,0,0,0,0,0,0,0,0,1,1,2,4,5,7,9,11,13,16,18,21,24,27,30,34,37,41,45,49,53,58,62,67,72,76,81,87,91,94,98,101,104,107,110,113,116,118,120,123,124,126,128,129,130,131,131,132,132,131,131,130,129],"i8",c);zt=e([114,114,113,113,112,111,109,108,106,104,102,100,97,95,92,90,87,84,81,78,75,72,69,66,63,59,56,53,50,47,44,41,38,35,32,29,27,24,22,20,18,16,14,12,11,10,9,8,7,7,7,7,7,6,5,5,5,5,5,5,5,5,5,6,7,7,8,9,10,12,13,15,16,18,20,22,24,27,29,32,35,38,41,44,47,51,55,59,63,67,71,76,81,86,91,96,101,106,111,116,121,127,132,137,143,149,155,161,167,173,179,186,192,199,206,213,220,227,234,241,245,247,250,252,253,254,255,255],"i8",c);At=e([254,254,253,253,252,251,251,250,250,249,248,248,247,247,246,246,245,244,244,243,243,242,242,241,240,240,239,238,238,237,236,235,234,234,233,232,231,230,229,228,227,226,225,224,222,221,220,219,217,216,214,213,211,210,208,206,204,203,201,199,197,195,192,190,188,185,183,181,178,175,173,170,167,164,161,158,154,151,148,144,141,137,133,129,125,121,117,113,109,104,100,97,94,91,87,84,81,77,74,70,67,64,60,57,53,50,46,42,39,35,31,28,24,20,17,13,11,9,7,5,4,3,2,1,0,0,0,0],"i8",c);Bt=e([0,0,0,0,1,1,1,2,2,3,3,4,4,5,6,6,7,8,8,9,10,11,12,12,13,14,15,16,17,18,19,20,22,23,24,25,27,28,29,31,32,34,35,37,38,40,41,43,45,47,48,50,52,54,56,58,60,62,64,66,68,71,73,75,78,80,82,85,87,90,93,95,98,101,103,106,109,112,115,118,121,124,127,130,134,137,140,144,147,150,154,157,160,163,166,169,172,175,178,181,184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,228,231,233,236,238,240,242,244,246,248,250,251,253],"i8",c);Ct=e([127,127,127,128,129,131,132,135,137,140,143,146,150,153,157,161,165,170,174,178,183,187,192,197,201,205,210,214,218,222,226,230,234,237,240,243,245,248,250,251,252,253,254,254,253,252,251,249,247,244,240,236,231,226,220,213,206,198,189,180,169,158,146,136,130,125,119,114,108,102,96,90,84,78,73,66,60,55,50,45,40,36,31,27,24,20,17,14,12,9,7,6,5,4,4,4,4,5,6,8,10,13,16,20,24,29,35,41,47,55,62,71,80,90,100,112,124,131,133,136,138,140,142,143,145,146,147,147],"i8",c);xb=e(80,"i8*",c);Rw=e([0,64,8,0,70,18,0,0,0,0,0,0,24,12,0,oe,4,80,18,6,78,22,0,0,0,0,0,0,34,52,0,oe,4,88,22,6,82,22,0,0,0,0,0,0,34,64,0,oe,0,92,8,0,92,80,0,0,0,0,0,0,76,8,1,oe,0,86,4,0,94,66,0,0,0,0,0,0,34,10,0,oe,0,62,10,0,62,20,0,0,0,0,0,0,28,16,0,oe,4,68,18,6,68,22,0,0,0,0,0,0,30,44,0,oe,6,64,16,0,66,32,0,0,0,0,0,0,32,18,0,oe,2,68,46,0,42,32,0,0,0,0,0,0,46,58,0,oe,4,78,24,6,72,22,0,0,0,0,0,0,42,52,0,oe,4,88,34,0,64,32,0,0,0,0,0,0,46,82,0,oe,0,56,12,0,56,20,0,0,0,0,0,0,24,12,0,oe,0,70,18,0,70,24,0,0,0,0,0,0,32,20,0,oe],["i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i16*",0,0,0,"i8","i8","i8","i8"],c);RA=e([0,1,2,3,0,4,0,1,2,3,0,4,5,6,2,3,0,4,5,7,1,3,0,4,8,9,10,3,0,0,8,8,10,3,0,0,11,11,11,11,0,0,12,12,12,12,0,0],"i8",c);oq=e(1,"i32",c);jm=e(1,"%struct.TUNE*",c);za=e(1,"%struct.SYLLABLE*",c);hj=e(1,"i1",c);tb=e([46,57,78,50,0,0,0,0,3,7,5,0,0,0,0,0,46,57,78,46,0,0,0,0,3,7,5,0,0,0,0,0,46,57,78,46,0,0,0,0,3,7,5,0,0,0,0,0,46,57,90,50,0,0,0,0,3,9,5,0,0,0,0,0,46,57,78,50,0,0,0,0,3,7,5,0,0,0,0,0,46,57,74,55,0,0,0,0,4,7,5,0,0,0,0,0,46,57,74,55,0,0,0,0,4,7,5,0,0,0,0,0,46,57,74,55,0,0,0,0,4,7,5,0,0,0,0,0,46,57,78,50,0,0,0,0,3,7,5,0,0,0,0,0,46,57,78,46,0,0,0,0,3,7,5,0,0,0,0,0,46,57,78,50,0,0,0,0,3,7,5,0,0,0,0,0,34,41,41,32,0,0,0,0,3,7,5,0,0,0,0,0,46,57,55,50,0,0,0,0,3,7,5,0,0,0,0,0],["i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0,"i8","i8","i8","i8","i32*",0,0,0,"i8","i8","i8",0,"i8*",0,0,0],c);Tf=e(1,"i32",c);gj=e(1,"i32",c);Fd=e(1,"i32",c);Dl=e(1,"i32",c);mi=e(1,"i32",c);Sw=e([230,32,20,8,0],"i8",c);Xr=e([6,0,0,0,7,0,0,0,9,0,0,0,9,0,0,0,20,0,0,0,20,0,0,0,20,0,0,0,25,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Jd=e([9,0,0,0,9,0,0,0,16,0,0,0,16,0,0,0,16,0,0,0,23,0,0,0,55,0,0,0,32,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Kh=e([0,40,24,8,0],"i8",c);YE=e([10,52,32,20,10],"i8",c);Bj=e([6,38,24,14,4],"i8",c);qh=e(1,"i32",c);mk=e(1,"i8*",c);Jg=e(1,"%struct.__sFILE*",c);Lg=e(1,"i8*",c);lj=e(1,"i32*",c);Sm=e(1,"i8*",c);lf=e(1,"i32",c);Vf=e(1520,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],c);Mm=e(40,"i8",c);dl=e(1280,"i32",c);Qo=e([0,0,0,0,175,0,0,0,100,0,0,0,50,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);ij=e([1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,254,255,1,255,1,255,1,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,1,255,1,255,1,255,255,255,210,1,255,1,255,206,1,255,205,205,1,255,255,79,202,203,1,255,205,207,255,211,209,1,255,255,255,211,213,255,214,1,255,1,255,1,255,218,1,255,218,255,255,1,255,218,1,255,217,217,1,255,1,255,219,1,255,255,255,1,255,255,255,255,255,255,255,2,1,255,2,1,255,2,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,2,1,255,1,255,255,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,255,0,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255],"i8",c);lk=e(1,"i32",c);ni=e(1,"i1",c);ZE=e([115,112,101,97,107,0],"i8",c);$E=e([118,111,105,99,101,0],"i8",c);aF=e([112,114,111,115,111,100,121,0],"i8",c);bF=e([115,97,121,45,97,115,0],"i8",c);cF=e([109,97,114,107,0],"i8",c);Yq=e([115,0],"i8",c);dF=e([112,0],"i8",c);eF=e([112,104,111,110,101,109,101,0],"i8",c);fF=e([115,117,98,0],"i8",c);gF=e([116,116,115,58,115,116,121,108,101,0],"i8",c);hF=e([97,117,100,105,111,0],"i8",c);iF=e([101,109,112,104,97,115,105,115,0],"i8",c);jF=e([98,114,101,97,107,0],"i8",c);kF=e([109,101,116,97,100,97,116,97,0],"i8",c);lF=e([98,114,0],"i8",c);mF=e([108,105,0],"i8",c);nF=e([100,100,0],"i8",c);oF=e([105,109,103,0],"i8",c);pF=e([116,100,0],"i8",c);qF=e([104,49,0],"i8",c);rF=e([104,50,0],"i8",c);sF=e([104,51,0],"i8",c);tF=e([104,52,0],"i8",c);uF=e([104,114,0],"i8",c);vF=e([115,99,114,105,112,116,0],"i8",c);wF=e([115,116,121,108,101,0],"i8",c);xF=e([102,111,110,116,0],"i8",c);yF=e([98,0],"i8",c);zF=e([105,0],"i8",c);ro=e([115,116,114,111,110,103,0],"i8",c);AF=e([101,109,0],"i8",c);BF=e([99,111,100,101,0],"i8",c);Eb=e([0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);sh=e(1,"i32",c);Uf=e(1,"i32",c);CF=e([103,116,0],"i8",c);DF=e([108,116,0],"i8",c);EF=e([97,109,112,0],"i8",c);FF=e([113,117,111,116,0],"i8",c);GF=e([110,98,115,112,0],"i8",c);HF=e([97,112,111,115,0],"i8",c);sj=e([0,0,0,0,62,0,0,0,0,0,0,0,57404,0,0,0,0,0,0,0,38,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,39,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);Um=e(24,"i8",c);Eh=e([-1],["i32",0,0,0,0],c);Rm=e(1,"i1",c);ag=e(1,"i32",c);io=e(1,"i32",c);Sy=e([37,115,37,99,37,99,0],"i8",c);si=e(1,"i32",c);uj=e(1,"i1",c);Ar=e([44,0,46,0,63,0,33,0,58,0,59,0,8211,0,8212,0,8230,0,894,0,903,0,2404,0,1417,0,1373,0,1372,0,1374,0,1371,0,2843,0,1567,0,4962,0,4963,0,4964,0,4965,0,4966,0,4967,0,4968,0,4347,0,12289,0,12290,0,-255,0,-244,0,-242,0,-230,0,-229,0,-225,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Br=e([0,0,0,0,266260,0,0,0,524328,0,0,0,532520,0,0,0,536621,0,0,0,262174,0,0,0,266270,0,0,0,266270,0,0,0,266270,0,0,0,2396190,0,0,0,532520,0,0,0,266270,0,0,0,557096,0,0,0,557096,0,0,0,266260,0,0,0,1585197,0,0,0,1581096,0,0,0,1572904,0,0,0,266270,0,0,0,532520,0,0,0,524328,0,0,0,266260,0,0,0,266270,0,0,0,262174,0,0,0,262174,0,0,0,532520,0,0,0,524358,0,0,0,524358,0,0,0,299028,0,0,0,557096,0,0,0,569389,0,0,0,299028,0,0,0,557096,0,0,0,294942,0,0,0,299038,0,0,0,565288,0,0,0,266270,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Mr=e([32,32,32,0],"i8",c);pz=e([8204,0,8205,0,0,0],["i16",0,"i16",0,"i16",0],c);vz=e([105,32,0],"i8",c);jo=e(1,"i1",c);kj=e(60,"i32",c);Yc=e(1,"i32",c);Yf=e(1,"i32",c);vj=e(1,"i8*",c);nk=e(60,"i8",c);Yw=e([91,2,95,94,95,37,115,32,37,115,32,95,94,95,37,115,93,93,0],"i8",c);Zw=e([91,2,37,115,93,93,32,0],"i8",c);$w=e([91,2,40,88,49,41,40,88,49,41,40,88,49,41,93,93,0],"i8",c);bs=e(5,"i8",c);rz=e([1,37,100,73,32,0],"i8",c);Gs=e([32,37,115,0],"i8",c);sz=e([1,43,49,48,83,0],"i8",c);tz=e([32,1,45,49,48,83,0],"i8",c);uz=e([32,37,115,32,37,100,32,37,115,0],"i8",c);cx=e([37,115,37,99,115,111,117,110,100,105,99,111,110,115,37,99,37,115,0],"i8",c);dx=e([112,111,108,121,112,104,97,115,101,0],"i8",c);ex=e([47,116,109,112,47,101,115,112,101,97,107,88,88,88,88,88,88,0],"i8",c);fx=e([115,111,120,32,34,37,115,34,32,45,114,32,37,100,32,45,119,32,45,115,32,45,99,49,32,37,115,32,37,115,10,0],"i8",c);qz=e([91,2,37,115,93,93,0],"i8",c);Vm=e([0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);bm=e([110,111,110,101,0],"i8",c);IF=e([97,108,108,0],"i8",c);JF=e([115,111,109,101,0],"i8",c);Ol=e([0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);KF=e([110,111,0],"i8",c);LF=e([115,112,101,108,108,105,110,103,0],"i8",c);MF=e([105,99,111,110,0],"i8",c);tj=e([0,0,0,0,18,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,36,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,193,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);NF=e([99,104,97,114,97,99,116,101,114,115,0],"i8",c);OF=e([116,116,115,58,99,104,97,114,0],"i8",c);PF=e([116,116,115,58,107,101,121,0],"i8",c);QF=e([116,116,115,58,100,105,103,105,116,115,0],"i8",c);RF=e([116,101,108,101,112,104,111,110,101,0],"i8",c);Ds=e([0,0,0,0,1,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);SF=e([103,108,121,112,104,115,0],"i8",c);Ak=e([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);TF=e([120,45,119,101,97,107,0],"i8",c);UF=e([119,101,97,107,0],"i8",c);Cj=e([109,101,100,105,117,109,0],"i8",c);VF=e([120,45,115,116,114,111,110,103,0],"i8",c);Ql=e([0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);WF=e([114,101,100,117,99,101,100,0],"i8",c);XF=e([109,111,100,101,114,97,116,101,0],"i8",c);yk=e(20,"i8*",c);YF=e([114,97,116,101,0],"i8",c);ZF=e([118,111,108,117,109,101,0],"i8",c);$F=e([114,97,110,103,101,0],"i8",c);Ty=e([0,1,1,1,1,0,0,0,0,1,1,0,1,0,1,0,0,0,0],"i8",c);Uy=e([102,105,101,108,100,0],"i8",c);Vy=e([109,111,100,101,0],"i8",c);Wy=e([112,117,110,99,116,117,97,116,105,111,110,0],"i8",c);Xy=e([99,97,112,105,116,97,108,95,108,101,116,116,101,114,115,0],"i8",c);Yy=e([108,101,118,101,108,0],"i8",c);Zy=e([50,50,40,70,90,90],"i8",c);$y=e([100,100,70,110,140,140],"i8",c);az=e([105,110,116,101,114,112,114,101,116,45,97,115,0],"i8",c);bz=e([102,111,114,109,97,116,0],"i8",c);cz=e([100,101,116,97,105,108,0],"i8",c);dz=e([37,99,37,100,89,0],"i8",c);Es=e(1,"i32",c);ez=e([97,108,105,97,115,0],"i8",c);fz=e([37,99,37,100,77,0],"i8",c);gz=e([115,114,99,0],"i8",c);hz=e([37,115,47,37,115,0],"i8",c);iz=e([37,99,37,100,73,0],"i8",c);jz=e([37,99,37,100,85,0],"i8",c);kz=e([115,116,114,101,110,103,116,104,0],"i8",c);mz=e([0,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,40,0,0,0,80,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);lz=e([37,99,37,100,66,0],"i8",c);nz=e([116,105,109,101,0],"i8",c);oz=e([120,109,108,58,98,97,115,101,0],"i8",c);oi=e([0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);aG=e([110,101,117,116,114,97,108,0],"i8",c);kx=e([120,109,108,58,108,97,110,103,0],"i8",c);lx=e([97,103,101,0],"i8",c);uh=e([-1],["i32",0,0,0,0],c);bG=e([115,112,97,99,101,32,0],"i8",c);cG=e([116,97,98,32,0],"i8",c);dG=e([117,110,100,101,114,115,99,111,114,101,32,0],"i8",c);eG=e([100,111,117,98,108,101,45,113,117,111,116,101,32,0],"i8",c);zk=e([0,0,0,0,57376,0,0,0,0,0,0,0,57353,0,0,0,0,0,0,0,57439,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);Fb=e([0,0,0,0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,65,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,150,0,0,0,0,0,0,0,230,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);fG=e([115,105,108,101,110,116,0],"i8",c);gG=e([120,45,115,111,102,116,0],"i8",c);hG=e([115,111,102,116,0],"i8",c);iG=e([108,111,117,100,0],"i8",c);jG=e([120,45,108,111,117,100,0],"i8",c);Vg=e([0,0,0,0,100,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,80,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,125,0,0,0,0,0,0,0,160,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);kG=e([120,45,115,108,111,119,0],"i8",c);lG=e([115,108,111,119,0],"i8",c);mG=e([102,97,115,116,0],"i8",c);nG=e([120,45,102,97,115,116,0],"i8",c);Wg=e([0,0,0,0,100,0,0,0,0,0,0,0,70,0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,110,0,0,0,0,0,0,0,120,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);Dt=e([120,45,108,111,119,0],"i8",c);Et=e([108,111,119,0],"i8",c);Ft=e([104,105,103,104,0],"i8",c);Gt=e([120,45,104,105,103,104,0],"i8",c);Ai=e([0,0,0,0,100,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,50,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,140,0,0,0,0,0,0,0,180,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);Pl=e(20,"%struct.MNEM_TAB*",c);hx=e([0,83,65,80,82,0,67,0,0,0,0,0,70,0,0],"i8",c);ix=e([37,99,37,100,37,99,0],"i8",c);gx=e(4,"i32",c);th=e(1,"i32",c);e([0,128,32,48],"i8",c);ok=e([130],["i32",0,0,0,0],c);Om=e([121],["i32",0,0,0,0],c);eo=e([118],["i32",0,0,0,0],c);nx=e([255,255,255,255,255,253,249,245,242,238,235,232,228,225,222,218,216,213,210,207,204,201,198,196,193,191,188,186,183,181,179,176,174,172,169,168,165,163,161,159,158,155,153,152,150,148,146,145,143,141,139,137,136,135,133,131,130,129,127,126,124,123,122,120,119,118,117,115,114,113,112,111,110,109,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,89,88,87,86,85,84,83,82,82,81,80,80,79,78,77,76,76,75,75,74,73,72,71,71,70,69,69,68,67,67,66,66,65,64,64,63,62,62,61,61,60,59,59,58,58,57,57,56,56,55,54,54,53,53,52,52,52,51,50,50,49,49,48,48,47,47,46,46,46,45,45,44,44,44,43,43,42,41,40,40,40,39,39,39,38,38,38,37,37,37,36,36,35,35,35,35,34,34,34,33,33,33,32,32,31,31,31,30,30,30,29,29,29,29,28,28,27,27,27,27,26,26,26,26,25,25,25,24,24,24,24,23,23,23,23,22,22,22,21,21,21,21,20,20,20,20,19,19,19,18,18,17,17,17,16,16,16,16,16,16,15,15,15,15,14,14,14,13,13,13,12,12,12,12,11,11,11,11,10,10,10,9,9,9,8,8,8],"i8",c);ox=e([120,121,120,119,119,118,118,117,116,116,115,114,113,112,112,111,111,110,109,108,107,106,106,104,103,103,102,102,102,101,101,99,98,98,97,96,96,95,94,93,91,90,91,90,89,88,86,85,86,85,85,84,82,81,80,79,77,78,78,76,77,75,75,74,73,71,72,70,69,69,69,67,65,64,63,63,63,61,61,59,59,59,58,56,57,58,56,54,53,52,52,53,52,52,50,48,47,47,45,46,45],"i8",c);px=e([22,22,22,22,22,22,22,21,21,21,21,20,20,19,19,18,17,16,15,15,15,15,15,15,15],"i8",c);yf=e(1,"i32",c);Ez=e([101,115,112,101,97,107,58,32,66,97,100,32,105,110,116,111,110,97,116,105,111,110,32,100,97,116,97,10,0],"i8",c);qx=e([870,0,358,0,614,0,1190,0,678,0,1062,0,-30042,0,552,0,874,0,362,0,618,0,682,0,878,0,366,0,622,0,686,0,41,0,1203,0,884,0,372,0,628,0,1204,0,692,0,0,0,1140,0,890,0,378,0,634,0,698,0,382,0,57,0,702,0,0,0,934,0,0,0,422,0,0,0,998,0,0,0,360,0,0,0,616,0,0,0,808,0,0,0,488,0,0,0,489,0,0,0,1129,0,0,0,938,0,0,0,426,0,0,0,810,0,0,0,1002,0,0,0,490,0,0,0,620,0,0,0,428,0,0,0,812,0,0,0,556,0,0,0,621,0,0,0,1133,0,0,0,1198,0,0,0,942,0,0,0,430,0,0,0,1006,0,0,0,46,0,0,0,-29714,0,0,0,623,0,0,0,560,0,48,0,0,0,369,0,0,0,561,0,0,0,497,0,0,0,817,0,0,0,1137,0,0,0,371,0,0,0,563,0,0,0,499,0,51,0,0,0,51,0,0,0,948,0,0,0,436,0,0,0,756,0,0,0,-30028,0,0,0,375,0,0,0,567,0,0,0,503,0,0,0,376,0,0,0,632,0,0,0,568,0,0,0,504,0,0,0,569,0,0,0,505,0,0,0,1145,0,0,0,1210,0,0,0,954,0,0,0,442,0,0,0,1082,0,0,0,762,0,0,0,1018,0,0,0,636,0,0,0,638,0,0,0,0,0,383,0,0,0,831,0,0,0,511,0,56,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);rx=e([166,0,1,0,129,0,1383,0,0,0,296,0,1321,0,1385,0,234,0,0,0,1346,0,0,0,195,0,7491,0,0,0,1263,0,1388,0,44,0,108,0,4,0,0,0,173,0,1389,0,0,0,1262,0,5,0,110,0,1201,0,1265,0,1329,0,-28687,0,178,0,0,0,1394,0,0,0,1331,0,115,0,1268,0,-25932,0,0,0,8,0,183,0,0,0,5431,0,0,0,1335,0,0,0,205,0,119,0,2231,0,1336,0,0,0,0,0,201,0,265,0,185,0,1337,0,1274,0,10,0,1403,0,187,0,188,0,190,0,126,0,1343,0,319,0,0,0,267,0,0,0,204,0,140,0,0,0,0,0,103,0,0,0,3436,0,109,0,303,0,176,0,113,0,1398,0,1100,0,7244,0,-28695,0,0,0,-12311,0,-29127,0,0,0,-12743,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);sx=e([0,0,945,0,601,0,603,0,947,0,953,0,339,0,969,0,966,0,643,0,965,0,658,0,660,0,638,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);ub=e([0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);ux=e([37,115,37,99,37,115,37,99,37,115,37,115,0],"i8",c);wx=e([37,115,37,99,37,99,37,115,0],"i8",c);vx=e([37,99,37,115,37,99,37,115,37,99,0],"i8",c);be=e(10,"i8",c);xx=e([95,35,37,100,32,0],"i8",c);es=e([95,99,97,112,0],"i8",c);zx=e([37,99,101,110,0],"i8",c);Ax=e([95,63,65,0],"i8",c);Xq=e([95,63,63,0],"i8",c);fs=e([37,120,0],"i8",c);gs=e([37,99,37,115,37,115,0],"i8",c);Ks=e([105,120,99,109,118,108,100,0],"i8",c);Nz=e([1,0,0,0,10,0,0,0,100,0,0,0,1E3,0,0,0,5,0,0,0,50,0,0,0,500,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Oz=e([95,114,111,109,97,110,0],"i8",c);Pz=e([32,32,37,100,32,32,32,32,0],"i8",c);Kx=e([11,0],"i8",c);vh=e(1,"i32",c);pi=e(1,"i8*",c);uf=e(1,"i32",c);wh=e(1,"i32",c);Mg=e(12,"i8",c);Fx=e([95,35,37,115,0],"i8",c);mj=e([95,48,0],"i8",c);hs=e([95,100,112,116,0],"i8",c);Pm=e([95,48,77,37,100,0],"i8",c);Hx=e([95,46,0],"i8",c);xh=e([37,115,37,115,37,115,37,115,0],"i8",c);Ix=e([95,48,90,37,100,0],"i8",c);Jx=e([95,100,112,116,50,0],"i8",c);is=e([95,37,100,102,0],"i8",c);cy=e([95,37,100,37,99,120,0],"i8",c);js=e([95,37,100,37,99,0],"i8",c);ks=e([95,37,100,101,0],"i8",c);ls=e([95,37,100,97,0],"i8",c);ms=e([95,37,100,0],"i8",c);dy=e([95,37,100,88,37,99,0],"i8",c);ns=e([95,37,100,88,0],"i8",c);ey=e([95,111,114,100,50,48,0],"i8",c);fy=e([95,111,114,100,0],"i8",c);nj=e([95,48,97,110,100,0],"i8",c);Xx=e([95,48,67,111,0],"i8",c);Yx=e([95,48,67,48,0],"i8",c);Zx=e([95,48,67,0],"i8",c);$x=e([95,37,100,67,111,0],"i8",c);ay=e([95,37,100,67,48,0],"i8",c);by=e([95,37,100,67,0],"i8",c);Lx=e([95,37,100,77,37,100,111,0],"i8",c);Mx=e([95,37,100,77,37,100,101,0],"i8",c);Nx=e([95,37,100,77,37,100,120,0],"i8",c);Ox=e([95,37,100,77,37,100,0],"i8",c);Px=e([95,48,111,102,0],"i8",c);Qx=e([95,37,115,37,100,111,0],"i8",c);Rx=e([95,37,115,37,100,101,0],"i8",c);Sx=e([95,37,115,37,100,120,0],"i8",c);Tx=e([95,37,115,37,100,0],"i8",c);Ux=e([95,48,77,50,0],"i8",c);Vx=e([95,37,100,77,49,0],"i8",c);Wx=e([95,48,77,49,0],"i8",c);os=e([48,77,65,0],"i8",c);gy=e([49,77,65,0],"i8",c);hy=e([48,77,0],"i8",c);oG=e([95,108,105,103,0],"i8",c);pG=e([95,115,109,99,0],"i8",c);qG=e([95,116,117,114,0],"i8",c);rG=e([95,114,101,118,0],"i8",c);sG=e([95,99,114,108,0],"i8",c);tG=e([95,97,99,117,0],"i8",c);uG=e([95,98,114,118,0],"i8",c);vG=e([95,104,97,99,0],"i8",c);wG=e([95,99,101,100,0],"i8",c);xG=e([95,99,105,114,0],"i8",c);yG=e([95,100,105,97,0],"i8",c);zG=e([95,97,99,50,0],"i8",c);AG=e([95,100,111,116,0],"i8",c);BG=e([95,103,114,118,0],"i8",c);CG=e([95,109,99,110,0],"i8",c);DG=e([95,111,103,111,0],"i8",c);EG=e([95,114,110,103,0],"i8",c);FG=e([95,115,116,107,0],"i8",c);GG=e([95,116,108,100,0],"i8",c);HG=e([95,98,97,114,0],"i8",c);IG=e([95,114,102,120,0],"i8",c);JG=e([95,104,111,107,0],"i8",c);Do=e(1,"i32",c);zh=e(1,"%struct.MBROLA_TAB*",c);yh=e(1,"i32",c);jy=e([37,115,47,109,98,114,111,108,97,47,37,115,0],"i8",c);ky=e([47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,37,115,0],"i8",c);ly=e([47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,37,115,47,37,115,0],"i8",c);my=e([47,117,115,114,47,115,104,97,114,101,47,109,98,114,111,108,97,47,118,111,105,99,101,115,47,37,115,0],"i8",c);oy=e([37,115,47,109,98,114,111,108,97,95,112,104,47,37,115,0],"i8",c);qs=e(1,"i32",c);Tc=e(1,"i32",c);ws=e(1,"i32",c);Sp=e(1,"i32",c);My=e([37,115,9,0],"i8",c);xs=e([37,100,9,37,115,0],"i8",c);Ny=e([37,115,9,37,100,9,37,115,0],"i8",c);Oy=e([37,100,10,37,115,9,0],"i8",c);Py=e([37,100,37,115,10,0],"i8",c);Qy=e([95,32,9,37,100,10,0],"i8",c);Vj=e(1,"i32",c);wc=e(50,"i8",c);qy=e([32,48,32,37,100,0],"i8",c);Op=e([32,37,100,32,37,100,0],"i8",c);$o=e([10,0],"i8",c);ry=e([9,49,48,48,32,37,100,10,0],"i8",c);ri=e(1,"i32",c);KG=e([49,46,52,53,46,48,52,32,32,50,53,46,65,112,114,46,49,49,0],"i8",c);zo=e(1,"i8*",c);e([83200],["i32",0,0,0,0],c);Gu=e([-1],["i32",0,0,0,0],c);Li=e(1,"%struct.__sFILE*",c);pq=e(1,"i32",c);ae=e(1,"i32",c);ss=e(1,"i32",c);Z=e(1024,"%struct.PHONEME_TAB*",c);ts=e(256,"i8",c);im=e(1,"i16*",c);Jj=e(1,"i8*",c);Kj=e(1,"i8*",c);on=e(1,"i8*",c);Lj=e(1,"i32",c);Me=e(4800,["i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","%struct.PHONEME_TAB*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);pn=e(1,"i32",c);pj=e(1,"i32",c);go=e(1,"i32",c);e(1,"i32",c);e(1,"i32",c);Gd=e(1,"i32",c);vs=e(16,"i32",c);e(1,"i32",c);e(1,"i32",c);vu=e([112,104,111,110,116,97,98,0],"i8",c);wu=e([112,104,111,110,105,110,100,101,120,0],"i8",c);xu=e([112,104,111,110,100,97,116,97,0],"i8",c);yu=e([105,110,116,111,110,97,116,105,111,110,115,0],"i8",c);Pg=e(200,["i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0,"i16",0,"i16",0,"%struct.frame_t*",0,0,0],c);uy=e([101,115,112,101,97,107,58,32,78,111,32,101,110,118,101,108,111,112,101,10,0],"i8",c);Bu=e([99,111,110,102,105,103,0],"i8",c);Cu=e([108,111,103,0],"i8",c);Du=e([37,100,32,37,115,0],"i8",c);lq=e([119,0],"i8",c);Fu=e([112,97,95,100,101,118,105,99,101,0],"i8",c);Hu=e([115,111,117,110,100,105,99,111,110,0],"i8",c);Iu=e([95,37,99,32,37,115,0],"i8",c);e(152,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8",0,0],c);zy=e([1,1,1,1,1,1,1,1,1,2,4],"i8",c);Dy=e([0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Cy=e([1,0,0,0,2,0,0,0,4,0,0,0,15,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);By=e([73,110,118,97,108,105,100,32,105,110,115,116,114,117,99,116,105,111,110,32,37,46,52,120,32,102,111,114,32,112,104,111,110,101,109,101,32,39,37,115,39,10,0],"i8",c);gh=e([114,98,0],"i8",c);sy=e([67,97,110,39,116,32,114,101,97,100,32,100,97,116,97,32,102,105,108,101,58,32,39,37,115,39,10,0],"i8",c);Nc=e(1,"i32",c);fc=e(24E3,["i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0,"i8","i8","i8","i8","i16",0,"i16",0,"%struct.PHONEME_TAB*",0,0,0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8",0,0],c);ps=e(1,"i32",c);Hj=e(20,"i8",c);wa=e(64,"i32",c);Lr=e(1,"%struct.voice_t*",c);km=e([4],["i32",0,0,0,0],c);nd=e(1280,["i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0],c);Bh=e(5,"i8",c);Nh=e(1,"i32",c);lm=e(1,"i32",c);Uc=e(1,"%struct.frame_t*",c);dh=e(1,"i32",c);Ky=e([243,0,272,0,256,0,256,0,256,0,256,0,256,0,240,0,240,0,240,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);qi=e(1,"i32",c);ho=e(1,"i1",c);Dh=e(1,"i32",c);jd=e(1,"i32",c);Ng=e(1,"i32",c);Qg=e(1,"i32",c);Ge=e(1,"i32",c);As=e(1,"i32",c);Tp=e(1,"i32",c);qj=e(1,"i32",c);Rg=e(1,"i32",c);Zf=e(1,"i32",c);rj=e(1,"i1",c);Qm=e(1,"i1",c);Sg=e(1,"%struct.__sFILE*",c);wk=e(1,"i8*",c);Hz=e([37,115,10,0],"i8",c);Iz=e([87,97,114,110,105,110,103,58,32,65,99,99,101,110,116,101,100,32,108,101,116,116,101,114,115,32,97,114,101,32,110,111,116,32,114,101,99,111,103,110,105,122,101,100,44,32,101,103,58,32,85,43,48,49,48,68,10,83,101,116,32,76,67,95,67,84,89,80,69,32,116,111,32,97,32,85,84,70,45,56,32,108,111,99,97,108,101,10,0],"i8",c);Hy=e([0,0,64,0,90,0,110,0,128,0,143,0,156,0,169,0,181,0,192,0,202,0,212,0,221,0,230,0,239,0,247,0,256,0,263,0,271,0,278,0,286,0,293,0,300,0,306,0,313,0,320,0,326,0,332,0,338,0,344,0,350,0,356,0,362,0,367,0,373,0,378,0,384,0,389,0,394,0,399,0,404,0,409,0,414,0,419,0,424,0,429,0,434,0,438,0,443,0,448,0,452,0,457,0,461,0,465,0,470,0,474,0,478,0,483,0,487,0,491,0,495,0,499,0,503,0,507,0,512,0,515,0,519,0,523,0,527,0,531,0,535,0,539,0,543,0,546,0,550,0,554,0,557,0,561,0,565,0,568,0,572,0,576,0,579,0,583,0,586,0,590,0,593,0,596,0,600,0,603,0,607,0,610,0,613,0,617,0,620,0,623,0,627,0,630,0,633,0,636,0,640,0,643,0,646,0,649,0,652,0,655,0,658,0,662,0,665,0,668,0,671,0,674,0,677,0,680,0,683,0,686,0,689,0,692,0,695,0,698,0,701,0,704,0,706,0,709,0,712,0,715,0,718,0,721,0,724,0,726,0,729,0,732,0,735,0,738,0,740,0,743,0,746,0,749,0,751,0,754,0,757,0,759,0,762,0,765,0,768,0,770,0,773,0,775,0,778,0,781,0,783,0,786,0,789,0,791,0,794,0,796,0,799,0,801,0,804,0,807,0,809,0,812,0,814,0,817,0,819,0,822,0,824,0,827,0,829,0,832,0,834,0,836,0,839,0,841,0,844,0,846,0,849,0,851,0,853,0,856,0,858,0,861,0,863,0,865,0,868,0,870,0,872,0,875,0,877,0,879,0,882,0,884,0,886,0,889,0,891,0,893,0,896,0,898,0,900,0,902,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Ml=e(1,"i32",c);Gy=e(10240,["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],c);Rb=e(1,"%struct.Translator*",c);tf=e(1,"%struct.Translator*",c);dn=e(20,"i8",c);Le=e(1,"%struct.__sFILE*",c);RC=e(1,"i32",c);rh=e(1,"i32",c);Hd=e(1,"i32",c);Bs=e(1,"i32",c);Gp=e(1,"i32",c);lr=e(1,"i32",c);bl=e(1,"i32",c);Fi=e(1,"i32",c);mg=e(1,"i32",c);Bo=e(1,"i32",c);mr=e(1,"i32",c);lw=e(1,"i32",c);wo=e(1,"i32",c);Wm=e(1,"i32",c);Ym=e(1,"i32",c);Tm=e(1,"i32",c);yr=e(50,"i8",c);xk=e(1,"i32",c);xr=e(1,"i32",c);uk=e(1,"i32",c);Nl=e(1,"i32",c);$f=e(1,"i32",c);ur=e(1,"i32",c);Rl=e(1,"i32",c);Ee=e(1,"i32",c);Ua=e(160,"i8",c);ma=e(1,"i32",c);ab=e(8E3,["i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0,"i8","i8","i8","i8","i16",0,"i16",0],c);ln=e(240,"i32",c);zr=e([1],["i8",0,0,0,0],c);$e=e(1,"i32",c);kn=e(1,"i32",c);vf=e(1E3,"i32",c);Ck=e(1,"i32",c);Dk=e(180,"i8",c);we=e([160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,208,0,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,221,0,222,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,240,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,253,0,254,0,255,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);LG=e([160,0,260,0,728,0,321,0,164,0,317,0,346,0,167,0,168,0,352,0,350,0,356,0,377,0,173,0,381,0,379,0,176,0,261,0,731,0,322,0,180,0,318,0,347,0,711,0,184,0,353,0,351,0,357,0,378,0,733,0,382,0,380,0,340,0,193,0,194,0,258,0,196,0,313,0,262,0,199,0,268,0,201,0,280,0,203,0,282,0,205,0,206,0,270,0,272,0,323,0,327,0,211,0,212,0,336,0,214,0,215,0,344,0,366,0,218,0,368,0,220,0,221,0,354,0,223,0,341,0,225,0,226,0,259,0,228,0,314,0,263,0,231,0,269,0,233,0,281,0,235,0,283,0,237,0,238,0,271,0,273,0,324,0,328,0,243,0,244,0,337,0,246,0,247,0,345,0,367,0,250,0,369,0,252,0,253,0,355,0,729,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);MG=e([160,0,294,0,728,0,163,0,164,0,0,0,292,0,167,0,168,0,304,0,350,0,286,0,308,0,173,0,0,0,379,0,176,0,295,0,178,0,179,0,180,0,181,0,293,0,183,0,184,0,305,0,351,0,287,0,309,0,189,0,0,0,380,0,192,0,193,0,194,0,0,0,196,0,266,0,264,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,0,0,209,0,210,0,211,0,212,0,288,0,214,0,215,0,284,0,217,0,218,0,219,0,220,0,364,0,348,0,223,0,224,0,225,0,226,0,0,0,228,0,267,0,265,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,0,0,241,0,242,0,243,0,244,0,289,0,246,0,247,0,285,0,249,0,250,0,251,0,252,0,365,0,349,0,729,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);NG=e([160,0,260,0,312,0,342,0,164,0,296,0,315,0,167,0,168,0,352,0,274,0,290,0,358,0,173,0,381,0,175,0,176,0,261,0,731,0,343,0,180,0,297,0,316,0,711,0,184,0,353,0,275,0,291,0,359,0,330,0,382,0,331,0,256,0,193,0,194,0,195,0,196,0,197,0,198,0,302,0,268,0,201,0,280,0,203,0,278,0,205,0,206,0,298,0,272,0,325,0,332,0,310,0,212,0,213,0,214,0,215,0,216,0,370,0,218,0,219,0,220,0,360,0,362,0,223,0,257,0,225,0,226,0,227,0,228,0,229,0,230,0,303,0,269,0,233,0,281,0,235,0,279,0,237,0,238,0,299,0,273,0,326,0,333,0,311,0,244,0,245,0,246,0,247,0,248,0,371,0,250,0,251,0,252,0,361,0,363,0,729,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);OG=e([160,0,1025,0,1026,0,1027,0,1028,0,1029,0,1030,0,1031,0,1032,0,1033,0,1034,0,1035,0,1036,0,173,0,1038,0,1039,0,1040,0,1041,0,1042,0,1043,0,1044,0,1045,0,1046,0,1047,0,1048,0,1049,0,1050,0,1051,0,1052,0,1053,0,1054,0,1055,0,1056,0,1057,0,1058,0,1059,0,1060,0,1061,0,1062,0,1063,0,1064,0,1065,0,1066,0,1067,0,1068,0,1069,0,1070,0,1071,0,1072,0,1073,0,1074,0,1075,0,1076,0,1077,0,1078,0,1079,0,1080,0,1081,0,1082,0,1083,0,1084,0,1085,0,1086,0,1087,0,1088,0,1089,0,1090,0,1091,0,1092,0,1093,0,1094,0,1095,0,1096,0,1097,0,1098,0,1099,0,1100,0,1101,0,1102,0,1103,0,8470,0,1105,0,1106,0,1107,0,1108,0,1109,0,1110,0,1111,0,1112,0,1113,0,1114,0,1115,0,1116,0,167,0,1118,0,1119,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);PG=e([160,0,8216,0,8217,0,163,0,8364,0,8367,0,166,0,167,0,168,0,169,0,890,0,171,0,172,0,173,0,0,0,8213,0,176,0,177,0,178,0,179,0,900,0,901,0,902,0,183,0,904,0,905,0,906,0,187,0,908,0,189,0,910,0,911,0,912,0,913,0,914,0,915,0,916,0,917,0,918,0,919,0,920,0,921,0,922,0,923,0,924,0,925,0,926,0,927,0,928,0,929,0,0,0,931,0,932,0,933,0,934,0,935,0,936,0,937,0,938,0,939,0,940,0,941,0,942,0,943,0,944,0,945,0,946,0,947,0,948,0,949,0,950,0,951,0,952,0,953,0,954,0,955,0,956,0,957,0,958,0,959,0,960,0,961,0,962,0,963,0,964,0,965,0,966,0,967,0,968,0,969,0,970,0,971,0,972,0,973,0,974,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);QG=e([160,0,161,0,162,0,163,0,164,0,165,0,166,0,167,0,168,0,169,0,170,0,171,0,172,0,173,0,174,0,175,0,176,0,177,0,178,0,179,0,180,0,181,0,182,0,183,0,184,0,185,0,186,0,187,0,188,0,189,0,190,0,191,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,286,0,209,0,210,0,211,0,212,0,213,0,214,0,215,0,216,0,217,0,218,0,219,0,220,0,304,0,350,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,287,0,241,0,242,0,243,0,244,0,245,0,246,0,247,0,248,0,249,0,250,0,251,0,252,0,305,0,351,0,255,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);RG=e([160,0,7682,0,7683,0,163,0,266,0,267,0,7690,0,167,0,7808,0,169,0,7810,0,7691,0,7922,0,173,0,174,0,376,0,7710,0,7711,0,288,0,289,0,7744,0,7745,0,182,0,7766,0,7809,0,7767,0,7811,0,7776,0,7923,0,7812,0,7813,0,7777,0,192,0,193,0,194,0,195,0,196,0,197,0,198,0,199,0,200,0,201,0,202,0,203,0,204,0,205,0,206,0,207,0,372,0,209,0,210,0,211,0,212,0,213,0,214,0,7786,0,216,0,217,0,218,0,219,0,220,0,221,0,374,0,223,0,224,0,225,0,226,0,227,0,228,0,229,0,230,0,231,0,232,0,233,0,234,0,235,0,236,0,237,0,238,0,239,0,373,0,241,0,242,0,243,0,244,0,245,0,246,0,7787,0,248,0,249,0,250,0,251,0,252,0,253,0,375,0,255,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);SG=e([9552,0,9553,0,9554,0,1105,0,9555,0,9556,0,9557,0,9558,0,9559,0,9560,0,9561,0,9562,0,9563,0,9564,0,9565,0,9566,0,9567,0,9568,0,9569,0,1025,0,9570,0,9571,0,9572,0,9573,0,9574,0,9575,0,9576,0,9577,0,9578,0,9579,0,9580,0,169,0,1102,0,1072,0,1073,0,1094,0,1076,0,1077,0,1092,0,1075,0,1093,0,1080,0,1081,0,1082,0,1083,0,1084,0,1085,0,1086,0,1087,0,1103,0,1088,0,1089,0,1090,0,1091,0,1078,0,1074,0,1100,0,1099,0,1079,0,1096,0,1101,0,1097,0,1095,0,1098,0,1070,0,1040,0,1041,0,1062,0,1044,0,1045,0,1060,0,1043,0,1061,0,1048,0,1049,0,1050,0,1051,0,1052,0,1053,0,1054,0,1055,0,1071,0,1056,0,1057,0,1058,0,1059,0,1046,0,1042,0,1068,0,1067,0,1047,0,1064,0,1069,0,1065,0,1063,0,1066,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);TG=e([32,0,2305,0,2306,0,2307,0,2309,0,2310,0,2311,0,2312,0,2313,0,2314,0,2315,0,2318,0,2319,0,2320,0,2317,0,2322,0,2323,0,2324,0,2321,0,2325,0,2326,0,2327,0,2328,0,2329,0,2330,0,2331,0,2332,0,2333,0,2334,0,2335,0,2336,0,2337,0,2338,0,2339,0,2340,0,2341,0,2342,0,2343,0,2344,0,2345,0,2346,0,2347,0,2348,0,2349,0,2350,0,2351,0,2399,0,2352,0,2353,0,2354,0,2355,0,2356,0,2357,0,2358,0,2359,0,2360,0,2361,0,32,0,2366,0,2367,0,2368,0,2369,0,2370,0,2371,0,2374,0,2375,0,2376,0,2373,0,2378,0,2379,0,2380,0,2377,0,2381,0,2364,0,2404,0,32,0,32,0,32,0,32,0,32,0,32,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,32,0,32,0,32,0,32,0,32,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Xa=e(80,"i16*",c);ud=e(24,"i8*",c);Jz=e([2672,0,2673,0,0,0],["i16",0,"i16",0,"i16",0],c);Kz=e([40,0,41,0,91,0,93,0,123,0,125,0,60,0,62,0,34,0,39,0,96,0,171,0,187,0,12298,0,12299,0,-8132,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Lz=e([0,192,224,240],"i8",c);as=e([255,31,15,7],"i8",c);Yz=e([40,37,115,41,32,37,115,32,32,45,62,32,40,37,115,41,32,0],"i8",c);Zz=e([37,115,10,10,0],"i8",c);Uz=e([0,122,122,0],"i8",c);Tz=e([0,105,122,0],"i8",c);Rz=e([0,115,115,0],"i8",c);Mz=e([95,48,108,97,110,103,0],"i8",c);Qz=e([32,32,115,117,102,102,105,120,32,91,37,115,93,10,10,0],"i8",c);Sz=e([104,115,120,0],"i8",c);pk=e([37,115,37,115,37,115,0],"i8",c);wr=e(1,"i1",c);Cs=e(40,"i8",c);wf=e(1,"i32",c);vr=e(1,"i32",c);td=e(740,"i8",c);wz=e([67,76,65,85,83,69,32,37,120,58,10,0],"i8",c);xz=e([69,78,68,67,76,65,85,83,69,10,0],"i8",c);ko=e(1,"i32",c);wj=e(1,"i32",c);Bk=e(1,"i32",c);Bz=e([95,0,0,0],["i16",0,"i16",0],c);Xm=e(1,"i1",c);Yl=e(1,"i32",c);ne=e(1,"i1",c);Vz=e([87,79,82,68,58,32,102,108,103,61,37,46,53,120,32,108,101,110,61,37,100,32,32,39,0],"i8",c);Wz=e([39,10,0],"i8",c);Xz=e([95,94,95,0],"i8",c);Az=e([0,0,1,170,2,172,173,3,4,5,176,177,178,179,180,180,182,6,7,8,185,9,10,188,12,13,14,15,16,17,18,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117],"i8",c);Cr=e(1,"i1",c);yz=e([80,83,65,82,72,84,73,86,89,77,85,66,70,0],"i8",c);Ht=e([100,120,100,105,100,110,110,100,95,100,105,120,105,110,125,130,135,115,125,100,105,120,75,100,75,105,120,85,75,100,105,120,85,105,95,115,120,100,95,100,110,120,95,105,100,115,120,100,100,100,105,120,100,105,95,115,120,110,95,100,105,120,100,105,105,122,125,110,105,100,105,120,100,105,105,122,125,110,105,100,105,120,95,105,100,115,120,110,100,100,100,120,100,100,100,100,100,100,100,100],"i8",c);UG=e([100,150,100,105,110,115,110,110,110,100,105,150,105,110,125,135,140,115,135,100,105,150,90,105,90,122,135,100,90,100,105,150,100,105,100,122,135,100,100,100,105,150,100,105,105,115,135,110,105,100,105,150,100,105,105,122,130,120,125,100,105,150,100,105,110,122,125,115,110,100,105,150,100,105,105,122,135,120,105,100,105,150,100,105,105,115,135,110,105,100,100,100,100,100,100,100,100,100,100,100],"i8",c);cm=e([110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110],"i8",c);lA=e([35,10,0],"i8",c);mA=e([117,110,97,98,108,101,32,116,111,32,103,101,116,32,46,119,97,118,32,104,101,97,100,101,114,32,102,114,111,109,32,109,98,114,111,108,97,0],"i8",c);nA=e([82,73,70,70,0],"i8",c);oA=e([87,65,86,69,102,109,116,32,0],"i8",c);qA=e([109,98,114,111,108,97,32,100,105,100,32,110,111,116,32,114,101,116,117,114,110,32,97,32,46,119,97,118,32,104,101,97,100,101,114,0],"i8",c);pA=e(1,"i32",c);rk=e(1,"i8*",c);qk=e([1],["float",0,0,0,0],c);Fe=e(1,"i32",c);Tb=e(1,"i32",c);ui=e(1,"i32",c);zs=e([10,35,10,0],"i8",c);Tg=e(1,"i32",c);Xe=e(160,"i8",c);Jk=e(1,"i32",c);zA=e([114,101,97,100,40,101,114,114,111,114,41,58,32,37,115,0],"i8",c);wA=e([71,111,116,32,97,32,114,101,115,101,116,32,115,105,103,110,97,108,0],"i8",c);xA=e([73,110,112,117,116,32,70,108,117,115,104,32,83,105,103,110,97,108,0],"i8",c);yA=e([109,98,114,111,108,97,58,32,37,115,0],"i8",c);EA=e([109,98,114,111,108,97,32,99,108,111,115,101,100,32,115,116,100,101,114,114,32,97,110,100,32,100,105,100,32,110,111,116,32,101,120,105,116,0],"i8",c);AA=e([119,97,105,116,112,105,100,40,41,32,105,115,32,99,111,110,102,117,115,101,100,0],"i8",c);BA=e([109,98,114,111,108,97,32,100,105,101,100,32,98,121,32,115,105,103,110,97,108,32,37,100,0],"i8",c);CA=e([109,98,114,111,108,97,32,101,120,105,116,101,100,32,119,105,116,104,32,115,116,97,116,117,115,32,37,100,0],"i8",c);DA=e([109,98,114,111,108,97,32,100,105,101,100,32,97,110,100,32,119,97,105,116,32,115,116,97,116,117,115,32,105,115,32,119,101,105,114,100,0],"i8",c);Ps=e([109,98,114,111,119,114,97,112,32,101,114,114,111,114,58,32,37,115,0],"i8",c);FA=e([44,32,40,37,115,41,0],"i8",c);ld=e(1,"%struct.datablock*",c);vi=e(1,"%struct.datablock*",c);sA=e([112,111,108,108,40,41,58,32,37,115,0],"i8",c);tA=e([109,98,114,111,108,97,32,112,114,111,99,101,115,115,32,105,115,32,115,116,97,108,108,101,100,0],"i8",c);Os=e([119,114,105,116,101,40,41,58,32,37,115,0],"i8",c);uA=e([114,101,97,100,40,41,58,32,37,115,0],"i8",c);Ik=e(1,"i32",c);$z=e([109,98,114,111,108,97,32,105,110,105,116,32,114,101,113,117,101,115,116,32,119,104,101,110,32,97,108,114,101,97,100,121,32,105,110,105,116,105,97,108,105,122,101,100,0],"i8",c);bA=e([102,111,114,107,40,41,58,32,37,115,0],"i8",c);cA=e([100,117,112,50,40,41,58,32,37,115,10,0],"i8",c);dA=e([37,103,0],"i8",c);eA=e([45,101,0],"i8",c);fA=e([45,118,0],"i8",c);gA=e([45,46,119,97,118,0],"i8",c);hA=e([109,98,114,111,108,97,58,32,37,115,10,0],"i8",c);iA=e([47,112,114,111,99,47,37,100,47,115,116,97,116,0],"i8",c);jA=e([47,112,114,111,99,32,105,115,32,117,110,97,99,99,101,115,115,105,98,108,101,58,32,37,115,0],"i8",c);kA=e([102,99,110,116,108,40,41,58,32,37,115,0],"i8",c);aA=e([112,105,112,101,40,41,58,32,37,115,0],"i8",c);GA=e([2,3,88,89,90,91,92,93,94,95],"i8",c);Ts=e([190,0,170,0,190,0,200,0,0,0,0,0,190,0,240,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Us=e([18,16,18,18,18,18,18,18],"i8",c);hC=e([17,17,20,20,20,22,22,21],"i8",c);gC=e([190,0,190,0,210,0,210,0,0,0,0,0,210,0,210,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Kk=e([200,0,200,0,210,0,210,0,0,0,0,0,230,0,230,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Lk=e([18,18,18,18,20,20,22,22],"i8",c);TA=e([170,0,140,0,220,0,220,0,0,0,0,0,250,0,270,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);VA=e([180,0,180,0,210,0,210,0,0,0,0,0,230,0,240,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);WA=e([18,18,18,18,20,20,22,22],"i8",c);XA=e([170,0,220,0,180,0,180,0,0,0,0,0,250,0,270,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);YA=e([17,15,18,18,0,0,22,20],"i8",c);ZA=e([160,0,140,0,200,0,200,0,0,0,0,0,220,0,230,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);$A=e([150,0,130,0,200,0,200,0,0,0,0,0,270,0,270,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);aB=e([20,20,20,20,20,22,22,20],"i8",c);bB=e([182,0,140,0,220,0,220,0,0,0,0,0,248,0,275,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Rs=e([97,101,105,111,117,121,0],"i8",c);cB=e([155,0,180,0,210,0,210,0,0,0,0,0,270,0,300,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);dB=e([15,12,20,20,20,22,22,21],"i8",c);Vs=e([16,44,45,46,47,48,49,53,55,57,63,69,73,74,75,76,77,78,79,0],"i8",c);hB=e([45,46,47,53,55,57,69,77,0],"i8",c);fB=e([56,58,62,64,66,67,68,70,71,0],"i8",c);gB=e([50,51,52,54,56,58,59,60,61,62,64,65,66,67,68,70,71,72,0],"i8",c);eB=e([963,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0],c);iB=e([150,0,150,0,230,0,180,0,0,0,0,0,300,0,320,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);jB=e([16,14,20,20,20,22,22,21],"i8",c);kB=e([108,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0],c);lB=e([180,0,210,0,190,0,190,0,0,0,0,0,230,0,260,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);mB=e([16,12,18,18,20,20,20,20],"i8",c);nB=e([39,0,0,0,183,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);oB=e([200,0,200,0,200,0,200,0,0,0,0,0,210,0,230,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);pB=e([16,16,18,18,18,18,18,18],"i8",c);wC=e([18,16,22,22,20,22,22,22],"i8",c);vC=e([150,0,180,0,200,0,200,0,0,0,0,0,210,0,250,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);qB=e([190,0,190,0,210,0,210,0,0,0,0,0,230,0,250,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);rB=e([17,14,20,19,20,22,22,21],"i8",c);Ws=e([17,17,20,20,20,22,22,21],"i8",c);tB=e([180,0,160,0,200,0,200,0,0,0,0,0,220,0,230,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);sB=e([160,0,150,0,200,0,200,0,0,0,0,0,250,0,260,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);uB=e([1072,0,0,0,97,0,0,0,1073,0,0,0,98,0,0,0,1094,0,0,0,99,0,0,0,1115,0,0,0,263,0,0,0,1095,0,0,0,269,0,0,0,1119,0,0,0,25034852,0,0,0,1109,0,0,0,7995492,0,0,0,1076,0,0,0,100,0,0,0,1106,0,0,0,273,0,0,0,1077,0,0,0,101,0,0,0,1092,0,0,0,102,0,0,0,1075,0,0,0,103,0,0,0,1093,0,0,0,104,0,0,0,1080,0,0,0,105,0,0,0,1112,0,0,0,106,0,0,0,1082,0,0,0,107,0,0,0,1113,0,0,0,6946924,0,0,0,1083,0,0,0,108,0,0,0,1084,0,0,0,109,0,0,0,1114,0,0,0,6946926,0,0,0,1085,0,0,0,110,0,0,0,1086,0,0,0,111,0,0,0,1087,0,0,0,112,0,0,0,1088,0,0,0,114,0,0,0,1089,0,0,0,115,0,0,0,1096,0,0,0,353,0,0,0,1090,0,0,0,116,0,0,0,1091,0,0,0,117,0,0,0,1074,0,0,0,118,0,0,0,1079,0,0,0,122,0,0,0,1078,0,0,0,382,0,0,0,1107,0,0,0,273,0,0,0,1116,0,0,0,263,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);wB=e([17,17,19,19,20,22,22,21],"i8",c);vB=e([185,0,195,0,195,0,190,0,0,0,0,0,210,0,220,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);xB=e([250,0,200,0,250,0,250,0,0,0,0,0,250,0,250,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Xs=e([49,53,55,56,59,72,85,0],"i8",c);yB=e([50,51,52,54,57,58,60,61,62,63,64,65,66,67,68,69,70,71,73,74,75,76,77,78,79,80,81,82,83,84,86,0],"i8",c);zB=e([160,0,200,0,180,0,180,0,0,0,0,0,220,0,240,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);AB=e([16,18,18,18,20,22,22,21],"i8",c);BB=e([180,0,160,0,200,0,200,0,0,0,0,0,240,0,250,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);EB=e([99,0,0,0,102,0,0,0,104,0,0,0,107,0,0,0,112,0,0,0,116,0,0,0,120,0,0,0,254,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);CB=e([107,112,115,116,0],"i8",c);DB=e([106,118,114,0],"i8",c);FB=e([150,0,140,0,170,0,170,0,0,0,0,0,300,0,330,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);GB=e([15,14,19,19,20,22,22,20],"i8",c);HB=e([145,0,145,0,170,0,160,0,0,0,0,0,330,0,350,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);IB=e([46,0,0,0,44,0,0,0,39,0,0,0,712,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Zs=e([80,84,88,93,99,117,119,0],"i8",c);JB=e([81,82,83,85,86,87,89,90,91,92,94,95,96,97,98,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,118,0],"i8",c);KB=e([99,100,103,104,109,114,116,117,0],"i8",c);LB=e([2,5,6,171,175,183,188,0],"i8",c);NB=e([18,18,20,20,20,22,22,21],"i8",c);MB=e([180,0,180,0,190,0,180,0,0,0,0,0,230,0,240,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);PB=e([17,13,20,20,20,22,22,21],"i8",c);OB=e([180,0,130,0,210,0,210,0,0,0,0,0,210,0,210,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);$s=e([1088,0,0,0,1072,0,0,0,1077,0,0,0,1080,0,0,0,1081,0,0,0,1086,0,0,0,1091,0,0,0,1099,0,0,0,1101,0,0,0,1102,0,0,0,1103,0,0,0,1104,0,0,0,1105,0,0,0,1110,0,0,0,1111,0,0,0,1117,0,0,0,1118,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);RB=e([17,17,20,20,20,22,22,21],"i8",c);QB=e([180,0,160,0,200,0,200,0,0,0,0,0,220,0,230,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);TB=e([160,0,135,0,210,0,210,0,0,0,0,0,260,0,280,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);SB=e([101,0],"i8",c);UB=e([160,0,140,0,200,0,200,0,0,0,0,0,220,0,230,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);WB=e([18,15,20,20,20,22,22,22],"i8",c);VB=e([200,0,200,0,200,0,200,0,0,0,0,0,200,0,200,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);XB=e([160,0,190,0,175,0,175,0,0,0,0,0,200,0,210,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);YB=e([17,13,19,19,20,22,22,21],"i8",c);ZB=e([170,0,115,0,210,0,240,0,0,0,0,0,260,0,280,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);$B=e([16,11,19,21,20,22,22,21],"i8",c);aC=e([98,99,100,102,103,106,107,109,110,112,113,115,116,118,120,122,0],"i8",c);bC=e([170,0,170,0,180,0,180,0,0,0,0,0,240,0,260,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);cC=e([15,13,18,18,20,22,22,21],"i8",c);iC=e([98,100,103,106,108,109,110,114,118,119,122,97,101,105,111,117,121,0],"i8",c);jC=e([150,0,150,0,180,0,180,0,0,0,0,0,300,0,300,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);kC=e([16,12,16,16,20,20,21,19],"i8",c);mC=e([16,16,20,20,20,22,22,21],"i8",c);lC=e([160,0,135,0,220,0,220,0,0,0,0,0,250,0,280,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);nC=e([160,0,170,0,200,0,200,0,0,0,0,0,320,0,340,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);oC=e([16,12,19,19,20,22,22,21],"i8",c);qC=e([18,16,20,21,20,21,21,20],"i8",c);pC=e([190,0,180,0,200,0,230,0,0,0,0,0,240,0,250,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);rC=e([150,0,150,0,180,0,180,0,210,0,230,0,230,0,240,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);sC=e([16,16,16,16,22,22,22,22],"i8",c);at=e([97,0,0,0,224,0,0,0,225,0,0,0,7843,0,0,0,227,0,0,0,7841,0,0,0,259,0,0,0,7857,0,0,0,7855,0,0,0,7859,0,0,0,7861,0,0,0,7863,0,0,0,226,0,0,0,7847,0,0,0,7845,0,0,0,7849,0,0,0,7851,0,0,0,7853,0,0,0,101,0,0,0,232,0,0,0,233,0,0,0,7867,0,0,0,7869,0,0,0,7865,0,0,0,234,0,0,0,7873,0,0,0,7871,0,0,0,7875,0,0,0,7877,0,0,0,7879,0,0,0,105,0,0,0,236,0,0,0,237,0,0,0,7881,0,0,0,297,0,0,0,7883,0,0,0,111,0,0,0,242,0,0,0,243,0,0,0,7887,0,0,0,245,0,0,0,7885,0,0,0,244,0,0,0,7891,0,0,0,7889,0,0,0,7893,0,0,0,7895,0,0,0,7897,0,0,0,417,0,0,0,7901,0,0,0,7899,0,0,0,7903,0,0,0,7905,0,0,0,7907,0,0,0,117,0,0,0,249,0,0,0,250,0,0,0,7911,0,0,0,361,0,0,0,7909,0,0,0,432,0,0,0,7915,0,0,0,7913,0,0,0,7917,0,0,0,7919,0,0,0,7921,0,0,0,121,0,0,0,7923,0,0,0,253,0,0,0,7927,0,0,0,7929,0,0,0,30,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);tC=e([230,0,150,0,230,0,230,0,230,0,0,0,240,0,250,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);uC=e([22,16,22,22,22,22,22,22],"i8",c);eC=e([16,16,18,18,20,24,24,22],"i8",c);dC=e([150,0,140,0,220,0,220,0,0,0,0,0,260,0,280,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);fC=e([44,21,24,46,47,0],"i8",c);bt=e([16,21,49,24,30,35,43,45,46,47,0],"i8",c);zC=e([17,18,19,20,22,23,25,26,27,28,29,31,32,33,34,36,37,38,39,40,41,42,44,0],"i8",c);yC=e([44,25,39,41,0],"i8",c);AC=e([42,22,38,40,0],"i8",c);BC=e([17,18,19,20,23,25,26,27,28,29,31,32,33,34,36,37,39,41,44,0],"i8",c);CC=e([17,18,19,20,22,23,0],"i8",c);DC=e([44,46,47,49,0],"i8",c);xC=e([268,0,270,0,275,0,769,0,783,0,1550,0,1553,0,2307,0,2817,0,2831,0,3073,0,3081,0,3585,0,3590,0,3593,0,3598,0,3599,0,3612,0,3843,0,3857,0,3858,0,4111,0,4113,0,4353,0,4358,0,4361,0,4367,0,4627,0,4640,0,32767,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Ss=e([18,18,20,20,20,22,22,20],"i8",c);QA=e([182,0,140,0,220,0,220,0,220,0,240,0,260,0,280,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);OA=e(4,"i32",c);PA=e([39,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0],c);SA=e([0,1,2,3,0,0],"i8",c);HA=e([97,101,105,111,117,0],"i8",c);IA=e([98,99,100,102,103,106,107,108,109,110,112,113,115,116,118,120,122,0],"i8",c);JA=e([98,99,100,102,103,104,106,107,108,109,110,112,113,114,115,116,118,119,120,122,0],"i8",c);KA=e([104,108,109,110,114,0],"i8",c);LA=e([99,102,104,107,112,113,115,116,120,0],"i8",c);MA=e([98,100,103,106,108,109,110,114,118,119,121,122,0],"i8",c);NA=e([101,105,121,0],"i8",c);bf=e(1,"i8",c);VG=e([117,110,107,110,111,119,110,0],"i8",c);It=e([109,97,108,101,0],"i8",c);Jt=e([102,101,109,97,108,101,0],"i8",c);yj=e([0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);Oo=e([600,0,0,0,170,0,0,0,1200,0,0,0,135,0,0,0,2E3,0,0,0,110,0,0,0,3E3,0,0,0,110,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Rp=e(36,"i32",c);xj=e(24,["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0],c);WG=e([114,101,100,117,99,101,95,116,0],"i8",c);XG=e([98,114,97,99,107,101,116,0],"i8",c);gn=e([0,0,0,0,12,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,-1,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);Lm=e([110,97,109,101,0],"i8",c);lt=e([108,97,110,103,117,97,103,101,0],"i8",c);Hl=e([103,101,110,100,101,114,0],"i8",c);YG=e([102,111,114,109,97,110,116,0],"i8",c);dm=e([112,105,116,99,104,0],"i8",c);ZG=e([112,104,111,110,101,109,101,115,0],"i8",c);$G=e([116,114,97,110,115,108,97,116,111,114,0],"i8",c);aH=e([100,105,99,116,105,111,110,97,114,121,0],"i8",c);bH=e([115,116,114,101,115,115,76,101,110,103,116,104,0],"i8",c);cH=e([115,116,114,101,115,115,65,109,112,0],"i8",c);dH=e([115,116,114,101,115,115,65,100,100,0],"i8",c);eH=e([105,110,116,111,110,97,116,105,111,110,0],"i8",c);fH=e([116,117,110,101,115,0],"i8",c);gH=e([100,105,99,116,114,117,108,101,115,0],"i8",c);hH=e([115,116,114,101,115,115,114,117,108,101,0],"i8",c);iH=e([99,104,97,114,115,101,116,0],"i8",c);jH=e([114,101,112,108,97,99,101,0],"i8",c);kH=e([119,111,114,100,115,0],"i8",c);lH=e([101,99,104,111,0],"i8",c);mH=e([102,108,117,116,116,101,114,0],"i8",c);nH=e([114,111,117,103,104,110,101,115,115,0],"i8",c);oH=e([99,108,97,114,105,116,121,0],"i8",c);No=e([116,111,110,101,0],"i8",c);pH=e([118,111,105,99,105,110,103,0],"i8",c);qH=e([98,114,101,97,116,104,0],"i8",c);rH=e([98,114,101,97,116,104,119,0],"i8",c);sH=e([110,117,109,98,101,114,115,0],"i8",c);tH=e([111,112,116,105,111,110,0],"i8",c);jt=e([109,98,114,111,108,97,0],"i8",c);uH=e([99,111,110,115,111,110,97,110,116,115,0],"i8",c);vH=e([107,108,97,116,116,0],"i8",c);wH=e([102,97,115,116,95,116,101,115,116,50,0],"i8",c);xH=e([115,112,101,101,100,0],"i8",c);yH=e([108,95,100,105,101,114,101,115,105,115,0],"i8",c);zH=e([108,95,112,114,101,102,105,120,0],"i8",c);AH=e([108,95,114,101,103,114,101,115,115,105,118,101,95,118,0],"i8",c);BH=e([108,95,117,110,112,114,111,110,111,117,110,99,97,98,108,101,0],"i8",c);CH=e([108,95,115,111,110,111,114,97,110,116,95,109,105,110,0],"i8",c);DH=e([108,95,108,101,110,103,116,104,95,109,111,100,115,0],"i8",c);ua=e([0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,20,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,18,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,25,0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,17,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,13,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,26,0,0,0,0,0,0,0,27,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,29,0,0,0,0,0,0,0,30,0,0,0,0,0,0,0,31,0,0,0,0,0,0,0,257,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,260,0,0,0,0,0,0,0,261,0,0,0,0,0,0,0,263,0,0,0,0,0,0,0,262,0,0,0,0,0,0,0,0,0,0,0],["i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0],c);EH=e([1,2,12,3,13,4,14,5,11,0,0,0],"i8",c);FH=e([1,2,3,4,5,0,0,0,0,0,0,0],"i8",c);GH=e([11,12,13,14,0,0,0,0,0,0,0,0],"i8",c);zj=e(12,"i8*",c);ct=e(1344,["i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],c);M=e(1,"%struct.voice_t*",c);EC=e([37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0],"i8",c);LC=e([128,128,120,120,110,110,128,128,128],"i8",c);MC=e([128,128,128,160,171,171,128,128,128],"i8",c);NC=e([0,0,0,0,200,0,0,0,200,0,0,0,400,0,0,0,400,0,0,0,400,0,0,0,600,0,0,0,600,0,0,0,600,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);OC=e([240,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0,170,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);Mk=e(40,"i8",c);Zl=e(40,"i8",c);xi=e(100,"i8",c);hh=e([100,101,102,97,117,108,116,0],"i8",c);GC=e([37,115,37,99,118,111,105,99,101,115,37,99,0],"i8",c);Dg=e([37,115,37,115,0],"i8",c);HC=e([37,115,37,115,37,99,37,115,0],"i8",c);IC=e([37,115,101,120,116,114,97,37,99,37,115,0],"i8",c);JC=e([37,115,116,101,115,116,37,99,37,115,0],"i8",c);Mh=e([114,0],"i8",c);Gg=e([101,110,0],"i8",c);KC=e([43,37,115,0],"i8",c);Nk=e([37,115,32,37,100,0],"i8",c);Gl=e([118,97,114,105,97,110,116,0],"i8",c);Ns=e([45,0],"i8",c);wi=e([37,115,0],"i8",c);yi=e([37,100,32,37,100,0],"i8",c);SC=e([37,115,32,37,115,32,37,115,32,37,115,32,37,115,32,37,115,0],"i8",c);ft=e([78,85,76,76,0],"i8",c);TC=e([85,110,107,110,111,119,110,32,116,117,110,101,32,39,37,115,39,10,0],"i8",c);VC=e([37,100,32,37,100,32,37,100,32,37,100,0],"i8",c);Lh=e([37,100,0],"i8",c);WC=e([37,115,32,37,100,32,37,100,0],"i8",c);XC=e([66,97,100,32,118,111,105,99,101,32,111,112,116,105,111,110,58,32,37,115,32,37,115,10,0],"i8",c);YC=e([37,115,32,37,115,32,37,100,0],"i8",c);ZC=e([109,98,114,111,108,97,32,118,111,105,99,101,32,110,111,116,32,102,111,117,110,100,10,0],"i8",c);PC=e([66,97,100,32,118,111,105,99,101,32,97,116,116,114,105,98,117,116,101,58,32,37,115,10,0],"i8",c);$C=e([85,110,107,110,111,119,110,32,112,104,111,110,101,109,101,32,116,97,98,108,101,58,32,39,37,115,39,10,0],"i8",c);ff=e(1,"i32",c);gg=e(600,"%struct.espeak_VOICE*",c);Zo=e([37,99,37,115,0],"i8",c);it=e(288,["i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8*",0,0,0,"i8","i8","i8","i8","i32",0,0,0,"i8*",0,0,0],c);Ok=e(50,"i8",c);Wp=e(60,"i8",c);ht=e([37,115,43,37,115,0],"i8",c);rn=e(60,"i8",c);cl=e(600,"%struct.espeak_VOICE*",c);eD=e([37,115,37,99,118,111,105,99,101,115,0],"i8",c);gt=e(1,"i32",c);hn=e([109,98,47,0],"i8",c);Mo=e([37,115,37,99,37,115,0],"i8",c);kt=e([118,97,114,105,97,110,116,115,0],"i8",c);Vh=e(20,"i8",c);bD=e([33,118,37,99,0],"i8",c);cD=e([37,115,109,37,100,0],"i8",c);dD=e([37,115,102,37,100,0],"i8",c);UC=e([37,100,32,37,115,32,37,115,0],"i8",c);aD=e([37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,32,37,100,0],"i8",c);QC=e([37,100,32,37,100,32,37,100,32,37,100,32,37,100,0],"i8",c);Wo=e([47,47,0],"i8",c);Ln=e([0,0,-25,0,-50,0,-75,0,-100,0,-125,0,-150,0,-175,0,-201,0,-226,0,-251,0,-276,0,-301,0,-326,0,-351,0,-376,0,-401,0,-427,0,-452,0,-477,0,-502,0,-527,0,-552,0,-577,0,-602,0,-627,0,-652,0,-677,0,-702,0,-727,0,-752,0,-777,0,-802,0,-827,0,-852,0,-877,0,-902,0,-927,0,-952,0,-977,0,-1002,0,-1027,0,-1052,0,-1077,0,-1102,0,-1127,0,-1152,0,-1177,0,-1201,0,-1226,0,-1251,0,-1276,0,-1301,0,-1326,0,-1350,0,-1375,0,-1400,0,-1425,0,-1449,0,-1474,0,-1499,0,-1523,0,-1548,0,-1573,0,-1597,0,-1622,0,-1647,0,-1671,0,-1696,0,-1721,0,-1745,0,-1770,0,-1794,0,-1819,0,-1843,0,-1868,0,-1892,0,-1917,0,-1941,0,-1965,0,-1990,0,-2014,0,-2038,0,-2063,0,-2087,0,-2111,0,-2136,0,-2160,0,-2184,0,-2208,0,-2233,0,-2257,0,-2281,0,-2305,0,-2329,0,-2353,0,-2377,0,-2401,0,-2425,0,-2449,0,-2473,0,-2497,0,-2521,0,-2545,0,-2569,0,-2593,0,-2617,0,-2640,0,-2664,0,-2688,0,-2712,0,-2735,0,-2759,0,-2783,0,-2806,0,-2830,0,-2853,0,-2877,0,-2900,0,-2924,0,-2947,0,-2971,0,-2994,0,-3018,0,-3041,0,-3064,0,-3088,0,-3111,0,-3134,0,-3157,0,-3180,0,-3204,0,-3227,0,-3250,0,-3273,0,-3296,0,-3319,0,-3342,0,-3365,0,-3388,0,-3410,0,-3433,0,-3456,0,-3479,0,-3502,0,-3524,0,-3547,0,-3570,0,-3592,0,-3615,0,-3637,0,-3660,0,-3682,0,-3705,0,-3727,0,-3749,0,-3772,0,-3794,0,-3816,0,-3839,0,-3861,0,-3883,0,-3905,0,-3927,0,-3949,0,-3971,0,-3993,0,-4015,0,-4037,0,-4059,0,-4080,0,-4102,0,-4124,0,-4146,0,-4167,0,-4189,0,-4211,0,-4232,0,-4254,0,-4275,0,-4296,0,-4318,0,-4339,0,-4360,0,-4382,0,-4403,0,-4424,0,-4445,0,-4466,0,-4487,0,-4508,0,-4529,0,-4550,0,-4571,0,-4592,0,-4613,0,-4633,0,-4654,0,-4675,0,-4695,0,-4716,0,-4736,0,-4757,0,-4777,0,-4798,0,-4818,0,-4838,0,-4859,0,-4879,0,-4899,0,-4919,0,-4939,0,-4959,0,-4979,0,-4999,0,-5019,0,-5039,0,-5059,0,-5078,0,-5098,0,-5118,0,-5137,0,-5157,0,-5176,0,-5196,0,-5215,0,-5235,0,-5254,0,-5273,0,-5292,0,-5311,0,-5331,0,-5350,0,-5369,0,-5388,0,-5406,0,-5425,0,-5444,0,-5463,0,-5482,0,-5500,0,-5519,0,-5537,0,-5556,0,-5574,0,-5593,0,-5611,0,-5629,0,-5648,0,-5666,0,-5684,0,-5702,0,-5720,0,-5738,0,-5756,0,-5774,0,-5791,0,-5809,0,-5827,0,-5844,0,-5862,0,-5880,0,-5897,0,-5914,0,-5932,0,-5949,0,-5966,0,-5984,0,-6001,0,-6018,0,-6035,0,-6052,0,-6069,0,-6085,0,-6102,0,-6119,0,-6136,0,-6152,0,-6169,0,-6185,0,-6202,0,-6218,0,-6235,0,-6251,0,-6267,0,-6283,0,-6299,0,-6315,0,-6331,0,-6347,0,-6363,0,-6379,0,-6395,0,-6410,0,-6426,0,-6441,0,-6457,0,-6472,0,-6488,0,-6503,0,-6518,0,-6533,0,-6549,0,-6564,0,-6579,0,-6594,0,-6608,0,-6623,0,-6638,0,-6653,0,-6667,0,-6682,0,-6696,0,-6711,0,-6725,0,-6739,0,-6754,0,-6768,0,-6782,0,-6796,0,-6810,0,-6824,0,-6838,0,-6852,0,-6865,0,-6879,0,-6893,0,-6906,0,-6920,0,-6933,0,-6946,0,-6960,0,-6973,0,-6986,0,-6999,0,-7012,0,-7025,0,-7038,0,-7051,0,-7064,0,-7076,0,-7089,0,-7101,0,-7114,0,-7126,0,-7139,0,-7151,0,-7163,0,-7175,0,-7187,0,-7199,0,-7211,0,-7223,0,-7235,0,-7247,0,-7259,0,-7270,0,-7282,0,-7293,0,-7305,0,-7316,0,-7327,0,-7338,0,-7349,0,-7361,0,-7372,0,-7382,0,-7393,0,-7404,0,-7415,0,-7425,0,-7436,0,-7446,0,-7457,0,-7467,0,-7478,0,-7488,0,-7498,0,-7508,0,-7518,0,-7528,0,-7538,0,-7548,0,-7557,0,-7567,0,-7577,0,-7586,0,-7596,0,-7605,0,-7614,0,-7623,0,-7633,0,-7642,0,-7651,0,-7660,0,-7668,0,-7677,0,-7686,0,-7695,0,-7703,0,-7712,0,-7720,0,-7728,0,-7737,0,-7745,0,-7753,0,-7761,0,-7769,0,-7777,0,-7785,0,-7793,0,-7800,0,-7808,0,-7816,0,-7823,0,-7830,0,-7838,0,-7845,0,-7852,0,-7859,0,-7866,0,-7873,0,-7880,0,-7887,0,-7894,0,-7900,0,-7907,0,-7914,0,-7920,0,-7926,0,-7933,0,-7939,0,-7945,0,-7951,0,-7957,0,-7963,0,-7969,0,-7975,0,-7980,0,-7986,0,-7991,0,-7997,0,-8002,0,-8008,0,-8013,0,-8018,0,-8023,0,-8028,0,-8033,0,-8038,0,-8043,0,-8047,0,-8052,0,-8057,0,-8061,0,-8066,0,-8070,0,-8074,0,-8078,0,-8082,0,-8086,0,-8090,0,-8094,0,-8098,0,-8102,0,-8105,0,-8109,0,-8113,0,-8116,0,-8119,0,-8123,0,-8126,0,-8129,0,-8132,0,-8135,0,-8138,0,-8141,0,-8143,0,-8146,0,-8149,0,-8151,0,-8153,0,-8156,0,-8158,0,-8160,0,-8162,0,-8164,0,-8166,0,-8168,0,-8170,0,-8172,0,-8174,0,-8175,0,-8177,0,-8178,0,-8179,0,-8181,0,-8182,0,-8183,0,-8184,0,-8185,0,-8186,0,-8187,0,-8187,0,-8188,0,-8189,0,-8189,0,-8190,0,-8190,0,-8190,0,-8190,0,-8190,0,-8191,0,-8190,0,-8190,0,-8190,0,-8190,0,-8190,0,-8189,0,-8189,0,-8188,0,-8187,0,-8187,0,-8186,0,-8185,0,-8184,0,-8183,0,-8182,0,-8181,0,-8179,0,-8178,0,-8177,0,-8175,0,-8174,0,-8172,0,-8170,0,-8168,0,-8166,0,-8164,0,-8162,0,-8160,0,-8158,0,-8156,0,-8153,0,-8151,0,-8149,0,-8146,0,-8143,0,-8141,0,-8138,0,-8135,0,-8132,0,-8129,0,-8126,0,-8123,0,-8119,0,-8116,0,-8113,0,-8109,0,-8105,0,-8102,0,-8098,0,-8094,0,-8090,0,-8086,0,-8082,0,-8078,0,-8074,0,-8070,0,-8066,0,-8061,0,-8057,0,-8052,0,-8047,0,-8043,0,-8038,0,-8033,0,-8028,0,-8023,0,-8018,0,-8013,0,-8008,0,-8002,0,-7997,0,-7991,0,-7986,0,-7980,0,-7975,0,-7969,0,-7963,0,-7957,0,-7951,0,-7945,0,-7939,0,-7933,0,-7926,0,-7920,0,-7914,0,-7907,0,-7900,0,-7894,0,-7887,0,-7880,0,-7873,0,-7866,0,-7859,0,-7852,0,-7845,0,-7838,0,-7830,0,-7823,0,-7816,0,-7808,0,-7800,0,-7793,0,-7785,0,-7777,0,-7769,0,-7761,0,-7753,0,-7745,0,-7737,0,-7728,0,-7720,0,-7712,0,-7703,0,-7695,0,-7686,0,-7677,0,-7668,0,-7660,0,-7651,0,-7642,0,-7633,0,-7623,0,-7614,0,-7605,0,-7596,0,-7586,0,-7577,0,-7567,0,-7557,0,-7548,0,-7538,0,-7528,0,-7518,0,-7508,0,-7498,0,-7488,0,-7478,0,-7467,0,-7457,0,-7446,0,-7436,0,-7425,0,-7415,0,-7404,0,-7393,0,-7382,0,-7372,0,-7361,0,-7349,0,-7338,0,-7327,0,-7316,0,-7305,0,-7293,0,-7282,0,-7270,0,-7259,0,-7247,0,-7235,0,-7223,0,-7211,0,-7199,0,-7187,0,-7175,0,-7163,0,-7151,0,-7139,0,-7126,0,-7114,0,-7101,0,-7089,0,-7076,0,-7064,0,-7051,0,-7038,0,-7025,0,-7012,0,-6999,0,-6986,0,-6973,0,-6960,0,-6946,0,-6933,0,-6920,0,-6906,0,-6893,0,-6879,0,-6865,0,-6852,0,-6838,0,-6824,0,-6810,0,-6796,0,-6782,0,-6768,0,-6754,0,-6739,0,-6725,0,-6711,0,-6696,0,-6682,0,-6667,0,-6653,0,-6638,0,-6623,0,-6608,0,-6594,0,-6579,0,-6564,0,-6549,0,-6533,0,-6518,0,-6503,0,-6488,0,-6472,0,-6457,0,-6441,0,-6426,0,-6410,0,-6395,0,-6379,0,-6363,0,-6347,0,-6331,0,-6315,0,-6299,0,-6283,0,-6267,0,-6251,0,-6235,0,-6218,0,-6202,0,-6185,0,-6169,0,-6152,0,-6136,0,-6119,0,-6102,0,-6085,0,-6069,0,-6052,0,-6035,0,-6018,0,-6001,0,-5984,0,-5966,0,-5949,0,-5932,0,-5914,0,-5897,0,-5880,0,-5862,0,-5844,0,-5827,0,-5809,0,-5791,0,-5774,0,-5756,0,-5738,0,-5720,0,-5702,0,-5684,0,-5666,0,-5648,0,-5629,0,-5611,0,-5593,0,-5574,0,-5556,0,-5537,0,-5519,0,-5500,0,-5482,0,-5463,0,-5444,0,-5425,0,-5406,0,-5388,0,-5369,0,-5350,0,-5331,0,-5311,0,-5292,0,-5273,0,-5254,0,-5235,0,-5215,0,-5196,0,-5176,0,-5157,0,-5137,0,-5118,0,-5098,0,-5078,0,-5059,0,-5039,0,-5019,0,-4999,0,-4979,0,-4959,0,-4939,0,-4919,0,-4899,0,-4879,0,-4859,0,-4838,0,-4818,0,-4798,0,-4777,0,-4757,0,-4736,0,-4716,0,-4695,0,-4675,0,-4654,0,-4633,0,-4613,0,-4592,0,-4571,0,-4550,0,-4529,0,-4508,0,-4487,0,-4466,0,-4445,0,-4424,0,-4403,0,-4382,0,-4360,0,-4339,0,-4318,0,-4296,0,-4275,0,-4254,0,-4232,0,-4211,0,-4189,0,-4167,0,-4146,0,-4124,0,-4102,0,-4080,0,-4059,0,-4037,0,-4015,0,-3993,0,-3971,0,-3949,0,-3927,0,-3905,0,-3883,0,-3861,0,-3839,0,-3816,0,-3794,0,-3772,0,-3749,0,-3727,0,-3705,0,-3682,0,-3660,0,-3637,0,-3615,0,-3592,0,-3570,0,-3547,0,-3524,0,-3502,0,-3479,0,-3456,0,-3433,0,-3410,0,-3388,0,-3365,0,-3342,0,-3319,0,-3296,0,-3273,0,-3250,0,-3227,0,-3204,0,-3180,0,-3157,0,-3134,0,-3111,0,-3088,0,-3064,0,-3041,0,-3018,0,-2994,0,-2971,0,-2947,0,-2924,0,-2900,0,-2877,0,-2853,0,-2830,0,-2806,0,-2783,0,-2759,0,-2735,0,-2712,0,-2688,0,-2664,0,-2640,0,-2617,0,-2593,0,-2569,0,-2545,0,-2521,0,-2497,0,-2473,0,-2449,0,-2425,0,-2401,0,-2377,0,-2353,0,-2329,0,-2305,0,-2281,0,-2257,0,-2233,0,-2208,0,-2184,0,-2160,0,-2136,0,-2111,0,-2087,0,-2063,0,-2038,0,-2014,0,-1990,0,-1965,0,-1941,0,-1917,0,-1892,0,-1868,0,-1843,0,-1819,0,-1794,0,-1770,0,-1745,0,-1721,0,-1696,0,-1671,0,-1647,0,-1622,0,-1597,0,-1573,0,-1548,0,-1523,0,-1499,0,-1474,0,-1449,0,-1425,0,-1400,0,-1375,0,-1350,0,-1326,0,-1301,0,-1276,0,-1251,0,-1226,0,-1201,0,-1177,0,-1152,0,-1127,0,-1102,0,-1077,0,-1052,0,-1027,0,-1002,0,-977,0,-952,0,-927,0,-902,0,-877,0,-852,0,-827,0,-802,0,-777,0,-752,0,-727,0,-702,0,-677,0,-652,0,-627,0,-602,0,-577,0,-552,0,-527,0,-502,0,-477,0,-452,0,-427,0,-401,0,-376,0,-351,0,-326,0,-301,0,-276,0,-251,0,-226,0,-201,0,-175,0,-150,0,-125,0,-100,0,-75,0,-50,0,-25,0,0,0,25,0,50,0,75,0,100,0,125,0,150,0,175,0,201,0,226,0,251,0,276,0,301,0,326,0,351,0,376,0,401,0,427,0,452,0,477,0,502,0,527,0,552,0,577,0,602,0,627,0,652,0,677,0,702,0,727,0,752,0,777,0,802,0,827,0,852,0,877,0,902,0,927,0,952,0,977,0,1002,0,1027,0,1052,0,1077,0,1102,0,1127,0,1152,0,1177,0,1201,0,1226,0,1251,0,1276,0,1301,0,1326,0,1350,0,1375,0,1400,0,1425,0,1449,0,1474,0,1499,0,1523,0,1548,0,1573,0,1597,0,1622,0,1647,0,1671,0,1696,0,1721,0,1745,0,1770,0,1794,0,1819,0,1843,0,1868,0,1892,0,1917,0,1941,0,1965,0,1990,0,2014,0,2038,0,2063,0,2087,0,2111,0,2136,0,2160,0,2184,0,2208,0,2233,0,2257,0,2281,0,2305,0,2329,0,2353,0,2377,0,2401,0,2425,0,2449,0,2473,0,2497,0,2521,0,2545,0,2569,0,2593,0,2617,0,2640,0,2664,0,2688,0,2712,0,2735,0,2759,0,2783,0,2806,0,2830,0,2853,0,2877,0,2900,0,2924,0,2947,0,2971,0,2994,0,3018,0,3041,0,3064,0,3088,0,3111,0,3134,0,3157,0,3180,0,3204,0,3227,0,3250,0,3273,0,3296,0,3319,0,3342,0,3365,0,3388,0,3410,0,3433,0,3456,0,3479,0,3502,0,3524,0,3547,0,3570,0,3592,0,3615,0,3637,0,3660,0,3682,0,3705,0,3727,0,3749,0,3772,0,3794,0,3816,0,3839,0,3861,0,3883,0,3905,0,3927,0,3949,0,3971,0,3993,0,4015,0,4037,0,4059,0,4080,0,4102,0,4124,0,4146,0,4167,0,4189,0,4211,0,4232,0,4254,0,4275,0,4296,0,4318,0,4339,0,4360,0,4382,0,4403,0,4424,0,4445,0,4466,0,4487,0,4508,0,4529,0,4550,0,4571,0,4592,0,4613,0,4633,0,4654,0,4675,0,4695,0,4716,0,4736,0,4757,0,4777,0,4798,0,4818,0,4838,0,4859,0,4879,0,4899,0,4919,0,4939,0,4959,0,4979,0,4999,0,5019,0,5039,0,5059,0,5078,0,5098,0,5118,0,5137,0,5157,0,5176,0,5196,0,5215,0,5235,0,5254,0,5273,0,5292,0,5311,0,5331,0,5350,0,5369,0,5388,0,5406,0,5425,0,5444,0,5463,0,5482,0,5500,0,5519,0,5537,0,5556,0,5574,0,5593,0,5611,0,5629,0,5648,0,5666,0,5684,0,5702,0,5720,0,5738,0,5756,0,5774,0,5791,0,5809,0,5827,0,5844,0,5862,0,5880,0,5897,0,5914,0,5932,0,5949,0,5966,0,5984,0,6001,0,6018,0,6035,0,6052,0,6069,0,6085,0,6102,0,6119,0,6136,0,6152,0,6169,0,6185,0,6202,0,6218,0,6235,0,6251,0,6267,0,6283,0,6299,0,6315,0,6331,0,6347,0,6363,0,6379,0,6395,0,6410,0,6426,0,6441,0,6457,0,6472,0,6488,0,6503,0,6518,0,6533,0,6549,0,6564,0,6579,0,6594,0,6608,0,6623,0,6638,0,6653,0,6667,0,6682,0,6696,0,6711,0,6725,0,6739,0,6754,0,6768,0,6782,0,6796,0,6810,0,6824,0,6838,0,6852,0,6865,0,6879,0,6893,0,6906,0,6920,0,6933,0,6946,0,6960,0,6973,0,6986,0,6999,0,7012,0,7025,0,7038,0,7051,0,7064,0,7076,0,7089,0,7101,0,7114,0,7126,0,7139,0,7151,0,7163,0,7175,0,7187,0,7199,0,7211,0,7223,0,7235,0,7247,0,7259,0,7270,0,7282,0,7293,0,7305,0,7316,0,7327,0,7338,0,7349,0,7361,0,7372,0,7382,0,7393,0,7404,0,7415,0,7425,0,7436,0,7446,0,7457,0,7467,0,7478,0,7488,0,7498,0,7508,0,7518,0,7528,0,7538,0,7548,0,7557,0,7567,0,7577,0,7586,0,7596,0,7605,0,7614,0,7623,0,7633,0,7642,0,7651,0,7660,0,7668,0,7677,0,7686,0,7695,0,7703,0,7712,0,7720,0,7728,0,7737,0,7745,0,7753,0,7761,0,7769,0,7777,0,7785,0,7793,0,7800,0,7808,0,7816,0,7823,0,7830,0,7838,0,7845,0,7852,0,7859,0,7866,0,7873,0,7880,0,7887,0,7894,0,7900,0,7907,0,7914,0,7920,0,7926,0,7933,0,7939,0,7945,0,7951,0,7957,0,7963,0,7969,0,7975,0,7980,0,7986,0,7991,0,7997,0,8002,0,8008,0,8013,0,8018,0,8023,0,8028,0,8033,0,8038,0,8043,0,8047,0,8052,0,8057,0,8061,0,8066,0,8070,0,8074,0,8078,0,8082,0,8086,0,8090,0,8094,0,8098,0,8102,0,8105,0,8109,0,8113,0,8116,0,8119,0,8123,0,8126,0,8129,0,8132,0,8135,0,8138,0,8141,0,8143,0,8146,0,8149,0,8151,0,8153,0,8156,0,8158,0,8160,0,8162,0,8164,0,8166,0,8168,0,8170,0,8172,0,8174,0,8175,0,8177,0,8178,0,8179,0,8181,0,8182,0,8183,0,8184,0,8185,0,8186,0,8187,0,8187,0,8188,0,8189,0,8189,0,8190,0,8190,0,8190,0,8190,0,8190,0,8191,0,8190,0,8190,0,8190,0,8190,0,8190,0,8189,0,8189,0,8188,0,8187,0,8187,0,8186,0,8185,0,8184,0,8183,0,8182,0,8181,0,8179,0,8178,0,8177,0,8175,0,8174,0,8172,0,8170,0,8168,0,8166,0,8164,0,8162,0,8160,0,8158,0,8156,0,8153,0,8151,0,8149,0,8146,0,8143,0,8141,0,8138,0,8135,0,8132,0,8129,0,8126,0,8123,0,8119,0,8116,0,8113,0,8109,0,8105,0,8102,0,8098,0,8094,0,8090,0,8086,0,8082,0,8078,0,8074,0,8070,0,8066,0,8061,0,8057,0,8052,0,8047,0,8043,0,8038,0,8033,0,8028,0,8023,0,8018,0,8013,0,8008,0,8002,0,7997,0,7991,0,7986,0,7980,0,7975,0,7969,0,7963,0,7957,0,7951,0,7945,0,7939,0,7933,0,7926,0,7920,0,7914,0,7907,0,7900,0,7894,0,7887,0,7880,0,7873,0,7866,0,7859,0,7852,0,7845,0,7838,0,7830,0,7823,0,7816,0,7808,0,7800,0,7793,0,7785,0,7777,0,7769,0,7761,0,7753,0,7745,0,7737,0,7728,0,7720,0,7712,0,7703,0,7695,0,7686,0,7677,0,7668,0,7660,0,7651,0,7642,0,7633,0,7623,0,7614,0,7605,0,7596,0,7586,0,7577,0,7567,0,7557,0,7548,0,7538,0,7528,0,7518,0,7508,0,7498,0,7488,0,7478,0,7467,0,7457,0,7446,0,7436,0,7425,0,7415,0,7404,0,7393,0,7382,0,7372,0,7361,0,7349,0,7338,0,7327,0,7316,0,7305,0,7293,0,7282,0,7270,0,7259,0,7247,0,7235,0,7223,0,7211,0,7199,0,7187,0,7175,0,7163,0,7151,0,7139,0,7126,0,7114,0,7101,0,7089,0,7076,0,7064,0,7051,0,7038,0,7025,0,7012,0,6999,0,6986,0,6973,0,6960,0,6946,0,6933,0,6920,0,6906,0,6893,0,6879,0,6865,0,6852,0,6838,0,6824,0,6810,0,6796,0,6782,0,6768,0,6754,0,6739,0,6725,0,6711,0,6696,0,6682,0,6667,0,6653,0,6638,0,6623,0,6608,0,6594,0,6579,0,6564,0,6549,0,6533,0,6518,0,6503,0,6488,0,6472,0,6457,0,6441,0,6426,0,6410,0,6395,0,6379,0,6363,0,6347,0,6331,0,6315,0,6299,0,6283,0,6267,0,6251,0,6235,0,6218,0,6202,0,6185,0,6169,0,6152,0,6136,0,6119,0,6102,0,6085,0,6069,0,6052,0,6035,0,6018,0,6001,0,5984,0,5966,0,5949,0,5932,0,5914,0,5897,0,5880,0,5862,0,5844,0,5827,0,5809,0,5791,0,5774,0,5756,0,5738,0,5720,0,5702,0,5684,0,5666,0,5648,0,5629,0,5611,0,5593,0,5574,0,5556,0,5537,0,5519,0,5500,0,5482,0,5463,0,5444,0,5425,0,5406,0,5388,0,5369,0,5350,0,5331,0,5311,0,5292,0,5273,0,5254,0,5235,0,5215,0,5196,0,5176,0,5157,0,5137,0,5118,0,5098,0,5078,0,5059,0,5039,0,5019,0,4999,0,4979,0,4959,0,4939,0,4919,0,4899,0,4879,0,4859,0,4838,0,4818,0,4798,0,4777,0,4757,0,4736,0,4716,0,4695,0,4675,0,4654,0,4633,0,4613,0,4592,0,4571,0,4550,0,4529,0,4508,0,4487,0,4466,0,4445,0,4424,0,4403,0,4382,0,4360,0,4339,0,4318,0,4296,0,4275,0,4254,0,4232,0,4211,0,4189,0,4167,0,4146,0,4124,0,4102,0,4080,0,4059,0,4037,0,4015,0,3993,0,3971,0,3949,0,3927,0,3905,0,3883,0,3861,0,3839,0,3816,0,3794,0,3772,0,3749,0,3727,0,3705,0,3682,0,3660,0,3637,0,3615,0,3592,0,3570,0,3547,0,3524,0,3502,0,3479,0,3456,0,3433,0,3410,0,3388,0,3365,0,3342,0,3319,0,3296,0,3273,0,3250,0,3227,0,3204,0,3180,0,3157,0,3134,0,3111,0,3088,0,3064,0,3041,0,3018,0,2994,0,2971,0,2947,0,2924,0,2900,0,2877,0,2853,0,2830,0,2806,0,2783,0,2759,0,2735,0,2712,0,2688,0,2664,0,2640,0,2617,0,2593,0,2569,0,2545,0,2521,0,2497,0,2473,0,2449,0,2425,0,2401,0,2377,0,2353,0,2329,0,2305,0,2281,0,2257,0,2233,0,2208,0,2184,0,2160,0,2136,0,2111,0,2087,0,2063,0,2038,0,2014,0,1990,0,1965,0,1941,0,1917,0,1892,0,1868,0,1843,0,1819,0,1794,0,1770,0,1745,0,1721,0,1696,0,1671,0,1647,0,1622,0,1597,0,1573,0,1548,0,1523,0,1499,0,1474,0,1449,0,1425,0,1400,0,1375,0,1350,0,1326,0,1301,0,1276,0,1251,0,1226,0,1201,0,1177,0,1152,0,1127,0,1102,0,1077,0,1052,0,1027,0,1002,0,977,0,952,0,927,0,902,0,877,0,852,0,827,0,802,0,777,0,752,0,727,0,702,0,677,0,652,0,627,0,602,0,577,0,552,0,527,0,502,0,477,0,452,0,427,0,401,0,376,0,351,0,326,0,301,0,276,0,251,0,226,0,201,0,175,0,150,0,125,0,100,0,75,0,50,0,25,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Ya=e(1,"%struct.voice_t*",c);e(1,"%struct.__sFILE*",c);Ei=e(1,"i32",c);e(1,"i32",c);Ub=e(60,"i32",c);Jb=e(1,"i32",c);Eo=e(1,"i32",c);oa=e(720,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0],c);uc=e(1,"i32",c);Xd=e(1,"i32",c);Wi=e(1,"i32",c);lh=e(11E3,"i16",c);In=e(360,"double",c);v=e(64,["i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);gp=e(1,"i8*",c);Na=e(1,"i8*",c);qv=e(1,"i8*",c);jh=e(1,"i8*",c);e(1,"i32",c);Fa=e(2560,"i32",c);Xh=e(1,"i32",c);V=e(1,"i32",c);Nr=e([0,0,0,0,50,0,0,0,175,0,0,0,100,0,0,0,50,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);uv=e(1,"i32",c);Pf=e(1,"%struct.sonicStreamStruct*",c);sm=e([1],["double",0,0,0,0,0,0,0,0],c);jD=e([64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,87,88,89,91,92,93,94,96,97,98,100,101,103,104,105,107,108,110,111,113,115,116,118,119,121,123,124,126,128,130,132,133,135,137,139,141,143,145,147,149,151,153,155,158,160,162,164,167,169,171,174,176,179,181,184,186,189,191,194,197,199,202,205,208,211,214,217,220,223,226,229,232,236,239,242,246,249,252,254,255],"i8",c);vv=e([255,254,254,254,254,254,253,253,252,251,251,250,249,248,247,246,245,244,242,241,239,238,236,234,233,231,229,227,225,223,220,218,216,213,211,209,207,205,203,201,199,197,195,193,191,189,187,185,183,180,178,176,173,171,169,166,164,161,159,156,154,151,148,146,143,140,138,135,132,129,126,123,120,118,115,112,108,105,102,99,96,95,93,91,90,88,86,85,83,82,80,79,77,76,74,73,72,70,69,68,67,66,64,63,62,61,60,59,58,57,56,55,55,54,53,52,52,51,50,50,49,48,48,47,47,46,46,46,45,45,45,44,44,44,44,44,44,44,43,43,43,43,44,43,42,42,41,40,40,39,38,38,37,36,36,35,35,34,33,33,32,32,31,30,30,29,29,28,28,27,26,26,25,25,24,24,23,23,22,22,21,21,20,20,19,19,18,18,18,17,17,16,16,15,15,15,14,14,13,13,13,12,12,11,11,11,10,10,10,9,9,9,8,8,8,7,7,7,7,6,6,6,5,5,5,5,4,4,4,4,4,3,3,3,3,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],"i8",c);mq=e(1,"i32",c);nn=e(1,"i32",c);ch=e(1,"i32",c);Hi=e(1,"i32",c);Ii=e(1,"i32",c);Ji=e(1,"i32",c);Fo=e(1,"i32",c);Ho=e([0,0,0,2,3,5,8,11,14,18,22,27,32,37,43,49,55,62,69,76,83,90,98,105,113,121,128,136,144,152,159,166,174,181,188,194,201,207,213,218,224,228,233,237,240,244,246,249,251,252,253,253,253,253,252,251,249,246,244,240,237,233,228,224,218,213,207,201,194,188,181,174,166,159,152,144,136,128,121,113,105,98,90,83,76,69,62,55,49,43,37,32,27,22,18,14,11,8,5,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",c);Io=e([255,254,254,254,254,254,254,254,254,254,253,253,253,253,252,252,252,251,251,251,250,250,249,249,248,248,247,247,246,245,245,244,243,243,242,241,239,237,235,233,231,229,227,225,223,221,218,216,213,211,208,205,203,200,197,194,191,187,184,181,178,174,171,167,163,160,156,152,148,144,140,136,132,127,123,119,114,110,105,100,96,94,91,88,86,83,81,78,76,74,71,69,66,64,62,60,57,55,53,51,49,47,44,42,40,38,36,34,32,30,29,27,25,23,21,19,18,16,14,12,11,9,7,6,4,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",c);Ki=e(1,"i8*",c);hD=e([16,16,10,16,22],"i8",c);kh=e([60],["i32",0,0,0,0],c);Mn=e(36,"i32",c);Kn=e(36,"i32",c);ip=e(1,"i1",c);Zj=e(1,"i32*",c);qp=e(120,"i32",c);$l=e(1,"double",c);dt=e(1,"double",c);Hn=e(1,"i32",c);Fn=e(1,"i32",c);xg=e([256],["i32",0,0,0,0],c);lp=e(1,"i32",c);Jn=e(1,"i32",c);Ae=e(1,"i32",c);jp=e(1,"i1",c);nl=e(1,"i32",c);En=e(3200,"i32",c);np=e(1,"i32",c);op=e(1,"i32",c);pp=e(1,"i32",c);Am=e(1,"i32",c);Re=e(1,"i32",c);zn=e(1,"i32",c);qm=e(1,"i32",c);yn=e(1,"i32",c);Dv=e([0,0,0,0,0,70,242,41,0,47,0,47,0,69,242,41,0,47,0,46,0,69,242,40,0,46,0,45,0,52,242,40,0,45,45,44,0,52,242,40,0,43,43,43,0,52,242,40,0,42,42,42,0,52,242,40,0,41,41,41,0,52,242,40],"i8",c);rp=e(1,"i32",c);iD=e([0,0,0,0,32767,0,0,0,750,0,0,0,300,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,0,0,0,0,750,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);hp=e(1344,["i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],c);pm=e([26],["i32",0,0,0,0],c);ep=e([64],["i32",0,0,0,0],c);yv=e([48,0,0,0,48,0,0,0,64,0,0,0,80,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);zv=e([144,0,0,0,160,0,0,0,176,0,0,0,192,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);kp=e(1,"i32",c);Ef=e(1,"i32",c);Yh=e(1,"i32",c);Rj=e(1,"i32",c);xn=e(1,"i32",c);fp=e(1,"i32",c);Sj=e(1,"i32",c);Xp=e(1,"i32",c);ym=e(1,"i32",c);Bv=e([128,155,181,203,220,232,237,236,230,220,206,191,176,163,152,144,140,139,140,143,146,148,149,146,140,131,120,105,89,73,60,49,42,41,45,54,68,86,105,125,143,159,170,177,178,173,164,150,135,120,105,92,83,79,79,85,94,107,122,136,150,162,171,176,177,174,168,160,152,145,139,136,137,141,148,157,168,178,187,192,193,189,180,165,146,124,99,74,50,30,14,5,2,5,15,30,48,68,89,109,127,140,150,156,159,159,157,155,153,153,156,161,169,179,191,202,213,220,224,222,216,204,187,166,143,119,96,75,58,46,40,41,47,58,72,89,106,122,134,144,148,149,145,137,128,117,107,98,92,90,92,97,105,116,128,138,148,154,158,157,152,144,134,124,113,104,98,96,99,107,120,136,155,175,194,210,223,230,231,226,215,198,178,156,132,111,91,75,64,57,55,56,61,67,74,80,84,86,85,82,77,72,66,63,62,65,73,86,103,124,147,171,195,217,234,246,252,251,244,231,213,192,170,148,128,113,100,93,90,92,97,104,112,119,125,127,127,123,116,107,97,87,78,72,70,72,78,89,102,117,132,147,159,167,171,170,164,153,139,123,106,91,78,70,67,69,77,90,107,127,146,166,184,197,207,211,210,205,196,185,173,161,150,142,137,135,135,138,141,145,146,145,140,132,120,104,85,65,46,28,14,5,1,5,15,31,52,77,104,129,154,176,193,205,211,211,208,200,191,181,171,164,159,156,157,160,165,170,174,177,176,171,163,150,135,118,99,81,66,54,47,45,49,58,72,89,107,126,142,156,166,170,169,163,152,138,123,108,93,82,74,72,74,80,90,103,117,130],"i8",c);Dz=e([0,23,10,9,24,19,24,24],"i8",c);Cz=e([6,7,8,3,0],"i8",c);sb=e(288,"i32",c);x=e(2748,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"i16*",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0],c);xa=e(720,["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0],c);eg=e(1,"i32",c);xp=e(1,"i32",c);hf=e(40,"i32",c);Qn=e(80,"double",c);Pn=e(80,"double",c);ei=e(1,"i32",c);vp=e(64,["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8","i8"],c);nq=e([45,0,0,0,38,0,0,0,45,0,0,0,45,0,0,0],["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0],c);qu=e([-310,0,-400,0,530,0,356,0,224,0,89,0,23,0,-10,0,-58,0,-16,0,461,0,599,0,536,0,701,0,770,0,605,0,497,0,461,0,560,0,404,0,110,0,224,0,131,0,104,0,-97,0,155,0,278,0,-154,0,-1165,0,-598,0,737,0,125,0,-592,0,41,0,11,0,-247,0,-10,0,65,0,92,0,80,0,-304,0,71,0,167,0,-1,0,122,0,233,0,161,0,-43,0,278,0,479,0,485,0,407,0,266,0,650,0,134,0,80,0,236,0,68,0,260,0,269,0,179,0,53,0,140,0,275,0,293,0,296,0,104,0,257,0,152,0,311,0,182,0,263,0,245,0,125,0,314,0,140,0,44,0,203,0,230,0,-235,0,-286,0,23,0,107,0,92,0,-91,0,38,0,464,0,443,0,176,0,98,0,-784,0,-2449,0,-1891,0,-1045,0,-1600,0,-1462,0,-1384,0,-1261,0,-949,0,-730,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);ru=e([280,0,688,0,1064,0,2806,0,3260,0,3700,0,6500,0,7E3,0,8E3,0,280,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);su=e([89,0,160,0,70,0,160,0,200,0,200,0,500,0,500,0,500,0,89,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);tu=e([0,0,59,0,59,0,59,0,59,0,59,0,59,0,0,0,0,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);uu=e([59,0,59,0,89,0,149,0,200,0,200,0,500,0,0,0,0,0,0,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Aj=e(1,"double",c);Ie=e(1,"double",c);pt=e(1,"double",c);qt=e(1,"double",c);Ug=e(1,"double",c);Jh=e(1,"i32",c);lD=e([1200,0,1142,0,1088,0,1038,0,991,0,948,0,907,0,869,0,833,0,799,0,768,0,738,0,710,0,683,0,658,0,634,0,612,0,590,0,570,0,551,0,533,0,515,0,499,0,483,0,468,0,454,0,440,0,427,0,415,0,403,0,391,0,380,0,370,0,360,0,350,0,341,0,332,0,323,0,315,0,307,0,300,0,292,0,285,0,278,0,272,0,265,0,259,0,253,0,247,0,242,0,237,0,231,0,226,0,221,0,217,0,212,0,208,0,204,0,199,0,195,0,192,0,188,0,184,0,180,0,177,0,174,0,170,0,167,0,164,0,161,0,158,0,155,0,153,0,150,0,147,0,145,0,142,0,140,0,137,0,135,0,133,0,131,0,128,0,126,0,124,0,122,0,120,0,119,0,117,0,115,0,113,0,111,0,110,0,108,0,106,0,105,0,103,0,102,0,100,0,99,0,97,0,96,0,95,0,93,0,92,0,91,0,90,0,88,0,87,0,86,0,85,0,84,0,83,0,82,0,80,0,79,0,78,0,77,0,76,0,75,0,75,0,74,0,73,0,72,0,71,0,70,0,69,0,68,0,68,0,67,0,66,0,65,0,64,0,64,0,63,0,62,0,61,0,61,0,60,0,59,0,59,0,58,0,57,0,57,0,56,0,56,0,55,0,55,0,54,0,54,0,53,0,53,0,52,0,52,0,51,0,51,0,50,0,50,0,49,0,49,0,48,0,48,0,47,0,47,0,46,0,46,0,45,0,45,0,44,0,44,0,43,0,43,0,42,0,42,0,41,0,41,0,41,0,41,0,40,0,40,0,39,0,39,0,38,0,38,0,38,0,38,0,37,0,37,0,36,0,36,0,36,0,36,0,35,0,35,0,35,0,35,0,34,0,34,0,33,0,33,0,33,0,33,0,32,0,32,0,32,0,32,0,31,0,31,0,31,0,31,0,30,0,30,0,30,0,30,0,29,0,29,0,29,0,29,0,28,0,28,0,28,0,28,0,27,0,27,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);mD=e([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,7,0,8,0,9,0,10,0,11,0,13,0,14,0,16,0,18,0,20,0,22,0,25,0,28,0,32,0,35,0,40,0,45,0,51,0,57,0,64,0,71,0,80,0,90,0,101,0,114,0,128,0,142,0,159,0,179,0,202,0,227,0,256,0,284,0,318,0,359,0,405,0,455,0,512,0,568,0,638,0,719,0,881,0,911,0,1024,0,1137,0,1276,0,1438,0,1622,0,1823,0,2048,0,2273,0,2552,0,2875,0,3244,0,3645,0,4096,0,4547,0,5104,0,5751,0,6488,0,7291,0,8192,0,9093,0,10207,0,11502,0,12976,0,14582,0,16384,0,18350,0,20644,0,23429,0,26214,0,29491,0,32767,0],["i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0,"i16",0],c);Qk=e(1,"double",c);kD=e([0,0,0,0,0,0,0,0,13E6,0,0,0,0,0,0,0,-13E6,0,0,0,0,0,0,0],["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0],c);oo=e(1,"double",c);ot=e(1,"double",c);Pk=e(1,"i32",c);Ev=e([0.6,0,0,0,0,0,0,0,0.4,0,0,0,0,0,0,0,0.15,0,0,0,0,0,0,0,0.06,0,0,0,0,0,0,0,0.04,0,0,0,0,0,0,0,0.022,0,0,0,0,0,0,0,0.03,0,0,0,0,0,0,0],["double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0,"double",0,0,0,0,0,0,0],c);e([47,116,109,112,47,115,111,110,105,99,46,108,111,103,0],"i8",c);e([97,0],"i8",c);yo=e(1,"i8*",c);un=e(1,"i32",c);st=e([1],["i32",0,0,0,0],c);tt=e([63],["i32",0,0,0,0],c);ut=e(1,"i32",c);Rk=e([45,45,0],"i8",c);qD=e([80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0],"i8",c);rD=e([37,115,58,32,111,112,116,105,111,110,32,96,37,115,39,32,105,115,32,97,109,98,105,103,117,111,117,115,32,40,99,111,117,108,100,32,98,101,32,96,45,45,37,115,39,32,111,114,32,96,45,45,37,115,39,41,10,0],"i8",c);sD=e([37,115,58,32,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,45,45,32,96,45,37,99,39,10,0],"i8",c);tD=e([37,115,58,32,97,114,103,117,109,101,110,116,32,114,101,113,117,105,114,101,100,32,102,111,114,32,111,112,116,105,111,110,32,96,0],"i8",c);uD=e([45,45,37,115,39,10,0],"i8",c);vD=e([45,37,99,39,10,0],"i8",c);a[af>>2]=wD&4294967295;a[af+16>>2]=xD&4294967295;a[af+32>>2]=yD&4294967295;a[af+48>>2]=zD&4294967295;a[af+64>>2]=AD&4294967295;a[af+80>>2]=BD&4294967295;a[af+96>>2]=Co&4294967295;a[af+112>>2]=CD&4294967295;a[af+128>>2]=DD&4294967295;a[af+144>>2]=ED&4294967295;a[af+160>>2]=FD&4294967295;a[af+176>>2]=GD&4294967295;a[Fg>>2]=HD&4294967295;a[Fg+8>>2]=ID&4294967295;a[Fg+16>>2]=JD&4294967295;a[Fg+24>>2]=KD&4294967295;a[Fg+32>>2]=LD&4294967295;a[Fg+40>>2]=MD&4294967295;a[Fg+48>>2]=ND&4294967295;a[ja>>2]=OD&4294967295;a[ja+8>>2]=PD&4294967295;a[ja+16>>2]=QD&4294967295;a[ja+24>>2]=RD&4294967295;a[ja+32>>2]=SD&4294967295;a[ja+40>>2]=TD&4294967295;a[ja+48>>2]=UD&4294967295;a[ja+56>>2]=VD&4294967295;a[ja+64>>2]=WD&4294967295;a[ja+72>>2]=XD&4294967295;a[ja+80>>2]=YD&4294967295;a[ja+88>>2]=ZD&4294967295;a[ja+96>>2]=$D&4294967295;a[ja+104>>2]=aE&4294967295;a[ja+112>>2]=bE&4294967295;a[ja+120>>2]=cE&4294967295;a[ja+128>>2]=dE&4294967295;a[ja+136>>2]=eE&4294967295;a[ja+144>>2]=fE&4294967295;a[ja+152>>2]=gE&4294967295;a[ja+160>>2]=hE&4294967295;a[ja+168>>2]=iE&4294967295;a[ja+176>>2]=jE&4294967295;a[ja+184>>2]=kE&4294967295;a[ja+192>>2]=lE&4294967295;a[ja+200>>2]=mE&4294967295;a[ja+208>>2]=nE&4294967295;a[ja+216>>2]=oE&4294967295;a[ja+224>>2]=pE&4294967295;a[ja+232>>2]=qE&4294967295;a[ja+240>>2]=rE&4294967295;a[ja+248>>2]=sE&4294967295;a[ja+
256>>2]=tE&4294967295;a[ja+264>>2]=uE&4294967295;a[ja+272>>2]=vE&4294967295;a[ja+280>>2]=wE&4294967295;a[ja+288>>2]=xE&4294967295;a[ja+296>>2]=yE&4294967295;a[ja+304>>2]=zE&4294967295;a[ja+312>>2]=AE&4294967295;a[ja+320>>2]=BE&4294967295;a[ja+328>>2]=CE&4294967295;a[ja+336>>2]=DE&4294967295;a[ja+344>>2]=EE&4294967295;a[ja+352>>2]=FE&4294967295;a[ja+360>>2]=GE&4294967295;a[ja+368>>2]=HE&4294967295;a[ja+376>>2]=IE&4294967295;a[ja+384>>2]=JE&4294967295;a[ja+392>>2]=KE&4294967295;a[ja+400>>2]=LE&4294967295;a[Eg>>2]=gl&4294967295;a[Eg+4>>2]=Rh&4294967295;a[Eg+8>>2]=eh&4294967295;a[Eg+12>>2]=Sh&4294967295;a[Eg+16>>2]=Pi&4294967295;a[Kp>>2]=ME&4294967295;a[Sf>>2]=NE&4294967295;a[Sf+4>>2]=OE&4294967295;a[Sf+8>>2]=PE&4294967295;a[Sf+12>>2]=QE&4294967295;a[Sf+16>>2]=RE&4294967295;a[Sf+20>>2]=SE&4294967295;a[Sf+24>>2]=TE&4294967295;a[xb>>2]=wn&4294967295;a[xb+4>>2]=wn&4294967295;a[xb+8>>2]=wt&4294967295;a[xb+12>>2]=wt&4294967295;a[xb+16>>2]=UE&4294967295;a[xb+20>>2]=VE&4294967295;a[xb+24>>2]=WE&4294967295;a[xb+28>>2]=XE&4294967295;a[xb+32>>2]=xt&4294967295;a[xb+36>>2]=xt&4294967295;a[xb+40>>2]=yt&4294967295;a[xb+44>>2]=yt&4294967295;a[xb+48>>2]=zt&4294967295;a[xb+52>>2]=zt&4294967295;a[xb+56>>2]=At&4294967295;a[xb+60>>2]=At&4294967295;a[xb+64>>2]=Bt&4294967295;a[xb+68>>2]=Bt&4294967295;a[xb+72>>2]=Ct&4294967295;a[xb+76>>2]=Ct&4294967295;a[tb+4>>2]=Jd&4294967295;a[tb+12>>2]=Kh&4294967295;a[tb+20>>2]=Jd&4294967295;a[tb+28>>2]=Kh&4294967295;a[tb+36>>2]=Jd&4294967295;a[tb+44>>2]=Kh&4294967295;a[tb+52>>2]=Jd&4294967295;a[tb+60>>2]=YE&4294967295;a[tb+68>>2]=Jd&4294967295;a[tb+76>>2]=Kh&4294967295;a[tb+84>>2]=Jd&4294967295;a[tb+92>>2]=Bj&4294967295;a[tb+100>>2]=Jd&4294967295;a[tb+108>>2]=Bj&4294967295;a[tb+116>>2]=Jd&4294967295;a[tb+124>>2]=Bj&4294967295;a[tb+132>>2]=Jd&4294967295;a[tb+140>>2]=Kh&4294967295;a[tb+148>>2]=Jd&4294967295;a[tb+156>>2]=Kh&4294967295;a[tb+164>>2]=Jd&4294967295;a[tb+172>>2]=Kh&4294967295;a[tb+180>>2]=Jd&4294967295;a[tb+188>>2]=Bj&4294967295;a[tb+196>>2]=Jd&4294967295;a[tb+
204>>2]=Bj&4294967295;a[Eb>>2]=ZE&4294967295;a[Eb+8>>2]=$E&4294967295;a[Eb+16>>2]=aF&4294967295;a[Eb+24>>2]=bF&4294967295;a[Eb+32>>2]=cF&4294967295;a[Eb+40>>2]=Yq&4294967295;a[Eb+48>>2]=dF&4294967295;a[Eb+56>>2]=eF&4294967295;a[Eb+64>>2]=fF&4294967295;a[Eb+72>>2]=gF&4294967295;a[Eb+80>>2]=hF&4294967295;a[Eb+88>>2]=iF&4294967295;a[Eb+96>>2]=jF&4294967295;a[Eb+104>>2]=kF&4294967295;a[Eb+112>>2]=lF&4294967295;a[Eb+120>>2]=mF&4294967295;a[Eb+128>>2]=nF&4294967295;a[Eb+136>>2]=oF&4294967295;a[Eb+144>>2]=pF&4294967295;a[Eb+152>>2]=qF&4294967295;a[Eb+160>>2]=rF&4294967295;a[Eb+168>>2]=sF&4294967295;a[Eb+176>>2]=tF&4294967295;a[Eb+184>>2]=uF&4294967295;a[Eb+192>>2]=vF&4294967295;a[Eb+200>>2]=wF&4294967295;a[Eb+208>>2]=xF&4294967295;a[Eb+216>>2]=yF&4294967295;a[Eb+224>>2]=zF&4294967295;a[Eb+232>>2]=ro&4294967295;a[Eb+240>>2]=AF&4294967295;a[Eb+248>>2]=BF&4294967295;a[sj>>2]=CF&4294967295;a[sj+8>>2]=DF&4294967295;a[sj+16>>2]=EF&4294967295;a[sj+24>>2]=FF&4294967295;a[sj+32>>2]=GF&4294967295;a[sj+40>>2]=HF&4294967295;a[vj>>2]=bf&4294967295;a[Vm>>2]=bm&4294967295;a[Vm+8>>2]=IF&4294967295;a[Vm+16>>2]=JF&4294967295;a[Ol>>2]=KF&4294967295;a[Ol+8>>2]=LF&4294967295;a[Ol+16>>2]=MF&4294967295;a[Ol+24>>2]=dm&4294967295;a[tj>>2]=NF&4294967295;a[tj+8>>2]=OF&4294967295;a[tj+16>>2]=PF&4294967295;a[tj+24>>2]=QF&4294967295;a[tj+32>>2]=RF&4294967295;a[Ds>>2]=SF&4294967295;a[Ak>>2]=bm&4294967295;a[Ak+8>>2]=TF&4294967295;a[Ak+16>>2]=UF&4294967295;a[Ak+24>>2]=Cj&4294967295;a[Ak+32>>2]=ro&4294967295;a[Ak+40>>2]=VF&4294967295;a[Ql>>2]=bm&4294967295;a[Ql+8>>2]=WF&4294967295;a[Ql+16>>2]=XF&4294967295;a[Ql+24>>2]=ro&4294967295;a[yk+4>>2]=YF&4294967295;a[yk+8>>2]=ZF&4294967295;a[yk+12>>2]=dm&4294967295;a[yk+16>>2]=$F&4294967295;a[oi>>2]=It&4294967295;a[oi+8>>2]=Jt&4294967295;a[oi+16>>2]=aG&4294967295;a[zk>>2]=bG&4294967295;a[zk+8>>2]=cG&4294967295;a[zk+16>>2]=dG&4294967295;a[zk+24>>2]=eG&4294967295;a[Fb>>2]=hh&4294967295;a[Fb+8>>2]=fG&4294967295;a[Fb+16>>2]=gG&4294967295;a[Fb+24>>2]=hG&4294967295;a[Fb+32>>2]=Cj&4294967295;a[Fb+40>>2]=iG&4294967295;a[Fb+48>>2]=jG&4294967295;a[Vg>>2]=hh&4294967295;a[Vg+8>>2]=kG&4294967295;a[Vg+16>>2]=lG&4294967295;a[Vg+24>>2]=Cj&4294967295;a[Vg+32>>2]=mG&4294967295;a[Vg+40>>2]=nG&4294967295;a[Wg>>2]=hh&4294967295;a[Wg+8>>2]=Dt&4294967295;a[Wg+16>>2]=Et&4294967295;a[Wg+24>>2]=Cj&4294967295;a[Wg+32>>2]=Ft&4294967295;a[Wg+40>>2]=Gt&4294967295;a[Ai>>2]=hh&4294967295;a[Ai+8>>2]=Dt&4294967295;a[Ai+16>>2]=Et&4294967295;a[Ai+24>>2]=Cj&4294967295;a[Ai+32>>2]=Ft&4294967295;a[Ai+
40>>2]=Gt&4294967295;a[Pl+4>>2]=Vg&4294967295;a[Pl+8>>2]=Fb&4294967295;a[Pl+12>>2]=Wg&4294967295;a[Pl+16>>2]=Ai&4294967295;a[ub>>2]=oG&4294967295;a[ub+8>>2]=pG&4294967295;a[ub+16>>2]=qG&4294967295;a[ub+24>>2]=rG&4294967295;a[ub+32>>2]=sG&4294967295;a[ub+40>>2]=tG&4294967295;a[ub+48>>2]=uG&4294967295;a[ub+56>>2]=vG&4294967295;a[ub+64>>2]=wG&4294967295;a[ub+72>>2]=xG&4294967295;a[ub+80>>2]=yG&4294967295;a[ub+88>>2]=zG&4294967295;a[ub+96>>2]=AG&4294967295;a[ub+104>>2]=BG&4294967295;a[ub+112>>2]=CG&4294967295;a[ub+120>>2]=DG&4294967295;a[ub+128>>2]=EG&4294967295;a[ub+136>>2]=FG&4294967295;a[ub+144>>2]=GG&4294967295;a[ub+152>>2]=HG&4294967295;a[ub+160>>2]=IG&4294967295;a[ub+168>>2]=JG&4294967295;a[zo>>2]=KG&4294967295;a[Xa>>2]=we&4294967295;a[Xa+4>>2]=we&4294967295;a[Xa+8>>2]=LG&4294967295;a[Xa+12>>2]=MG&4294967295;a[Xa+16>>2]=NG&4294967295;a[Xa+20>>2]=OG&4294967295;a[Xa+24>>2]=we&4294967295;a[Xa+28>>2]=PG&4294967295;a[Xa+32>>2]=we&4294967295;a[Xa+36>>2]=QG&4294967295;a[Xa+40>>2]=we&4294967295;a[Xa+44>>2]=we&4294967295;a[Xa+48>>2]=we&4294967295;a[Xa+52>>2]=we&4294967295;a[Xa+56>>2]=RG&4294967295;a[Xa+60>>2]=we&4294967295;a[Xa+64>>2]=we&4294967295;a[Xa+68>>2]=we&4294967295;a[Xa+72>>2]=SG&4294967295;a[Xa+76>>2]=TG&4294967295;a[ud>>2]=Ht&4294967295;a[ud+4>>2]=Ht&4294967295;a[ud+8>>2]=UG&4294967295;a[ud+12>>2]=cm&4294967295;a[ud+16>>2]=cm&4294967295;a[ud+20>>2]=cm&4294967295;a[yj>>2]=VG&4294967295;a[yj+8>>2]=It&4294967295;a[yj+16>>2]=Jt&4294967295;a[gn>>2]=WG&4294967295;a[gn+8>>2]=XG&4294967295;a[ua>>2]=Lm&4294967295;a[ua+8>>2]=lt&4294967295;a[ua+16>>2]=Hl&4294967295;a[ua+24>>2]=YG&4294967295;a[ua+32>>2]=dm&4294967295;a[ua+40>>2]=ZG&4294967295;a[ua+48>>2]=$G&4294967295;a[ua+56>>2]=aH&4294967295;a[ua+64>>2]=bH&4294967295;a[ua+72>>2]=cH&4294967295;a[ua+80>>2]=dH&4294967295;a[ua+88>>2]=eH&4294967295;a[ua+96>>2]=fH&4294967295;a[ua+104>>2]=gH&4294967295;a[ua+112>>2]=hH&4294967295;a[ua+120>>2]=iH&4294967295;a[ua+128>>2]=jH&4294967295;a[ua+136>>2]=kH&4294967295;a[ua+144>>2]=lH&4294967295;a[ua+152>>2]=mH&4294967295;a[ua+160>>2]=nH&4294967295;a[ua+168>>2]=oH&4294967295;a[ua+176>>2]=No&4294967295;a[ua+184>>2]=pH&4294967295;a[ua+192>>2]=qH&4294967295;a[ua+200>>2]=rH&4294967295;a[ua+208>>2]=sH&4294967295;a[ua+216>>2]=tH&4294967295;a[ua+224>>2]=jt&4294967295;a[ua+232>>2]=uH&4294967295;a[ua+240>>2]=vH&4294967295;a[ua+248>>2]=wH&4294967295;a[ua+256>>2]=xH&4294967295;a[ua+264>>2]=yH&4294967295;a[ua+272>>2]=zH&4294967295;a[ua+280>>2]=AH&4294967295;a[ua+288>>2]=BH&4294967295;a[ua+296>>2]=CH&4294967295;a[ua+
304>>2]=DH&4294967295;a[zj>>2]=EH&4294967295;a[zj+4>>2]=FH&4294967295;a[zj+8>>2]=GH&4294967295;a[M>>2]=ct;H.init();$p.push({func:function(){H.quit()}});N(0);xc.ret=e([0],"i8",c);var m=Td,f,d;null===Kt?(Td.USER="root",Td.PATH="/",Td.PWD="/",Td.HOME="/",Td.LANG="en_US.UTF-8",Td._="./this.program",f=e(1024,"i8",c),d=e(256,"i8*",c),a[d>>2]=f,Kt=e([d],"i8**",c)):(d=a[Kt>>2],f=a[d>>2]);var i=[],g=0,j;for(j in m)if("string"===typeof m[j]){var l=j+"="+m[j];i.push(l);g+=l.length}if(1024<g)throw Error("Environment size exceeded TOTAL_ENV_SIZE!");for(m=0;m<i.length;m++){l=i[m];for(g=0;g<l.length;g++)h[f+g]=l.charCodeAt(g);h[f+g]=0;a[d+4*m>>2]=f;f+=l.length+1}a[d+4*i.length>>2]=0;Di.ret=e([0],"i8",c);Bi=[0,0,bI,0,aI,0,gI,0,hI,0];fb.FUNCTION_TABLE=Bi;f=null;fb._main&&(f=fb.callMain(b),Ot());return f}var Dj=self.console?console.log:function(){},fb={noInitialRun:!0};"use strict";this.Module||(this.Module={});if(!fb.arguments)try{fb.arguments=arguments}catch(iI){fb.arguments=[]}var Gb={stackSave:function(){return s},stackRestore:function(a){s=a},forceAlign:function(a,b){b=b||4;return isNumber(a)&&isNumber(b)?Math.ceil(a/b)*b:"Math.ceil(("+a+")/"+b+")*"+b},isNumberType:function(a){return a in Gb.INT_TYPES||a in Gb.FLOAT_TYPES},isPointerType:function(a){return 0<pointingLevels(a)},isStructType:function(a){return isPointerType(a)?!1:RegExp(/^\[\d+\ x\ (.*)\]/g).test(a)||RegExp(/<?{ [^}]* }>?/g).test(a)?!0:!Gb.isNumberType(a)&&"%"==a[0]},INT_TYPES:{i1:0,i8:0,i16:0,i32:0,i64:0},FLOAT_TYPES:{"float":0,"double":0},or64:function(a,b){var c=a|0|b|0,d=4294967296*(Math.round(a/4294967296)|Math.round(b/4294967296));return c+d},and64:function(a,b){var c=(a|0)&(b|0),d=4294967296*(Math.round(a/4294967296)&Math.round(b/4294967296));return c+d},xor64:function(a,b){var c=(a|0)^(b|0),d=4294967296*(Math.round(a/4294967296)^Math.round(b/4294967296));return c+d},getNativeFieldSize:function(a){return Math.max(Gb.getNativeTypeSize(a),4)},getNativeTypeSize:function(a){var b={_i1:1,_i8:1,_i16:2,_i32:4,_i64:8,_float:4,_double:8}["_"+a];!b&&"*"==a[a.length-
1]&&(b=4);return b},dedup:function(a,b){var c={};return b?a.filter(function(a){return c[a[b]]?!1:c[a[b]]=!0}):a.filter(function(a){return c[a]?!1:c[a]=!0})},set:function(){for(var a="object"===typeof arguments[0]?arguments[0]:arguments,b={},c=0;c<a.length;c++)b[a[c]]=0;return b},calculateStructAlignment:function(a){a.flatSize=0;a.alignSize=0;var b=[],c=-1;a.flatIndexes=a.fields.map(function(d){var e,g;Gb.isNumberType(d)||Gb.isPointerType(d)?g=e=Gb.getNativeTypeSize(d):Gb.isStructType(d)?(e=Types.types[d].flatSize,g=Types.types[d].alignSize):(dprint("Unclear type in struct: "+d+", in "+a.name_+" :: "+dump(Types.types[a.name_])),Zp(0));g=a.packed?1:Math.min(g,4);a.alignSize=Math.max(a.alignSize,g);d=Gb.alignMemory(a.flatSize,g);a.flatSize=d+e;0<=c&&b.push(d-c);return c=d});a.flatSize=Gb.alignMemory(a.flatSize,a.alignSize);0==b.length?a.flatFactor=a.flatSize:1==Gb.dedup(b).length&&(a.flatFactor=b[0]);a.needsFlattening=1!=a.flatFactor;return a.flatIndexes},generateStructInfo:function(a,b,c){var d,e;if(b){c=c||0;d=("undefined"===typeof Types?Gb.typeInfo:Types.types)[b];if(!d)return null;a||(a=("undefined"===typeof Types?Gb:Types).structMetadata[b.replace(/.*\./,"")]);if(!a)return null;Zp(d.fields.length===a.length,"Number of named fields must match the type for "+b+". Perhaps due to inheritance, which is not supported yet?");e=d.flatIndexes}else d={fields:a.map(function(a){return a[0]})},e=Gb.calculateStructAlignment(d);var g={__size__:d.flatSize};b?a.forEach(function(a,b){if("string"===typeof a)g[a]=e[b]+
c;else{var h,m;for(m in a)h=m;g[h]=Gb.generateStructInfo(a[h],d.fields[b],e[b])}}):a.forEach(function(a,b){g[a[1]]=e[b]});return g},stackAlloc:function(a){var b=s;la(s,0,a);s+=a;s=4*Math.ceil(s/4);return b},staticAlloc:function(a){var b=nf;nf+=a;nf=4*Math.ceil(nf/4);return b},alignMemory:function(a,b){return Math.ceil(a/(b?b:4))*(b?b:4)},__dummy__:0},JH={MAX_ALLOWED:0,corrections:0,sigs:{},note:function(a,b){b||(this.corrections++,this.corrections>=this.MAX_ALLOWED&&Tk("\n\nToo many corrections!"))},vprint:function(){var a=[],b;for(b in this.sigs)a.push({sig:b,fails:this.sigs[b][0],succeeds:this.sigs[b][1],total:this.sigs[b][0]+this.sigs[b][1]});a.sort(function(a,b){return b.total-a.total});for(b=0;b<a.length;b++){var c=a[b];Dj(c.sig+" : "+c.total+" hits, %"+Math.ceil(100*c.fails/c.total)+" failures")}}},$p=[],oe=0,b;fb.setValue=Nt;fb.getValue=function(b,c){"*"===c[c.length-1]&&(c="i32");switch(c){case"i1":return h[b];case"i8":return h[b];case"i16":return t[b>>1];case"i32":return a[b>>2];case"i64":return a[b>>2];case"float":return q[b>>2];case"double":return q[b>>2];default:Tk("invalid type for setValue: "+c)}return null};var bq=0,y=1,c=2;fb.ALLOC_NORMAL=bq;fb.ALLOC_STACK=y;fb.ALLOC_STATIC=c;fb.allocate=e;fb.Pointer_stringify=Ye;fb.Array_stringify=function(a){for(var b="",c=0;c<a.length;c++)b+=String.fromCharCode(a[c]);return b};var Bi,h,l,t,P,a,Ma,q,s,HH,nf,Ej=!1,Wt=fb.TOTAL_MEMORY||52428800,Ej=!1;try{Ej=!!Int32Array&&!!Float32Array&&!!(new Int32Array(1)).subarray}catch(jI){}if(Ej){var Xg=new ArrayBuffer(Wt);h=new Int8Array(Xg);t=new Int16Array(Xg);a=new Int32Array(Xg);l=new Uint8Array(Xg);P=new Uint16Array(Xg);Ma=new Uint32Array(Xg);q=new Float32Array(Xg);a[0]=255;Zp(255===l[0]&&0===l[3],"Typed arrays 2 must be run on a little-endian system")}else Tk("Cannot fallback to non-typed array case in USE_TYPED_ARRAYS == 2: Code is too specialized");for(var IH=Je("(null)"),em=0;em<IH.length;em++)h[em]=IH[em];fb.HEAP=void 0;fb.HEAP8=h;fb.HEAP16=t;fb.HEAP32=a;fb.HEAPU8=l;fb.HEAPU16=P;fb.HEAPU32=Ma;fb.HEAPF32=q;HH=(s=4096*Math.ceil(10/4096))+1048576;nf=4096*Math.ceil(HH/4096);fb.Array_copy=Pt;fb.String_len=$;fb.String_copy=Qt;"object"===typeof self.console&&"function"===typeof console.log?this.vprint=function(a){console.log(a)}:"undefined"===typeof Dj&&(this.vprint=function(){});fb.intArrayFromString=Je;fb.intArrayToString=function(a){for(var b=[],c=0;c<a.length;c++){var d=a[c];255<d&&(d&=255);b.push(String.fromCharCode(d))}return b.join("")};Gb.QUANTUM_SIZE=4;var wd,cp,bh,Fs,Jr,Ic,hm,Zn,Gi,Uq,vo,lb,ku,hu,ju,lu,mu,af,wD,xD,yD,zD,AD,BD,Co,CD,DD,ED,FD,GD,eu,xo,gu,nu,mv,nv,ov,Jv,Hv,$n,ou,pu,zu,Au,du,xl,Kv,Lv,Mv,Ta,HD,ID,JD,KD,LD,MD,ND,Fg,OD,PD,QD,RD,SD,TD,UD,VD,WD,XD,YD,ZD,$D,aE,bE,cE,dE,eE,fE,gE,hE,iE,jE,kE,lE,mE,nE,oE,pE,qE,rE,sE,tE,uE,vE,wE,xE,yE,zE,AE,BE,CE,DE,EE,FE,GE,HE,IE,JE,KE,LE,ja,ek,Pv,ki,Cw,Bw,yw,Aw,zw,Dw,Ew,pb,mm,nm,Ro,Lu,Mu,Nu,Ou,Pu,Qu,Ru,qq,Uo,Su,rq,rc,Dd,tq,om,bv,fv,gv,hv,iv,jv,gl,Rh,Sh,eh,Pi,Vu,Wu,Xu,Yu,Zu,$u,Eg,ew,Hp,bw,cw,dw,ev,cv,dv,av,Mj,qn,fk,Rv,hq,aw,ao,Sv,Tv,Vv,Wv,Uv,Xv,$v,Qv,kf,Mi,Ip,To,jw,fw,iw,hw,kw,mw,Fz,Gz,Jp,ow,rw,pw,qw,uw,sw,tw,vw,Ig,Hw,Iw,jk,li,Kp,ME,Sf,NE,OE,PE,QE,RE,SE,TE,Ow,Pw,Jw,Kw,Lw,Mw,Hf,Fw,gw,wn,wt,UE,VE,WE,XE,xt,yt,zt,At,Bt,Ct,xb,Rw,RA,oq,jm,za,hj,tb,Tf,gj,Fd,Dl,mi,Sw,Xr,Jd,Kh,YE,Bj,qh,mk,Jg,Lg,lj,Sm,lf,Vf,Mm,dl,Qo,ij,lk,ni,ZE,$E,aF,bF,cF,Yq,dF,eF,fF,gF,hF,iF,jF,kF,lF,mF,nF,oF,pF,qF,rF,sF,tF,uF,vF,wF,xF,yF,zF,ro,AF,BF,Eb,sh,Uf,CF,DF,EF,FF,GF,HF,sj,Um,Eh,Rm,ag,io,Sy,si,uj,Ar,Br,Mr,pz,vz,jo,kj,Yc,Yf,vj,nk,Yw,Zw,$w,bs,rz,Gs,sz,tz,uz,cx,dx,ex,fx,qz,Vm,bm,IF,JF,Ol,KF,LF,MF,tj,NF,OF,PF,QF,RF,Ds,SF,Ak,TF,UF,Cj,VF,Ql,WF,XF,yk,YF,ZF,$F,Ty,Uy,Vy,Wy,Xy,Yy,Zy,$y,az,bz,cz,dz,Es,ez,fz,gz,hz,iz,jz,kz,mz,lz,nz,oz,oi,aG,kx,lx,uh,bG,cG,dG,eG,zk,Fb,fG,gG,hG,iG,jG,Vg,kG,lG,mG,nG,Wg,Dt,Et,Ft,Gt,Ai,Pl,hx,ix,gx,th,ok,Om,eo,nx,ox,px,yf,Ez,qx,rx,sx,ub,ux,wx,vx,be,xx,es,zx,Ax,Xq,fs,gs,Ks,Nz,Oz,Pz,Kx,vh,pi,uf,wh,Mg,Fx,mj,hs,Pm,Hx,xh,Ix,Jx,is,cy,js,ks,ls,ms,dy,ns,ey,fy,nj,Xx,Yx,Zx,$x,ay,by,Lx,Mx,Nx,Ox,Px,Qx,Rx,Sx,Tx,Ux,Vx,Wx,os,gy,hy,oG,pG,qG,rG,sG,tG,uG,vG,wG,xG,yG,zG,AG,BG,CG,DG,EG,FG,GG,HG,IG,JG,Do,zh,yh,jy,ky,ly,my,oy,qs,Tc,ws,Sp,My,xs,Ny,Oy,Py,Qy,Vj,wc,qy,Op,$o,ry,ri,KG,zo,Gu,Li,pq,ae,ss,Z,ts,im,Jj,Kj,on,Lj,Me,pn,pj,go,Gd,vs,vu,wu,xu,yu,Pg,uy,Bu,Cu,Du,lq,Fu,Hu,Iu,zy,Dy,Cy,By,gh,sy,Nc,fc,ps,Hj,wa,Lr,km,nd,Bh,Nh,lm,Uc,dh,Ky,qi,ho,Dh,jd,Ng,Qg,Ge,As,Tp,qj,Rg,Zf,rj,Qm,Sg,wk,Hz,Iz,Hy,Ml,Gy,Rb,tf,dn,Le,RC,rh,Hd,Bs,Gp,lr,bl,Fi,mg,Bo,mr,lw,wo,Wm,Ym,Tm,yr,xk,xr,uk,Nl,$f,ur,Rl,Ee,Ua,ma,ab,ln,zr,$e,kn,vf,Ck,Dk,we,LG,MG,NG,OG,PG,QG,RG,SG,TG,Xa,ud,Jz,Kz,Lz,as,Yz,Zz,Uz,Tz,Rz,Mz,Qz,Sz,pk,wr,Cs,wf,vr,td,wz,xz,ko,wj,Bk,Bz,Xm,Yl,ne,Vz,Wz,Xz,Az,Cr,yz,Ht,UG,cm,lA,mA,nA,oA,qA,pA,rk,qk,Fe,Tb,ui,zs,Tg,Xe,Jk,zA,wA,xA,yA,EA,AA,BA,CA,DA,Ps,FA,ld,vi,sA,tA,Os,uA,Ik,$z,bA,cA,dA,eA,fA,gA,hA,iA,jA,kA,aA,GA,Ts,Us,hC,gC,Kk,Lk,TA,VA,WA,XA,YA,ZA,$A,aB,bB,Rs,cB,dB,Vs,hB,fB,gB,eB,iB,jB,kB,lB,mB,nB,oB,pB,wC,vC,qB,rB,Ws,tB,sB,uB,wB,vB,xB,Xs,yB,zB,AB,BB,EB,CB,DB,FB,GB,HB,IB,Zs,JB,KB,LB,NB,MB,PB,OB,$s,RB,QB,TB,SB,UB,WB,VB,XB,YB,ZB,$B,aC,bC,cC,iC,jC,kC,mC,lC,nC,oC,qC,pC,rC,sC,at,tC,uC,eC,dC,fC,bt,zC,yC,AC,BC,CC,DC,xC,Ss,QA,OA,PA,SA,HA,IA,JA,KA,LA,MA,NA,bf,VG,It,Jt,yj,Oo,Rp,xj,WG,XG,gn,Lm,lt,Hl,YG,dm,ZG,$G,aH,bH,cH,dH,eH,fH,gH,hH,iH,jH,kH,lH,mH,nH,oH,No,pH,qH,rH,sH,tH,jt,uH,vH,wH,xH,yH,zH,AH,BH,CH,DH,ua,EH,FH,GH,zj,ct,M,EC,LC,MC,NC,OC,Mk,Zl,xi,hh,GC,Dg,HC,IC,JC,Mh,Gg,KC,Nk,Gl,Ns,wi,yi,SC,ft,TC,VC,Lh,WC,XC,YC,ZC,PC,$C,ff,gg,Zo,it,Ok,Wp,ht,rn,cl,eD,gt,hn,Mo,kt,Vh,bD,cD,dD,UC,aD,QC,Wo,Ln,Ya,Ei,Ub,Jb,Eo,oa,uc,Xd,Wi,lh,In,v,gp,Na,qv,jh,Fa,Xh,V,Nr,uv,Pf,sm,jD,vv,mq,nn,ch,Hi,Ii,Ji,Fo,Ho,Io,Ki,hD,kh,Mn,Kn,ip,Zj,qp,$l,dt,Hn,Fn,xg,lp,Jn,Ae,jp,nl,En,np,op,pp,Am,Re,zn,qm,yn,Dv,rp,iD,hp,pm,ep,yv,zv,kp,Ef,Yh,Rj,xn,fp,Sj,Xp,ym,Bv,Dz,Cz,sb,x,xa,eg,xp,hf,Qn,Pn,ei,vp,nq,qu,ru,su,tu,uu,Aj,Ie,pt,qt,Ug,Jh,lD,mD,Qk,kD,oo,ot,Pk,Ev,yo,un,st,tt,ut,Rk,qD,rD,sD,tD,uD,vD,T={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18},Lt=0,Ao=0,Mt=0;lb=0;var H={currentPath:"/",nextInode:2,streams:[null],ignorePermissions:!0,absolutePath:function(a,b){if("string"!==typeof a)return null;"undefined"===typeof b&&(b=H.currentPath);a&&"/"==a[0]&&(b="");for(var c=(b+"/"+a).split("/").reverse(),d=[""];c.length;){var e=c.pop();""==e||"."==e||(".."==e?1<d.length&&d.pop():d.push(e))}return 1==d.length?"/":d.join("/")},analyzePath:function(a,b,c){var d={isRoot:!1,exists:!1,error:0,name:null,path:null,object:null,parentExists:!1,parentPath:null,parentObject:null},a=H.absolutePath(a);if("/"==a)d.isRoot=!0,d.exists=d.parentExists=!0,d.name="/",d.path=d.parentPath="/",d.object=d.parentObject=H.root;else if(null!==a)for(var c=c||0,a=a.slice(1).split("/"),e=H.root,g=[""];a.length;){1==a.length&&e.isFolder&&(d.parentExists=!0,d.parentPath=1==g.length?"/":g.join("/"),d.parentObject=e,d.name=a[0]);var h=a.shift();if(e.isFolder)if(e.read){if(!e.contents.hasOwnProperty(h)){d.error=T.ENOENT;break}}else{d.error=T.EACCES;break}else{d.error=T.ENOTDIR;break}e=e.contents[h];if(e.link&&!(b&&0==a.length)){if(40<c){d.error=T.ELOOP;break}d=H.absolutePath(e.link,g.join("/"));return H.analyzePath([d].concat(a).join("/"),b,c+1)}g.push(h);0==a.length&&(d.exists=!0,d.path=g.join("/"),d.object=e)}return d},findObject:function(a,b){H.ensureRoot();var c=H.analyzePath(a,b);if(c.exists)return c.object;N(c.error);return null},createObject:function(a,b,c,d,e){a||(a="/");"string"===typeof a&&(a=H.findObject(a));if(!a)throw N(T.EACCES),Error("Parent path must exist.");if(!a.isFolder)throw N(T.ENOTDIR),Error("Parent must be a folder.");if(!a.write&&!H.ignorePermissions)throw N(T.EACCES),Error("Parent folder must be writeable.");if(!b||"."==b||".."==b)throw N(T.ENOENT),Error("Name must not be empty.");if(a.contents.hasOwnProperty(b))throw N(T.EEXIST),Error("Can't overwrite object.");a.contents[b]={read:"undefined"===typeof d?!0:d,write:"undefined"===typeof e?!1:e,timestamp:Date.now(),inodeNumber:H.nextInode++};for(var g in c)c.hasOwnProperty(g)&&(a.contents[b][g]=c[g]);return a.contents[b]},createFolder:function(a,b,c,d){return H.createObject(a,b,{isFolder:!0,isDevice:!1,contents:{}},c,d)},createPath:function(a,b,c,d){a=H.findObject(a);if(null===a)throw Error("Invalid parent.");for(b=b.split("/").reverse();b.length;){var e=b.pop();e&&(a.contents.hasOwnProperty(e)||H.createFolder(a,e,c,d),a=a.contents[e])}return a},createFile:function(a,b,c,d,e){c.isFolder=!1;return H.createObject(a,b,c,d,e)},createDataFile:function(a,b,c,d,e){if("string"===typeof c){for(var g=[],h=0;h<c.length;h++)g.push(c.charCodeAt(h));c=g}return H.createFile(a,b,{isDevice:!1,contents:c},d,e)},forceCreateDataFile:function(a,b,c,d,e){if("string"===typeof c){for(var g=[],h=0;h<c.length;h++)g.push(c.charCodeAt(h));c=g}a||(a="/");"string"===typeof a&&(a=H.findObject(a));return a&&a.contents.hasOwnProperty(b)?(a=a.contents[b],a.contents=c,a.timestamp=Date.now(),a):H.createFile(a,b,{isDevice:!1,contents:c},d,e)},createLazyFile:function(a,b,c,d,e){return H.createFile(a,b,{isDevice:!1,url:c},d,e)},createLink:function(a,b,c,d,e){return H.createFile(a,b,{isDevice:!1,link:c},d,e)},createDevice:function(a,b,c,d){if(!c&&!d)throw Error("A device must have at least one callback defined.");return H.createFile(a,b,{isDevice:!0,input:c,output:d},Boolean(c),Boolean(d))},forceLoadFile:function(a){if(a.isDevice||a.isFolder||a.link||a.contents)return!0;N(T.EIO);return!1},ensureRoot:function(){H.root||(H.root={read:!0,write:!1,isFolder:!0,isDevice:!1,timestamp:Date.now(),inodeNumber:1,contents:{}})},init:function(a,b,f){if(!H.init.initialized){H.init.initialized=!0;H.ensureRoot();a||(a=function(){if(!a.cache||!a.cache.length){var b;"function"==typeof readline&&(b=readline());b||(b="");a.cache=Je(b+"\n",!0);a.cache=Je("\n",!0)}return a.cache.shift()});b||(b=function(a){null===a||10===a?(b.printer(b.buffer.join("")),b.buffer=[]):b.buffer.push(String.fromCharCode(a))});b.printer||(b.printer=Dj);b.buffer||(b.buffer=[]);f||(f=b);H.createFolder("/","tmp",!0,!0);var d=H.createFolder("/","dev",!0,!1),h=H.createDevice(d,"stdin",a),g=H.createDevice(d,"stdout",null,b),f=H.createDevice(d,"stderr",null,f);H.createDevice(d,"tty",a,b);H.streams[1]={path:"/dev/stdin",object:h,position:0,isRead:!0,isWrite:!1,isAppend:!1,error:!1,eof:!1,ungotten:[]};H.streams[2]={path:"/dev/stdout",object:g,position:0,isRead:!1,isWrite:!0,isAppend:!1,error:!1,eof:!1,ungotten:[]};H.streams[3]={path:"/dev/stderr",object:f,position:0,isRead:!1,isWrite:!0,isAppend:!1,error:!1,eof:!1,ungotten:[]};Lt=e([1],"void*",c);Ao=e([2],"void*",c);Mt=e([3],"void*",c);H.streams[Lt]=H.streams[1];H.streams[Ao]=H.streams[2];H.streams[Mt]=H.streams[3];lb=e([e([0,0,0,0,Lt,0,0,0,Ao,0,0,0,Mt,0,0,0],"void*",c)],"void*",c);H.ignorePermissions=!1}},quit:function(){try{0<H.streams[2].object.output.buffer.length&&H.streams[2].object.output(10),0<H.streams[3].object.output.buffer.length&&H.streams[3].object.output(10)}catch(a){recoverFromFSError(a)}}},PH={__size__:80,st_dev:0,st_ino:8,st_mode:12,st_nlink:16,st_uid:20,st_gid:24,st_rdev:28,st_size:36,st_atime:40,st_spare1:44,st_mtime:48,st_spare2:52,st_ctime:56,st_spare3:60,st_blksize:64,st_blocks:68,st_spare4:72},Uk={__size__:1040,d_ino:0,d_name:4,d_off:1028,d_reclen:1032,d_type:1036},Kt=null,Td={},dI,cI,eq={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"},Yn=function(a,b,c){if(0!==c){var d=Qd(c);Zk(d,b,c);Zk(a,d,c)}},fI=Ea,en=function(){N(T.ECHILD);return-1},eI=Rd,rA=null,NH=null,Go=Math.cos,to=42,mt=Math.exp,nt=Math.sin;fb._main=cu;fb.callMain=function(a){function b(){for(var a=0;3>a;a++)d.push(0)}var f=a.length+1,d=[e(Je("/bin/this.program"),"i8",c)];b();for(var h=0;h<f-1;h+=1)d.push(e(Je(a[h]),"i8",c)),b();d.push(0);d=e(d,"i32",c);return cu(f,d,0)};fb.run=vt;fb.noInitialRun||vt();return{Module:fb,FS:H,run:vt}};var configData={"config":"Ly9wYV9kZXZpY2UgNwoKLy8gcGxheSBhIHNvdW5kIGZvciBwdW5jdHVhdGlvbiwgcmF0aGVyIHRoYW4gc3BlYWsgaXRzIG5hbWUKLy9zb3VuZGljb24gXyggL3Vzci9zaGFyZS9zb3VuZHMvc291bmQtaWNvbnMvbGVmdC1yb3VuZC1icmFja2V0Ci8vc291bmRpY29uIF8pIC91c3Ivc2hhcmUvc291bmRzL3NvdW5kLWljb25zL3JpZ2h0LXJvdW5kLWJyYWNrZXQKLy9zb3VuZGljb24gX1sgL3Vzci9zaGFyZS9zb3VuZHMvc291bmQtaWNvbnMvbGVmdC1zcXVhcmUtYnJhY2tldAovL3NvdW5kaWNvbiBfXSAvdXNyL3NoYXJlL3NvdW5kcy9zb3VuZC1pY29ucy9yaWdodC1zcXVhcmUtYnJhY2tldAovL3NvdW5kaWNvbiBfeyAvdXNyL3NoYXJlL3NvdW5kcy9zb3VuZC1pY29ucy9sZWZ0LWJyYWNlCi8vc291bmRpY29uIF99IC91c3Ivc2hhcmUvc291bmRzL3NvdW5kLWljb25zL3JpZ2h0LWJyYWNlCg==","phontab":"","phonindex":"","phondata":"","intonations":"czEAAAAAAAAAAAAAAAAAAAAoGAgAAAAALjkAEAAA/1Ay/wQF+Pj4+/v7AEAIAEYSGAwARhIYDAAAAAAAAAAAAAAAAABjMQAAAAAAAAAAAAAAAAAAACgYCAAAAAAuOQAQAAD/UC7/BAX4+Pj7+/sEUBIGThYiNAZOFiI0AAAAAAAAAAAAAAAAAHExAAAAAAAAAAAAAAAAAAAQKBgIAAAAAC45ABAAAP9LK/8EBfn5+QAAAARYFgZSFiJCBlIWIkIAAAAAAAAAAAAAAAAAZTEAAAAAAAAAAAAAAAAAAAo0IBQKAAAALjkAEAAA/1oy/wMF9/f3AAAAAFwIAFxQTAgAXFBMCAAAAAAAAAAAAAAAAABzMgAAAAAAAAAAAAAAAAAAACEYCAAAAAAuOQAQAABLQTz/BAX7+Pj7+/sALBwAMioiHAAyKiIcAAAAAAAAAAAAAAAAAGMyAAAAAAAAAAAAAAAAAAAAKBgIAAAAAC45ABAAAP9BMv8EBfn4+Pn7+wI8KgI3KiI0AjcqIjQAAAAAAAAAAAAAAAAAcTIAAAAAAAAAAAAAAAAAABAoGAgAAAAAKEsAEAAA/0sr/wQF+fn5+QAAAkYyAiMtPEYCIy08RgAAAAAAAAAAAAAAAABlMgAAAAAAAAAAAAAAAAAACjQgFAoAAAAuOQAQAAD/WjL/AwX59/f5AAAAXAgAXFBMCABcUEwIAAAAAAAAAAAAAAAAAHMzAAAAAAAAAAAAAAAAAAAAKBgIAAAAAC45ABAAAP9QMv8EBfn4+Pn7+wBACABGEhgMAEYSGAwAAAAAAAAAAAAAAAAAYzMAAAAAAAAAAAAAAAAAAAAoGAgAAAAALjkAEAAA/0Ye/wQF+fj4+fv7BEsyAEYSGAwARhIYDAAAAAAAAAAAAAAAAABxMwAAAAAAAAAAAAAAAAAAECgYCAAAAAAuOQAQAAD/Syv/BAX5+fn5AAAEWBYGUhYiQgZSFiJCAAAAAAAAAAAAAAAAAGUzAAAAAAAAAAAAAAAAAAAKNCAUCgAAAC45ABAAAP9aMv8DBfn39/kAAABcCABcUEwIAFxQTAgAAAAAAAAAAAAAAAAA"};var eSpeakDir='/espeak',eSpeakDataDir='/espeak/espeak-data',eSpeakVoicesDir='/espeak/espeak-data/voices',eSpeak=new ESpeak(),fileRegistry=[],fsErrorDetected=false,isaWorker=(typeof importScripts==='function'&&(typeof WorkerGlobalScope!=='undefined'&&self instanceof WorkerGlobalScope)),useTransferables=false,callCnt=0,callsMax=80;function fsCreateDataFile(path,fname,data,doNotRegister){if(!eSpeak.FS.findObject(path))eSpeak.FS.createPath('/',path.substring(1),true,true);eSpeak.FS.forceCreateDataFile(path,fname,data,true,false);if(!doNotRegister)fileRegistry.push({path:path,fname:fname});}
function recoverFromFSError(message,auto){if(typeof console!=='undefined')console.log('meSpeak'+(auto?'':' -- recovering from error')+':',message);var files=[],f,i,l=fileRegistry.length;for(i=0;i<l;i++){f=fileRegistry[i];files.push(eSpeak.FS.findObject(f.path+'/'+f.fname).contents);}
eSpeak=new ESpeak();setUpVFS();for(i=0;i<l;i++){f=fileRegistry[i];fsCreateDataFile(f.path,f.fname,files[i],true);}
fsErrorDetected=true;}
function setUpVFS(){var optionFiles={'croak':'language variant\nname croak\ngender male 70\npitch 85 117\nflutter 20\nformant 0 100 80 110\n','f1':'language variant\nname female1\ngender female 70\npitch 140 200\nflutter 8\nroughness 4\nformant 0 115 80 150\nformant 1 120 80 180\nformant 2 100 70 150 150\nformant 3 115 70 150\nformant 4 110 80 150\nformant 5 110 90 150\nformant 6 105 80 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAdd -10 -10 -20 -20 0 0 40 60\n','f2':'language variant\nname female2\ngender female\npitch 142 220\nroughness 3\nformant 0 105 80 150\nformant 1 110 80 160\nformant 2 110 70 150\nformant 3 110 70 150\nformant 4 115 80 150\nformant 5 115 80 150\nformant 6 110 70 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAdd 0 0 -10 -10 0 0 10 40\nbreath 0 2 3 3 3 3 3 2\necho 140 10\nconsonants 125 125\n','f3':'language variant\nname female3\ngender female\npitch 140 240\nformant 0 105 80 150\nformant 1 120 75 150 -50\nformant 2 135 70 150 -250\nformant 3 125 80 150\nformant 4 125 80 150\nformant 5 125 80 150\nformant 6 120 70 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAmp 18 18 20 20 20 20 20 20\n//breath 0 2 4 4 4 4 4 4\nbreath 0 2 3 3 3 3 3 2\necho 120 10\nroughness 4\n','f4':'language variant\nname female4\ngender female\necho 130 15\npitch 142 200\nformant 0 120 80 150\nformant 1 115 80 160 -20\nformant 2 130 75 150 -200\nformant 3 123 75 150\nformant 4 125 80 150\nformant 5 125 80 150\nformant 6 110 80 150\nformant 7 110 75 150\nformant 8 110 75 150\nstressAdd -20 -20 -20 -20 0 0 20 120\nstressAmp 18 16 20 20 20 20 20 20\n','f5':'language variant\nname female5\ngender female\npitch 160 228\nroughness 0\nformant 0 105 80 150\nformant 1 110 80 160\nformant 2 110 70 150\nformant 3 110 70 150\nformant 4 115 80 200\nformant 5 115 80 100\nformant 6 110 70 150\nformant 7 110 70 100\nformant 8 110 70 150\nstressAdd 0 0 -10 -10 0 0 10 40\nbreath 0 4 6  6 6  6 0 10\necho 140 10\nvoicing 75\nconsonants 150 150\nbreathw 150 150 200 200 400 400\n','klatt':'language variant\nname klatt\nklatt 1\n','klatt2':'language variant\nname klatt2\nklatt 2\n','klatt3':'language variant\nname klatt3\nklatt 3\n','m1':'language variant\nname male1\ngender male 70\npitch 75 109\nflutter 5\nroughness 4\nconsonants 80 100\nformant 0 98 100 100\nformant 1 97 100 100\nformant 2 97 95 100\nformant 3 97 95 100\nformant 4 97 85 100\nformant 5 105 80 100\nformant 6 95 80 100\nformant 7 100 100 100\nformant 8 100 100 100\n//stressAdd -10 -10 -20 -20 0 0 40 70\n','m2':'language variant\nname male2\ngender male\npitch 88 115\necho 130 15\nformant 0 100 80 120\nformant 1 90 85 120\nformant 2 110 85 120\nformant 3 105 90 120\nformant 4 100 90 120\nformant 5 100 90 120\nformant 6 100 90 120\nformant 7 100 90 120\nformant 8 100 90 120\n','m3':'language variant\nname male3\ngender male\npitch 80 122\nformant 0 100 100 100\nformant 1 96 97 100\nformant 2 96 97 100\nformant 3 96 103 100\nformant 4 95 103 100\nformant 5 95 103 100\nformant 6 100 100 100\nformant 7 100 100 100\nformant 8 100 100 100\nstressAdd 10 10 0 0 0 0 -30 -30\n','m4':'language variant\nname male4\ngender male\npitch 70 110\nformant 0 103 100 100\nformant 1 103 100 100\nformant 2 103 100 100\nformant 3 103 100 100\nformant 4 106 100 100\nformant 5 106 100 100\nformant 6 106 100 100\nformant 7 103 100 100\nformant 8 103 100 100\nstressAdd -10 -10 -30 -30 0 0 60 90\n','m5':'language variant\nname male5\ngender male\nformant 0 100 85 130\nformant 1 90 85 130 40\nformant 2 80 85 130 310\nformant 3 105 85 130\nformant 4 105 85 130\nformant 5 105 85 130\nformant 6 105 85 150\nformant 7 105 85 150\nformant 8 105 85 150\nintonation 2\n','m6':'language variant\nname male6\ngender male\npitch 82 117\nformant 0 100 90 120\nformant 1 100 90 140\nformant 2 100 70 140\nformant 3 100 75 140\nformant 4 100 80 140\nformant 5 100 80 140\n','m7':'language variant\nname male7\npitch 75 125\nformant 0 100 125 100\nformant 1 100 90 80\nformant 2 100 70 90\nformant 3 100 60 90\nformant 4 100 60 90\nformant 5 75 50 90\nformant 6 90 50 100\nformant 7 100 50 100\nformant 8 100 50 100\nvoicing 155\n','whisper':'language variant\nname whisper\npitch 75 125\nformant 0 100 125 100\nformant 1 100 90 80\nformant 2 100 70 90\nformant 3 100 60 90\nformant 4 100 60 90\nformant 5 75 50 90\nformant 6 90 50 100\nformant 7 100 50 100\nformant 8 100 50 100\nvoicing 155\n','whisperf':'language variant\nname female whisper\ngender female\npitch 160 220\nroughness 3\nformant 0 105 0 150\nformant 1 110 40 160\nformant 2 110 70 150\nformant 3 110 70 150\nformant 4 115 80 150\nformant 5 115 80 150\nformant 6 110 70 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAdd 0 0 -10 -10 0 0 10 40\n// whisper\nvoicing 20\nbreath 75 75 50 40 15 10\nbreathw 150 150 200 200 400 400\n'};var dir=eSpeakVoicesDir+'/!v';eSpeak.FS.createPath('/',dir.substring(1),true,true);eSpeak.FS.root.write=true;for(var fn in optionFiles){eSpeak.FS.createDataFile(dir,fn,decodeStringToArray(optionFiles[fn]),true,true);}}
if(eSpeak&&eSpeak.FS)setUpVFS();function setConfigData(data){[['config',typeof data.config==='string'?decodeBase64ToArray(data.config):null],['phontab',typeof data.phontab==='string'?decodeBase64ToArray(data.phontab):null],['phonindex',typeof data.phonindex==='string'?decodeBase64ToArray(data.phonindex):null],['phondata',typeof data.phondata==='string'?decodeBase64ToArray(data.phondata):null],['intonations',typeof data.intonations==='string'?decodeBase64ToArray(data.intonations):null]].forEach(function(pair){var id=pair[0];var data=pair[1];if(data)fsCreateDataFile(eSpeakDataDir,id,data);});var voice=data.voice;if(typeof voice=='object'&&typeof voice.voice_id=='string'&&typeof voice.dict_id=='string'&&typeof voice.dict=='string'&&typeof voice.voice=='string'){setVoiceData(voice);return voice.voice_id;}
return'';}
function setVoiceData(data){var parts,path,fname,f;if(data.dict_id&&!eSpeak.FS.findObject(eSpeakDataDir+'/'+data.dict_id))fsCreateDataFile(eSpeakDataDir,data.dict_id,decodeBase64ToArray(data.dict));parts=data.voice_id.split('/');path=eSpeakVoicesDir;if(parts.length>1){path+='/'+parts.slice(0,parts.length-1).join('/');}
fname=parts[parts.length-1];if(data.voice_encoding=='text'){fsCreateDataFile(path,fname,decodeStringToArray(data.voice));}
else{fsCreateDataFile(path,fname,decodeBase64ToArray(data.voice));}
if(data.files&&Array.isArray(data.files)){for(var i=0,l=data.files.length;i<l;i++){f=data.files[i];if(typeof f=='object'&&typeof f.path=='string'&&f.path.length&&typeof f.data=='string'&&f.data.length){parts=f.path.split('/');if(parts.length>1){path=eSpeakDataDir+'/'+parts.slice(0,parts.length-1).join('/');}
else{path=eSpeakDataDir;}
fname=parts[parts.length-1];if(f.encoding=='text'){fsCreateDataFile(path,fname,decodeStringToArray(f.data));}
else{fsCreateDataFile(path,fname,decodeBase64ToArray(f.data));}}}}}
function decodeBase64ToArray(str){function f(c){if(c==43){return 62;}
else if(c==47){return 63;}
else if(c==61){return 64;}
else if(c<=57){return c+4;}
else if(c<=90){return c-65;}
else{return c-71;}}
var h1,h2,h3,h4,out=[],i=0,l=str.length;while(i<l){h1=f(str.charCodeAt(i++));h2=f(str.charCodeAt(i++));h3=f(str.charCodeAt(i++));h4=f(str.charCodeAt(i++));out.push((h1<<2)|(h2>>4));if(h3!=64)out.push(((h2&15)<<4)|(h3>>2));if(h4!=64)out.push(((h3&3)<<6)|h4);}
return out;}
function decodeStringToArray(str){var out=[],l=str.length,i;for(i=0;i<l;i++)out.push(str.charCodeAt(i));return out;}
function speak(argstack){if(++callCnt===callsMax){recoverFromFSError('automatic restart on call '+callCnt,true);callCnt=0;}
eSpeak.Module.arguments=argstack;fsErrorDetected=false;eSpeak.run();if(fsErrorDetected){fsErrorDetected=false;eSpeak.Module.arguments=argstack;eSpeak.run();}
var wav=eSpeak.FS.root.contents['wav.wav'].contents,l=wav.length,stream=new ArrayBuffer(l),dv=new DataView(stream);for(var i=0;i<l;i++){var v=wav[i];dv.setUint8(i,v>=0?v:256+v);}
return stream;}
function loadVoice(url,callback){new HttpRequest(url,voiceRequestCallback,callback);}
function loadConfig(url,callback){new HttpRequest(url,configDataRequestCallback,callback);}
function HttpRequest(url,loadCallback,userCallback){var req=this.request=new XMLHttpRequest();this.handler=loadCallback;this.url=url;this.localmode=Boolean(self.location.href.search(/^file:/i)==0);this.userCallback=userCallback;var objref=this;try{req.open('GET',url);req.onreadystatechange=function(){objref.handler();};req.send('');}
catch(e){if(self.console)console.warn('Failed to load resource from '+url+': Network error.');if(typeof userCallback=='function')userCallback(false,'network error');this.request=this.handler=this.userCallback=null;}}
function voiceRequestCallback(){var req=this.request;if(req.readyState==4){if(this.localmode||req.status==200){if(req.responseText){var data=JSON.parse(req.responseText);if(typeof data=='object'&&typeof data.voice_id=='string'&&typeof data.voice=='string'&&(((!data.dict_id&&!data.dict_id)||(typeof data.dict_id=='string'&&typeof data.dict=='string'))||(!data.files||(typeof data.files=='object'&&Array.isArray(data.files))))){setVoiceData(data);if(typeof this.userCallback=='function')this.userCallback(true,data.voice_id);}
else{if(self.console)console.warn('Failed to load voice from '+this.url+': Not a voice module.');if(typeof this.userCallback=='function')this.userCallback(false,'data error');}}
else{if(self.console)console.warn('Failed to load voice from '+this.url+': Empty file.');if(typeof this.userCallback=='function')this.userCallback(false,'file error');}}
else{if(self.console)console.warn('Failed to load voice from '+this.url+': Received status '+(req.status||'0')+'.');if(typeof this.userCallback=='function')this.userCallback(false,'file error');}
this.request=this.handler=this.userCallback=null;}}
function configDataRequestCallback(){var req=this.request;if(req.readyState==4){if(this.localmode||req.status==200){if(req.responseText){var data=JSON.parse(req.responseText);if(typeof data=='object'&&(typeof data.config=='string'||typeof data.phontab=='string'||typeof data.phonindex=='string'||typeof data.phondata=='string'||typeof data.intonations=='string')){var voiceId=setConfigData(data);if(typeof this.userCallback=='function')this.userCallback(true,voiceId);}
else{if(self.console)console.warn('Failed to load config-data from '+this.url+': No valid data.');if(typeof this.userCallback=='function')this.userCallback(false,'data error');}}
else{if(self.console)console.warn('Failed to load config-data from '+this.url+': Empty file.');if(typeof this.userCallback=='function')this.userCallback(false,'file error');}}
else{if(self.console)console.warn('Failed to load config-data from '+this.url+': Received status '+(req.status||'0')+'.');if(typeof this.userCallback=='function')this.userCallback(false,'file error');}
this.request=this.handler=this.userCallback=null;}}
setConfigData(configData);if(isaWorker){self.onmessage=function(event){var job=event.data.job,args=event.data.args,jobId=event.data.jobId;switch(job){case'loadConfig':loadConfig(args[0],function(success,msg){postMessage({'rsp':'configLoaded','jobId':jobId,'success':success,'message':msg});});break;case'loadVoice':loadVoice(args[0],function(success,msg){postMessage({'rsp':'voiceLoaded','jobId':jobId,'success':success,'message':msg});});break;case'speak':if(useTransferables){var stream=speak(args);postMessage({'rsp':'wav','jobId':jobId,'audiodata':stream},[stream]);}
else{postMessage({'rsp':'wav','jobId':jobId,'audiodata':speak(args)});}
break;case'useTransferables':useTransferables=true;break;}};postMessage({'rsp':'ready'});}
else{return{'speak':speak,'loadConfig':loadConfig,'loadVoice':loadVoice};}})();// end js/mespeak-core.js
